void OnStart()
{
	//SetPlayerLampOil(0);
	PreloadSound("afx_spooky_bowed_01.snt");
	PreloadSound("afx_spooky_metal_grind_all.snt");
	PreloadSound("afx_events_tunnels_dust_debris.snt");
	PreloadSound("tunnel_cry.snt");
	PreloadSound("roar_distant.snt");
	
SetLightVisible("FireLight", false);
SetLightVisible("TunnelFireLight", false);
SetLightVisible("FireLight_1", false);
SetLightVisible("FireLight_2", false);
SetLightVisible("FireLight_3", false);
SetLightVisible("FireLight_4", false);
SetLightVisible("FireLight_5", false);
SetLightVisible("FireLight_6", false);
SetLightVisible("FireLight_7", false);
SetLightVisible("FireLight_8", false);
SetLightVisible("SpotLight_2", false);
//SetLightVisible("exitLight_1", false);
SetEntityActive("well_rope", false);
SetEntityActive("well_rope_node", false);
SetLightVisible("exitlight_1", false);

SetLightVisible("PointLight_77", false);

//SetGlobalVarInt

//GiveItemFromFile("lantern", "lantern.ent");

SetGlobalVarInt("04ChestUnlocked", 0);
SetGlobalVarInt("04GasFixed", 0);

SetLocalVarInt("GasPipeLeftOn", 0);
SetLocalVarInt("GasPipeRightOn", 0);
SetLocalVarInt("GasPumpOn", 0);
SetLocalVarInt("GasFixed", 0);

if(ScriptDebugOn())
    {
        //GiveItemFromFile("lantern", "lantern.ent");
	}



//AddCombineCallback

AddCombineCallback("", "rope_part1", "rope_part2", "CombineRopes", false);

//AddEntityCollideCallback

AddEntityCollideCallback("Player", "bucket_trigger", "bucket_fall", true, 1);
AddEntityCollideCallback("Player", "hop_break", "board_stomp", false, 1);

AddEntityCollideCallback("Player", "rumbletrigger_1", "rumble1", true, 1);
AddEntityCollideCallback("Player", "rumbletrigger_2", "rumble2", true, 1);
AddEntityCollideCallback("Player", "rumbletrigger_3", "rumble3", true, 1);
AddEntityCollideCallback("Player", "rumbletrigger_4", "rumble4", true, 1);

AddEntityCollideCallback("Player", "musictrigger_1", "mine_music", true, 1);
AddEntityCollideCallback("Player", "musictrigger_2", "reg_music", true, 1);
AddEntityCollideCallback("Player", "MusicTrigger_3", "mine_music", true, 1);

AddEntityCollideCallback("Player", "EngiAppearTrigger", "EngiAppear", true, 1);
AddEntityCollideCallback("Player", "BodyNotice", "stinger", true, 1);
AddEntityCollideCallback("Player", "pushtrigger", "boards_push", true, 1);
AddEntityCollideCallback("Player", "grunttrigger_1", "grunt_appear", true, 1);
AddEntityCollideCallback("Player", "pushtrigger_1", "unknown_1", true, 1);
AddEntityCollideCallback("Player", "unknown", "unknown_2", true, 1);
AddEntityCollideCallback("Player", "dusttrigger", "dust_push", true, 1);
AddEntityCollideCallback("Player", "dusttrigger_1", "dust_push_1", true, 1);

AddEntityCollideCallback("Player", "boomtrigger_1", "boom_1", true, 1);
AddEntityCollideCallback("Player", "boomtrigger_2", "boom_2", true, 1);
AddEntityCollideCallback("Player", "boomtrigger_3", "boom_2", true, 1);
AddEntityCollideCallback("Player", "boomtrigger_4", "boom_2", true, 1);

AddEntityCollideCallback("Player", "spidertrigger", "big_spider", true, 1);
AddEntityCollideCallback("character_sdog_cin_1", "gonetrigger", "cin_disappear", true, 1);
AddEntityCollideCallback("bastard_joint_1", "when_hit_area", "planks_break", true, 1);
AddEntityCollideCallback("Player", "rustle_trigger", "rustling", true, 1);
AddEntityCollideCallback("Player", "BonesTrigger", "Bones", true, 1);
AddEntityCollideCallback("Player", "DeathTrigger", "FuckingDie", true, 1);
AddEntityCollideCallback("Player", "AFXTrigger", "SoundMetal", true, 1);
AddEntityCollideCallback("Player", "GhostDisappearTrigger", "WellCheckpoint", true, 1);

AddEntityCollideCallback("Player", "DustTrigger", "Dust", true, 1);
AddEntityCollideCallback("Player", "gonetrigger", "Dust", true, 1);

AddEntityCollideCallback("Player", "Scare1Trigger", "AmbScares", false, 1);
AddEntityCollideCallback("Player", "Scare2Trigger", "AmbScares", false, 1);

AddEntityCollideCallback("Player", "BedroomMusicArea", "BedroomMusic", false, 0);

AddEntityCollideCallback("Player", "MaskDisappearTrigger", "MaskDisappear", true, 1);

AddEntityCollideCallback("Engineer", "EngiMoreNodesTrigger", "EngiMoreNodes", true, 1);


//AddEntityCollideCallback("spider_fixed_fast", "SpiderPhaseTrigger_1", "SpiderPhase", true, 1);


//
// DELETE DELETE v v v v
//

//AddEntityCollideCallback("Player", "shiddy", "LightsOff", true, 1);

//
// DELETE DELETE ^ ^ ^ ^
//

AddEntityCollideCallback("PipeDyn_1", "PipeStickyLeft", "PipeAttach", false, 1);
AddEntityCollideCallback("PipeDyn_1", "PipeStickyRight", "PipeAttach", false, 1);
AddEntityCollideCallback("PipeDyn_2", "PipeStickyLeft", "PipeAttach", false, 1);
AddEntityCollideCallback("PipeDyn_2", "PipeStickyRight", "PipeAttach", false, 1);
SetEntityConnectionStateChangeCallback("PumpLever", "PumpLever");


//SetEntityPlayerInteractCallback

SetEntityPlayerInteractCallback("planks", "gettim", true);
SetEntityPlayerInteractCallback("planks", "gettim", true);
SetEntityPlayerInteractCallback("bottom_hint", "getgone", true);
SetEntityPlayerInteractCallback("bars", "outtahere", true);
//SetEntityPlayerInteractCallback("pest_beam", "scram", true);
SetEntityPlayerInteractCallback("pest_web", "scramble", true);
SetEntityPlayerInteractCallback("rope_area_1", "picked_rope_1", true);
SetEntityPlayerInteractCallback("treasure_chest_1", "ChestLockedMessage", false);
//SetEntityPlayerInteractCallback("prison_2", "ChestLockedMessage", true);
//SetEntityPlayerInteractCallback("sewer_arched_3", "ChestLockedMessage", true);
SetEntityPlayerInteractCallback("key_chest", "AddScare", true);
SetEntityPlayerInteractCallback("item_emotion_stone", "Success", true);
SetEntityPlayerInteractCallback("epoxy", "KerosenePicked", true);
SetEntityPlayerInteractCallback("HeadExamine", "RemoveExamine", false);
//SetEntityPlayerInteractCallback("HeadExamine", "GiveHead", true);

//AddUseItemCallback

AddUseItemCallback("", "bastard_2", "wooden_boards_block_1", "UsedSwordOnPlanks", true);
AddUseItemCallback("", "bastard_pickup_1", "wooden_boards_block_1", "UsedSwordOnPlanks", true);
AddUseItemCallback("", "bastard_2", "planks", "UsedSwordOnPlanks", true);
AddUseItemCallback("", "bastard_pickup_1", "treasure_chest_1", "UsedSwordOnChest", true);
AddUseItemCallback("", "bastard_2", "treasure_chest_1", "UsedSwordOnChest", true);
AddUseItemCallback("", "key_chest", "treasure_chest_1", "UnlockChest", true);
AddUseItemCallback("", "bastard_pickup_1", "planks", "UsedSwordOnPlanks", true);
AddUseItemCallback("", "rope_part1", "pest_beam", "UsedSmallRope", false);
AddUseItemCallback("", "rope_part2", "pest_beam", "UsedSmallRope", false);
AddUseItemCallback("", "rope_full", "pest_beam", "UsedLongRope", true);
AddUseItemCallback("", "key_study_1", "sewer_arched_3", "UsedLabKey", true);
AddUseItemCallback("", "AlbertiteContainer", "special_burner_1", "PlaceContainer", true);
AddUseItemCallback("", "Albertite", "special_burner_1", "PlaceContainerFailed", true);
AddUseItemCallback("", "chemical_container_1", "special_burner_1", "PlaceContainerFailed2", true);
AddUseItemCallback("", "epoxy", "use_epoxy", "PlaceKerosine", true);
AddUseItemCallback("", "AlbertiteContainer", "use_epoxy", "PlaceKerosine", true);

giveNodes();

SetEnemySanityDecreaseActive("Doorway", false);

//Trailer();

SetEntityConnectionStateChangeCallback("special_burner_1", "UsedBurner");

PreloadSound("explosion_rock_large.snt");
PreloadSound("lock_door.snt");

//==========================
//	PIPES
//==========================

	/*PlaySoundAtEntity("Steam Sound Left", "13_steam.snt", "SteamSoundSourceLeft", 0, true);
	PlaySoundAtEntity("Steam Sound Right", "13_steam.snt", "SteamSoundSourceRight", 0, true);

	CreateParticleSystemAtEntity("Steam Left", "ps_steam.ps", "SteamSourceLeft", true);
	CreateParticleSystemAtEntity("Steam Right", "ps_steam.ps", "SteamSourceRight", true);*/
	
	for(int i=1;i<=99;i++)
        {
		SetLightVisible("GlowLight_"+i, false);
		SetLightVisible("PipeLight_"+i, false);
		SetLightVisible("PumpLight_"+i, false);
		}
		
	SetLocalVarInt("SanityBoost", 0);
	
//==========================
// PIPES
//==========================

PlaySoundAtEntity("", "ambience_cave.snt", "ScriptArea_3", 0.7, true);
}

void OnEnter()
{
SetMapDisplayNameEntry("Pestilence");
AutoSave();
AddTimer("", 6, "TimerDrain");

PlayMusic("ort_midnightmare.ogg", false, 0.6, 3, 0, true);
//PlayMusic("mt_amb6_edit.ogg", false, 1, 3, 0, true);

if(GetGlobalVarInt("lantern_picked") == 1)
	{
		SetEntityActive("lantern_1", false);
	}
	
	//SetInDarknessEffectsActive(false);
	//SetSanityDrainDisabled(true);
}

void NoteNoise(string &in Item, int DiaryIdX)
{
	ReturnOpenJournal(true);
}

void UpperAreaMusic(string &in asTimer)
{
	AddTimer("MusicRandom",RandInt(70,100),"UpperAreaMusic");
	PlayMusic("pest_amb_"+RandInt(0,4), false, 0.6, 3, 0, true);
}

void DeathUpperArea(string &in asName, int alCount)
{
	AddTimer("MusicRandom",RandInt(70,100),"UpperAreaMusic");
	PlayMusic("pest_amb_"+RandInt(0,4), false, 0.6, 3, 0, true);
}

void LowerAreaMusic(string &in asTimer)
{
	AddTimer("MusicRandom2",RandInt(70,100),"LowerAreaMusic");
	PlayMusic("pest_amb_lower_"+RandInt(0,6), false, 0.6, 3, 0, true);
}

void DeathLowerArea(string &in asName, int alCount)
{
	AddTimer("MusicRandom2",RandInt(70,100),"LowerAreaMusic");
	PlayMusic("pest_amb_lower_"+RandInt(0,6), false, 0.6, 3, 0, true);
	StopSound("kb_horror", 3);
	StopSound("haunting", 3);
}

void FireStart(string &in asEntity)
{
CreateParticleSystemAtEntity("CupFlame", "ps_fire_stove_small.ps", "fire_source_17", false);
PlaySoundAtEntity("CupFlameS", "15_fire.snt", "fire_source_17", 0.75, true);
AddTimer("", 1.2, "TimerImmolate");
SetLightVisible("PointLight_77", true);
}

void TimerImmolate(string &in asTimer)
{
CreateParticleSystemAtEntity("", "ps_dust_whirl.ps", "fire_source_17", false);
PlayMusic("10_paper_daniel03.ogg", false, 1, 1, 10, false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web_smaller.ps", "fire_source_1", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web_smaller.ps", "fire_source_2", false);
AddTimer("", 1, "TimerImmolate2");
}

void TimerImmolate2(string &in asTimer)
{
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_16", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_15", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_13", false);
PlaySoundAtEntity("FlameS", "general_fire_burning.snt", "fire_source_16", 2, true);
AddTimer("", 0.8, "TimerImmolate3");
}

void TimerImmolate3(string &in asTimer)
{
SetLightVisible("FireLight", true);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_5", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_4", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_3", false);
AddTimer("", 0.7, "TimerImmolate4");
}

void TimerImmolate4(string &in asTimer)
{
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_8", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_6", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_7", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_14", false);
AddTimer("", 0.7, "TimerImmolate5");
}

void TimerImmolate5(string &in asTimer)
{
CreateParticleSystemAtEntity("Dissolve", "ps_acid_web_dissolve.ps", "fire_source_5", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_10", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_9", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_11", false);
CreateParticleSystemAtEntity("Flame", "ps_fire_web.ps", "fire_source_12", false);
PlaySoundAtEntity("FlameS", "general_fire_burning.snt", "fire_source_9", 2, true);
PlaySoundAtEntity("FlameS", "22_fire.snt", "fire_source_12", 2, true);
AddTimer("", 5, "TimerImmolateEnd");
}

void TimerImmolateEnd(string &in asTimer)
{
CompleteQuest("02_PestWeb", "02_PestWeb");
AddPlayerSanity(10);
StopSound("FlameS", 2);
DestroyParticleSystem("Flame");
SetEntityActive("block_box_6", false);
for(int i=1;i<=29;i++)
        {
		//SetPropActiveAndFade("cobweb_block_"+i, false, 2);
		SetEntityActive("cobweb_block_"+i, false);
		}
AddTimer("", 1, "TimerImmolateEndEnd");
}

void TimerImmolateEndEnd(string &in asTimer)
{
SetLightVisible("FireLight", false);
}

void PipeAttach(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(asChild,false);
	PlaySoundAtEntity("", "impact_metal_low.snt", asChild, 0, true);
	
	AddDebugMessage("PipeAttach", false);
	
	if (asChild == "PipeStickyLeft")
	{
		SetEntityActive(asParent,false);
		SetEntityActive("PipeStatLeft",true);
		SetEntityActive("GasLeakLeft",false);
		SetLocalVarInt("GasPipeLeftOn", 1);
		
		DestroyParticleSystem("Steam Left");
		StopSound("Steam Sound Left", 0.2);
		
		AddDebugMessage("Placed Left Pipe", false);
		
		if ((GetLocalVarInt("GasPipeRightOn") == 1) && (GetLocalVarInt("GasPumpOn") == 1))
		{
			PumpOn();
		}
	}
	
	if (asChild == "PipeStickyRight")
	{
		SetEntityActive(asParent,false);
		SetEntityActive("PipeStatRight",true);
		SetEntityActive("GasLeakRight",false);
		SetLocalVarInt("GasPipeRightOn", 1);
		
		DestroyParticleSystem("Steam Right");
		StopSound("Steam Sound Right", 0.2);
		
		AddDebugMessage("Placed Right Pipe", false);
		
		if ((GetLocalVarInt("GasPipeRightOn") == 1) && (GetLocalVarInt("GasPumpOn") == 1))
		{
			PumpOn();
		}
	}
}

void PumpLever(string &in asEntity, int alState)
{
	if (alState == 1 && (GetLocalVarInt("GasPumpOn") == 0))
	{
		SetLocalVarInt("GasPumpOn", 1);
		if (GetLocalVarInt("GasPipeRightOn") == 0)
		{
			PlaySoundAtEntity("Steam Sound Right", "13_steam.snt", "SteamSoundSourceRight", 0, true);
			CreateParticleSystemAtEntity("Steam Right", "ps_steam.ps", "SteamSourceRight", true);
			AddDebugMessage("Right Pipe Steaming", false);
		}
		if (GetLocalVarInt("GasPipeLeftOn") == 0)
		{
			PlaySoundAtEntity("Steam Sound Left", "13_steam.snt", "SteamSoundSourceLeft", 0, true);
			CreateParticleSystemAtEntity("Steam Left", "ps_steam.ps", "SteamSourceLeft", true);
			AddDebugMessage("Left Pipe Steaming", false);
		}
		if ((GetLocalVarInt("GasPipeLeftOn") == 1) && (GetLocalVarInt("GasPipeRightOn") == 1))
		{
			PumpOn();
		}
	}
	if (alState == -1 && (GetLocalVarInt("GasPumpOn") == 1))
	{
		SetLocalVarInt("GasPumpOn", 0);
		DestroyParticleSystem("Steam Right");
		DestroyParticleSystem("Steam Left");
		StopSound("Steam Sound Right", 0.2);
		StopSound("Steam Sound Left", 0.2);
		StopSound("Pump Start", 1.3);
		StopSound("Pump Loop", 1.3);
		RemoveTimer("Pump Start");
		
		AddDebugMessage("Pump Off", false);
		
		for(int i=1;i<=99;i++)
			{
				SetLightVisible("GlowLight_"+i, false);
				SetLightVisible("PipeLight_"+i, false);
				SetLightVisible("PumpLight_"+i, false);
				
				StopSound("Pipe Sound "+i, 0.2);
				StopSound("Pipe Drone "+i, 0.2);
				StopSound("Vent Sound "+i, 0.2);
			}
	}
}

void PumpOn()
{
	//PlaySoundAtEntity("Machine", "machine_extra.snt", "MachineSoundSource", 0, true);
	
	PlaySoundAtEntity("Pump Start", "pump_start.snt", "MachineSoundSource", 0, true);
	AddTimer("Pump Start",7.9f,"PumpSound");
	
	AddDebugMessage("Pump On", false);
			
		for(int i=1;i<=99;i++)
		{
			SetLightVisible("GlowLight_"+i, true);
			SetLightVisible("PipeLight_"+i, true);
			SetLightVisible("PumpLight_"+i, true);
			PlaySoundAtEntity("Pipe Sound "+i, "amb_pipes_close.snt", "PipeSoundSource_"+i, 0, true);
			PlaySoundAtEntity("Pipe Drone "+i, "amb_pipes_room.snt", "PipeDroneSource_"+i, 0, true);
			PlaySoundAtEntity("Vent Sound "+i, "amb_vents_close.snt", "VentDroneSource_"+i, 0, true);
		}
		if (GetLocalVarInt("SanityBoost") == 0)
		{
			GiveSanityBoostSmall();
			SetLocalVarInt("SanityBoost", 1);
			AddEntityCollideCallback("Player", "MusicTrigger_4", "SafeMusic", true, 1);
			RemoveTimer("AmbRandom");
			SetLocalVarInt("GasFixed", 1);
		}
}

void PumpSound(string &in asTimer)
{
	PlaySoundAtEntity("Pump Loop", "pump_loop.snt", "MachineSoundSource", 0, true);
}

void SafeMusic(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("mt_amb6_edit.ogg", false, 1, 3, 1, true);
	RemoveTimer("MusicRandom2");
	AddTimer("MusicRandom2Restart",80,"LowerAreaMusic");
}

void LightsOff(string &in asParent, string &in asChild, int alState)
{
	StartScreenShake(0.01f, 2.0, 2.0, 2.1);
	PlaySoundAtEntity("Pump Failure", "afx_events_mansion_tremor_01_s.snt", "Player", 0, true);
	AddTimer("",5,"LightsOff2");
}

void LightsOff2(string &in asTimer)
{
	PlaySoundAtEntity("Lights Off", "afx_mans_hallquake_quake_s.snt", "Player", 0, true);
	PlaySoundAtEntity("Lights Off Extra", "afx_mans_hallquake_postdetail.snt", "Player", 0, true);
	StopSound("Pump Failure",2);
	for(int i=1;i<=99;i++)
			{	
				FadeLightTo("GlowLight_"+i, 0, 0, 0, 0, 0, 2.6);
				FadeLightTo("PipeLight_"+i, 0, 0, 0, 0, 0, 2.6);
				FadeLightTo("PumpLight_"+i, 0, 0, 0, 0, 0, 3);
				
				StopSound("Pipe Sound "+i, 1);
				StopSound("Pipe Drone "+i, 1);
				StopSound("Vent Sound "+i, 1);
			}
	AddTimer("TimerSpiderAttack",9,"TimerSpiderAttack");
}

void TimerSpiderAttack(string &in asTimer)
{
	PlaySoundAtEntity("Spiders Room", "event_spiderattack_room.snt", "Player", 0, true);
	PlaySoundAtEntity("Spiders", "event_spiderattack.snt", "SpiderFXSource", 0, true);
	AddTimer("TimerSpiderSpawn",1,"TimerSpiderSpawn");
	AddTimer("TimerSpiderPhase",1,"TimerSpiderPhase");
	SetLocalVarInt("NumSpiders",0);
}

void TimerSpiderSpawn(string &in asTimer)
{
	if (GetLocalVarInt("NumSpiders") <= 22)
	{
		//for (int i=1;i<=3;i++)
		//{
		//	CreateEntityAtArea("spider_fixed_fast_"+(GetLocalVarInt("NumSpiders")), "spider_fixed_fast.ent", //"SpiderSpawn_"+i, false);
		//}
		CreateEntityAtArea("ONE_spider_fixed_fast_"+(GetLocalVarInt("NumSpiders")), "spider_fixed_fast.ent", "SpiderSpawn_1", false);
		CreateEntityAtArea("TWO_spider_fixed_fast_"+(GetLocalVarInt("NumSpiders")), "spider_fixed_fast.ent", "SpiderSpawn_2", false);
		CreateEntityAtArea("THREE_spider_fixed_fast_"+(GetLocalVarInt("NumSpiders")), "spider_fixed_fast.ent", "SpiderSpawn_3", false);
		
		AddTimer("TimerSpiderSpawn",RandFloat(0.5,1.1),"TimerSpiderSpawn");
		AddLocalVarInt("NumSpiders",+1);
		AddDebugMessage("NUM SPIDERS PER HUB = "+(GetLocalVarInt("NumSpiders")), false);
	}
}

void TimerSpiderPhase(string &in asTimer)
{
	GiveSanityDamage(10, true);
	PlayMusic("29_amb02", true, 0.8, 1, 1, true);
	AddTimer("TimerSpiderPhaseTwo",30,"TimerSpiderPhaseTwo");
}

void TimerSpiderPhaseTwo(string &in asTimer)
{
	PlayMusic("29_amb", true, 0.8, 6, 1, true);
	AddDebugMessage("Started Despawning Spiders", true);
	AddTimer("TimerSpiderDespawn",2,"TimerSpiderDespawn");
}

void TimerSpiderDespawn(string &in asTimer)
{
	SetEntityActive("ONE_spider_fixed_fast_"+(GetLocalVarInt("NumSpiders")), false);
	SetEntityActive("TWO_spider_fixed_fast_"+(GetLocalVarInt("NumSpiders")), false);
	SetEntityActive("THREE_spider_fixed_fast_"+(GetLocalVarInt("NumSpiders")), false);
	AddDebugMessage("DESPAWNED SPIDERs NO. "+(GetLocalVarInt("NumSpiders")), false);
	AddLocalVarInt("NumSpiders",-1);
	
	if (GetLocalVarInt("NumSpiders") > 0)
	{
		AddTimer("TimerSpiderDespawn",2,"TimerSpiderDespawn");
	}
	
	if (GetLocalVarInt("NumSpiders") == 0)
	{
		AddTimer("TimerSpiderPhaseTwoRepeat",2,"TimerSpiderPhaseTwoRepeat");
	}
}

void TimerSpiderPhaseTwoRepeat(string &in asTimer)
{
	SetLocalVarInt("NumSpiders",23);
	AddDebugMessage("Started Despawning Spiders, Cleanup", true);
	AddTimer("TimerSpiderDespawn",2,"TimerSpiderDespawn");
}

void SpiderPhase(string &in asParent, string &in asChild, int alState)
{
	GiveSanityDamage(10, true);
	PlayMusic("29_amb02", true, 0.8, 1, 1, true);
}

void EngiAppear(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("Engineer", true);
}

void EngiMoreNodes(string &in asParent, string &in asChild, int alState)
{
	AddEnemyPatrolNode("Engineer","gruntnode_2",0.0f,"");
	AddEnemyPatrolNode("Engineer","PathNodeArea_18",0.0f,"");
	AddEnemyPatrolNode("Engineer","PathNodeArea_4",0.0f,"");
	AddEnemyPatrolNode("Engineer","gruntnode_4",0.0f,"");
	AddEnemyPatrolNode("Engineer","gruntnode_30",0.0f,"");
	AddEnemyPatrolNode("Engineer","PathNodeArea_8",0.0f,"");
	AddEnemyPatrolNode("Engineer","gruntnode_5",0.0f,"");
	AddEnemyPatrolNode("Engineer","gruntnode_6",0.0f,"");
}

void BedroomMusic(string &in asParent, string &in asChild, int alState)
{
	if (alState == 1) PlayMusic("mt_danielpromo.ogg", true, 0.2, 8, 0, true);
	else if (alState == -1) StopMusic(8,0);
}

void StalkerNodes()
{
	AddEnemyPatrolNode("LabStalker","gruntnode_15",0.0f,"");
	AddEnemyPatrolNode("LabStalker","PathNodeArea_52",0.0f,"");
	AddEnemyPatrolNode("LabStalker","PathNodeArea_54",0.0f,"");
	AddEnemyPatrolNode("LabStalker","gruntnode_20",3.0f,"");
	AddEnemyPatrolNode("LabStalker","gruntnode_31",0.0f,"");
	AddEnemyPatrolNode("LabStalker","gruntnode_32",0.0f,"");
	AddEnemyPatrolNode("LabStalker","gruntnode_33",0.0f,"");
	AddEnemyPatrolNode("LabStalker","gruntnode_35",4.0f,"");
	AddEnemyPatrolNode("LabStalker","gruntnode_34",0.0f,"");
	AddEnemyPatrolNode("LabStalker","gruntnode_16",10.0f,"");
}

void UsedBurner(string &in asEntity, int alState)
{
	if(alState == 1)
		{
			if(GetLocalVarInt("GasFixed") == 1)
			{
				CreateParticleSystemAtEntity("flame", "ps_fire_lab_burner.ps", "burn_source", false);
				PlaySoundAtEntity("boiling_low", "puzzle_boil_low_s.snt", "burn_source", 0.5, true);
				
				SetWheelStuckState("lab_burner_1", 1, true);
				SetPropStaticPhysics("lab_burner_1", true);
				
				SetEntityActive("ScriptArea_2", true);
				SetEntityActive("ExaminePotBoiling_1", true);
				SetEntityActive("servant_grunt_1", false);
				SetEntityActive("LabStalker", true);
				
				AddTimer("", 45, "BoilComplete");
				SetLocalVarInt("BoilStage", 1);
				AddTimer("", 15, "BoilStage");
				
				PlayMusic("29_amb", true, 0.4, 30, 1, true);
				
				StalkerNodes();
			}
				else
			{
				SetMessage("Message", "04gas", 3);
				//SetWheelStuckState("lab_burner_1", -1, true);
				SetWheelAngle("special_burner_1", 0, true);
				//SetWheelInteractionDisablesStuck("lab_burner_1", true);
			}
		}
}

void BoilStage(string &in asTimer)
{
	if(GetLocalVarInt("BoilStage") == 1)
		{
			SetEntityActive("ExaminePotBoiling_1",false);
			SetEntityActive("ExaminePotBoiling_2",true);
			SetLocalVarInt("BoilStage", 2);
			AddTimer("", 15, "BoilStage");
		}
	else if(GetLocalVarInt("BoilStage") == 2)
		{
			SetEntityActive("ExaminePotBoiling_2",false);
			SetEntityActive("ExaminePotBoiling_3",true);
			SetLocalVarInt("BoilStage", 3);
		}
}

void BoilComplete(string &in asTimer)
{
	StopSound("boiling_low", 2);
	PlaySoundAtEntity("boiling", "puzzle_boil_s.snt", "burn_source", 2, true);
	
	SetEntityActive("chemical_container_half_static_1", false);
	SetEntityActive("ExaminePotBoiling_3", false);
	SetEntityActive("epoxy", true);
	
	StopMusic(35,1);
}

void KerosenePicked(string &in asEntity)
{
	DestroyParticleSystem("flame");
	StopSound("boiling", 2);
}

void PlaceKerosine(string &in asItem, string &in asEntity)
{
	if (asItem == "AlbertiteContainer")
	{
		SetMessage("Message", "04usedpremixturewrong", 0);
	}
	else
	{
		SetEntityActive("use_epoxy", false);
		RemoveItem("epoxy");
		SetEntityActive("this_thing", true);
		PlaySoundAtEntity("", "puzzle_place_jar.snt", "this_thing", 0, true);
	}
}

void CombineRopes(string &in asItemA, string &in asItemB)
{
PlayGuiSound("pick_generic.snt", 1.0f);
AddPlayerSanity(10);
RemoveItem(asItemA); RemoveItem(asItemB);
SetEntityActive("spider_fixed_1", false);
GiveItem("rope_full", "Puzzle", "rope_full", "rope_full.tga", 0);
}

void Dust(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("","afx_events_tunnels_dust_debris.snt", "Player", 0, false);
}

void WellCheckpoint(string &in asParent, string &in asChild, int alState)
{
	CheckPoint ("Well Checkpoint", "WellCheckpoint", "DeathUpperArea", "", "");
}

void IgniteTunnelWeb(string &in EntityName, string &in OnIgnite)
{

	AddTimer("",1,"WebFireFX");
	SetLocalVarInt("TunnelFire",1);
	SetLocalVarInt("WebDissolve",1);
}

void WebFireFX(string &in asTimer)
{
	if (GetLocalVarInt("TunnelFire") <= 11)
	{
		CreateParticleSystemAtEntity("Tunnel Web Fire "+GetLocalVarInt("TunnelFire"), "ps_fire_web_smaller.ps", 	"FireSource_"+GetLocalVarInt("TunnelFire"), false);
		AddLocalVarInt("TunnelFire",+1);
		AddTimer("",0.5,"WebFireFX");
		
		if (GetLocalVarInt("TunnelFire") == 3)
		{
			PlaySoundAtEntity("Web Fire", "general_fire_burning.snt", "FireSource_4", 3, true);
		}
		
		if (GetLocalVarInt("TunnelFire") == 5)
		{
			CreateParticleSystemAtEntity("Tunnel Web Glow", "ps_acid_web_dissolve.ps", 	"FireSource_4", false);
			SetLightVisible("TunnelFireLight", true);
		}
	}
	else if (GetLocalVarInt("TunnelFire") == 12)
	{
		AddTimer("",0.6,"TimerWebDissolve");
		SetLocalVarInt("TunnelFire",1);
	}
}

void TimerWebDissolve(string &in asTimer)
{
	if (GetLocalVarInt("WebDissolve") <=11)
	{
		DestroyParticleSystem("Tunnel Web Fire "+GetLocalVarInt("TunnelFire"));
		SetPropActiveAndFade("TunnelWeb_"+GetLocalVarInt("WebDissolve"), false, 0.3);
		AddLocalVarInt("TunnelFire",+1);
		AddLocalVarInt("WebDissolve",+1);
		AddTimer("",0.3,"TimerWebDissolve");
	}
	
	if (GetLocalVarInt("WebDissolve") == 7)
	{
		StopSound("Web Fire",2);
	}
	
	else if (GetLocalVarInt("WebDissolve") == 12)
	{
		SetLightVisible("TunnelFireLight", false);
		SetEntityActive("TunnelWebBlock",false);
		AddTimer("",3,"TimerPostWeb");
	}
}

void TimerPostWeb(string &in asTimer)
{
	PlaySoundAtEntity("", "event_spiderattack_room_low.snt", "Player", 3, true);
}

void DrawingPick(string &in asItem, int iDiaryIdx)
{
    SetMessage("Message", "CopyDrawing", 3);
    GiveHint("maphint", "Hints", "HintDrawing", -1);
} 

void gettim(string &in asEntity)
{
SetEntityActive("planks", false);
}

void outtahere(string &in asEntity)
{
SetEntityActive("bars", false);
}

void scramble(string &in asEntity)
{
SetEntityActive("pest_web", false);
	AddQuest("02_PestWeb", "02_PestWeb");
}

void scram(string &in asEntity)
{
SetEntityActive("pest_beam", false);
}

void getgone(string &in asEntity)
{
SetEntityActive("bottom_hint", false);
	AddQuest("02_PestWell", "02_PestWell");
}

void UsedSmallRope(string &in asItem, string &in asEntity)
{
SetMessage("Message", "04usedsmallrope", 5.0f);
}

void UsedLongRope(string &in asItem, string &in asEntity)
{
StopMusic(1,0);
RemoveItem("rope_full");
SetEntityActive("rope_vert_1", true);
//SetEntityActive("well_rope_node", true);
SetEntityActive("well_rope_ladder", true);
SetEntityActive("DeathTrigger", false);
PlayMusic("ort_prism_edit.ogg", false, 0.7, 1, 10, false);
PlaySoundAtEntity("", "06_rope_loose.snt", "Player", 0, true);
SetEntityActive("pest_well", false);
}

void PlaceContainer(string &in asItem, string &in asEntity)
{
SetEntityActive("pest_web", false);
RemoveItem("AlbertiteContainer");
PlaySoundAtEntity("", "puzzle_place_jar.snt", "burn_source", 0, true);
SetEntityActive("chemical_container_half_static_1", true);
SetWheelStuckState("special_burner_1", 0, false);
}

void PlaceContainerFailed(string &in asItem, string &in asEntity)
{
SetMessage("Message", "04usedalbertitewrong", 3.0f);
}

void PlaceContainerFailed2(string &in asItem, string &in asEntity)
{
SetMessage("Message", "04usedcontainerwrong", 3.0f);
}

void UsedLabKey(string &in asItem, string &in asEntity)
{
PlaySoundAtEntity("", "unlock_door", "sewer_arched_3", 0, false);
SetSwingDoorLocked("sewer_arched_3", false, true);
RemoveItem("key_study_1");
}

void ChestLockedMessage(string &in asEntity)
{
if(GetGlobalVarInt("04ChestUnlocked") == 0)
	{
	SetMessage("Examine", "locked", 3.4f);
	}
}

void UnlockChest(string &in asItem, string &in asEntity)
{
RemoveItem("key_chest");
PlaySoundAtEntity("", "unlock_door", "treasure_chest_1", 0, false);
SetGlobalVarInt("04ChestUnlocked", 1);
SetLeverStuckState("treasure_chest_1", 0, false);
//AddEntityCollideCallback("Player", "rumbletrigger_2", "GhostAppear", true, 1);
}

void GhostAppear(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("ghost",true);
	SetEnemyDisableTriggers("ghost", true);
	AddEntityCollideCallback("ghost", "GhostOpenDoorTrigger", "GhostOpenDoor", true, 1);
}

void GhostOpenDoor(string &in asParent, string &in asChild, int alState)
{
	SetMoveObjectState("castle_1", 1);
}

void picked_rope_1(string &in asEntity)
{
SetEntityActive("rope_area_1", false);
SetEntityActive("rope_beam02_2", false);
SetEntityActive("rope_first", false);
SetEntityActive("rope_first_node", false);
PlaySoundAtEntity("", "pick_generic.snt", "Player", 0, true);
GiveItemFromFile("RopePart", "rope_part1.ent");	
}

void TimerDrain(string &in asTimer)
{
SetSanityDrainDisabled(false);
}

void AddScare(string &in asEntity)
{
//AddEntityCollideCallback("Player", "bangtrigger", "door_break", true, 1);
SetEntityActive("DoorwayTrigger", true);
AddEntityCollideCallback("Player", "DoorwayTrigger", "Doorman", true, 1);
AddEntityCollideCallback("Doorway", "EndDoorwayTrigger", "EndDoorway", true, 1);
CheckPoint("", "WellCheckpoint", "", "", "");
}

void Doorman(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("Doorway", true);
	AddEnemyPatrolNode("Doorway","Doorway_1",2.5f,"");
	AddEnemyPatrolNode("Doorway","Doorway_2",0.0f,"");
	SetSanityDrainDisabled(true);
}

void EndDoorman(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("Doorway", false);
	SetSanityDrainDisabled(false);
}

void Success(string &in asEntity)
{
AddGlobalVarInt("relics_found", 1);
AddPlayerSanity(5);
//PlayMusic("success.ogg", false, 1, 0.1f, 10, false);
AddEntityCollideCallback("Player", "LightsOffTrigger", "LightsOff", true, 1);
AddEntityCollideCallback("Player", "DoorLockTrigger", "DoorLockAfterChase", true, 1);
//SetEntityActive("cave_in_3", true);
//SetEntityActive("cave_in_4", true);
AutoSave();

AddEntityCollideCallback("Player", "attacktrigger_1", "SecondWave", true, 1);
AddEntityCollideCallback("Player", "attacktrigger_2", "ThirdWave", true, 1);
AddEntityCollideCallback("Player", "attacktrigger_3", "FourthWave", true, 1);
AddEntityCollideCallback("Player", "attacktrigger_4", "FifthWave", true, 1);
AddEntityCollideCallback("Player", "PreChaseTrigger", "PreChase", true, 1);

AddEntityCollideCallback("servant_grunt_1", "attacktrigger_3", "PostChase", true, 1);
}

void PreChase(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("servant_grunt_1", true);
	AlertEnemyOfPlayerPresence("servant_grunt_1");
	TeleportEnemyToNode("servant_grunt_1", "PathNodeArea_30", true);
}

void PostChase(string &in asParent, string &in asChild, int alState)
{
	ShowEnemyPlayerPosition("servant_grunt_1");
}

void door_break(string &in asParent, string &in asChild, int alState)
{
GiveSanityDamage(5, false);
//PlayMusic("04_event_stairs.ogg", false, 1.3, 1, 10, false);
SetEntityActive("sewer_arched_2", false);
SetEntityActive("sewer_arched_5", true);
SetLampLit("candle_floor_4", false, false);
SetSwingDoorLocked("sewer_arched_2",false,false);

//PlaySoundAtEntity("","impact_wood_heavy_high.snt", "sound_source_5", 0, false);
//AddTimer("", 1, "TimerBangAgain");
/*SetPlayerLookSpeedMul(0.7);
SetPlayerMoveSpeedMul(0.3);
SetPlayerRunSpeedMul(0.3);
*/}

void TimerBangAgain(string &in asTimer)
{
PlaySoundAtEntity("","hit_wood.snt", "sound_source_5", 0, false);
//AddTimer("", 1, "TimerBreakIt");
AddPropImpulse("sewer_arched_2", 0, 0, 5, "world");
}

void TimerBreakIt(string &in asTimer)
{
PlaySoundAtEntity("","break_wood.snt", "sound_source_5", 0, false);
AddTimer("", 2, "TimerWalkIt");
}

void TimerWalkIt(string &in asTimer)
{
PlaySoundAtEntity("","scare_wood_creak_walk.snt", "sound_source_5", 0, false);
AddTimer("", 1.45, "TimerOneMore");
}

void TimerOneMore(string &in asTimer)
{
PlaySoundAtEntity("","scare_wind.snt", "hanging_lantern_ceiling_2", 0, false);
SetLampLit("hanging_lantern_ceiling_2", false, true);
FadeLightTo("PointLight_12", 0, 0, 0, 0, 0, 2);
SetPlayerLookSpeedMul(1);
SetPlayerMoveSpeedMul(1);
SetPlayerRunSpeedMul(1);
}

void TimerDoneLookAt(string &in asTimer)
{
  StopPlayerLookAt();
}

void dust_push(string &in asParent, string &in asChild, int alState)
{
CreateParticleSystemAtEntity("", "ps_dust_whirl.ps", "dust_source", true);
}

void dust_push_1(string &in asParent, string &in asChild, int alState)
{
CreateParticleSystemAtEntity("", "ps_dust_whirl.ps", "dust_source_1", true);
}


void bucket_fall(string &in asParent, string &in asChild, int alState)
{
AddPropForce("cell_bucket_1", -45, 5, 0, "World");
PlaySoundAtEntity("","enemy_dog_idle.snt", "cell_bucket_1", 0, false);
}

void rumble1(string &in asParent, string &in asChild, int alState)
{
  PlaySoundAtEntity("creaky", "00_creak.snt", "rumbletrigger_1", 0.7, true);
  StartScreenShake(0.01, 10, 3, 6);
  AddTimer("stopcreak", 11.5f, "TimerDoneCreak");
  SetEntityActive("tinderbox_3", true);
  AddEntityCollideCallback("Player", "dogtrigger", "dog_scare", true, 1);
}

void rumble2(string &in asParent, string &in asChild, int alState)
{
  //PlaySoundAtEntity("creaky", "scare_scratch.snt", "hahaha", 0.6, true);
  //PlaySoundAtEntity("kb_horror", "kb_horror.snt", "sound_source_1", 0.65, true);
  AddTimer("stopcreak", 3, "TimerDoneCreak");
}

void rumble3(string &in asParent, string &in asChild, int alState)
{
  PlaySoundAtEntity("creaky", "00_creak.snt", "rumbletrigger_3", 0.7, true);
  PlaySoundAtEntity("", "afx_events_tunnels_dust_debris.snt", "Player", 0.7, true);
  StartScreenShake(0.01, 10, 3, 6);
  AddTimer("stopcreak", 7.5f, "TimerDoneCreak");
}

void rumble4(string &in asParent, string &in asChild, int alState)
{
  PlaySoundAtEntity("", "feathersim.snt", "hahaha", 1, true);
}

void TimerDoneCreak(string &in asTimer)
{
  StopSound("creaky", 4.0f);
}

void mine_music(string &in asParent, string &in asChild, int alState)
{
	RemoveTimer("MusicRandom2");
	AddTimer("MusicRandom",RandInt(70,100),"UpperAreaMusic");
	PlayMusic("pest_amb_"+RandInt(1,4), false, 0.6, 3, 0, true);
	PlaySoundAtEntity("", "afx_events_tunnels_dust_debris.snt", "Player", 1, true);
}

void stinger(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("pest_tunnel.ogg", false, 1.2, 0.4, 10, false);
}

void reg_music(string &in asParent, string &in asChild, int alState)
{
RemoveTimer("MusicRandom");
AddTimer("MusicRandom2",RandInt(70,100),"LowerAreaMusic");
StopMusic(6, 0);
//PlayMusic("pest_amb_lower_"+RandInt(1,5), false, 0.6, 3, 0, true);
CompleteQuest("02_PestWell", "02_PestWell");
SetEntityActive("servant_grunt_1", true);
//
StopSound("kb_horror", 3);
StopSound("haunting", 3);
CheckPoint("Fall Checkpoint", "checkpoint_2", "DeathLowerArea", "Events", "event_3_spider_death_hint");
AutoSave();

	AddTimer("AmbRandom",RandInt(40,100),"AmbRandomSound");
}

void AmbRandomSound(string &in asTimer)
{
	PlaySoundAtEntity("","afx_spooky_metal_grind_all.snt", "Player", 0, false);
	AddTimer("AmbRandom",RandInt(40,100),"AmbRandomSound");
}

void reg_music_2(string &in asParent, string &in asChild, int alState)
{
PlayMusic("mp_mist_edit.ogg", true, 1.3, 5, 0, true);
SetEntityActive("spider_fixed_3", false);
SetEntityActive("spider_fixed_2", false);
SetEntityActive("spider_fixed_1", false);
SetEntityActive("spider_fixed_4", false);
SetEntityActive("spider_fixed_5", false);
AutoSave();
}

void boards_push(string &in asParent, string &in asChild, int alState)
{
	AddTimer("",6,"TimerBoardsPush");
}

void TimerBoardsPush(string &in asTimer)
{
	AddPropForce("push_board", 0, 2500, 0, "World");
	PlaySoundAtEntity("","hit_wood.snt", "push_board", 0, false);
	CreateParticleSystemAtEntity("", "ps_door_damage_wood.ps", "wood_chips", true);
	AddTimer("",1,"TimerAnother");
	GiveSanityDamage(5, true);
	
	PlayMusic("pest_bump.ogg", false, 1.4, 0, 1, false);
}

void TimerAnother(string &in asTimer)
{
	AddPropForce("push_board", 0, 2500, 0, "World");
	PlaySoundAtEntity("","hit_wood.snt", "push_board", 0, false);
	CreateParticleSystemAtEntity("", "ps_door_damage_wood.ps", "wood_chips", true);
	AddTimer("",0.8,"TimerRunAway");
}

void TimerRunAway(string &in asTimer)
{
	PlaySoundAtEntity("","running_away_norubble.snt", "sound_source_4", 0, false);
	//PlaySoundAtEntity("","scare_nurse.snt", "sound_source_4", 0, false);
	
	AddTimer("",8,"TimerMusicReturn");
}

void TimerMusicReturn(string &in asTimer)
{
	PlayMusic("ort_midnightmare.ogg", false, 0.6, 3, 0, true);
}

void unknown_1(string &in asParent, string &in asChild, int alState)
{
PlaySoundAtEntity("","unknown_1.snt", "sound_source_5", 0.8, false);
}

void unknown_2(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("creaky","scare_scratch.snt", "sound_source_7", 2.7, false);
  	AddTimer("stopcreak", 3, "TimerDoneCreak");
}

void board_stomp(string &in asParent, string &in asChild, int alState)
{
AddGlobalVarInt("stomped", +1);
AddTimer("", 0.05f, "board_stomp_check");
}

void board_stomp_check(string &in asTimer)
{

if(GetGlobalVarInt("stomped") == 1)
	{
	PlaySoundAtEntity("","hit_wood.snt", "push_board", 0, false);
	//CreateParticleSystemAtEntity("", "ps_door_damage_wood.ps", "hop_break", true);
	CreateParticleSystemAtEntity("", "ps_dust_impact.ps", "hop_break", true);
	}
if(GetGlobalVarInt("stomped") == 2)
	{
	PlaySoundAtEntity("","hit_wood.snt", "Player", 0, false);
	CreateParticleSystemAtEntity("", "ps_door_damage_wood.ps", "hop_break", true);
	CreateParticleSystemAtEntity("", "ps_dust_impact.ps", "hop_break", true);
	}
if(GetGlobalVarInt("stomped") == 3)
	{
	SetEntityActive("wooden_boards", false);
	SetEntityActive("broken_boards", true);
	PlaySoundAtEntity("","break_wood.snt", "Player", 0, false);
	CreateParticleSystemAtEntity("", "ps_door_damage_wood.ps", "hop_break", true);
	CreateParticleSystemAtEntity("", "ps_dust_impact.ps", "hop_break", true);
	}
}

void giveNodes()
{
AddEnemyPatrolNode("character_sdog_cin_1","dognode_2",0.0f,"");
AddEnemyPatrolNode("servant_grunt_1","PathNodeArea_13",0.0f,"");
AddEnemyPatrolNode("servant_grunt_1","gruntnode_1",0.0f,"");
AddEnemyPatrolNode("servant_grunt_1","gruntnode_2",0.0f,"");
AddEnemyPatrolNode("servant_grunt_1","gruntnode_3",0.0f,"");
AddEnemyPatrolNode("servant_grunt_1","gruntnode_4",0.0f,"");
AddEnemyPatrolNode("servant_grunt_1","gruntnode_5",0.0f,"");
AddEnemyPatrolNode("servant_grunt_1","gruntnode_6",0.0f,"");
AddEnemyPatrolNode("servant_grunt_1","gruntnode_7",0.0f,"");
AddEnemyPatrolNode("ghost","ghostnode_1",0.0f,"");
AddEnemyPatrolNode("ghost","ghostnode_2",0.0f,"");
AddEnemyPatrolNode("ghost","ghostnode_3",0.0f,"");
AddEnemyPatrolNode("ghost","ghostnode_4",0.0f,"");

AddEnemyPatrolNode("Engineer","gruntnode_6",0.0f,"");
AddEnemyPatrolNode("Engineer","gruntnode_5",0.0f,"");
AddEnemyPatrolNode("Engineer","PathNodeArea_8",0.0f,"");
AddEnemyPatrolNode("Engineer","gruntnode_30",0.0f,"");
AddEnemyPatrolNode("Engineer","gruntnode_4",0.0f,"");
AddEnemyPatrolNode("Engineer","PathNodeArea_4",0.0f,"");
AddEnemyPatrolNode("Engineer","PathNodeArea_18",0.0f,"");
AddEnemyPatrolNode("Engineer","gruntnode_2",0.0f,"");
}

void dog_scare(string &in asParent, string &in asChild, int alState)
{
SetEntityActive("character_sdog_cin_1", true);
}

void cin_disappear(string &in asParent, string &in asChild, int alState)
{
FadeEnemyToSmoke("character_sdog_cin_1", false);
}

void big_spider(string &in asParent, string &in asChild, int alState)
{
SetEntityActive("big_spider", true);
  AddTimer("stoppppider", 5.0f, "TimerSpiderGone");
}

void TimerSpiderGone(string &in asTimer)
{
SetEntityActive("big_spider", false);
}

void boom_1(string &in asParent, string &in asChild, int alState)
{
PlaySoundAtEntity("","enemy_hallucination_disappear.snt", "torch_static01_1", 0.3, false);
StartScreenShake(0.02f, 0.6, 0.1, 0.1);
}

void boom_2(string &in asParent, string &in asChild, int alState)
{
PlaySoundAtEntity("","enemy_hallucination_disappear.snt", "candlestick_wall_12", 0.3, false);
PlaySoundAtEntity("", "paper_tearing_2", "candlestick_wall_12", 1, false);
StartScreenShake(0.02f, 0.6, 0.1, 0.1);
}

void TimerPlayGrav(string &in asTimer)
{
PlayMusic("ort_descent_pt2.ogg", true, 1, 6, 0, true);
}

void Trailer()
{
SetPlayerLookSpeedMul(0.5);
SetPlayerMoveSpeedMul(0.5);
SetPlayerRunSpeedMul(0.5);
ShowPlayerCrossHairIcons(false);
AddTimer("", 15, "TimerTrailer1");
}

void DoorLockAfterChase(string &in asParent, string &in asChild, int alState)
{
StopMusic(12, 1);
//SetMessage("Examine", "pest_door", 3);
SetSwingDoorClosed("castle_arched01_2", true, true);
//SetSwingDoorLocked("castle_arched01_2", true, true);
PlaySoundAtEntity("", "lock_door", "castle_arched01_2", 0, false);
PlayMusic("amb_extra01_1.ogg", false, 0.75, 9, 13, false);
//PlayMusic("ort_midnightmare.ogg", true, 0.6, 4, 0, true);
SetEntityActive("PreRock", false);
SetEntityActive("PostRock", true);
SetEntityActive("sewer_grate_rusty_3", true);
SetEntityActive("afterchasedoorblock", true);
SetEntityActive("sewer_grate_rusty_1", false);
SetEntityActive("bars", false);
SetEntityActive("well_rope_ladder", false);
SetEntityActive("servant_grunt_1", false);

	for(int i=1;i<=4;i++)
		{
			SetEntityActive("well_web_"+i, true);
		}
	
	for(int i=1;i<=5;i++)
        {
			SetEntityActive("cobwebdoor_"+i, true);
		}
		
SetEntityActive("well_block", true);
RemoveTimer("AmbRandom");
RemoveTimer("TimerSpiderSpawn");
RemoveTimer("TimerSpiderDespawn");
RemoveTimer("TimerSpiderPhase");
RemoveTimer("TimerSpiderAttack");
RemoveTimer("TimerSpiderPhaseTwo");
RemoveTimer("TimerSpiderPhaseTwoRepeat");
AutoSave();
}

void FuckingDie(string &in asParent, string &in asChild, int alState)
{
GivePlayerDamage(666, "BloodSplat", false, true);
SetDeathHint("Events", "event_2_well_death_hint");
}

void SoundMetal(string &in asParent, string &in asChild, int alState)
{
PlaySoundAtEntity("", "afx_spooky_bilge_05.snt", "AFXTrigger", 0, true);
}

void Bones(string &in asParent, string &in asChild, int alState)
{
FadeOut(0);
AddTimer("PreBones", 0.13, "PostBones");
}

void PostBones(string &in asTimer)
{
FadeIn(0);
for(int i=1;i<=3;i++)
        {
        SetEntityActive("notsecret_"+i, false);
        SetEntityActive("secret_"+i, true);
        }
for(int i=1;i<=5;i++)
        {
        SetEntityActive("bones_"+i, true);
        }
PlaySoundAtEntity("", "paper_tearing_1", "bones_1", 0, false);
}

void TimerTrailer1(string &in asTimer)
{
TeleportPlayer("Trailer1");
}

void rustling(string &in asParent, string &in asChild, int alState)
{
PlaySoundAtEntity("", "pebbles_rustle.snt", "rustlesound", 1, true);
}

void RemoveExamine(string &in asEntity)
{
	SetEntityActive(asEntity,false);
	if (asEntity == "HeadExamine")
		{
			AddDiary("Head", "diary_head"); 
			SetMessage("Message", "CopyDrawing", 3);
			GiveHint("maphint", "Hints", "HintDrawing", -1);
			PlayGuiSound("ui_drawing_copy.ogg", 1);
			
			SetGlobalVarInt("HeadDrawing",1);
		}
			
}

void MaskDisappear(string &in asParent, string &in asChild, int alState)
{
	AddTimer("", 1, "TimerMask1");
}

void TimerMask1(string &in asTimer)
{
	SetPropActiveAndFade("nurse_mask_1", false, 0.5f);
}

void AmbScares(string &in asParent, string &in asChild, int alState)
{
	if (asChild == "Scare1Trigger")
	{
		PlaySoundAtEntity("", "roar_distant", "RoarSource", 0, false);
	}
	if (asChild == "Scare2Trigger")
	{
		PlaySoundAtEntity("", "tunnel_cry", "CrySource", 0, false);
	}
}

void OnLeave()
{
	if (((GetGlobalVarInt("InsectDrawing")) == 1) && ((GetGlobalVarInt("HeadDrawing")) == 0) && ((GetGlobalVarInt("SnakeDrawing")) == 0)) {SetupLoadScreen("", "", 0, "100.tga");}
	if (((GetGlobalVarInt("InsectDrawing")) == 0) && ((GetGlobalVarInt("HeadDrawing")) == 1) && ((GetGlobalVarInt("SnakeDrawing")) == 0)) {SetupLoadScreen("", "", 0, "010.tga");}
	if (((GetGlobalVarInt("InsectDrawing")) == 0) && ((GetGlobalVarInt("HeadDrawing")) == 0) && ((GetGlobalVarInt("SnakeDrawing")) == 1)) {SetupLoadScreen("", "", 0, "001.tga");}
	if (((GetGlobalVarInt("InsectDrawing")) == 1) && ((GetGlobalVarInt("HeadDrawing")) == 1) && ((GetGlobalVarInt("SnakeDrawing")) == 0)) {SetupLoadScreen("", "", 0, "110.tga");}
	if (((GetGlobalVarInt("InsectDrawing")) == 0) && ((GetGlobalVarInt("HeadDrawing")) == 1) && ((GetGlobalVarInt("SnakeDrawing")) == 1)) {SetupLoadScreen("", "", 0, "011.tga");}
	if (((GetGlobalVarInt("InsectDrawing")) == 1) && ((GetGlobalVarInt("HeadDrawing")) == 1) && ((GetGlobalVarInt("SnakeDrawing")) == 1)) {SetupLoadScreen("", "", 0, "111.tga");}
}