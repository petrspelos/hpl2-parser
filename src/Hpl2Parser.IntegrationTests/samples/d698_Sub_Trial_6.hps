void OnStart() //NOTE: THIS IS STILL THE SIXTH MAP
{
	/*if(ScriptDebugOn()) //Debug stuff
	{
		GiveItemFromFile("lantern", "lantern.ent");
		for(int i=0;i<10;i++) GiveItemFromFile("tinderbox_"+i, "tinderbox.ent");
		for(int i=0;i<10;i++) GiveItemFromFile("potion_health_"+i, "potion_health.ent");
		for(int i=0;i<10;i++) GiveItemFromFile("potion_sanity_"+i, "potion_sanity.ent");
		
		PlayMusic("trial_6.ogg", true, 2.5f, 10.0f, 0.0f, true);
		
		GiveItemFromFile("Crowbar", "crowbar.ent");
		GiveItemFromFile("ChestKey", "key_study.ent");
		GiveItemFromFile("Knife", "ceremony_knife.ent");
		GiveItemFromFile("Blood", "glass_container_blood.ent");
	}*/
	
	SetupLoadScreen("Loading", "Load_6", 0, "load_tv.png");
	
	//Map Specific
	SetSanityDrainDisabled(true);
	SetLocalVarInt("Ricky", 0);
	SetLocalVarInt("KnifeDoorEvent", 0);
	SetLocalVarInt("ChestLocked", 0);
	SetLocalVarInt("DeadBodyVar", 0);
	CheckPoint("HouseCheckPoint", "HouseCheckPoint", "", "Death", "Trial6_DeathByRicky");
	
	StartUp();
	
	//Collide Callbacks
	AddEntityCollideCallback("Player", "MusicStart", "StartMusic", true, 0);
	AddEntityCollideCallback("Player", "UnlockTheDoor", "CanUnlockDoor", true, 0);
	AddEntityCollideCallback("Hammer", "HatchAreaHammer", "HulkSmash", true, 0);
	AddEntityCollideCallback("Hammer", "padlock_rusty_1", "HulkSmash", true, 0);
	AddEntityCollideCallback("BadHammer", "HatchAreaHammer", "BadHulkSmash", true, 0);
	AddEntityCollideCallback("BadHammer2", "HatchAreaHammer", "BadHulkSmash", true, 0);
	AddEntityCollideCallback("GruntDoor", "DeadBodyMusic", "StartHorrorMusic", true, 0);
	
	AddEntityCollideCallback("Player", "DeadBodyMusic", "Talking", true, 0);
	
	//Brute Pathways
	AddEntityCollideCallback("Player", "RickyBarnPath", "SetRickyPath", false, 1);
	AddEntityCollideCallback("Player", "RickyHousePath", "SetRickyPath", false, 1);
	AddEntityCollideCallback("Player", "RickyToolPath", "SetRickyPath", false, 1);
	
	//KnifeDoorEvent, after done will allow RickyToolPath to be used
	AddEntityCollideCallback("Player", "KnifeDoorEventRight", "KnifeDoorEvent", false, 1);
	AddEntityCollideCallback("Player", "KnifeDoorEventLeft", "KnifeDoorEvent", false, 1);
	
	
	//Interact Callbacks
	SetEntityPlayerInteractCallback("WindowArea", "WindowHint", false);
	SetEntityPlayerInteractCallback("HatchArea", "HatchHint", false);
	SetEntityPlayerInteractCallback("DeadBody", "ExamineDeadBody", false);
	
	//Use Item Callbacks
	AddUseItemCallback("", "Crowbar", "WindowArea", "WindowBreaks", true);
	AddUseItemCallback("", "Crowbar", "HatchArea", "CrowOnHatch", false);
	AddUseItemCallback("", "Crowbar", "UnlockableDoor", "CrowOnDoor", false);
	AddUseItemCallback("", "Crowbar", "KnifeDoor", "CrowOnDoor", false);
	AddUseItemCallback("", "Crowbar", "Chest", "CrowOnChest", false);
	AddUseItemCallback("", "ChestKey", "Chest", "UnlockChest", true);
	AddUseItemCallback("", "Blood", "DeadBody", "DeadBodyRitual", true);
	AddUseItemCallback("", "Knife", "DeadBody", "DeadBodyRitual", false);
	AddUseItemCallback("", "ChestKey", "BruteDoor", "KeyOnDoor", false);
	AddUseItemCallback("", "ChestKey", "KnifeDoor", "KeyOnDoor", false);
	
	AddTimer("", 5, "Heal");
}

void TouchHammer(string &in asEntity){
	SetMessage("Examine", "Trial6_Hammer", 0);
	FadeLightTo("HelpLight_1", 0,0,0,0,-1,3);
}

void Heal(string &in asTimer){
	AddDebugMessage("Health: "+GetPlayerHealth(), false);
	AddPlayerHealth(5);
	AddTimer("", 5, "Heal");
}

//Music
void StartMusic(string &in asParent, string &in asChild, int alState)
	{PlayMusic("trial_5.ogg", true, 2.5f, 10.0f, 5, true);}

//Examine Stuff
void WindowHint(string &in asEntity){SetMessage("Examine", "Trial6_WindowHint", 0);}
void HatchHint(string &in asEntity){SetMessage("Examine", "Trial6_HatchHint", 0);}
void LockedDoors(string &in asEntity){
	SetMessage("Examine", "Trial6_"+asEntity, 0);
	PlaySoundAtEntity("", "locked_door.snt", asEntity, 0.0f, true);
}
void LockedChest(string &in asEntity){
	if(GetLocalVarInt("ChestLocked") == 0){
		SetMessage("Examine", "Trial6_LockedChest", 0);
		PlaySoundAtEntity("", "joint_large_wood_min_max.snt", asEntity, 0.0f, false);
	}
}
void CrowOnHatch(string &in asItem, string &in asEntity) //Tries to use crowbar on the hatch
	{SetMessage("Interact", "Trial6_CrowOnHatch", 0);}
void CrowOnDoor(string &in asItem, string &in asEntity) //Tries to use crowbar on the doors
	{SetMessage("Interact", "Trial6_CrowOnDoor", 0);}
void CrowOnChest(string &in asItem, string &in asEntity) //Tries to use crowbar on the chest
	{SetMessage("Interact", "Trial6_CrowOnChest", 0);}
void KeyOnDoor(string &in asItem, string &in asEntity) //Tries using key on doors
	{SetMessage("Interact", "Trial6_KeyOn"+asEntity, 0);}


////////////////////////////////////
//Opening the window
void WindowBreaks(string &in asItem, string &in asEntity){
	AddTimer(asEntity, 0.2, "TimerSwitchShovel");
	PlaySoundAtEntity("pickupcrow","player_crouch.snt", "Player", 0.05, false);
	AddEntityCollideCallback("Movebar", "BreakTheWindows", "WindowsBroken", true, 0);
}
void TimerSwitchShovel(string &in asTimer){
	RemoveItem("Crowbar");
	PlaySoundAtEntity("attachshovel","puzzle_place_jar.snt", asTimer, 0, false);	
	SetEntityActive("Movebar", true);
}
void WindowsBroken(string &in asParent, string &in asChild, int alState){
	//SetMessage("Debug", "DebugMessage1", 0);
	PlaySoundAtEntity("break","break_wood", "WindowArea", 0, false);
	CreateParticleSystemAtEntity("breakps", "ps_hit_wood", asChild, false);
	SetEntityActive("WindowArea", false);
	for(int i=0;i<5;i++) SetEntityActive("window_"+i, false);
	for(int i=0;i<13;i++) SetEntityActive("broken_window_"+i, true);
	for(int i=0;i<13;i++) AddPropForce("broken_window_"+i, 500, 0, 0, "world");
	AddTimer("", 2.0f, "fadewindows");
	SetEntityActive("Movebar", false);
	SetEntityActive("Brokebar", true);
	SetMessage("Interact", "Trial6_ShittyCrowbar", 0);
	FadeLightTo("HelpLight_2", 0,0,0,0,-1,3);
	
	PlayMusic("trial_5_puzzle_barn_window.ogg", false, 1, 0.5f, 10, false);
}
void fadewindows(string &in asTimer)
	{for(int i=0;i<13;i++) SetPropActiveAndFade("broken_window_"+i, false, 2.0f);}
//EndEventWindow /*Fuck you Andy*/
////////////////////////////////

//Able to unlock the door
void CanUnlockDoor(string &in asParent, string &in asChild, int alState)
	{SetEntityPlayerInteractCallback("UnlockableDoor", "UnlockDatDoor", true);}
void UnlockDatDoor(string &in asEntity){
	SetEntityPlayerInteractCallback("", "", true);
	PlaySoundAtEntity("", "unlock_door.snt", asEntity, 0.0f, false);	
	SetSwingDoorLocked(asEntity, false, true);
	SetMessage("Interact", "UnlockedDoor", 0);
}

//Opening The Hatch
void HulkSmash(string &in asParent, string &in asChild, int alState){
	SetEntityActive("HatchArea", false);
	SetEntityActive("HatchAreaHammer", false);
	SetEntityActive("Hatch_StaticPhys", false);
	SetEntityActive("Hatch", true);
	SetMoveObjectStateExt("MoveLadder", -0.7, 2, 10, 1, false);
	SetMoveObjectStateExt("MoveLadderEnd", -2.08, 2, 10, 1, false);
	SetEntityActive("LadderArea_1", true);
	SetEntityActive("padlock_rusty_1", false);
	SetEntityActive("padlock_rusty_2", true);
	PlaySoundAtEntity("laddermove", "L01_ladder_move", "LadderSounds", 1.0, false);
	PlaySoundAtEntity("laddermove2", "L01_ladder_move02", "LadderSounds", 1.0, false);
	PlaySoundAtEntity("", "L01_ladder", "LadderSounds", 0.0, false);
	AddTimer("", 1.5f, "LadderDown");
	
	FadeLightTo("HelpLight_3", 0,0,0,0,-1,3);
}
void LadderDown(string &in asTimer){
	StopSound("laddermove", 0.5f);
	StopSound("laddermove2", 0.5f);
	PlaySoundAtEntity("stopmove", "L01_ladder", "LadderSounds", 0.0, false);
}
void BadHulkSmash(string &in asParent, string &in asChild, int alState)
{SetMessage("Debug", "DebugMessageE1", 0);}


//Music in the Grunt Room
void StartHorrorMusic(string &in asParent, string &in asChild, int alState){
	StartPlayerLookAt("DeadBodyBloodSplat", 1, 1, "");
	PlayMusic("trial_5_event_corpse.ogg", false, 1.5f, 0.0f, 10, false);
}
void Talking(string &in asParent, string &in asChild, int alState){
	SetPlayerActive(false);
	AddEffectVoice("M6_S2_P1_01", "", "Voices", "06020101", false, "", 0,0);
	AddEffectVoice("M6_S2_P1_02", "", "Voices", "06020102", false, "", 0,0);
	AddEffectVoice("M6_S2_P1_03", "", "Voices", "06020103", false, "", 0,0);
	SetEffectVoiceOverCallback("DoneTalking");
}
void DoneTalking(){
	SetPlayerActive(true);
	StopPlayerLookAt();
}

/////////////////////////////////////////
//Knife, Key, Chest, and Blood
void UnlockChest(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	PlaySoundAtEntity("", "impact_metal_chain_med.snt", asEntity, 0.0f, false);	
	SetLeverStuckState("Chest", 0, true);
	SetMessage("Interact", "UnlockChest", 0);
	SetLocalVarInt("ChestLocked", 1);
	SetEntityActive("Blood", true);
}
void ExamineDeadBody(string &in asEntity) //Examine stuff only
{
	if(GetLocalVarInt("DeadBodyVar") == 0) //0 means a 'plain' dead body
	{SetMessage("Examine", "Trial6_DeadBody_1", 0);}
	else if(GetLocalVarInt("DeadBodyVar") == 1) //1 means it has been dressed with ketchup
	{SetMessage("Examine", "Trial6_DeadBody_2", 0);}
}
void DeadBodyRitual(string &in asItem, string &in asEntity)
{
	if(asItem == "Blood")
	{
		RemoveItem(asItem);
		PlaySoundAtEntity("", "26_touch_fungu.snt", "DeadBodyBloodSplat", 0.0f, false);
		SetMessage("Interact", "Trial6_BloodOnBody", 0);
		SetLocalVarInt("DeadBodyVar", 1);
	}
	else if(asItem == "Knife")
	{
			if(GetLocalVarInt("DeadBodyVar") == 0)
			{SetMessage("Interact", "Trial6_NeedsBlood", 0);}
			else if(GetLocalVarInt("DeadBodyVar") == 1)
			{
				PlayMusic("trial_5_event_stab.ogg", false, 1, 0, 10, false);
				SetPlayerActive(false);
				StartEffectFlash(7.5f, 1.0f, 7.5f);
				AddTimer("", 7.5f, "EndTrial6");
				
				RemoveItem(asItem);
				SetEntityActive("KnifeInBody", true);
				PlaySoundAtEntity("ohgodwhy", "24_cut.snt", "DeadBodyBloodSplat", 0.0f, false);
				AddTimer("", 1.0f, "EndCut");
				CreateParticleSystemAtEntity("", "ps_blood_tiny_splash.ps", "DeadBodyBloodSplat",false);
			}
	}
}
void EndCut(string &in asTimer){StopSound("ohgodwhy", 1.0f);}
void EndTrial6(string &in asTimer)
	{ChangeMap("Sub_Trial_7", "Trial7_TestRoom", "", "");
	StopMusic(5, 5);
	StopMusic(5, 3);
	StopMusic(5, 0);}
//End
//////////////////////

///////////////////////////////
//Brute Spawns
void BruteNote(string &in asEntity)
{
	AddEntityCollideCallback("Player", "SpawnRickyAfterNote", "SpawnRicky", true, 0);
}
void SpawnRicky(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("sub_search_brute", true, 1.0f, 2.5f, 3, true);
	SetEntityActive("RickyPJangles_RickyBarnPath", true);
	SetLocalVarInt("Ricky", 1);
	CheckPoint("BarnCheckPoint", "BarnCheckPoint", "", "Death", "Trial6_DeathByRicky");
	//SetEnemyDisableTriggers("RickyPJangles_RickyBarnPath", true);  //For Testing Only
	BarnPath("RickyPJangles_RickyBarnPath");
}

//Brute Pathways
void SetRickyPath(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("Ricky") == 1)
	{
		SetEntityActive("RickyPJangles_"+asChild, true);
		//SetEnemyDisableTriggers("RickyPJangles_"+asChild, true);  //For Testing Only
		if(asChild == "RickyBarnPath")
		{
			ResetProp("RickyPJangles_RickyHousePath");
			ResetProp("RickyPJangles_RickyToolPath");
			BarnPath("RickyPJangles_"+asChild);
			CheckPoint("BarnCheckPoint", "BarnCheckPoint", "", "Death", "Trial6_DeathByRicky");
		}
		else if(asChild == "RickyHousePath")
		{
			ResetProp("RickyPJangles_RickyBarnPath");
			ResetProp("RickyPJangles_RickyToolPath");
			HousePath("RickyPJangles_"+asChild);
			CheckPoint("HouseCheckPoint", "HouseCheckPoint", "", "Death", "Trial6_DeathByRicky");
		}
		else if(asChild == "RickyToolPath")
		{
			ResetProp("RickyPJangles_RickyBarnPath");
			ResetProp("RickyPJangles_RickyHousePath");
			ToolPath("RickyPJangles_"+asChild);
			CheckPoint("ToolCheckPoint", "ToolCheckPoint", "", "Death", "Trial6_DeathByRicky");
		}
	}
}
void BarnPath(string &in asEntity)
{
	AddEnemyPatrolNode(asEntity, "PathNodeArea_1", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_39", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_245", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_57", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_228", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_45", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_102", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_4", 0, "");	
}
void HousePath(string &in asEntity)
{
	AddEnemyPatrolNode(asEntity, "PathNodeArea_21", 0, "");	
	AddEnemyPatrolNode(asEntity, "PathNodeArea_60", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_105", 3, "");	
	AddEnemyPatrolNode(asEntity, "PathNodeArea_60", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_109", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_60", 0, "");
}
void ToolPath(string &in asEntity)
{
	AddEnemyPatrolNode(asEntity, "PathNodeArea_122", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_128", 0, "");
	AddEnemyPatrolNode(asEntity, "PathNodeArea_110", 0, "");	
}

//KnifeDoorEvent
void KnifeDoorEvent(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("KnifeDoorEvent")==0 && GetLocalVarInt("Ricky") == 1)
	{
		//SetMessage("Debug", "DebugMessage2", 0);
		ResetProp("RickyPJangles_RickyBarnPath");
		ResetProp("RickyPJangles_RickyHousePath");
		if(asChild == "KnifeDoorEventRight")
		{
			SetLocalVarString("KnifeDoorEventVar", "Right");
			SetEntityActive("RickyKnifeDoorEventRight", true);
		}
		else if(asChild == "KnifeDoorEventLeft")
		{
			SetLocalVarString("KnifeDoorEventVar", "Left");
			SetEntityActive("RickyKnifeDoorEventLeft", true);
		}
		KnifeEventPath("RickyKnifeDoorEvent"+GetLocalVarString("KnifeDoorEventVar"));
		SetLocalVarInt("KnifeDoorEvent", 1);
		AddTimer("", 120.0f, "ActivateToolArea");
	}
	else return;
}
void KnifeEventPath(string &in asEntity)
{
	//Path for RIGHT SIDE event
	if(GetLocalVarString("KnifeDoorEventVar") == "Right")
	{
		AddEnemyPatrolNode(asEntity, "PathNodeArea_129", 0, "");
		AddEnemyPatrolNode(asEntity, "PathNodeArea_110", 0, "");
	}
	//Path for LEFT SIDE event
	else if(GetLocalVarString("KnifeDoorEventVar") == "Left")
	{
		AddEnemyPatrolNode(asEntity, "PathNodeArea_129", 0, "");
		AddEnemyPatrolNode(asEntity, "PathNodeArea_122", 0, "");
	}
}
void ActivateToolArea(string &in asTimer)
{
	SetEntityActive("RickyToolPath", true);
}
//End Brute Stuff
//////////////////////////////////////


/////////////////////////////////
//Intro Sequence
void Intro() //Set up for intro
{
	FadeOut(0);
	TeleportPlayer("PlayerStartArea_1");
	SetPlayerActive(false);
	MovePlayerHeadPos(0, -1.4f, 0, 1, 0);
	StartPlayerLookAt("WakeUpLook_1", 10, 100, "");
	AddTimer("", 2.0f, "IntroSwitch");
}
void IntroSwitch(string &in asTimer) 
{
	AddLocalVarInt("IntroVar", 1);	//What step to play in the event
	float fEventSpeedIntro = 1.0f;	//The default time between steps in an event

	switch(GetLocalVarInt("IntroVar")) 
	{
		case 1:
			FadeIn(4.5f);
			fEventSpeedIntro = 3.0f;
		break;
		case 2:
			FadeOut(15.0f);
			PlaySoundAtEntity("", "react_sigh.snt", "Player", 0.5f, false);
			StartPlayerLookAt("WakeUpLook_2", 0.5f, 10, "");
			fEventSpeedIntro = 5.0f;
		break;
		case 3:
			FadeIn(5.0f);
		break;
		case 4:
			MovePlayerHeadPos(0, -0.8f, 0.25f, 0.75f, 0.5f);
			PlaySoundAtEntity("", "player_climb.snt", "Player", 0, false);
			StartPlayerLookAt("WakeUpLook_3", 0.625f, 10, "");
			fEventSpeedIntro = 2.5f;
		break;
		case 5:
			PlaySoundAtEntity("", "react_sigh.snt", "Player", 0.5, false);
			StartPlayerLookAt("WakeUpLook_4", 0.75, 10, "");
		break;
		case 6:
			SetPlayerMoveSpeedMul(0.25);
			AddTimer("walk", 0.0f, "moveforward");
			fEventSpeedIntro = 2.0f;
		break;
		case 7:
			MovePlayerHeadPos(0, 0, 0, 0.875, 0.5);
			fEventSpeedIntro = 0.5f;
		break;
		case 8:
			PlaySoundAtEntity("", "player_climb.snt", "Player", 0, false);
			StopPlayerLookAt();
			RemoveTimer("walk");
			SetPlayerMoveSpeedMul(1.0);
			SetPlayerActive(true);
			fEventSpeedIntro = 3.0f;
		break;
	}
	
	if(GetLocalVarInt("IntroVar") < 9)  AddTimer("intro", fEventSpeedIntro, "IntroSwitch");	
}
void moveforward(string &in asTimer)
{
	MovePlayerForward(3);
	AddTimer("walk", 0.0f, "moveforward");
}
//End
///////////////////////////////

void StartUp(){
	FadeOut(0);
	FadeIn(2.0);
	StartPlayerLookAt("LookAtMe", 10,10,"");
	AddTimer("", 1.0f, "StopLookAtPls");
	AddTimer("", 5.0f, "Voices");
}
void StopLookAtPls(string &in asTimer)
	{StopPlayerLookAt();}
void Voices(string &in asTimer){
	AddEffectVoice("M6_S1_P1_01", "", "Voices", "06010101", false, "", 0, 0);
	AddEffectVoice("M6_S1_P1_02", "", "Voices", "06010102", false, "", 0, 0);
	AddEffectVoice("M6_S1_P1_03", "", "Voices", "06010103", false, "", 0, 0);
	AddEffectVoice("M6_S1_P1_04", "", "Voices", "06010104", false, "", 0, 0);
	AddEffectVoice("M6_S1_P1_05", "", "Voices", "06010105", false, "", 0, 0);
	SetEffectVoiceOverCallback("TeleportInTo");
}
void TeleportInTo(){
	StartEffectFlash(1.5, 1, 1.5);
	AddTimer("", 1.5, "Teleporting");
}
void Teleporting(string &in asTimer){
	PlayGuiSound("sub_warp.ogg", 1);
	PlaySoundAtEntity("Night Sounds","sub_night_ambience.snt", "Player", 3.0, false);
	Intro();
}



void OnEnter(){
	AutoSave();
}
void OnLeave(){
	StopMusic(0,0);
	StopSound("Night Sounds",1.0f);
	//StopMusic(0,3);
	//StopMusic(0,5);
}