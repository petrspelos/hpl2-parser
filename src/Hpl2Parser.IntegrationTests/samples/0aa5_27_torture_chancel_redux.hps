
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "27_torture_chancel_redux";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5};
int[] gviEasierOilPotionsCodesArray = {1};
int[] gviEasierHealthPotionsCodesArray = {0};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2};
int[] gviNormalOilPotionsCodesArray = {0};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {3};
int[] gviToughOilPotionsCodesArray = {0};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//CURRENT MAP SPECIFIC
string[] gvsDangerousLampsArray = {
	"torch_static01_5", "torch_static01_6", "torch_static01_3", "torch_static01_2", "bridge_torch_10", "hanging_lantern_ceiling_3", "hanging_lantern_wall_2"
};

float GetEntityPlayerDistance(string asEntity)
{
	float fPlayerPosX = GetPlayerPosX();
	float fPlayerPosY = GetPlayerPosY();
	float fPlayerPosZ = GetPlayerPosZ();
	float fEntityPosX = GetEntityPosX(asEntity);
	float fEntityPosY = GetEntityPosY(asEntity);
	float fEntityPosZ = GetEntityPosZ(asEntity);
	float fDistance = MathSqrt(MathPow((fEntityPosX - fPlayerPosX), 2.0f) + MathPow((fEntityPosY - fPlayerPosY), 2.0f) + MathPow((fEntityPosZ - fPlayerPosZ), 2.0f));
	return fDistance;
}

void OnLampStateChange(string asEntity, string asType)
{
	string[] vsDangerousEnemiesArray = {
		"AreaTunnelCP_Grunt", "servant_brute_1", "servant_brute_2", 
		"AreaMachineCP_Grunt"
	};
	
	if(asType == "OnIgnite")
	{
		if(GetToughModeOn() >= 1)
		{
			for(int i=0; i<vsDangerousEnemiesArray.length(); i++)
			{
				string sEnemyName = GetStringWithExtraModesSuffix(vsDangerousEnemiesArray[i]);
				string sEnemyState = GetEnemyStateName(sEnemyName);
				
				if(sEnemyState != "Idle" && sEnemyState != "GoHome" && sEnemyState != "Dead" && sEnemyState != "NULL" && sEnemyState != "")
				{
					if((GetToughModeOn() == 1 && GetEntityPlayerDistance(sEnemyName) <= 20.0f) || (GetToughModeOn() >= 2))
					{
						AlertEnemyOfPlayerPresence(sEnemyName);
						AddDebugMessage("DEBUG: Enemy " + sEnemyName + " is now in alert state!", false);
						return;
					}
				}
			}
		}
		
		AddDebugMessage("DEBUG: Could not trigger enemy alert from enviroment lamp lit!", false);
	}
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

//------------------------------------------

///////////////////////////////////////////
// JAM MACHINE
////////////////////////////////////////////

//------------------------------------------

/////////////////////////////////////////////
// Cog + Barrier rotation helper
void RotateMachineryToSpeed(float afAccel, float afCogSpeed, float afRingSpeed)
{
	// Set up machine cogs rotation
	float fSmallSpeed = afCogSpeed;
	float fLargeSpeed = afCogSpeed * 1.3333f; //4/3 ratio on wheel size
	
	RotatePropToSpeed("barrier_machine_cog_1", afAccel, fSmallSpeed, 1, 0, 0, true, "");
	RotatePropToSpeed("barrier_machine_cog_3", afAccel, fLargeSpeed, 0, 0, -1, true, ""); 	
	RotatePropToSpeed("barrier_machine_cog_4", afAccel, fLargeSpeed, 0, 0, 1, true, "");
	
	// Set up ring rotation
	for(int i=2; i<=8; ++i)
	{
		float fDir = i%2==0 ? -1 : 1;	
		RotatePropToSpeed("barrier_ring02_"+i, afAccel, afRingSpeed,0,0,fDir, true, "");
	}
}

//------------------------------------------

void CollideSmallObjectWithCogs(string &in asParent, string &in asChild, int alState)
{
	if(GetTimerTimeLeft("SmallObjectCogWait") >0) return;
	
	SetMessage("Ch03Level27", "TryJamSmallObject", -1);
	
	CreateParticleSystemAtEntity("MachineSpark", "ps_cog_stone.ps", asChild, false);
	
	//To make the player drop the item.
	ChangePlayerStateToNormal();
	
	//Little force to object so it flies off.
	AddPropImpulse(asParent, 0, -2, 2, "World");
	
	PlaySoundAtEntity("metalbang", "impact_metal_high.snt", asChild, 0, false); 
	AddTimer("SmallObjectCogWait", 1, ""); //Wait 1 second until displaying this message + effect
}


//------------------------------------------

void CollideWeakObjectWithCogs(string &in asParent, string &in asChild, int alState)
{
	if(GetTimerTimeLeft("WeakObjectCogWait") >0) return;
	
	SetMessage("Ch03Level27", "TryJamWeakObject", -1);
	
	//If a wood box, then destroy the object
	if(StringContains(asParent, "wood_box"))
	{
		//SetEntityActive(asParent, false);
		SetPropHealth(asParent, 0);
		CreateParticleSystemAtEntity("WoodBreak", "ps_break_wood_small.ps", asChild, false);
		//PlaySoundAtEntity("woodrash", "break_wood_metal.snt", asChild, 0, false); 
	}
	//If a flask, remove object and display some glass shattering.
	else if(StringContains(asParent, "flask"))
	{
		SetEntityActive(asParent, false);
		CreateParticleSystemAtEntity("Glass", "ps_glass_shards.ps", asChild, false);
		CreateParticleSystemAtEntity("Dust", "ps_break_wood_small.ps", asChild, false);
		PlaySoundAtEntity("glasscrash", "break_glass_bottle.snt", asChild, 0, false); 
	}
	//Default, just show dust.
	else
	{
		CreateParticleSystemAtEntity("Dust", "ps_break_wood_small.ps", asChild, false);
	}
		
	AddTimer("WeakObjectCogWait", 1, ""); //Wait 1 second until displaying this message + effect
}

//------------------------------------------

void CollideCorrectObjectWithCogs(string &in asParent, string &in asChild, int alState)
{
	/////////////////////
	//Complete quests
	CompleteQuest("27OrbReadyNoJam", "27OrbReadyNoJam");
	
	/////////////////////
	//Effects when destroying.
	StartScreenShake(0.18f, 0.1f, 1.3f, 2.1f);
	
	CreateParticleSystemAtEntity("MachineSpark", "ps_cog_stone.ps", asChild, false);
	CreateParticleSystemAtEntity("Rubble", "ps_cog_rubble.ps", asChild, false);
	
	CreateParticleSystemAtEntity("MachineDestroid", "ps_break_mansionbase_wall.ps", "AreaDestroyEffect", false);
	CreateParticleSystemAtEntity("MachineDestroid", "ps_break_mansionbase_wall.ps", asChild, false);
	
	//To make the player drop the item.
	ChangePlayerStateToNormal();
		
	GivePlayerDamage(10, "BloodSplat", true, false);
	
	/////////////////////
	//make machine cogs slow down and stop	
	RotateMachineryToSpeed(1, 0.2f, 0.2f);
	AddTimer("TimerJamMachine", 1, "TimerJamMachine");
	
	/////////////////////
	//Sound effects	
	PlaySoundAtEntity("MachineFail", "27_jam.snt","MachinerySound_1", 0, false);
	
	/////////////////////
	//Turn off areas.
	SetEntityActive("AreaStoneCogs_*", false);
	SetEntityActive("AreaCogwheelDamage_*", false);
	
	/////////////////////
	//Turn off particle systems
	DestroyParticleSystem("ParticleSystem_11");
	DestroyParticleSystem("ParticleSystem_10");
	DestroyParticleSystem("ParticleSystem_32");
	
	/////////////////////
	//Turn off steam sounds
	StopSound("SteamSound_2", 1);
	StopSound("SteamSound_3", 1);
	
	StopSound("MachineSound_4", 0.2);
	
	StopSound("Sound_3", 0.0);
	StopSound("Sound_16", 0.0);
	
	StopSound("HumSound_1", 4); StopSound("HumSound_3", 4);
	StopSound("HumSound_2", 4); StopSound("HumSound_4", 4);
	
	/////////////////////
	//Music playing
	AddTimer("TimerMachineJamMusic",2,"TimerMachineJamMusic");
	
	////////////////////////////
	//Grunt event on way back
	EventGrunt02();
}

void TimerMachineJamMusic(string &in asTimer)
{
	PlayMusic("27_event_bang.ogg", false, 1, 0.5f, 9, false);
	
	if(GetEasyModeOn() <= 0)
	{
		if(GetLocalVarInt("EnemyBruteActive") == 1)
		{
			if(GetToughModeOn() <= 1)
			{
				AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_brute_1"));
				AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_brute_2"));
			}
			else
			{
				ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("servant_brute_1"));
				ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("servant_brute_2"));
			}
		}
		else if(GetLocalVarInt("EnemyMachineActive") == 1)
		{
			if(GetToughModeOn() <= 1)
			{
				AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"));
			}
			else
			{
				ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"));
			}
		}
		else if(GetLocalVarInt("EnemyTunnelActive") == 1)
		{
			if(GetToughModeOn() <= 1)
			{
				AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"));
			}
			else
			{
				ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"));
			}
		}
	}
}

//------------------------------------------

void TimerRestoreMachineRotation(string &in asTimer)
{
	if(GetLocalVarInt("MachineJammed")==0)
		RotateMachineryToSpeed(0.9f, 2.1f, 1);
}

void TimerJamMachine(string &in asTimer)
{
	PlaySoundAtEntity("MachineDestroyed", "27_break.snt", "MachinerySound_1", 0, false);
	
	SetLocalVarInt("MachineJammed", 1);
	UpdateBarrierState();
		
	RotateMachineryToSpeed(1, 0, 0);
}

void CollidePlayerCog(string &in asParent, string &in asChild, int alState)
{
	PlayGuiSound("21_meat_snap02.ogg", 1.0f);
	PlayGuiSound("21_meat_long04.ogg", 1.0f);
	PlayGuiSound("attack_claw_hit02.ogg", 0.3f);
	
	GivePlayerDamage(10.0f, "Slash", true, false);
}
void InteractCogWheel(string &in asEntity)
{
	AddDebugMessage(asEntity + " being interacted!", false);
	if(GetTimerTimeLeft("TimerInteractCogWheel")>0)
		return;
		
	CollidePlayerCog("","",1);
	
	AddTimer("TimerInteractCogWheel", 1.0f, "");
}

//------------------------------------------

///////////////////////////////////////////
// BUILD ORB
////////////////////////////////////////////

//------------------------------------------

void UseStringOnPedestal(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level21", "UseStringOnPedestal", 0);
}

//------------------------------------------

void UseOrbPieceOnPedestal(string &in asItem, string &in asEntity)
{
	////////////////////
	//Check if tar has been added
	if(GetGlobalVarInt("TarOnPedestal")==0 && GetGlobalVarInt("OrbsAddedCount")==1) 
	{
		SetMessage("Ch02Level22", "UseOrbPieceAndNoTar", 0);
		AddQuest("22NeedTar", "22NeedTar");
		PlaySoundAtEntity("prbd", "22_orb_loose.snt", asEntity, 1.0f, false);
		return;
	}
			
	////////////////////
	//Increase count and remove item
	AddGlobalVarInt("OrbsAddedCount",1);
	int lCurrentCount = GetGlobalVarInt("OrbsAddedCount");
	RemoveItem(asItem);
	
	////////////////////
	//Make the orb piece visible
	
	//All orbs after first forge.
	if(lCurrentCount > 1)
	{
		SetPropActiveAndFade("orb_assembly_"+lCurrentCount, true, 1.0f);
		AddTimer("orb_assembly_"+(lCurrentCount-1), 0.8f, "TimerFadeProp");
	}
	//First should just pop up.
	else
	{
		SetEntityActive("orb_assembly_"+lCurrentCount, true);
	}
		
	////////////////////
	//Play sound
	PlaySoundAtEntity("orbd", "22_orb_loose.snt", asEntity, 0.5f, false);
	
	////////////////////
	//Forge Effect
	if(lCurrentCount>1)
	{
		PlaySoundAtEntity("forges", "22_orb_forge.snt", asEntity, 0.5f, false);
		CreateParticleSystemAtEntity("orb_repair", "ps_orb_repair_effect.ps", "AreaOrbEffect", false);
	}
	
	////////////////////
	//Add Piece Number spefics
	if(lCurrentCount ==1)
	{
		//Remove interact callback on pedestal
		SetEntityPlayerInteractCallback("AreaOrbEffect","", false);
		
	}
	else if(lCurrentCount <=5)
	{
		
	}
	else if(lCurrentCount ==6)
	{
		SetLampLit("orb_pedestal_1", true, true);
		CompleteQuest("22FoundPedestal", "22FoundPedestal");
		CompleteQuest("21FindOrb", "21FindOrb");
		
		PlaySoundAtEntity("orbdonesound", "27_orb_done.snt", "AreaOrbEffect", 0.0f, false);
		
		//If machine is not jammed yet, add a message and memento.
		if(GetLocalVarInt("MachineJammed")==0)
		{
			AddTimer("OrbReadyMachineRunning", 12, "TimerOrbReadyMachineRunning");
		}
				
		for(int i=1;i<=3; ++i)
		{
			SetEntityActive("barrier_ring03_weakened_"+i, true);
			SetEntityActive("barrier_ring03_"+i, false);
		}
		
		CreateBarrierEnergyStream();
		
		UpdateBarrierState();
		
		if(GetToughModeOn() >= 1)
		{
			AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_brute_1"));
			AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_brute_2"));
			AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"));
			AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"));
		}
	}
}

//------------------------------------------

void TimerOrbReadyMachineRunning(string &in asTimer)
{
	AddQuest("27OrbReadyNoJam", "27OrbReadyNoJam");
}


//------------------------------------------

//Used to fade prop with a small delay!
void TimerFadeProp(string &in asTimer)
{
	SetPropActiveAndFade(asTimer, false, 1.0f);	
}

//------------------------------------------

//Grease up the pedestal
void UseTarOnPedestal(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	
	//Tar has been added!
	SetGlobalVarInt("TarOnPedestal",1);
	CompleteQuest("22NeedTar", "22NeedTar");
		
	PlaySoundAtEntity("tars", "22_use_tar.snt", asEntity, 1.0f, false);
		
	SetEntityActive("orb_pedistal_tar_1", true);
}

//------------------------------------------

void InteractOrbPedestal(string &in asEntity)
{
	SetMessage("Ch02Level22", "InteractOrbPedestal", 0);
	AddQuest("22FoundPedestal", "22FoundPedestal");
}

//------------------------------------------

///////////////////////////////////////////
// This is used to display the energy stream
void CreateBarrierEnergyStream()
{
	////////////////////////////////////////////////////////////////////////////////////////////
	// The stream starts showing 6 secs after the event is triggered to sync with the gather PS.
	// Next ones will spawn every next second.
	float fTimeStep = 1;
	float fTime = 6;
	CreateParticleSystemAtEntity("PSOrbGather", "ps_orb_stream_gather.ps", "Orb_Stream_Gather", true);
	PlaySoundAtEntity("orbstart1", "29_hole_open.snt", "Orb_Stream_Gather", 0.0f, false);
	PlaySoundAtEntity("orbstart2", "29_hole_blue.snt", "Orb_Stream_Gather", 0.0f, false);
	PlaySoundAtEntity("Eloop", "27_energy_loop.snt", "Orb_Stream_Gather", 1.0f, false);
		
	for(int i=1;i<=6;++i)
	{
		string sIndex = i;
		AddTimer(sIndex, fTime, "TimerCreateStreamPS");
		fTime += fTimeStep;
	}
	
	
	/////////////////////////////////////////////////////
	// Sounds
	//Did in timer instead
	
	/////////////////////////////////////////////////////
	// Create orb absorbing effect
	AddTimer("TimerCreateOrbEffectPS", fTime, "TimerCreateOrbEffectPS");
}

void TimerCreateStreamPS(string &asTimer)
{
	CreateParticleSystemAtEntity("PSOrbStream_" + asTimer, "ps_orb_absorb_stream.ps", "Orb_Stream_" + asTimer, true);
	PlaySoundAtEntity("SOrbStream_" + asTimer, "27_energy_loop.snt", "Orb_Stream_" + asTimer, 0.0f, false);
}

void TimerCreateOrbEffectPS(string &asTimer)
{
	CreateParticleSystemAtEntity("PSOrbEffect", "ps_orb_absorb.ps", "AreaOrbEffect", true);
	StopSound("SOrbStream_1", 1.0f); StopSound("SOrbStream_2", 1.0f); StopSound("SOrbStream_3", 1.0f);
	StopSound("SOrbStream_4", 1.0f); StopSound("SOrbStream_5", 1.0f); StopSound("SOrbStream_6", 1.0f);
	StopSound("Eloop", 1.0f);

	SetLocalVarInt("OrbAbsorbing", 1);
	UpdateBarrierState();
}

//------------------------------------------

///////////////////////////////////////////
// FALL DEATH
////////////////////////////////////////////

//------------------------------------------

void CollideFallDeath(string &in asParent, string &in asChild, int alState)
{	
	if(StringContains(asParent, "Grunt") || StringContains(asParent, "brute"))
	{
		SetEntityActive(asParent, false);
		FadeEnemyToSmoke(asParent, false);
		SetLocalVarInt("EnemyMachineActive", 0);
		SetLocalVarInt("EnemyTunnelActive", 0);
		SetLocalVarInt("EnemyBruteActive", 0);
		return;
	}
	/////////////////////////////////
	//A respawn at random position.
	// If ambush is in progress, we need to use it's checkpoint!
	if(GetLocalVarInt("AmbushStarted")==0)
	{
		string sDeathHint = "DeathFall_21_TortureNave";
		if(GetToughModeOn() >= 1)
		{
			sDeathHint = "HardModeDeath";
		}
		
		int lRand = RandInt(0,2);
		if(lRand==0)	CheckPoint("checkFallDeath1", "PlayerStartArea_1", "CheckPointFallDeath", "Hints", sDeathHint);	
		if(lRand==1)	CheckPoint("checkFallDeath2", "PlayerStartArea_5", "CheckPointFallDeath", "Hints", sDeathHint);	
		if(lRand==2)	CheckPoint("checkFallDeath2", "PlayerStartArea_7", "CheckPointFallDeath", "Hints", sDeathHint);	
	}
	
	PlaySoundAtEntity("fallaaaaaah", "11_fall", "Player", 0, false);
	PlaySoundAtEntity("fallaaaaaah2", "scare_male_terrified5", "Player", 0, false);
	
	FadeOut(1);
	
	AddTimer("death1", 0.5f, "TimerFallDeath");	
	AddTimer("death2", 1, "TimerFallDeath");	
}

void TimerFallDeath(string &in asTimer)
{	
	if(asTimer == "death1"){
		PlaySoundAtEntity("bump1", "player_bodyfall", "Player", 0, false);
		return;
	}	
	
	DisableDeathStartSound();
	AddPlayerHealth(-200);
	
	PlaySoundAtEntity("pain", "player_falldamage_max", "Player", 0, false);
	PlaySoundAtEntity("bump2", "player_bodyfall", "Player", 0, false);
}	

void AlexEndWordsVoiceOver()
{
	AddTimer("part3", 0.1f, "PlayEndCredits");
}

void PlayEffectVoice(string &in asEntryBase, int alStartIdx, int alEndIdx, string &in asCallback)
{	
	for(int i=alStartIdx; i<=alEndIdx; ++i)
	{
		string sEntry = asEntryBase;
		if(i<10) sEntry += "0";
		sEntry += i;
		
		AddEffectVoice(sEntry, "", "Voice", sEntry, false, "", 0,0 );
	}
	SetEffectVoiceOverCallback(asCallback);
}

void PlayEndCredits(string &in asInput)
{
	if(asInput == "part1")
	{
		StopPlayerLookAt();
		ExitInventory();
		SetInventoryDisabled(true);
		SetPlayerHealth(999.999f);
		SetPlayerSanity(999.999f);
		SetPlayerActive(false);
		ShowPlayerCrossHairIcons(false);
		SetSanityDrainDisabled(true);
		SetInDarknessEffectsActive(false);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		FadeOut(0.1f);
		StopMusic(0.1f, 0);
		StopMusic(0.1f, 1);
		StopMusic(0.1f, 2);
		StopMusic(0.1f, 3);
		StopMusic(0.1f, 4);
		StopMusic(0.1f, 5);
		StopMusic(0.1f, 6);
		StopMusic(0.1f, 7);
		StopMusic(0.1f, 8);
		StopMusic(0.1f, 9);
		StopMusic(0.1f, 10);
		FadeGlobalSoundVolume(0.0f, 0.1f);
		
		AddTimer("PlayerStartDarkPlace", 0.15f, "TeleportPlayer");
		AddTimer("part2", 2.5f, "PlayEndCredits");
	}
	else if(asInput == "part2")
	{
		PlayEffectVoice("CH03L29_Ending_Alexander_", 1, 2, "AlexEndWordsVoiceOver");
	}
	else if(asInput == "part3")
	{
		StartCredits("ending_alexander.ogg",false, "Ending", "MainCredits", 3);
	}
}

void ResetDoorIfBroken(string asDoor)
{
	if(GetPropHealth(asDoor) <= 0.0f)
	{
		ResetProp(asDoor);
	}
}

void CheckPointFallDeath(string &in asName, int alCount)
{
	//Do nothing??
	//I don't think so!
	if(GetHardModeEndingOn())
	{
		PlayEndCredits("part1");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	
	ResetDoorIfBroken("sewer_arched_2");
	ResetDoorIfBroken("sewer_arched_4");
	ResetDoorIfBroken("sewer_arched_6");
	SetLocalVarInt("EnemyMachineActive", 0);
	SetLocalVarInt("EnemyTunnelActive", 0);
	SetLocalVarInt("EnemyBruteActive", 0);
	SetEntityActive("AreaRoomCount_1", true);
	SetEntityActive("AreaRoomCount_2", true);
}

//------------------------------------------

///////////////////////////////////////////
// WIND BREEZE
////////////////////////////////////////////

//------------------------------------------

void CollideWindBreeze(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("BreezeActive")==1) return; //Another breeze is already playing.
	if(RandInt(0, 3)!=0) return;
	
	PlaySoundAtEntity("breeze", "27_wind.snt", asChild, 0, false);
	
	//The particles
	CreateParticleSystemAtEntityExt("breeze","ps_green_wind_breeze.ps", asChild, true, 1,1,1,0.5,true, 1, 2, 100, 110);
	
	//Set a var that a breeze is playing, so several do not play at the same time!
	SetLocalVarInt("BreezeActive", 1);
	AddTimer("BreezeOver",3,"TimerBreezeOver"); 
	
	AddDebugMessage("AreaCollide", false);
}

void TimerBreezeOver(string &in asTimer)
{
	SetLocalVarInt("BreezeActive", 0);
}


//------------------------------------------

///////////////////////////////////////////
// BARRIER MACHINE
////////////////////////////////////////////

//------------------------------------------

void InitBarrierMachine()
{
	float fSmallSpeed = 2.1f;
	float fLargeSpeed = fSmallSpeed * 1.3333f; //4/3 ratio on wheel size
	
	RotatePropToSpeed("barrier_machine_cog_1", 10, fSmallSpeed, 1, 0, 0, true, "");
	RotatePropToSpeed("barrier_machine_cog_3", 10, fLargeSpeed, 0, 0, -1, true, ""); 	
	RotatePropToSpeed("barrier_machine_cog_4", 10, fLargeSpeed, 0, 0, 1, true, ""); 
}


//------------------------------------------

///////////////////////////////////////////
// BARRIER TUNNEL
////////////////////////////////////////////

//------------------------------------------

void InitBarrierTunnel()
{
	float fRingSpeed = 1.0f;
	
	for(int i=2; i<=8; ++i)
	{
		float fDir = i%2==0 ? -1 : 1;	
		RotatePropToSpeed("barrier_ring02_"+i, 10, fRingSpeed,0,0,fDir, true, "");
	}
}

//------------------------------------------

void CollideTunnelDamage(string &in asParent, string &in asChild, int alState)
{
	//Enter area
	if(alState == 1)
	{
		AddQuest("22BarrierTunnel", "22BarrierTunnel");
		
		TimerTunnelDamage("");
	}
	//Leave area
	else
	{
		RemoveTimer("TunnelDamage");	
	}
}

void TimerTunnelDamage(string &in asTimer)
{
	AddPlayerBodyForce(0,0,9000*2.5f, false);
	GivePlayerDamage(10, "BloodSplat", true, false);
	PlayerReact(false, 0.5f);
	
	PlayGuiSound("ui_elec_damage.snt", 1.0f);
	
	AddTimer("TunnelDamage",2, "TimerTunnelDamage");		
}

void InteractAreaTunnelDamage(string &in asEntity)
{
	AddTimer(asEntity, 1.0f, "TimerInteractBackOn");
	TimerTunnelDamage("");
	
	AddQuest("22BarrierTunnel", "22BarrierTunnel");
}
void TimerInteractBackOn(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "Interact"+asTimer, true);
	
	RemoveTimer("TunnelDamage");
}

//------------------------------------------

void UpdateBarrierState()
{
	int lKeyPuzzlesCompleted = 0;
	
	// Check if machine is jammed
	if(GetLocalVarInt("MachineJammed")==1)
		lKeyPuzzlesCompleted++;
		
	// Check if orb is built
	if(GetGlobalVarInt("OrbsAddedCount")==6)
	{
		lKeyPuzzlesCompleted++;
	}
		
	AddDebugMessage("MachineJammed==" + GetLocalVarInt("MachineJammed") + " - OrbsAddedCount==" + GetGlobalVarInt("OrbsAddedCount") + " - KeyPuzzlesCompleted==" + lKeyPuzzlesCompleted, false);
	
	////////////////////////////
	//Either orb is completed or machine is jammed
	if(lKeyPuzzlesCompleted==1)
	{
		for(int i=1;i<=3;++i)
		{
			// Replace electro rings by weakened versions
			SetEntityActive("barrier_ring03_"+i, false);
			SetPropActiveAndFade("barrier_ring03_weakened_" + i, true, 0.25f);
			
			// Make lights weaker
			for(int i=1; i<=3; ++i)
			{
				FadeLightTo("barrier_pointlight_"+i, 0, 0, 0, 0, 0, 0.5f); 
				SetLightFlickerActive("barrier_pointlight_"+i,false);
				
				//FadeLightTo("barrier_pointlight_weak"+i, 0, 0, 0, 0, 0, 0.5f); 
				//SetLightFlickerActive("barrier_pointlight_"+i,false);
			}
			for(int i=1; i<=2; ++i)
			{
				FadeLightTo("barrier_spotlight_"+i, 0.4f, 0.4f, 0.6f, -1, 8, 0.5f); 
				SetLightFlickerActive("barrier_spotlight_"+i,false);
			}
		}
	}
	////////////////////////////
	//Both orb is completed and machine is jammed
	else if(lKeyPuzzlesCompleted==2)
	{
		if(GetToughModeOn() >= 1)
			SetDeathHint("Hints", "HardModeDeath");
		
		PlaySoundAtEntity("thump_end", "27_thump", "PSOrbStream_1", 0.0f, false);
		
		//The barrier can be walked through
		CompleteQuest("22BarrierTunnel", "22BarrierTunnel");
		
		if(GetLocalVarInt("OrbAbsorbing")==1)
		{
			// Turn electric effects off
			for(int i=1; i<=3; ++i)
			{	
				SetPropEffectActive("barrier_ring03_weakened_" + i, false, true);
			}
			// Turn lights off
			for(int i=1; i<=3; ++i)
			{
				FadeLightTo("barrier_pointlight_weak_"+i, 0, 0, 0, 0, 0, 0.5f); 
				SetLightFlickerActive("barrier_pointlight_weak_"+i,false);
			}
			for(int i=1; i<=2; ++i)
			{
				FadeLightTo("barrier_spotlight_weak_"+i, 0, 0, 0, 0, 0, 0.5f);
				SetLightFlickerActive("barrier_spotlight_weak_"+i,false);
			}
			
			//Stop the ambient track!
			StopMusic(2.5f, 0);
			
			//TODO: Remove looping energy sound here!
			//Did in timer instead
			
			// Remove Energy Stream
			DestroyParticleSystem("PSOrbGather");
			for(int i=1;i<=6; ++i)
			{
				DestroyParticleSystem("PSOrbStream_"+i);
			}
			DestroyParticleSystem("PSOrbEffect");
			AddTimer("TimerOrbExplode", 1.0, "TimerOrbExplode"); 
		}
	}
}

//----------------------------------------------------

void TimerOrbExplode(string &in asTimer)
{
	if(GetToughModeOn() >= 1)
		SetDeathHint("Hints", "HardModeDeath");
	
	if(GetLocalVarInt("EnemyBruteActive") == 1)
	{
		AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_brute_1"));
		AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_brute_2"));
	}
	else if(GetLocalVarInt("EnemyMachineActive") == 1)
	{
		AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"));
	}
	else if(GetLocalVarInt("EnemyTunnelActive") == 1)
	{
		AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"));
	}
	
	StartScreenShake(0.2f, 6, 0.5f, 3);
	CreateParticleSystemAtEntity("PSOrbShockwave", "ps_orb_shockwave.ps", "AreaOrbEffect", false);

	PlaySoundAtEntity("implodoelexplodo", "27_orb_implode.snt", "AreaOrbEffect", 0.0f, false);
	StopSound("Sound_18", 0.0f);
	StopSound("Sound_17", 4.0f);
	
	//Blow out candles
	SetLampLit("candlestick_floor*", false, false);
	SetLampLit("candle_floor_*", false, false);
	
	//Fade in blur light
	FadeLightTo("OrbLight", 0.3,0.6,1.0,1, 12, 0.2);
	AddTimer("TimerFadeOutExplodeLight", 4.5f, "TimerFadeOutExplodeLight");
	
	// Disable tunnel damage, so player can walk through
	SetEntityActive("AreaTunnelDamage", false);
	// Remove blocker
	SetEntityActive("block_box_block_box_1", false);
	//RemoveEntityCollideCallback("Player", "AreaTunnelDamage");
	//SetEntityPlayerInteractCallback("AreaTunnelDamage", "", false);
	
	// Make Orb disappear
	SetPropActiveAndFade("orb_assembly_6", false, 1);
	SetLampLit("orb_pedestal_1", false, false);
	
	// Play puzzle completed music and give sanity boost
	AddTimer("TimerBarrierGone", 7.5f - GetDifficultyDirectFactor(), "TimerBarrierGone");
	AddTimer("stopsparks", 29.0f, "TimerStopSparks");
}

void TimerFadeOutExplodeLight(string &in asTimer)
{
	FadeLightTo("OrbLight", 0,0,0,0, -1, 2);
	
	PlaySoundAtEntity("orbend", "29_hole_blue.snt", "AreaOrbEffect", 4.0f, false);
}

//------------------------------------------

void TimerBarrierGone(string &in asTimer)
{
	GiveSanityBoost();
	
	PlayMusic("27_puzzle_passage.ogg", false, 0.8f, 0.5f, 10, false);
	PlaySoundAtEntity("sparks", "27_spark", "AreaOrbEffect", 0.0f, true);
	
	if(GetEasyModeOn() <= 0 && GetLocalVarString("WhatCPArea") == "AreaTunnelCP")
	{
		if(GetLocalVarInt("EnemyBruteActive") == 1)
		{
			ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("servant_brute_1"));
			ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("servant_brute_2"));
		}
		else if(GetLocalVarInt("EnemyMachineActive") == 1)
		{
			ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"));
		}
		else if(GetLocalVarInt("EnemyTunnelActive") == 1)
		{
			ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"));
		}
	}
	else
	{
		AddDebugMessage("No chase because Player is inside " + GetLocalVarString("WhatCPArea"), false);
	}
}

void TimerStopSparks(string &in asTimer)
{
	StopSound("sparks", 0.0f);
}
//------------------------------------------

///////////////////////////////////////////
// DIARY PICKUP
////////////////////////////////////////////

//------------------------------------------

void PickDiary(string &in asEntity, string &in asType)
{
	PlayMusic("27_paper_daniel01.ogg", false, 0.3f, 0.5, 10, false);
}

//------------------------------------------

///////////////////////////////////////////
// PICK BUCKET OF TAR
////////////////////////////////////////////

//------------------------------------------

void PickBucketOfTar(string &in asEntity, string &in asType)
{
	SetGlobalVarInt("PickedBucketOfTar",1);	
}

//------------------------------------------

///////////////////////////////////////////
// MISC INTERACTIONS
////////////////////////////////////////////

//------------------------------------------

void InteractLargeGate(string &in asEntity)
{
	SetMessage("Ch02Level22", "InteractLargeGate", 3.0f);
	PlayGuiSound("close_gate.ogg", 0.7f);
	AddTimer(asEntity, 1.0f, "TimerLargeGate");
}
void TimerLargeGate(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractLargeGate", true);
}

//------------------------------------------

void InteractMachineRoomDoor(string &in asEntity)
{
	SetMessage("Ch02Level22", "InteractMachineRoomDoor", 0);
}

//------------------------------------------


//Player Reactions
void PlayerReact(bool bDamage, float fTime)
{
	if(bDamage)
		AddTimer("sanity", fTime, "TimerPlayerReactions");
	else
		AddTimer("scare", fTime, "TimerPlayerReactions");
	
	AddTimer("breath", fTime+2, "TimerPlayerReactions");
	AddTimer("breathl", fTime+4, "TimerPlayerReactions");
	
}
void TimerPlayerReactions(string &in asTimer)
{
	if(asTimer == "sanity"){
		GiveSanityDamage(10.0f, true);
		PlayGuiSound("react_scare", 0.9f);
	}
	if(asTimer == "scare"){
		GiveSanityDamage(10.0f, false);
		PlayGuiSound("react_scare", 0.9f);
	}
	if(asTimer == "breath")
		PlayGuiSound("react_breath", 0.7f);
		
	if(asTimer == "breathl")
		PlayGuiSound("react_breath", 0.5f);
}


//BRUTE AT Start
void CollideAreaBruteInside(string &in asParent, string &in asChild, int alState)
{
	//changed my mind i think
	//SetSwingDoorClosed("sewer_arched_2", true, true);
	//Play some wrecking the place sounds?
}


//BRUTE after breaking machine, if orb already broken
void EventGrunt02()
{
	//if(GetGlobalVarInt("OrbsAddedCount") != 6) return;
	if(GetEasyModeOn() >= 2)	return;
	
	SetSwingDoorDisableAutoClose("sewer_arched_2", true);
	SetSwingDoorClosed("sewer_arched_2", false, false);
	AddPropImpulse("sewer_arched_2", -3.0f, 0.0f, 0.0f, "World");
	
	SetSwingDoorDisableAutoClose("sewer_arched_2", true);
	SetSwingDoorClosed("sewer_arched_2", false, false);
	AddPropImpulse("sewer_arched_4", 0, 0.0f, -3.0f, "World");
	
	string sEnemyName = "unknown";
	string sEnemyState = "unknown";
	if(GetLocalVarInt("EnemyBruteActive") == 1)
	{
		sEnemyName = GetStringWithExtraModesSuffix("servant_brute_1");
		sEnemyState = GetEnemyStateName(sEnemyName);
		if(StringContains(sEnemyState, "Hunt") == false && StringContains(sEnemyState, "Alert") == false && StringContains(sEnemyState, "Attack") == false)
		{
			SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_1"), false);
			FadeEnemyToSmoke(GetStringWithExtraModesSuffix("servant_brute_1"), true);
			//SetLocalVarInt("EnemyBruteActive", 0);
		}
		else
			return;
	}
	else if(GetLocalVarInt("EnemyMachineActive") == 1)
	{
		sEnemyName = GetStringWithExtraModesSuffix("AreaMachineCP_Grunt");
		sEnemyState = GetEnemyStateName(sEnemyName);
		if(StringContains(sEnemyState, "Hunt") == false && StringContains(sEnemyState, "Alert") == false && StringContains(sEnemyState, "Attack") == false)
		{
			SetEntityActive(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), false);
			FadeEnemyToSmoke(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), true);
			SetLocalVarInt("EnemyMachineActive", 0);
		}
		else
			return;
	}
	else if(GetLocalVarInt("EnemyTunnelActive") == 1)
	{
		sEnemyName = GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt");
		sEnemyState = GetEnemyStateName(sEnemyName);
		if(StringContains(sEnemyState, "Hunt") == false && StringContains(sEnemyState, "Alert") == false && StringContains(sEnemyState, "Attack") == false)
		{
			SetEntityActive(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), false);
			FadeEnemyToSmoke(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), true);
			SetLocalVarInt("EnemyTunnelActive", 0);
		}
		else
			return;
	}
	TeleportEnemyToNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_2", true);
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_2"), true);
	SetLocalVarInt("EnemyBruteActive", 1);
}


///////
//CHECKPOINTS
void CollideAreaCP(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1)
		SetLocalVarString("WhatCPArea", asChild);

	else if(alState == -1)
		SetLocalVarString("WhatCPArea", "AreaMiddleCP");
	
	string sDeathHint = "DefaultDeath";
	if(GetToughModeOn() >= 1)
	{
		sDeathHint = "HardModeDeath";
	}
	
	CheckPoint(GetLocalVarString("WhatCPArea"), "PS_"+GetLocalVarString("WhatCPArea"), "CPCallLocation", "Hints", sDeathHint);
}

//Different CP depending on location of death.
void CPCallLocation(string &in asName, int alCount)
{
	if(GetHardModeEndingOn())
	{
		PlayEndCredits("part1");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	
	ResetDoorIfBroken("sewer_arched_2");
	ResetDoorIfBroken("sewer_arched_4");
	ResetDoorIfBroken("sewer_arched_6");
	SetLocalVarInt("EnemyBruteActive", 0);
	
	//A grunt is coming towards the player if in tunnel area, but not if all puzzles done
	if(asName == "AreaTunnelCP" && GetLocalVarInt(asName) != 1){
		TeleportEnemyToNode(GetStringWithExtraModesSuffix(asName+"_Grunt"), "PathNodeArea_129", true);
		SetEntityActive(GetStringWithExtraModesSuffix(asName+"_Grunt"), true);
		SetEntityActive("AreaRoomCount_1", true);
		SetEntityActive("AreaRoomCount_2", false);
		SetLocalVarInt("EnemyMachineActive", 0);
		SetLocalVarInt("EnemyTunnelActive", 1);
		
		SetLocalVarInt(asName, 1);
		return;
	}
	
	//A grunt is coming towards the player if in machine area
	if(asName == "AreaMachineCP" && GetLocalVarInt(asName) != 1){
		TeleportEnemyToNode(GetStringWithExtraModesSuffix(asName+"_Grunt"), "PathNodeArea_6", true);
		SetEntityActive(GetStringWithExtraModesSuffix(asName+"_Grunt"), true);
		SetEntityActive("AreaRoomCount_1", false);
		SetEntityActive("AreaRoomCount_2", true);
		SetLocalVarInt("EnemyMachineActive", 1);
		SetLocalVarInt("EnemyTunnelActive", 0);
		
		SetLocalVarInt(asName, 1);
		return;
	}
	
	//Look down into the void in the middle of level
	if(asName == "AreaMiddleCP" && GetLocalVarInt(asName) != 1){
		StartPlayerLookAt("AreaLookMIddle", 10.0f, 10.0f, "");
		AddTimer("AreaLookMIddle", 1.5f, "TimerStopLookAt");
		TeleportEnemyToNode(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), "PathNodeArea_77", true);
		SetEntityActive(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), true);
		SetEntityActive("AreaRoomCount_1", true);
		SetEntityActive("AreaRoomCount_2", false);
		SetLocalVarInt("EnemyMachineActive", 0);
		SetLocalVarInt("EnemyTunnelActive", 1);
		SetPlayerActive(false);
		
		SetLocalVarInt(asName, 1);
		return;
	}
	
	//Roaches crawls around the player if at the start
	if(asName == "AreaStartCP" && GetLocalVarInt(asName) != 1){
		SetEntityActive("cockroach_*", true);
		AddTimer("cockroach_", 20.0f, "TimerRemoveRoaches");
		TeleportEnemyToNode(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), "PathNodeArea_14", true);
		SetEntityActive(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), true);
		SetEntityActive("AreaRoomCount_1", false);
		SetEntityActive("AreaRoomCount_2", true);
		SetLocalVarInt("EnemyMachineActive", 1);
		SetLocalVarInt("EnemyTunnelActive", 0);
		
		SetLocalVarInt(asName, 1);
		return;
	}
	
	//A minor guaridan event should the player die more than one time at same area
	AddTimer("guaridancp", 2.0f, "TimerGuradianCP");
	
	SetLocalVarInt("EnemyMachineActive", 0);
	SetLocalVarInt("EnemyTunnelActive", 0);
	SetEntityActive("AreaRoomCount_1", true);
	SetEntityActive("AreaRoomCount_2", true);
}

void TimerRemoveRoaches(string &in asTimer)
{
	SetPropActiveAndFade(asTimer+"*", false, 5.0f);
}

void TimerStopLookAt(string &in asTimer)
{
	CreateParticleSystemAtEntity("ps", "ps_cave_monster_warn.ps", asTimer, false);
	PlaySoundAtEntity("sound", "04_warn.snt", asTimer, 0.0f, false);
	StartScreenShake(0.03f, 0.5f, 1.0f, 1.5f);
	
	StopPlayerLookAt();
	SetPlayerActive(true);
}

void TimerGuradianCP(string &in asTimer)
{
	StartScreenShake(0.02f, 1.0f, 1.5f, 2.5f);
	PlayGuiSound("guardian_distant.snt", 0.8f);
	SetRadialBlurStartDist(0.3f);
	FadeRadialBlurTo(0.3f, 0.3f);
	
	PlayerReact(false, 1.0f);
	
	AddTimer("stopradial", 5.0f, "TimerStopRadial");
}
void TimerStopRadial(string &in asTimer)
{
	FadeRadialBlurTo(0.0f, 0.1f);
}


////////////////////
//A little guaridan event for when going through tunnel
void CollideAreaExitGuardian(string &in asParent, string &in asChild, int alState)
{
	PlayGuiSound("guardian_ontop.snt", 0.8f);
	PlayMusic("10_event_coming.ogg", false, 0.7f, 0.0f, 10, false);
	StartScreenShake(0.1f, 1.0f, 1.5f, 2.5f);
	PlayerReact(false, 1.0f);
	SetRadialBlurStartDist(0.3f);
	FadeRadialBlurTo(0.3f, 0.3f);
	
	SetPropActiveAndFade("end_slime_*", true, 3.0f);
	PlaySoundAtEntity("slime1", "slime_loop.snt", "end_slime_1", 1.0f, false);
	PlaySoundAtEntity("slime2", "slime_loop.snt", "end_slime_2", 1.0f, false);
	PlayGuiSound("guardian_idle6.ogg", 0.6f);
	
	SetEntityActive("SlimeDamageArea_9", true);

	AddTimer("3", 0.1f, "TimerSounds");
	AddTimer("5", 0.3f, "TimerSounds");
	AddTimer("6", 0.6f, "TimerSounds");
	AddTimer("7", 0.8f, "TimerSounds");
	
	AddTimer("stop", 4.0f, "TimerSounds");
}
void TimerSounds(string &in asTimer)
{
	if(asTimer == "stop")
		FadeRadialBlurTo(0.0f, 0.1f);
	else
		PlaySoundAtEntity("slafs", "slime_create.snt", "end_slime_"+asTimer, 0.0f, false);
}

void EntityCallEnemy(string &in asEntity, string &in asType)
{
	if(asEntity == GetStringWithExtraModesSuffix("servant_brute_1") || asEntity == GetStringWithExtraModesSuffix("servant_brute_2"))
		SetLocalVarInt("EnemyBruteActive", 0);
	else if(asEntity == GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"))
		SetLocalVarInt("EnemyMachineActive", 0);
	else if(asEntity == GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"))
		SetLocalVarInt("EnemyTunnelActive", 0);
}

void CollidePlayerRoom(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaRoomCount_1")
	{
		if(GetLocalVarInt("EnemyTunnelActive") != 1 && GetLocalVarInt("EnemyBruteActive") != 1 && GetEasyModeOn() <= 1)
		{
			if(GetLocalVarInt("MachineJammed") != 1 || GetToughModeOn() >= 1)
			{
				SetLocalVarInt("EnemyMachineActive", 1);
				TeleportEnemyToNode(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), "PathNodeArea_6", true);
				SetEntityActive(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), true);
				SetEntityActive(asChild, false);
				if(GetToughModeOn() >= 1)	AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"));
			}
		}
	}
	else if(asChild == "AreaRoomCount_2")
	{
		if(GetLocalVarInt("EnemyMachineActive") != 1 && GetLocalVarInt("EnemyBruteActive") != 1 && GetEasyModeOn() <= 1)
		{
			if(GetGlobalVarInt("OrbsAddedCount") != 6 || GetToughModeOn() >= 1)
			{
				SetLocalVarInt("EnemyTunnelActive", 1);
				TeleportEnemyToNode(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), "PathNodeArea_129", true);
				SetEntityActive(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), true);
				SetEntityActive(asChild, false);
				if(GetToughModeOn() >= 1)	AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"));
			}
		}
	}
}

////////////////////////////
// Run first time starting map
void OnStart()
{
	for(int i=0; i<gvsDangerousLampsArray.length(); i++)
	{
		SetEntityCallbackFunc(gvsDangerousLampsArray[i], "OnLampStateChange");
	}
	
	SetMapDisplayNameEntry("Chancel");
	
	
	///////////////////////////
	// Debug
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		if(HasItem("bucket_of_tar_1") == false) GiveItemFromFile("bucket_of_tar_1", "bucket_of_tar.ent");
		
		for(int i=1; i<=6; ++i)
		{
			if(HasItem("OrbPiece_"+i) == false) GiveItemFromFile("OrbPiece_"+i, "orbpiece_crimson.ent");
		}
		
		//SetGlobalVarInt("OrbsAddedCount", 6);
		//SetGlobalVarInt("TarOnPedestal",1);
		//SetLocalVarInt("MachineJammed",1);
	}
	
	////////////////////
	//Init stuff
	InitBarrierMachine();
	InitBarrierTunnel();
	
	//Enemy
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_1"), "PathNodeArea_155", GetEnemyIdleTime(3.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_1"), "PathNodeArea_128", 1.0f, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_14", GetEnemyIdleTime(6.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_155", 2.5f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_48", GetEnemyIdleTime(3.0f), "");
	if(GetEasyModeOn() <= 0)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_59", 1.0f, "");
	if(GetToughModeOn() >= 1)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_52", 0.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_58", 0.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_61", 0.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_51", 0.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_48", 2.0f, "");
	}
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_65", GetEnemyIdleTime(3.0f), "");
	if(GetEasyModeOn() <= 0)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_152", 8.0f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_128", 1.0f, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), "PathNodeArea_151", GetEnemyIdleTime(6.0f), "");
	if(GetEasyModeOn() <= 0)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), "PathNodeArea_153", 1.0f, "");
		if(GetToughModeOn() >= 1)
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), "PathNodeArea_154", 1.0f, "");
	}
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), "PathNodeArea_91", 1.0f, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), "PathNodeArea_18", GetEnemyIdleTime(6.0f), "");
	if(GetEasyModeOn() <= 0)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), "PathNodeArea_46", 2.0f, "");
		if(GetToughModeOn() >= 1)
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), "PathNodeArea_57", 1.0f, "");
	}
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), "PathNodeArea_91", 1.0f, "");
	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_1"), true);
	SetLocalVarInt("EnemyBruteActive", 1);
	
	////////////////////
	// Collide Callbacks
	AddEntityCollideCallback("Player", "AreaFallDeath", "CollideFallDeath", false, 1);
	AddEntityCollideCallback("Player", "AreaTunnelDamage", "CollideTunnelDamage", false, 0);
	AddEntityCollideCallback("Player", "AreaRoomCount_1", "CollidePlayerRoom", false, 1);
	AddEntityCollideCallback("Player", "AreaRoomCount_2", "CollidePlayerRoom", false, 1);
	
	for(int i=1; i<=14; ++i)
	{
		if(i==7 || i==8) continue; //Not available any more.
		
		AddEntityCollideCallback("Player", "AreaWindBreeze_"+i, "CollideWindBreeze", false, 1);
	}
	
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_brute_1"), "AreaBruteInside", "CollideAreaBruteInside", true, 1);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_brute_1"), "AreaFallDeath", "CollideFallDeath", false, 1);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_brute_2"), "AreaFallDeath", "CollideFallDeath", false, 1);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("AreaTunnelCP_Grunt"), "AreaFallDeath", "CollideFallDeath", false, 1);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("AreaMachineCP_Grunt"), "AreaFallDeath", "CollideFallDeath", false, 1);
	
	////////////////////
	// Cogwheel damage setup
	for(int i=1;i<=3;++i)
	{
		AddEntityCollideCallback("Player", "AreaCogwheelDamage_"+i, "CollidePlayerCog", false, 1);
		SetEntityPlayerInteractCallback("AreaCogwheelDamage_"+i, "InteractCogWheel", false);
	}
	
	AddEntityCollideCallback("Player", "AreaTunnelCP", "CollideAreaCP", false, 0);
	AddEntityCollideCallback("Player", "AreaMachineCP", "CollideAreaCP", false, 0);
	AddEntityCollideCallback("Player", "AreaStartCP", "CollideAreaCP", false, 0);
	
	AddEntityCollideCallback("Player", "AreaExitGuardian", "CollideAreaExitGuardian", true, 1);
	
	//Interact
	SetEntityPlayerInteractCallback("AreaTunnelDamage", "InteractAreaTunnelDamage", true);
	
	////////////////////
	// Jamming Collide callbacks
	for(int i=1; i<=2; ++i)
	{
		///////////////
		//Small objects
		AddEntityCollideCallback("stone_small01*", "AreaStoneCogs_"+i, "CollideSmallObjectWithCogs", false, 1);
		AddEntityCollideCallback("hammer*", "AreaStoneCogs_"+i, "CollideSmallObjectWithCogs", false, 1);
		AddEntityCollideCallback("sheet_metal*", "AreaStoneCogs_"+i, "CollideSmallObjectWithCogs", false, 1);
		AddEntityCollideCallback("saw_2", "AreaStoneCogs_"+i, "CollideSmallObjectWithCogs", false, 1);
				
		///////////////
		//Weak objects
		AddEntityCollideCallback("wood_box*", "AreaStoneCogs_"+i, "CollideWeakObjectWithCogs", false, 1);
		AddEntityCollideCallback("flask*", "AreaStoneCogs_"+i, "CollideWeakObjectWithCogs", false, 1);
				
		///////////////
		//Correct objects
		AddEntityCollideCallback("storage_box_wood*", "AreaStoneCogs_"+i, "CollideCorrectObjectWithCogs", false, 1);
		AddEntityCollideCallback("rock_debris*", "AreaStoneCogs_"+i, "CollideCorrectObjectWithCogs", false, 1);
	}
	
	////////////////////
	// Use Item Callbacks
	AddUseItemCallback("StringOnPedestal", "string_pile_2", "AreaOrbEffect", "UseStringOnPedestal", false);
	AddUseItemCallback("StringOnPedestal", "string_pile_2", "orb_pedestal_1", "UseStringOnPedestal", false);
	
	// Remove tar on pedestal interaction if already done
	if(GetGlobalVarInt("TarOnPedestal")==0){
		AddUseItemCallback("TarOnPedestal","bucket_of_tar_1", "AreaOrbEffect", "UseTarOnPedestal", true);
		AddUseItemCallback("TarOnPedestal","bucket_of_tar_1", "orb_pedestal_1", "UseTarOnPedestal", true);
	}	
	
	for(int i=1; i<=6; ++i)
	{
		AddUseItemCallback("AddOrb"+i,"OrbPiece_"+i, "AreaOrbEffect", "UseOrbPieceOnPedestal",false); 
		AddUseItemCallback("AddOrb"+i,"OrbPiece_"+i, "orb_pedestal_1", "UseOrbPieceOnPedestal",false); 
		
		//Be able to use on orb pieces aswell
		for(int j=1; j<=5; ++j)
			AddUseItemCallback("AddOrb"+i,"OrbPiece_"+i, "orb_assembly_"+j, "UseOrbPieceOnPedestal",false); 
	}
	
	////////////////////
	// Init map from last time
	
	//Is bucked of tar picked up?
	if(GetGlobalVarInt("PickedBucketOfTar")==0)
		SetEntityActive("bucket_of_tar_1", true);
		
	//How many orb pieces have been placed so far? 
	int lNumOfOrbPieces = GetGlobalVarInt("OrbsAddedCount");
	if(lNumOfOrbPieces > 0)
	{
		SetEntityActive("orb_assembly_"+lNumOfOrbPieces, true);	
		
		//Remove interact callback on pedestal
		SetEntityPlayerInteractCallback("AreaOrbEffect","", false);
	}
	
	//Tar on pedestal?
	if(GetGlobalVarInt("TarOnPedestal")==1)
	{
		SetEntityActive("orb_pedistal_tar_1", true);		
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{	 
	PreloadSound("27_wind"); PreloadSound("impact_metal_high"); PreloadSound("break_wood_metal"); PreloadSound("break_glass_bottle");
	PreloadSound("27_jam"); PreloadSound("27_break"); PreloadSound("22_orb_loose"); PreloadSound("29_hole_open");
	PreloadSound("29_hole_blue"); PreloadSound("27_energy_loop"); PreloadSound("11_fall"); PreloadSound("player_bodyfall");
	PreloadSound("player_falldamage_max"); PreloadSound("27_thump"); PreloadSound("27_orb_implode"); PreloadSound("27_spark");
	PreloadSound("slime_loop"); PreloadSound("react_breath"); PreloadSound("react_scare"); PreloadSound("guardian_distant");
	PreloadSound("guardian_ontop"); PreloadSound("guardian_idle6");
	
	PlayMusic("18_amb.ogg", true, 0.8, 4, 0, true);
	
	SetLocalVarInt("EnemyMachineActive", 0);
	SetLocalVarInt("EnemyTunnelActive", 0);
	
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
	
	string sEnemyName = "";
	
	sEnemyName = "grunt";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
	
	sEnemyName = "brute";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
	
	sEnemyName = "suitor";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	FadeRadialBlurTo(0.0f, 0.0f);
	
	SetLocalVarInt("EnemyMachineActive", 0);
	SetLocalVarInt("EnemyTunnelActive", 0);
	SetLocalVarInt("EnemyBruteActive", 0);
}