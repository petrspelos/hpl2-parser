
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "28_inner_sanctum";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {0};
int[] gviEasierOilPotionsCodesArray = {0};
int[] gviEasierHealthPotionsCodesArray = {0};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {0};
int[] gviNormalOilPotionsCodesArray = {0};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {0};
int[] gviToughOilPotionsCodesArray = {0};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

//////////////////////////////////////////////////////////
// ROAR HELPER
//////////////////////////////////////////////////////////

//--------------------------------------------------------

void TimerDistantHowl(string &in asTimer)
{
	PlaySoundAtEntity("howl","guardian_distant1", "Player", 0, false);
	
	AddTimer("StopRadialBlur", 4.5f, "TimerStopRadialBlur");
	if(asTimer=="AddScareReactions")
	{
		AddTimer("react_scare", 0.5f, "TimerScareReaction");
		AddTimer("react_breath", 2.5f, "TimerScareReaction");
	}
	
	StartScreenShake(0.01f, 0.0f, 2.0f, 4.0f);
	
	SetRadialBlurStartDist(0.2f);
	FadeRadialBlurTo(0.09, 0.015f);
}

void TimerStopRadialBlur(string &in asTimer)
{
	AddDebugMessage("Stopping howl blur.", false);
	FadeRadialBlurTo(0, 0.02f);
}

void TimerScareReaction(string &in asTimer)
{
	PlayGuiSound(asTimer, 0.7f);
	
	if(asTimer == "react_scare")
	{
		float fAmount = 5.0f;
		
		if(GetToughModeOn() == 2)
		{
			fAmount = 9.0f;
		}
		else
		if(GetToughModeOn() == 1)
		{
			fAmount = 7.0f;
		}
		else
		if(GetEasyModeOn() == 1)
		{
			fAmount = 3.0f;
		}
		else
		if(GetEasyModeOn() == 2)
		{
			fAmount = 1.0f;
		}
		else
		{
			fAmount = 5.0f;
		}
		
		GiveSanityDamage(fAmount, true);
	}
}

//--------------------------------------------------------

//////////////////////////////////////////////////////////
// SAFETY DOOR
//////////////////////////////////////////////////////////

//--------------------------------------------------------

// Player interacts with safety door, add quest
void PlayerInteractDoor(string &in asEntity)
{
	//Show message
	SetMessage("Ch03Level28", "CantOpenDoor", 0);
	
	//Locked sound
	PlayGuiSound("17_attach_crank", 0.5f);
	
	SetMoveObjectState(asEntity, 0.05f);
	
	AddTimer(asEntity, 0.4f, "TimerCloseGate");
	AddTimer("sound", 1.0f, "TimerCloseGate");
	
	if(asEntity !=  "safety_large_vert_1") return;
	
	//Wait 4 seconds and then give a quest.
	if(QuestIsAdded("20SafetyDoorClosed")==false)
		AddTimer("SafetyDoorQuest", 1.0f, "TimerSafetyDoorQuest");
}

void TimerCloseGate(string &in asTimer)
{
	if(asTimer == "sound"){
		PlayGuiSound("close_gate.ogg", 0.5f);
	} else{
		SetMoveObjectState(asTimer, 0.00f);
		
		SetEntityPlayerInteractCallback(asTimer, "PlayerInteractDoor", true);	
	}
}

void TimerSafetyDoorQuest(string &in asTimer)
{
	AddQuest("28DoorShut", "28DoorShut");
}

// Remove quest if the door is collapsed and gotten in the checkpoint area - DISABLED
void CollideCheckCollapsedDoor(string &in asEntity, string &in asChild, int alState)
{
	if(GetLocalVarInt("DoorCollapsed")==0)
		return;
	CompleteQuest("28DoorShut", "28DoorShut");
}

//--------------------------------------------------------

//////////////////////////////////////////////////////////
// PICK NOTE EVENT
//////////////////////////////////////////////////////////

//--------------------------------------------------------

// Player picks diary page, start guardian event
void PickDiary(string &in asItem, int alEntryIdx)
{
	AddDebugMessage("Picked diary page", false);
	PlayMusic("28_paper_daniel01.ogg", false, 0.4f, 0.5f, 10, false);
		
	//DISABLED HERE, AFTER FIRST ALTAR INSTEAD AND NOT THE MAIN LARGE DOOR, THE SMALL ENTRANCE INSTEAD
	//AddTimer("TimerGuardianRoar", 2.0f, "TimerGuardianRoar");
}

//--------------------------------------------------------

// Activate slime packs in passage to east shrine
void TimerPreSlimeShow(string &in asTimer)
{
	AddDebugMessage("Making "+asTimer+" appear!", false);
	SetPropActiveAndFade(asTimer + "*", true, 1);
	
	PlaySoundAtEntity("slimeappear", "slime_create.snt", "Player", 0.5f, false);
}

// Activate slime at central room, start roaring sound and screen shake
void TimerGuardianRoar(string &in asTimer)
{
	// Make slime appear
	for(int i=0;i<=3;++i)
	{
		AddTimer("pre"+(3-i), 0.25f*i, "TimerPreSlimeShow");
	}
	
	SetPropActiveAndFade("slime*", true, 1);
		
	// Set up pinkish light
	FadeLightTo("PointLight_11_slime", -1, -1, -1, -1, 9, 1);
	FadeLightTo("PointLight_7", -1, -1, -1, -1, 0, 1);
	
	// Set up door break
	//AddTimer("TimerGuardianDoorBreak", 3, "TimerGuardianDoorBreak");
	
	StartScreenShake(0.1f, 0.5f, 0.5f, 2.0f);
	PlayGuiSound("guardian_idle6.ogg", 1.0f);
	
	//Some more effects for the slime appearing
	PlaySoundAtEntity("bang1", "25_guardian_slime_appear.snt", "Player", 0.0f, false);
	PlaySoundAtEntity("slime1", "slime_loop.snt", "AreaSlimeSound_1", 1.0f, true);
	PlaySoundAtEntity("slime2", "slime_loop.snt", "AreaSlimeSound_2", 1.0f, true);
	PlaySoundAtEntity("slime3", "slime_loop.snt", "AreaSlimeSound_3", 1.0f, true);
	PlaySoundAtEntity("slime4", "slime_loop.snt", "AreaSlimeSound_4", 1.0f, true);
	PlaySoundAtEntity("slime5", "slime_loop.snt", "AreaSlimeSound_5", 1.0f, true);
	CreateParticleSystemAtEntity("slimeps1", "ps_slime_fog.ps", "AreaSlimeSound_1", true);
	CreateParticleSystemAtEntity("slimeps2", "ps_slime_fog.ps", "AreaSlimeSound_2", true);
	CreateParticleSystemAtEntity("slimeps3", "ps_slime_fog.ps", "AreaSlimeSound_3", true);
	CreateParticleSystemAtEntity("slimeps4", "ps_slime_fog.ps", "AreaSlimeSound_4", true);
	CreateParticleSystemAtEntity("slimeps5", "ps_slime_fog.ps", "AreaSlimeSound_5", true);
	
	for(int i=1;i<=9;i++)
		SetEntityActive("SlimeDamageArea_"+i, true);
	
	//Function was triggered because player did not lock door for intro event
	if(GetLocalVarInt("GuardianInRoom") == 1)
		AddTimer("playerdeath", 4.0, "TimerPlayerDeath");
	
	//Function was triggered because player locked door for intro event and later completed first altar.
	if(GetLocalVarInt("GuardianInRoom") == 0){
		SetEntityActive("safety_normal_vert_4", true);
		SetEntityActive("safety_normal_vert_1", false);
		
		PlaySoundAtEntity("bang2", "28_break_wood.snt", "AreaSeeLever", 0.0f, false);
		PlaySoundAtEntity("bang3", "28_break_rock.snt", "AreaSeeLever", 0.0f, false);
		
		StopMusic(1.0f, 10);
		PlayMusic("02_amb_strange.ogg", true, 1, 1, 0, true);
	
		// Sound and screen shake
		AddTimer("AddScareReactions", 0.5f, "TimerDistantHowl");
	}
}

// Create particles, play break sound and set door to collapsed 
// THIS TIMER IS DISABLED
void TimerGuardianDoorBreak(string &in asTimer)
{	
	// TODO: Maybe add some other sound? explosion_rock_large is like starting to get 
	PlaySoundAtEntity("DoorBreak", "explosion_rock_large", "AreaBreakDoor2", 0, false);
	StartScreenShake(0.2f, 0, 1, 0.2f);
	
	// Particles here
	CreateParticleSystemAtEntity("cloud1", "ps_break_cavein.ps", "AreaBreakDoor1", false);
	CreateParticleSystemAtEntity("cloud2", "ps_break_cavein.ps", "AreaBreakDoor2", false);
	CreateParticleSystemAtEntity("cloud3", "ps_break_cavein.ps", "AreaBreakDoor3", false);
	
	// Break door here
	SetLocalVarInt("DoorCollapsed", 1);
	SetPropActiveAndFade("safety_large_vert_1", false, 0.1f);
}

//--------------------------------------------------------

////////////////////////////////
// NEW PUZZLE FOR DOOR
////////////////////////////////

//--------------------------------------------------------

//Touch  one of the two altars activates two areas in the same room and a bunch of effects and sounds.
void InteractTouchAltar(string &in asEntity)
{
	// If already activated, only damage sanity
	if(GetLocalVarInt(asEntity+"Activated")==1)
	{
		GiveSanityDamage(2.5f, true);
		return;
	}
	
	SetLocalVarInt(asEntity +"Activated", 1);
	
	SetEntityActive(asEntity+"_Ground", true);
	
	//SetEntityPlayerLookAtCallback(asEntity+"_Wall", "LookAtAltarWall", false);

	SetLampLit(asEntity+"_Light_*", false, true);

	PlayGuiSound("sanity_heartbeat.snt", 1.0f);
	PlayGuiSound("19_inject.ogg", 0.4f);
	PlayGuiSound("general_wind_whirl.snt", 0.5f);
	
	PlaySoundAtEntity("blood", "28_touch", "Player", 0.05f, false);
	AddTimer("blood", 1.0f, "TimerBloodSound");
	
	SetRadialBlurStartDist(0.2f);
	FadeRadialBlurTo(0.2f, 0.1f);
		
	AddTimer("react_scare", 0.5f, "TimerPlayerReact");
	AddTimer("react_breath", 2.0f, "TimerPlayerReact");
	AddTimer("react_breath", 4.0f, "TimerPlayerReact");
	AddTimer("stopeffect", 8.0f, "TimerPlayerReact");
	
	GivePlayerDamage(10.0f, "BloodSplat", false, false);
	
	SetEntityActive(asEntity+"_knife", false);
	SetEntityActive(asEntity+"_knife_blood", true);
	
	//Did not look so good
	//SetPropActiveAndFade(asEntity+"_knife", false, 0.5f);
	//SetPropActiveAndFade(asEntity+"_knife_blood", true, 0.5f);
	
	FadeLightTo(asEntity+"_AltarLight", 0.6f, 0.0f, 0.0f, 1.0f, -1, 1);
	FadeLightTo(asEntity+"_GroundLight", 0.8f, 0.0f, 0.0f, 1.0f, -1, 1);

	FadeLightTo(asEntity+"_LightPoint_1", 0.15f, 0.05f, 0.0f, -1, -1, 1);
	FadeLightTo(asEntity+"_LightPoint_2", 0.15f, 0.05f, 0.0f, -1, -1, 1);
	
	AddEntityCollideCallback("Player", asEntity+"_Ground", "CollideAltarGround", false, 0);
	
	AddDebugMessage("Activate Areas", false);
}
void TimerBloodSound(string &in asTimer)
{
	StopSound("blood", 1.0f);
}
void TimerPlayerReact(string &in asTimer)
{
	PlaySoundAtEntity(asTimer, asTimer, "Player", RandFloat(0.0f, 1.0f), false);
	
	if(asTimer == "stopeffect")
		FadeRadialBlurTo(0.0f, 0.1f);
}

//Stand at the mark on ground to activate look at for wall ornament over altar
void CollideAltarGround(string &in asParent, string &in asChild, int alState)
{
	string sChild = StringSub(asChild, 0, 7);
		
	//When in area it is possible to look at altar and a red light shows this, also first time a bunch of effects to hint of what to do
	if(alState == 1){
		SetLampLit(sChild+"_Light2_*", false, true);
		
		FadeLightTo(sChild+"_LightPoint_3", 0.15f, 0.05f, 0.0f, -1, -1, 1);
		FadeLightTo(sChild+"_AltarLight", 0.0f, 0.0f, 0.0f, 0.0f, -1, 1);
		FadeLightTo(sChild+"_GroundLight", 0.6f, 0.0f, 0.0f, 1.0f, -1, 1);
		FadeLightTo(sChild+"_HintLight", 0.3f, 0.0f, 0.0f, 1.0f, -1, 0.5f);
	
		PlaySoundAtEntity(sChild+"_groundloop", "28_ground.snt", "Player", 0.5f, false);
		
		SetEntityActive(sChild+"_Wall", true);
		
		if(GetLocalVarInt(sChild) == 0)
			PlayGuiSound("general_wind_whirl.snt", 0.4f);
		SetLocalVarInt(sChild, 1);
		
		AddDebugMessage("Activate "+sChild+"_Wall", false);
	}
	
	//When leaving area, not possible to look at altar and sound and red light clues fade out
	else if(alState == -1){
		SetEntityActive(sChild+"_Wall", false);
		//RemoveTimer(sChild+"_Wall");
		
		//FadeLightTo(sChild+"_HintLight", 0.0f, 0.0f, 0.0f, 0.0f, -1, 0.5f);
		
		StopSound(sChild+"_groundloop", 0.5f);
		//StopSound(sChild+"_wallloop", 0.5f);
		
		AddDebugMessage("Disabled "+sChild+"_Wall", false);
	}
	
	LookAtAltarWall(sChild+"_Wall", alState);	//Instead of looking at wall, just trigger it on collide with ground.
}

//Looking at wall ornament begins a timer
void LookAtAltarWall(string &in asEntity, int alState)
{
	string sChild = StringSub(asEntity, 0, 7);
	
	//Looking at altar will make it shin brighter red and a sound is heard
	if(alState == 1){
		RemoveTimer(asEntity);
		AddTimer(asEntity, 3.0f, "TimerCompletePuzzle");
		
		FadeLightTo(sChild+"_HintLight", 0.9f, 0.0f, 0.0f, -1, -1, 2.0f);
		
		PlaySoundAtEntity(sChild+"_wallloop", "28_wall.snt", "Player", 0.1f, false);
	}
		
	//The light and sound fade out if looking away
	else{
		RemoveTimer(asEntity);
		StopSound(sChild+"_wallloop", 0.1f);
		FadeLightTo(sChild+"_HintLight", 0.3f, 0.0f, 0.0f, -1, -1, 0.5f);
	}
	
	AddDebugMessage("Look at state: "+alState, false);
}

//If looking the timer amount activte wall ornament, it goes square red and sound/effects are played
void TimerCompletePuzzle(string &in asTimer)
{
	AddDebugMessage("Part Complete!", false);
	
	AddLocalVarInt("PuzzleComplete", 1);
	
	string sChild = StringSub(asTimer, 0, 7);
	
	FadeLightTo(sChild+"_WallLight", 0.5f, 0.0f, 0.0f, 1.0f, -1, 2);
	FadeLightTo(sChild+"_GroundLight", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2);
	FadeLightTo(sChild+"_HintLight", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2);
	
	SetEntityActive(asTimer, false);
	SetEntityActive(sChild+"_Ground", false);
	
	StopSound(sChild+"_groundloop", 2.0f);
	StopSound(sChild+"_wallloop", 2.0f);
	
	PlaySoundAtEntity("dones2", "28_done02.snt", "Player", 0.0f, false);
	PlaySoundAtEntity("dones3", "28_done03.snt", sChild, 0.0f, false);
	PlaySoundAtEntity("dones", "28_done.snt", sChild, 0.0f, false);
	
	float fAmount = 25.0f;
	
	if(GetToughModeOn() == 2)
	{
		fAmount = 41.0f;
	}
	else
	if(GetToughModeOn() == 1)
	{
		fAmount = 31.0f;
	}
	else
	if(GetEasyModeOn() == 1)
	{
		fAmount = 11.0f;
	}
	else
	if(GetEasyModeOn() == 2)
	{
		fAmount = 1.0f;
	}
	else
	{
		fAmount = 21.0f;
	}
	
	GiveSanityDamage(fAmount, true);
	
	//Both walls have been activated, this triggers the old slime event and also opens he large door
	if(GetLocalVarInt("PuzzleComplete") == 2){
		SetEntityActive("slime_entry_5_5", false);	//Remove the area that kills player from the intro event
		SetEntityActive("slime_entry_4_5", false);
		
		AddTimer("TimerGuardianRoar", 4.0f, "TimerGuardianRoar");
		
		//AddTimer("SmallAttack", 6.0f, "TimerGuardianHit");
		
		AddTimer("WallLightOut", 4.0f, "TimerWallLightOut");
		AddTimer("Endthings", 6.0f, "TimerEndThings");
		
		SetMoveObjectState("safety_large_vert_1", 1.0f);
		SetEntityPlayerInteractCallback("safety_large_vert_1", "", false);	//Disabled interact on saftey door
		
		StartScreenShake(0.01f, 0.5f, 0.5f, 2.0f);

		CompleteQuest("28DoorShut", "28DoorShut");

		PlayMusic("16_puzzle_bridge.ogg", false, 0.7f, 1.0f, 10, false);
		
		StopSound("Sound_2", 12.0f);
		StopMusic(12.0f, 0);

		PlaySoundAtEntity("rock", "28_rotating_rock.snt", "AreaEndDoor", 12.0f, true);
		PlaySoundAtEntity("iii", "28_terror_meter.snt", "Player", 12.0f, true);
		PlaySoundAtEntity("dooropen", "door_safety_open.snt", "safety_large_vert_1", 0.0f, false);
		
		FadeGlobalSoundSpeed(0.8f, 12.0f);
		
		for(int i =1;i<=19;i++) 
			StopSound("torch_static01_"+i+"_Sound_1", 12.0f);
		
		StopSound("slime1", 12.0f); StopSound("slime2", 12.0f);
		StopSound("slime3", 12.0f); StopSound("slime4", 12.0f);
		StopSound("slime5", 12.0f);
	}
}
//Fadeout square lights for altars when puzzle done.
void TimerWallLightOut(string &in asTimer)
{
	FadeLightTo("Altar_1_WallLight", 0.0f, 0.0f, 0.0f, 1.0f, -1, 2);
	FadeLightTo("Altar_2_WallLight", 0.0f, 0.0f, 0.0f, 1.0f, -1, 2);
}
//Stop music and only play heartbeat + breath sound for rest of level + some other ambient sounds
void TimerEndThings(string &in asTimer)
{
	StopMusic(8.0f, 10);
	AddTimer("react_breath_slow", 4.0f, "TimerEndReact");
	AddTimer("sanity_heartbeat", 2.0f, "TimerEndReact");
}
void TimerEndReact(string &in asTimer)
{
	if(asTimer == "sanity_heartbeat"){
		PlayGuiSound(asTimer+".snt", 0.9f);
		AddTimer("sanity_heartbeat", 2.0f, "TimerEndReact");
	}
	else{
		PlayGuiSound(asTimer+".snt", 0.4f);
		AddTimer("react_breath_slow", 4.0f, "TimerEndReact");
	}
}
//When large door open, the player gets a constant small hit from the guardian to stress for the final battle.
//Disabled and replaced with the areas instead
void TimerGuardianHit(string &in asTimer)
{
	StartScreenShake(0.05f, 0.5f, 0.5f, 0.5f);
	
	PlayGuiSound("water_lurker_eat_rev2.ogg", 0.2f);
	PlayGuiSound("attack_claw_hit03.ogg", 0.2f);
	
	GivePlayerDamage(2, "BloodSplat", true, false);	
	
	AddTimer("SmallAttack", RandFloat(3.0f,6.0f), "TimerGuardianHit");
}

//----------------------------------------------------------

//////////////////////////////////
//END HALL - close the large door behind the player
//////////////////////////////////

//----------------------------------------------------------

void CollideAreaCloseDoor(string &in asParent, string &in asChild, int alState)
{
	PlayGuiSound("guardian_activated.snt", 0.8f);
	StartScreenShake(0.01f, 1.0f, 1.0f, 1.0f);
	SetMoveObjectState("safety_large_vert_1", 0.0f);
	
	RemoveTimer("SmallAttack");
}

//----------------------------------------------------------

//////////////////////////////////
//SEE NOTE HINT  
//////////////////////////////////

//----------------------------------------------------------

//Point vision to the table to hint about the note (as it is no longer requiered to pickup for advancement)

void CollideAreaSeeNote(string &in asParent, string &in asChild, int alState)
{
	StartPlayerLookAt("note_generic_1", 4.0f, 4.0f, "");
	PlayMusic("04_puzzle_acid.ogg", false, 1.0f, 1.0f, 10, false);
	AddTimer("EndLookAt", 1.0f, "TimerEndLookAt");
	AddTimer("music", 4.0f, "TimerEndLookAt");
}
void TimerEndLookAt(string &in asTimer)
{
	StopPlayerLookAt();
	
	if(asTimer == "music")
		StopMusic(4.0f, 10);
}

//----------------------------------------------------------

////////////////////////////////////////////
//GUARDIAN INTRO
////////////////////////////////////////////

//----------------------------------------------------------

//A faint guardian sound at start of level
void CollideAreaGuardianAmb(string &in asParent, string &in asChild, int alState)
{
	PlayGuiSound("guardian_distant2.ogg", 1.0f);
	StartScreenShake(0.02f, 1.0f, 1.0f, 3.0f);
}
//Half-way down the stairs the guardian slime poofs start to appear
void CollideAreaStartIntro(string &in asParent, string &in asChild, int alState)
{
	if(GetToughModeOn() >= 1)
		CheckPoint("CP01", "PlayerStartArea_1", "CPCall01", "Hints", "HardModeDeath");
	else
		CheckPoint("CP01", "PlayerStart_Check", "CPCall01", "Hints", "DeathGuardian_25_CellTunnels");
	
	AddTimer("TimerEIntro", 0.1f, "TimerEIntro");
}
//Events for each of the 5 poofs, in 6 poof player dies if he did not close the door.
void TimerEIntro(string &in asTimer)
{
	string sEvent = asTimer;	//Do not edit, sets timer loop function name.
	AddLocalVarInt(sEvent, 1);	//Do not edit, steps through timer loop events.
	bool bPauseAtStep = false;	//Do not edit, to pause or end the timer loop at specified step.

	float fEventSpeed = 5.0f * GetDifficultyInverseFactor();	//Set to preferred default time for the timer loop.

	
	switch(GetLocalVarInt(sEvent)){
		//////////
		//Guardian begins chase in stairs step 1
		case 1:
			IntroEventSteps("slime_entry_1_");
			PlayMusic("att_guardian.ogg", true, 0.8f, 1.0f, 5, true);
		break;
		
		//////////
		//Guardian step 2
		case 2:
			IntroEventSteps("slime_entry_2_");
		break;
				
		//////////
		//Guardian step 3
		case 3:
			IntroEventSteps("slime_entry_3_");
		break;
				
		//////////
		//Guardian step 4
		case 4:
			IntroEventSteps("slime_entry_4_");
		break;
				
		//////////
		//Guardian step 5
		case 5:
			IntroEventSteps("slime_entry_5_");
			
			//Player has closed the door, so some impacts on it for the last step to hint that guardian is stopped.
			if(GetLocalVarInt("LeverDown") == 1){
				PlaySoundAtEntity("impact", "28_break_wood", "safety_normal_vert_1", 0.0f, false);
				PlaySoundAtEntity("impact2", "28_impact_wood", "safety_normal_vert_1", 0.0f, false);
				StartScreenShake(0.1f, 0.5f, 0.25f, 1.25f);			
				CreateParticleSystemAtEntity("impact_door", "ps_dust_impact_vert.ps", "safety_normal_vert_1", false);
			}
		break;
				
		//////////
		//Player did not close door, Guardian in main room and player dies from it.
		case 6:
			if(GetLocalVarInt("LeverDown") == 1) return;
			
			SetLocalVarInt("GuardianInRoom", 1);
			AddTimer("TimerGuardianRoar", 0.0f, "TimerGuardianRoar");
		break;
		
		//////////
		//End timer when no more steps in the event found.
		default:
			bPauseAtStep = true;
		break;
	}

	if(!bPauseAtStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
//Shared settings for intro event steps
void IntroEventSteps(string &in sArea)
{
	SetPropActiveAndFade(sArea+"*", true, 1.0f);
	FadeLightTo(sArea+"4", 0.7f, 0.0f, 0.2f, 1.0f, 4, 1);
	SetEntityActive(sArea+"5", true);
	PlaySoundAtEntity(sArea+"appear", "25_guardian_slime_appear.snt", sArea+"5", 0.0f, false);
	CreateParticleSystemAtEntity(sArea+"GuardianPoof","ps_guardian_appear_explosion.ps", sArea+"6", false);
	StartScreenShake(0.1f, 0.5f, 0.5f, 2.0f);
}

//If player is not fast enough it is instant death on the slime poof
void CollideGuardianArea(string &in asParent, string &in asChild, int alState)
{
	if(GetPlayerHealth()<=0) return;
	
	StartScreenShake(0.2f, 0.5f, 0.5f, 0.5f);
	PlayGuiSound("water_lurker_eat_rev2.ogg", 0.8f);
	PlayGuiSound("attack_claw_hit03.ogg", 0.8f);
	
	GivePlayerDamage(120, "BloodSplat", true, true);
}

//When coming to main hall, direct vision to the lever for closing door.
void CollideAreaSeeLever(string &in asParent, string &in asChild, int alState)
{
	StartPlayerLookAt("lever_nice01_1", 4.0f, 4.0f, "");

	AddTimer("EndLookAtLever", 1.0f, "TimerEndLookAtLever");
}
void TimerEndLookAtLever(string &in asTimer)
{
	StopPlayerLookAt();
}

//Pulling the lever closes the entrance door and also opens the two doors to altar rooms.
void StateChangeLever(string &in asEntity, int alState)
{
	if(alState != -1) return;
	
	SetLeverStuckState(asEntity, alState, true);
	
	StartScreenShake(0.01f, 0.5f, 0.2f, 1.8f);
	
	SetLocalVarInt("LeverDown", 1);
	StopMusic(4.0f, 5);
	StopMusic(4.0f, 0);
	
	SetEntityPlayerInteractCallback("safety_normal_vert_2", "", true);	
	SetEntityPlayerInteractCallback("safety_normal_vert_3", "", true);	
	
	AddTimer("music", 4.0f, "TimerMusic");
}
void TimerMusic(string &in asTimer)
{
	PlayMusic("21_agrippa_lever.ogg", false, 1.0f, 0.0f, 1, false);
	PlayMusic("amb_extra01.ogg", true, 0.9, 5, 0, true);
}

//Kill player if he did not lock the door. - This is called from the old slime appear event
void TimerPlayerDeath(string &in asTimer)
{
	CollideGuardianArea("", "", 1);
}

//////////////////////////////
//Interact with altars
void InteractPlayerAltar(string &in asEntity)
{
	GiveSanityDamage(2.5f, true);
}

//----------------------------------------------------------

//////////////////////////////
//CHECKPOINT RESET AND EVENT
//////////////////////////////

//----------------------------------------------------------

void AlexEndWordsVoiceOver()
{
	AddTimer("part3", 0.1f, "PlayEndCredits");
}

void PlayEffectVoice(string &in asEntryBase, int alStartIdx, int alEndIdx, string &in asCallback)
{	
	for(int i=alStartIdx; i<=alEndIdx; ++i)
	{
		string sEntry = asEntryBase;
		if(i<10) sEntry += "0";
		sEntry += i;
		
		AddEffectVoice(sEntry, "", "Voice", sEntry, false, "", 0,0 );
	}
	SetEffectVoiceOverCallback(asCallback);
}

void PlayEndCredits(string &in asInput)
{
	if(asInput == "part1")
	{
		StopPlayerLookAt();
		ExitInventory();
		SetInventoryDisabled(true);
		SetPlayerHealth(999);
		SetPlayerSanity(999);
		SetPlayerActive(false);
		ShowPlayerCrossHairIcons(false);
		SetSanityDrainDisabled(true);
		SetInDarknessEffectsActive(false);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		FadeOut(0.1f);
		StopMusic(0.1f, 0);
		StopMusic(0.1f, 1);
		StopMusic(0.1f, 2);
		StopMusic(0.1f, 3);
		StopMusic(0.1f, 4);
		StopMusic(0.1f, 5);
		StopMusic(0.1f, 6);
		StopMusic(0.1f, 7);
		StopMusic(0.1f, 8);
		StopMusic(0.1f, 9);
		StopMusic(0.1f, 10);
		FadeGlobalSoundVolume(0.0f, 0.1f);
		
		AddTimer("PlayerStartDarkPlace", 0.15f, "TeleportPlayer");
		AddTimer("part2", 2.5f, "PlayEndCredits");
	}
	else if(asInput == "part2")
	{
		PlayEffectVoice("CH03L29_Ending_Alexander_", 1, 2, "AlexEndWordsVoiceOver");
	}
	else if(asInput == "part3")
	{
		StartCredits("ending_alexander.ogg",false, "Ending", "MainCredits", 3);
	}
}

//Player wakes up at bottom stairs just as the chase restarts
void CPCall01(string &in asName, int alCount)
{
	if(GetToughModeOn() >= 1)
		CheckPoint("CP02", "PlayerStartArea_1", "CPCall02", "Hints", "HardModeDeath");
	else
		CheckPoint("CP02", "PlayerStart_Check02", "CPCall02", "", "");
	
	CPReset();
	
	RemoveTimer("TimerEIntro");

	SetLocalVarInt("TimerEIntro", 0);
	SetLocalVarInt("LeverDown", 0);
	
	AddDebugMessage("Resetting props", false);
	SetLeverStuckState("lever_nice01_1", 0, false);
	SetMoveObjectState("safety_normal_vert_1", 1); 
	SetMoveObjectState("safety_normal_vert_2", 0); SetMoveObjectState("safety_normal_vert_3", 0); 
	
	//////////////////////////////////////////////////////////////////////
	// Removed these as they could break the level in some situations
	//ResetProp("lever_nice01_1");
	//ResetProp("safety_normal_vert_1"); ResetProp("safety_normal_vert_2");
	//ResetProp("safety_normal_vert_3");
	
	SetEntityPlayerInteractCallback("safety_normal_vert_2", "PlayerInteractDoor", true);	
	SetEntityPlayerInteractCallback("safety_normal_vert_3", "PlayerInteractDoor", true);	
	
	if(GetToughModeOn() >= 1)
	{
		AddTimer("part1", 0.1f, "PlayEndCredits");
		return;
	}
	
	CPEventInit("AreaStartIntro");
	
	SetEntityActive("AreaSeeLever", true);	//Area to show player lever as an extra hint second attempt
	
	AddTimer("TimerEIntro", 4.0f, "TimerEIntro");
}

//----------------------------------------------------------

//Player wakes up inside main hall, with the door closed behind him.
void CPCall02(string &in asName, int alCount)
{
	CPReset();
	
	RemoveEntityCollideCallback("Player", "AreaSeeLever");

	SetLeverStuckState("lever_nice01_1", -1, false);
	
	if(GetToughModeOn() >= 1)
	{
		AddTimer("part1", 0.1f, "PlayEndCredits");
		return;
	}
	
	CPEventInit("lever_nice01_1");
}

//----------------------------------------------------------

//Shared CP reset of props, vars, sounds, light
void CPReset()
{
	AddDebugMessage("Resetting", false);
	SetPlayerHealth(100);
	
	SetLocalVarInt("GuardianInRoom", 0);
	
	RemoveTimer("TimerGuardianRoar");
	RemoveTimer("playerdeath");
	RemoveTimer("pre3"); RemoveTimer("pre2");
	RemoveTimer("pre1"); RemoveTimer("pre0");
	
	SetEntityActive("slime*", false);
	SetEntityActive("SlimeDamageArea_*", false);
	SetEntityActive("pre0_*", false); SetEntityActive("pre1_*", false);
	SetEntityActive("pre2_*", false); SetEntityActive("pre3_*", false);
	
	StopSound("slime1", 0.1f); StopSound("slime2", 0.1f); StopSound("slime3", 0.1f);
	StopSound("slime4", 0.1f); StopSound("slime5", 0.1f);
	
	DestroyParticleSystem("slimeps1"); DestroyParticleSystem("slimeps2"); DestroyParticleSystem("slimeps3");
	DestroyParticleSystem("slimeps4"); DestroyParticleSystem("slimeps5");
	
	FadeLightTo("slime_entry_1_4", 0.6, 0.1, 0, -1, -1, 0);
	FadeLightTo("slime_entry_2_4", 0.6, 0.1, 0, -1, -1, 0);
	FadeLightTo("slime_entry_3_4", 0.6, 0.1, 0, -1, -1, 0);
	FadeLightTo("slime_entry_4_4", 0.6, 0.1, 0, -1, -1, 0);
	FadeLightTo("slime_entry_5_4", 0.6, 0.1, 0, -1, -1, 0);
	
	FadeLightTo("PointLight_11_slime", -1, -1, -1, -1, 0, 0);
	FadeLightTo("PointLight_7", -1, -1, -1, -1, 9, 0);
}

//Shared CP setup for waking up event
void CPEventInit(string &in sLook)
{
	SetRadialBlurStartDist(0.3f);
	FadeRadialBlurTo(0.3f, 0.3f);
	SetPlayerCrouchDisabled(true);
	SetPlayerJumpDisabled(true);
	PlayerMovement(0.1f);
	FadePlayerRollTo(40, 10, 100); 
	MovePlayerHeadPos(0, -1.3f, 0, 10, 0.5f);
	StartPlayerLookAt(sLook, 5.0f, 5.0f, "");
	
	AddTimer("1", 2.0f, "TimerCPEvent");
	AddTimer("2", 3.0f, "TimerCPEvent");
	AddTimer("3", 3.5f, "TimerCPEvent");
	AddTimer("4", 4.5f, "TimerCPEvent");
	AddTimer("5", 5.0f, "TimerCPEvent");
	AddTimer("6", 6.0f, "TimerCPEvent");
}

//----------------------------------------------------------

//Shared waking up event
void TimerCPEvent(string &in asTimer)
{
	if(asTimer == "1"){
		FadePlayerRollTo(0, 4, 20); 
		PlayGuiSound("react_sigh.snt", 0.7f);
		PlayerMovement(0.2f);
	}
	else if(asTimer == "2"){
		MovePlayerHeadPos(0, 0, 0, 1, 0.5f);
		PlayGuiSound("player_stand.snt", 1);
		PlayerMovement(0.3f);
		StopPlayerLookAt();
	}
	else if(asTimer == "3"){
		FadePlayerRollTo(-20, 8, 30); 
		PlayerMovement(0.4f);
	}
	else if(asTimer == "4"){
		FadeRadialBlurTo(0.0f, 0.1f);
		MovePlayerHeadPos(0, -0.8f, 0, 2, 0.5f);
		PlayGuiSound("player_crouch.snt", 1);
		PlayerMovement(0.6f);
	}
	else if(asTimer == "5"){
		FadePlayerRollTo(20, 10, 40); 
		PlayGuiSound("react_sigh.snt", 0.7f);
		PlayerMovement(0.8f);
	}
	else if(asTimer == "6"){
		MovePlayerHeadPos(0, 0, 0, 1, 0.5f);
		FadePlayerRollTo(0, 10, 60); 
		PlayGuiSound("player_stand.snt", 1);
		PlayerMovement(1.0f);
		SetPlayerCrouchDisabled(false);
		SetPlayerJumpDisabled(false);
	}
}

//----------------------------------------------------------

//Shared player movement
void PlayerMovement(float fSpeed)
{
	SetPlayerMoveSpeedMul(fSpeed);
	SetPlayerRunSpeedMul(fSpeed);
	SetPlayerLookSpeedMul(fSpeed);
}

//----------------------------------------------------------

////////////////////////////
// Run first time starting map
void OnStart()
{
	SetMapDisplayNameEntry("InnerSanctum");
	
	ClearSavedMaps();
	
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		for(int i=0;i<10;++i)
			GiveItemFromFile("tinderbox", "tinderbox.ent");
	}
	
	///////////////////////////
	// Collide Callbacks
	AddEntityCollideCallback("Player", "AreaCheckCollapsedDoor", "CollideCheckCollapsedDoor", false, 1);
	
	AddEntityCollideCallback("Player", "AreaCloseDoor", "CollideAreaCloseDoor", true, 1);
	
	AddEntityCollideCallback("Player", "AreaSeeNote", "CollideAreaSeeNote", true, 1);
	AddEntityCollideCallback("Player", "AreaSeeLever", "CollideAreaSeeLever", true, 1);
	AddEntityCollideCallback("Player", "AreaStartIntro", "CollideAreaStartIntro", true, 1);
	AddEntityCollideCallback("Player", "AreaGuardianAmb", "CollideAreaGuardianAmb", true, 1);
	
	for(int i=1;i<=6;i++)
		AddEntityCollideCallback("Player", "slime_entry_"+i+"_5", "CollideGuardianArea", false, 1);
	
	///////////////////////////
	// Connect entities
	ConnectEntities("door1", "lever_nice01_1", "safety_normal_vert_1",false, 0,"");
	ConnectEntities("door1", "lever_nice01_1", "safety_normal_vert_2",true, 0,"");
	ConnectEntities("door1", "lever_nice01_1", "safety_normal_vert_3",true, 0,"");	
	
	///////////////////////////
	// Move objects
	SetMoveObjectState("safety_normal_vert_1", 1);
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	PreloadSound("28_impact_wood.snt"); PreloadSound("door_safety_open.snt"); PreloadSound("28_terror_meter.snt"); PreloadSound("guardian_distant1.snt");
	PreloadSound("slime_create.snt"); PreloadSound("25_guardian_slime_appear.snt"); PreloadSound("slime_loop.snt"); PreloadSound("28_break_wood.snt");
	PreloadSound("28_rotating_rock.snt"); PreloadSound("28_break_rock.snt"); PreloadSound("28_ground.snt");
	PreloadSound("28_wall.snt"); PreloadSound("8_done02.snt"); PreloadSound("28_done03.snt "); PreloadSound("28_done.snt ");
	PreloadSound("player_crouch.snt"); PreloadSound("player_stand.snt"); PreloadSound("react_sigh.snt"); PreloadSound("guardian_distant2.ogg");
	PreloadSound("guardian_idle6.ogg"); PreloadSound("sanity_heartbeat.snt"); PreloadSound("general_wind_whirl.snt"); PreloadSound("guardian_activated.snt ");
	PreloadSound("water_lurker_eat_rev2.ogg "); PreloadSound("attack_claw_hit03.ogg ");
	
	PreloadParticleSystem("ps_slime_fog.ps "); PreloadParticleSystem("ps_dust_impact_vert.ps "); PreloadParticleSystem("ps_guardian_appear_explosion.ps");
	 
	PlayMusic("amb_extra01.ogg", true, 0.9, 5, 0, true);
	
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	FadeGlobalSoundSpeed(1.0f, 0.0f);
	GiveSanityBoost();
	TimerStopRadialBlur("");
	if(GetPlayerHealth() >= 50)
		SetPlayerHealth(100);
	else
		SetPlayerHealth(75);
}