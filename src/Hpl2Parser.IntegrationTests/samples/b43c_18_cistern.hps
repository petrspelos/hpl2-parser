
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "18_cistern";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6};
int[] gviEasierOilPotionsCodesArray = {1, 2};
int[] gviEasierHealthPotionsCodesArray = {1};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2};
int[] gviNormalOilPotionsCodesArray = {1, 2};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {3};
int[] gviToughOilPotionsCodesArray = {1};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {3};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

////////////////////////////
// Rotate valves

// Global helper to start an appropiate music track according to map state
void StartMusicHelper(int alValveCount, bool abPlayEventMusic)
{
	string sMusicFile = "";
	string sEventMusicFile = "";
	float fVolume, fFadeTime;
	float fEventVolume;
	float fEventFadeTime;
	
	StopMusic(8, 0);
	AddDebugMessage("StartMusicHelper called with valve count : " + alValveCount, false);
	
	switch(alValveCount)
	{
		case 1:
			if(GetLocalVarInt("IAmStart") !=1)
				sMusicFile = "18_amb.ogg";
			sEventMusicFile = "18_puzzle_valve01.ogg";
			fVolume = 0.5f;
			fFadeTime = 4;
			fEventVolume = 1.0f;
			fEventFadeTime = 0.5f;
			break;
		case 2:
			sMusicFile = "18_amb.ogg";
			sEventMusicFile = "18_puzzle_valve01.ogg";
			fVolume = 1.0f;
			fFadeTime = 4;
			fEventVolume = 1.0f;
			fEventFadeTime = 0;
			break;
		case 3:
			sMusicFile = "23_amb02.ogg";
			sEventMusicFile = "18_puzzle_valve02.ogg";
			fVolume = 1.0f;
			fFadeTime = 4;
			fEventVolume = 1.0f;
			fEventFadeTime = 0;
			break;		
	}
	
	if(abPlayEventMusic && sEventMusicFile!="")
		PlayMusic(sEventMusicFile, false, fEventVolume, fEventFadeTime, 10, false); 
	if(sMusicFile!="")
	{
		AddDebugMessage("Playing music : " + sMusicFile, false);
		PlayMusic(sMusicFile, true, fVolume, fFadeTime, 0, true);
	}
}

void RotateWaterValve01(string &in asEntity, int alState)
{
	if(alState != 1) return;
	
	SetLampLit("torch_static01_10", false, true);
	SetLampLit("torch_static01_4", false, true);
	SetLampLit("torch_static01_3", false, true);
	SetLampLit("torch_static01_13", false, true);
	
	FadeLightTo("PointLight_14", 0,0,0,0, -1, 2);
	FadeLightTo("PointLight_7", 0,0,0,0, -1, 2);
	FadeLightTo("PointLight_17", 0,0,0,0, -1, 2);
	
	FadeLightTo("SpotLight_8", 0.05,0.15,0.2,-1, -1, 2);
	
	CreateParticleSystemAtEntity("AreaWindValve_1", "ps_dust_whirl.ps", "AreaWindValve_1", false);
	
	PlaySoundAtEntity("blow", "18_blow_wind", "Player", 0.0f, false);
	PlaySoundAtEntity("PumpClank", "18_valve_off", "Player", 0.0, false);
	PlaySoundAtEntity("Clank", "14_elevator_clank", "Player", 0.0, false);
	
	AddTimer("PumpDelay", 1.5f, "TimerPumpDelay");		
}


void RotateWaterValve02(string &in asEntity, int alState)
{
	if(alState != 1) return;
	
	SetLampLit("torch_static01_11", false, true);
	SetLampLit("torch_static01_2", false, true);
	SetLampLit("torch_static01_9", false, true);
	SetLampLit("torch_static01_7", false, true);
	SetLampLit("torch_static01_12", false, true);
	
	FadeLightTo("PointLight_6", 0,0,0,0, -1, 2);
	FadeLightTo("PointLight_13", 0,0,0,0, -1, 2);
	FadeLightTo("PointLight_11", 0,0,0,0, -1, 2);
	FadeLightTo("PointLight_16", 0,0,0,0, -1, 2);
	
	FadeLightTo("SpotLight_4", 0.05,0.15,0.2,-1, -1, 2);
	FadeLightTo("SpotLight_2", 0.05,0.15,0.2,-1, -1, 2);
	FadeLightTo("SpotLight_3", 0.05,0.15,0.2,-1, -1, 2);
	
	CreateParticleSystemAtEntity("AreaWindValve_2", "ps_dust_whirl.ps", "AreaWindValve_2", false);
	
	PlaySoundAtEntity("blow", "18_blow_wind", "Player", 0.0f, false);
	PlaySoundAtEntity("PumpClank", "18_valve_off", "Player", 0.0, false);
	PlaySoundAtEntity("Clank", "14_elevator_clank", "Player", 0.0, false);
	
	CompleteQuest("18_Bridge", "18_Bridge");	//Incase player managed to skip it
	
	AddTimer("PumpDelay", 1.5f, "TimerPumpDelay");	
}

void RotateWaterValve03(string &in asEntity, int alState)
{
	if(alState != 1) return;
	
	SetLampLit("torch_static01_6", false, true);
	SetLampLit("torch_static01_5", false, true);
	SetLampLit("torch_static01_8", false, true);
	
	FadeLightTo("SpotLight_11", 0,0,0,0, -1, 2);
	FadeLightTo("PointLight_10", 0,0,0,0, -1, 2);
	FadeLightTo("PointLight_15", 0,0,0,0, -1, 2);
	FadeLightTo("PointLight_12", 0,0,0,0, -1, 2);
	
	FadeLightTo("SpotLight_7", 0.05,0.15,0.2,-1, -1, 2);
	FadeLightTo("SpotLight_5", 0.05,0.15,0.2,-1, -1, 2);
	FadeLightTo("SpotLight_6", 0.05,0.15,0.2,-1, -1, 2);
	
	CreateParticleSystemAtEntity("AreaWindValve_3", "ps_dust_whirl.ps", "AreaWindValve_3", false);
	
	PlaySoundAtEntity("blow", "18_blow_wind", "Player", 0.0f, false);
	PlaySoundAtEntity("PumpClank", "18_valve_off", "Player", 0.0, false);
	PlaySoundAtEntity("Clank", "14_elevator_clank", "Player", 0.0, false);
	
	AddTimer("PumpDelay", 1.5f, "TimerPumpDelay");		
}

void TimerPumpDelay(string &in asTimer)
{
	PumpWater();
	
	//Enable new interact messages on wall
	SetEntityPlayerInteractCallback("AreaTouchWall1", "InteractPrisonWall", true);
	SetEntityPlayerInteractCallback("AreaTouchWall2", "InteractPrisonWall", true);
}

////////////////////////////
// Pump water (and do effects)
float[] gvAmbientColorLevels = {
	0.025f * 0.8f, 0.15f * 0.8f, 0.18f * 0.8f,
	0.025f * 0.6f, 0.15f * 0.6f, 0.18f * 0.6f,
	0.025f * 0.3f, 0.15f * 0.3f, 0.18f * 0.3f
};

void PumpWater()
{
	GiveSanityDamage(5.0f, false);
	AddQuest("18Valves", "18Valves");
	
	int lCount = GetLocalVarInt("PumpWaterCount");
	
	//Active event area	
	SetEntityActive("AreaLurkerEventCenter", true);
	
	//Fade ambient light.
	FadeLightTo(	"BoxLight_1", 
			gvAmbientColorLevels[lCount*3 + 0], gvAmbientColorLevels[lCount*3 + 1], gvAmbientColorLevels[lCount*3 + 2], 
			1, -1, 0.5);
	
	//play rumble sound
	PlaySoundAtEntity("PumpRumble", "18_pump_rumble", "Player", 4, false);
	PlaySoundAtEntity("PumpFlow", "18_fill_water", "Player", 0.5, false);

	//Stop the flow particle system
	if(lCount!=0)
	{
		//StopMusic(8, 0);
		DestroyParticleSystem("PipeFlow");
		StopSound("FlowSound", 2.0f);
	}
	
	//Start particles, music and sound at pipe
	// lCount+1 == valves turned at this point
	StartMusicHelper(lCount+1, true);
	if(lCount==0)
	{
		StartScreenShake(0.02, 2, 1, 1);
		
		PlayMusic("18_puzzle_valve01.ogg", false, 0.8f, 0.5f, 10, false);
		//PlayMusic("18_amb.ogg", true, 0.3, 8, 0, true);
		CreateParticleSystemAtEntity("PipeFlow", "ps_pipe_flow_small", "AreaPipeFlow", true);
		PlaySoundAtEntity("FlowSound", "18_water_pour1", "AreaPipeFlow", 1, true);
		
		SetLocalVarInt("TouchWall", 2); bFirst = true;
	}
	else if(lCount==1)
	{
		StartScreenShake(0.035, 2.5, 1, 1);
		
		//PlayMusic("18_puzzle_valve01.ogg", false, 1.0, 0, 10, false);
		//PlayMusic("18_amb.ogg", true, 0.7, 8, 0, true);
		CreateParticleSystemAtEntity("PipeFlow", "ps_pipe_flow_medium", "AreaPipeFlow", true);
		PlaySoundAtEntity("FlowSound", "18_water_pour2", "AreaPipeFlow", 1, true);
		
		SetLocalVarInt("TouchWall", 3); bFirst = true;
	}
	else if(lCount==2)
	{
		StartScreenShake(0.05, 3, 1, 1);
			
		//PlayMusic("18_puzzle_valve02.ogg", false, 1.0, 0, 10, false);
		//PlayMusic("18_amb.ogg", true, 1.0, 8, 0, true);
		CreateParticleSystemAtEntity("PipeFlow", "ps_pipe_flow_large", "AreaPipeFlow", true);
		PlaySoundAtEntity("FlowSound", "18_water_pour3", "AreaPipeFlow", 1, true);
		
		SetLocalVarInt("TouchWall", 4); bFirst = true;
		
		AddTimer("LastWallMess", 25.0f, "TimerLastWallMess");
		
		CompleteQuest("18Valves", "18Valves");

		SetEntityActive("AreaGuardian", true);
	}
	
	//Quest
	if(lCount==2)
	{
		CompleteQuest("SewerFlooded", "16SewerFlooded");
		GiveSanityBoostSmall();
		SetGlobalVarInt("WaterHasBeenDrained", 1);
		PlaySoundAtEntity("ambscare", "18_amb_end", "AreaPipeFlow", 8.0f, true);
	}
		
	//Start timer
	AddTimer("PumpRumble", 4, "TimerPumpRumbleStop");

	
	AddLocalVarInt("PumpWaterCount", 1);
	
	AddTimer("WaterHoleVoice", 1, "TimerWaterHoleVoice");
}

void TimerPumpRumbleStop(string &in asTimer)
{
	StopSound("PumpRumble", 1);	
}

void TimerLastWallMess(string &in asTimer)
{
	AddDebugMessage("Last message active!", false);
	
	SetLocalVarInt("TouchWall", 5); bFirst = true;
	
	//Enable new interact messages on wall
	SetEntityPlayerInteractCallback("AreaTouchWall1", "InteractPrisonWall", true);
	SetEntityPlayerInteractCallback("AreaTouchWall2", "InteractPrisonWall", true);
}

////////////////////////////
// Voices from water release hole
void TimerWaterHoleVoice(string &in asTimer)
{
	if(GetLocalVarInt("PrisonerDrowned")==1)
		return;
		
	string sFile = "";
	//float fNextVoiceTime = 0;
	int lCount = GetLocalVarInt("PumpWaterCount");
	
	// No water coming in, just pants
	if(lCount==0)
	{
		sFile = "18_prisoner1"; 
		//fNextVoiceTime = RandFloat(10, 20);
	}
	// Little water coming in, worried
	else if(lCount==1)
	{
		StopSound("WaterHoleVoice", 0.0f);
		sFile = "18_prisoner2"; 
		//fNextVoiceTime = RandFloat(7, 15);
	}
	// Much water coming in, screaming, about to drown!
	else if(lCount==2)
	{
		StopSound("WaterHoleVoice", 0.0f);
		sFile = "18_prisoner3"; 
		//fNextVoiceTime = RandFloat(5, 10);
	}
	
	else if(lCount==3)
	{
		StopSound("WaterHoleVoice", 0.0f);
		sFile = "18_prisoner4"; 
		SetLocalVarInt("PrisonerDrowned", 1);
		//fNextVoiceTime = RandFloat(5, 10);
	}
	
	if(sFile != "")
		PlaySoundAtEntity("WaterHoleVoice", sFile, "AreaWaterHoleVoice",0, false);
	
	//if(fNextVoiceTime>0)
		//AddTimer("WaterHoleVoice", fNextVoiceTime, "TimerWaterHoleVoice");
}


////////////////////////////
// Pipe Steam
void TimerSteam(string asTimer)
{
	string sCount = StringSub(asTimer, 5,1);
	
	string sVar = "PlayerAtAreaPushPlayer_"+sCount;
	if(GetLocalVarInt(sVar)==1)
	{
		GivePlayerDamage(20, "BloodSplat", true, false); 
		PlaySoundAtEntity("sd1", "18_burn_steam", "Player", 0.0f, false);		
	}
	
	CreateParticleSystemAtEntity("deadlysteam"+sCount, "ps_steam_deadly", "AreaDeadlySteam_"+sCount, false);
	PlaySoundAtEntity("sound_steam_deadly"+sCount,"18_steam_release", "AreaDeadlySteam_"+sCount, 0.2f, false);
	
	float fNextSteam = 1;
	if(sCount == "1")	fNextSteam = 4.25;
	if(sCount == "2")	fNextSteam = 4.1;
	if(sCount == "3")	fNextSteam = 4.5;
	
	AddTimer("steam"+sCount, fNextSteam, "TimerSteam");
	
	AddTimer("Off"+asTimer, 2.5, "TimerTurnOffSteam");
	SetLocalVarInt("SteamAtAreaPushPlayer_"+sCount, 1);
}

void TimerTurnOffSteam(string asTimer)
{
	string sCount = StringSub(asTimer, 8, 1);
	
	StopSound("sound_steam_deadly"+sCount, 0.3f);
	SetLocalVarInt("SteamAtAreaPushPlayer_"+sCount, 0);
}

void CollidePlayerSteam(string &in asParent, string &in asChild, int alState)
{
	if(alState==0) return;
	
	SetLocalVarInt("PlayerAt"+asChild, alState==1 ? 1 : 0);
	
	if(alState==1 && GetLocalVarInt("SteamAt"+asChild)==1)
	{
		GivePlayerDamage(20, "BloodSplat", true, false); 	
		PlaySoundAtEntity("sd1", "18_burn_steam", "Player", 0.0f, false);
	}
}

void InteractSteamValve(string &in asEntity, int alState)
{
	if(alState == 0) return;
	
	//Turn off steam
	if(alState == 1 && GetLocalVarInt("PipeSteamOff")==0)
	{
		SetLocalVarInt("PipeSteamOff", 1);
		
		PlaySoundAtEntity("steamoff", "13_rod_out", asEntity, 0.0f, false);
		
		for(int i=1; i<=3; ++i)
			RemoveTimer("steam"+i);	
	}

	//Turn on steam
	if(alState == -1 && GetLocalVarInt("PipeSteamOff")==1)
	{
		SetLocalVarInt("PipeSteamOff", 0);	
		
		for(int i=1; i<=3; ++i)
			AddTimer("steam"+i, 0, "TimerSteam");
	}
}

////////////////////////////
// Break bridge
void CollideBreakBridge(string &in asParent, string &in asChild, int alState)
{
	for(int i=1; i<=2; ++i)
		RemoveEntityCollideCallback("stone_small01*", "AreaBreakBridge_"+i);
	
	CreateParticleSystemAtEntity("BreakBridge", "ps_break_wood_small", "AreaBreakBridge_1", false);
	PlaySoundAtEntity("BreakBridge","break_wood_metal", "AreaBreakBridge_1", 0, false);
		
	BreakJoint("bridge_chained_1_BallJoint_1");
	
	SetEntityPlayerInteractCallback("bridge_chained_1", "", false);
	
	AddTimer("ChainForce",0.3f,"TimerChainForce");
	
	CompleteQuest("18_Bridge", "18_Bridge");
	
	SetEntityActive("bridgeblocker_1", false);
}

void TimerChainForce(string &in asTimer)
{
	AddBodyImpulse("bridge_chained_1_chain", 1,0.5,-2, "World");
	PlaySoundAtEntity("creak", "18_bridge_fall", "bridge_chained_1", 0.0f, false);
}

void InteractBridge(string &in asEntity)
{
	SetMessage("Ch02Level18", "InteractBridge", 0);	
	
	PlayGuiSound("18_touch_bridge.snt", 1.0f);
	AddPropImpulse(asEntity, 0.0f, 4.0f, 2.0f, "World");
	
	AddQuest("18_Bridge", "18_Bridge");
	
	AddTimer(asEntity, 1.0f, "TimerInteractBridge");
}
void TimerInteractBridge(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractBridge", true);
}

void CollideImpactBridge(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("impact", "18_bridge_hit", asChild, 0.0f, false);
	CreateParticleSystemAtEntity("impps", "ps_dust_impact", asChild, false);
}

////////////////////////////
// Water Lurker Scares
void CollideLurkerEventCenter(string &in asParent, string &in asChild, int alState)
{
	int lCount = GetLocalVarInt("PumpWaterCount");
	
	if(lCount==1)
	{
		PlayEnemySoundAtEntity("idle.snt", "AreaCenterSound_1", "waterlurker");
	}
	else if(lCount==2)
	{
		PlayEnemySoundAtEntity("eat.snt", "AreaCenterSound_2", "waterlurker");
	}
	else if(lCount==3)
	{
		PlayEnemySoundAtEntity("hunt.snt", "AreaCenterSound_3", "waterlurker");
	}
	
	SetEntityActive(asChild, false);
	GiveSanityDamage(2.0f * lCount, false);
}

void CollideLurkerCorridorEvent1(string &in asParent, string &in asChild, int alState)
{
	PlayEnemySoundAtEntity("idle.snt", "AreaLurkerSound_1", "waterlurker");
	GiveSanityDamage(3.0f, false);
}

void CollideLurkerCorridorEvent2(string &in asParent, string &in asChild, int alState)
{
	AddTimer("AreaLurkerSound_2", 0.3, "TimerLurkerSplash");
	//AddTimer("AreaLurkerSound_21", 1.3, "TimerLurkerSplash");
	//AddTimer("AreaLurkerSound_22", 2.5, "TimerLurkerSplash");
}

void CollideLurkerCorridorEvent3(string &in asParent, string &in asChild, int alState)
{
	PlayEnemySoundAtEntity("idle.snt", "AreaLurkerSound_31", "waterlurker");
	GiveSanityDamage(3.0f, false);
	AddTimer("AreaLurkerSound_31", 0.5, "TimerLurkerSplash");
	//AddTimer("AreaLurkerSound_31", 1.5, "TimerLurkerSplash");
}

void TimerLurkerSplash(string &in asTimer)
{
	PlaySoundAtEntity("LurkerSound","impact_water_high.snt", asTimer, 0, false);
	CreateParticleSystemAtEntity("LurkerPS", "waterlurker_walk_splash", asTimer, false);	
}


//////////////
//PICK DIARIES
void EntityCallPickDiary(string &in asEntity, string &in type)
{
	AddLocalVarInt("DiaryNr", 1);	
	
	PlayMusic("18_paper_daniel0"+GetLocalVarInt("DiaryNr"), false, 0.5f, 0.0f, 10, false);
}
//////////////


////////////
//Roses for vision
void CollideAreaRoseOn(string &in asParent, string &in asChild, int alState)
{
	PlayGuiSound("general_wind_whirl", 0.7f);
	
	AddTimer("AreaRose_1", 1.5f, "TimerAreaRose");
	AddTimer("AreaRose_2", 2.0f, "TimerAreaRose");
	AddTimer("AreaRose_3", 2.5f, "TimerAreaRose");
	AddTimer("AreaRose_4", 3.0f, "TimerAreaRose");
	AddTimer("AreaRose_5", 3.5f, "TimerAreaRose");
	AddTimer("AreaRose_6", 4.0f, "TimerAreaRose");
	AddTimer("AreaRose_7", 5.5f, "TimerAreaRose");
	AddTimer("AreaRose_8", 6.0f, "TimerAreaRose");
}
void TimerAreaRose(string &in asTimer)
{
	CreateParticleSystemAtEntity(asTimer, "ps_rose_petals.ps", asTimer, false);
	
	if(asTimer == "AreaRose_2")
		PlayGuiSound("general_wind_whirl", 0.6f);
}
void CollideAreaRoseOff(string &in asParent, string &in asChild, int alState)
{
	DestroyParticleSystem("rose_1"); 
	DestroyParticleSystem("rose_2"); 
	DestroyParticleSystem("rose_3");
}
///////////////////


///////////
//INTERACT PRISON WALLS
bool bFirst = true;
void InteractPrisonWall(string &in asEntity)
{
	if(GetLocalVarInt("TouchWall") == 1 && bFirst){
		SetMessage("Ch02Level18", "TouchPrison01", 0);
		bFirst = false;
	}
	else if(GetLocalVarInt("TouchWall") == 2 && bFirst){
		SetMessage("Ch02Level18", "TouchPrison02", 0);
		bFirst = false;
	}	
	else if(GetLocalVarInt("TouchWall") == 3 && bFirst){
		SetMessage("Ch02Level18", "TouchPrison03", 0);
		bFirst = false;
	}	
	else if(GetLocalVarInt("TouchWall") == 4 && bFirst){
		SetMessage("Ch02Level18", "TouchPrison04", 0);
		bFirst = false;
	}	
	else if(GetLocalVarInt("TouchWall") == 5 && bFirst){
		SetMessage("Ch02Level18", "TouchPrison05", 0);
		bFirst = false;
	}	
		
	PlayGuiSound("18_touch_rock.snt", 1.0f);
	
	SetEntityPlayerInteractCallback("AreaTouchWall1", "", true);
	SetEntityPlayerInteractCallback("AreaTouchWall2", "", true);
	
	//AddTimer(asEntity, 1.0f, "TimerInteractPrisonWall");
	GiveSanityDamage(5.0f, false);
}
void TimerInteractPrisonWall(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractPrisonWall", true);
}
//////////


///////////////////////////
//EXIT LEVEL GUARDIAN EVENT
void CollideAreaGuardian(string &in asParent, string &in asChild, int alState)
{
	if((GetPlayerSanity() >= 75 && GetToughModeOn() <= 0) || (GetEasyModeOn() >= 2)) return;
	
	PlayGuiSound("guardian_ontop", 1.0f);
	
	StartScreenShake(0.01f, 1.0f, 1.0f, 2.0f);
	SetRadialBlurStartDist(0.4f);
	FadeRadialBlurTo(0.1f, 1.0f);
	
	SetPropActiveAndFade("Slime_*", true, 2.0f);
	
	FadeLightTo("BoxLight_1", 0.2f, 0.1f, 0.02f, -1, -1, 4.0f);
	
	PlaySoundAtEntity("slime1", "slime_loop", "Slime_1", 2.0f, true);
	PlaySoundAtEntity("slime2", "slime_loop", "Slime_5", 2.0f, true);
	PlaySoundAtEntity("slime3", "slime_loop", "Slime_10", 2.0f, true);
	PlaySoundAtEntity("slime4", "slime_loop", "Slime_17", 2.0f, true);
	PlaySoundAtEntity("slime5", "slime_loop", "Slime_12", 2.0f, true);
		
	AddTimer("lurky", 1.0f, "TimerStartLurky");
	AddTimer("breath", 3.0f, "TimerStartLurky");
	AddTimer("guardon", 5.0f, "TimerGuardNoises");
	
	for(int i=1;i<=5;i++) 
		SetEntityActive("SlimeDamageArea_"+i, true);
	
	SetLocalVarInt("GuardianEvent", 1);
	
	if(GetFunnyModeOn())
		PlayMusic("waterlurker_funny_danger.ogg", true, 0.8f, 1, 5, true);
	else
		PlayMusic("07_amb.ogg", true, 0.8f, 1, 5, true);
	
	CheckPoint("cp1", "PlayerStartArea_4", "CPCallCheckPoint", "Hints", "18_WaterLurk");
}
void TimerStartLurky(string &in asTimer)
{
	SetEntityActive(GetStringWithExtraModesSuffix("waterlurker_music02_1"), true);
	FadeRadialBlurTo(0.0f, 1.0f);
	PlayGuiSound("react_scare", 0.8f);
	GiveSanityDamage(15.0f, true);
	
	if(asTimer == "breath")
		PlayGuiSound("react_breath", 0.7f);
}
void TimerGuardNoises(string &in asTimer)
{
	if(asTimer == "guardon"){
		PlayGuiSound("guardian_ontop", 1.0f);
		StartScreenShake(0.01f, 1.0f, 1.0f, 2.0f);
		FadeRadialBlurTo(0.05f, 1.0f);
		AddTimer("guardoff", 4.0f, "TimerGuardNoises");
	}
	else if(asTimer == "guardoff"){
		FadeRadialBlurTo(0.0f, 1.0f);
		AddTimer("guardon", RandFloat(8.0f,16.0f), "TimerGuardNoises");
	}
}
void CPCallCheckPoint(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	
	FadeRadialBlurTo(0.0f, 0.0f);
	RemoveTimer("guardon");
	RemoveTimer("guardoff");
	SetEntityActive("Slime_*", false);
	SetEntityActive(GetStringWithExtraModesSuffix("waterlurker_music02_1"), false);
	FadeLightTo("BoxLight_1", 0.025, 0.15f, 0.18f, -1, -1, 0);
	
	SetEntityActive(GetStringWithExtraModesSuffix("waterlurker_1"), true);
	for(int i=1;i<=5;i++) StopSound("slime"+i, 2.0f);
}
////////////


////////////////////////////
// Run first time starting map
void OnStart()
{
	SetMapDisplayNameEntry("Cistern");
	
	////////////////////////////////////////
	// Water Lurker Scares
	AddEntityCollideCallback("Player", "AreaLurkerEventCenter","CollideLurkerEventCenter", false, 1); 
	
	for(int i=1; i<=3; ++i)
		AddEntityCollideCallback("Player", "AreaLurkerCorridorEvent_"+i, "CollideLurkerCorridorEvent"+i, true, 1);
	
	////////////////////////////////////////
	// Break bridge
	for(int i=1; i<=2; ++i)
		AddEntityCollideCallback("stone_small01*", "AreaBreakBridge_"+i,  "CollideBreakBridge", false, 1);
	AddEntityCollideCallback("bridge_chained_1", "AreaImpactBridge",  "CollideImpactBridge", true, 1);
	
	////////////////////////////////////////
	// Steam stuff
	for(int i=1; i<=3; ++i)
	{
		AddEntityCollideCallback("Player", "AreaPushPlayer_"+i, "CollidePlayerSteam", false, 0);	
	}
	
	
	SetNumberOfQuestsInMap(1);
	//Guardian stuff
	AddEntityCollideCallback("Player", "AreaGuardian", "CollideAreaGuardian", true, 1);
	SetEntityActive("Slime_*", false);
	
	//ROSE STUFF
	AddEntityCollideCallback("Player", "AreaRoseOff", "CollideAreaRoseOff", true, 1);
	AddEntityCollideCallback("Player", "FlashbackArea_1", "CollideAreaRoseOn", true, 1);
	
	//Touch stuff
	SetLocalVarInt("TouchWall", 1);
	
	////////////////////////////////////////
	// Debug
	if(ScriptDebugOn())
	{
		//SetEntityActive("AreaGuardian", true);
		
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	//////////////////////////
	// Hole voices
	if(GetLocalVarInt("PipeSteamOff")==0)
	{
		for(int i=1; i<=3; ++i)
			RemoveTimer("steam"+i);	
			
		for(int i=1; i<=3; ++i)
			AddTimer("steam"+i, 1+i, "TimerSteam");
	}
	
	PreloadSound("break_wood_metal"); PreloadSound("18_water_pour3"); PreloadSound("18_water_pour2"); PreloadSound("18_water_pour1");
	PreloadSound("18_blow_wind"); PreloadSound("18_valve_off"); PreloadSound("14_elevator_clank"); PreloadSound("18_pump_rumble");
	PreloadSound("18_fill_water"); PreloadSound("18_burn_steam"); PreloadSound("18_steam_release"); PreloadSound("13_rod_out");
	PreloadSound("18_bridge_fall"); PreloadSound("18_bridge_hit"); PreloadSound("waterlurker_idle.snt"); PreloadSound("waterlurker_eat.snt");
	PreloadSound("waterlurker_hunt.snt"); PreloadSound("impact_water_high");
	                 
	//////////////////////////
	// Hole voices
	AddTimer("WaterHoleVoice", 5, "TimerWaterHoleVoice");
	
	////////////////////////////////////////
	// Stop water flow if sewer drained
	if(QuestIsCompleted("SewerFlooded") && GetLocalVarInt("FlowDisabled")==0)
	{
		DestroyParticleSystem("PipeFlow");
		StopSound("FlowSound", 0);
		SetLocalVarInt("FlowDisabled", 1);
	}
	
	////////////////////////////////////////
	// Select music depending on the map state
	SetLocalVarInt("IAmStart", 1);
	StartMusicHelper(GetLocalVarInt("PumpWaterCount"), false);
	SetLocalVarInt("IAmStart", 0);
		
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	string sEnemyName = "";
	
	sEnemyName = "waterlurker";
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_rev.snt", sEnemyName);
	PreloadEnemySound("eat.snt", sEnemyName);
	PreloadEnemySound("eat_rev.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("hunt_rev.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_rev.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	//StopMusic(0, 3);
	if(GetLocalVarInt("GuardianEvent") == 1){
		StopMusic(2.0f, 5);
		FadeRadialBlurTo(0.0f, 0.0f);
		RemoveTimer("guardon");
		SetEntityActive("Slime_*", false);
		SetEntityActive(GetStringWithExtraModesSuffix("waterlurker_music02_1"), false);
		SetEntityActive(GetStringWithExtraModesSuffix("waterlurker_1"), false);
		FadeLightTo("BoxLight_1", 0.025, 0.15f, 0.18f, -1, -1, 0);
		for(int i=1;i<=5;i++) StopSound("slime"+i, 0.0f);
		for(int i=1;i<=5;i++) 
			SetEntityActive("SlimeDamageArea_"+i, false);
	}
}