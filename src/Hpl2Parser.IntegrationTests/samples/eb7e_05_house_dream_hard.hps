void OnEnter()
{
	if(ScriptDebugOn())
	{
		SetGlobalVarInt("FastSeekerAchievement", 1);
		SetGlobalVarInt("HealthAchievement", 1);
		SetGlobalVarInt("ItemsAchievement", 1);
		SetGlobalVarInt("NoDeathAchievement", 1);
		//SetGlobalVarInt("StatuesAchievement", 1);
		SetGlobalVarInt("WardrobeAchievement", 1);
		SetGlobalVarInt("EnemiesAchievement", 1);
		SetGlobalVarInt("PuzzleAchievement", 1);
		//SetGlobalVarInt("NoPuzzleAchievement", 1);
		SetGlobalVarInt("NoStatuesAchievement", 1);
		SetGlobalVarInt("SanityAchievement", 1);
		SetGlobalVarInt("SlimesAchievement", 1);
		SetGlobalVarInt("LightsAchievement", 1);
	}
	
	PreloadParticleSystem("ps_acid_web_dissolve.ps");
	PreloadParticleSystem("ps_dust_falling.ps");
	PreloadParticleSystem("ps_light_dust.ps");
	PreloadParticleSystem("ps_light_dust_large.ps");
	PreloadParticleSystem("ps_area_fog.ps");
	PreloadParticleSystem("ps_area_fog_large.ps");
	PreloadParticleSystem("ps_area_fog_small.ps");
	PreloadParticleSystem("ps_area_fog_sewer_long_warmup.ps");
	PreloadParticleSystem("ps_door_damage_wood.ps");
	PreloadParticleSystem("ps_break_wood.ps");
	
	PreloadSound("02_woosh");
	PreloadSound("02_guardian_idle_rand.snt");
	PreloadSound("04_ambience_wind_eerie.snt");
	PreloadSound("05_piano_memory.snt");
	PreloadSound("05_saw_voice1.snt");
	PreloadSound("05_saw_voice2.snt");
	PreloadSound("05_saw_voice3.snt");
	PreloadSound("05_strange_suffer.snt");
	PreloadSound("23_terror.snt");
	PreloadSound("general_thunder.snt");
	
	PreloadSound("gameplay_acid_web.snt");
	PreloadSound("lock_door.snt");
	PreloadSound("locked_door.snt");
	PreloadSound("open_door.snt");
	PreloadSound("open_door_long.snt");
	PreloadSound("door_gate_bar_locked.snt");
	PreloadSound("door_mansion_close.snt");
	PreloadSound("door_mansion_open.snt");
	PreloadSound("close_door.snt");
	PreloadSound("close_door_long.snt");
	PreloadSound("unlock_door.snt");
	PreloadSound("react_breath.snt");
	PreloadSound("react_breath_slow.snt");
	PreloadSound("react_pant.snt");
	PreloadSound("react_scare.snt");
	PreloadSound("react_sigh.snt");
	PreloadSound("general_fire_burning.snt");
	PreloadSound("general_fire_burning_low.snt");
	PreloadSound("break_pottery.snt");
	PreloadSound("break_glass_bottle.snt");
	PreloadSound("break_glass_large.snt");
	PreloadSound("break_wood.snt");
	PreloadSound("break_wood_metal.snt");
	PreloadSound("guardian_activated.snt");
	PreloadSound("guardian_ontop.snt");
	PreloadSound("hit_wood.snt");
	PreloadSound("player_climb.snt");
	PreloadSound("player_crouch.snt");
	PreloadSound("player_jump.snt");
	PreloadSound("player_stand.snt");
	PreloadSound("roll_wood.snt");
	PreloadSound("slime_attack_normal_hit.snt");
	PreloadSound("slime_create.snt");
	PreloadSound("slime_loop.snt");
	PreloadSound("step_run_dirt.snt");
	PreloadSound("step_walk_dirt.snt");
	PreloadSound("step_sneak_dirt.snt");
	PreloadSound("step_run_fabric.snt");
	PreloadSound("step_walk_fabric.snt");
	PreloadSound("step_sneak_fabric.snt");
	PreloadSound("step_run_metal.snt");
	PreloadSound("step_walk_metal.snt");
	PreloadSound("step_sneak_metal.snt");
	PreloadSound("step_run_organic.snt");
	PreloadSound("step_walk_organic.snt");
	PreloadSound("step_sneak_organic.snt");
	PreloadSound("step_run_rock.snt");
	PreloadSound("step_walk_rock.snt");
	PreloadSound("step_sneak_rock.snt");
	PreloadSound("step_run_wood.snt");
	PreloadSound("step_run_wood_squeaky.snt");
	PreloadSound("step_walk_wood.snt");
	PreloadSound("step_walk_wood_squeaky.snt");
	PreloadSound("step_sneak_wood.snt");
	PreloadSound("step_sneak_wood_squeaky.snt");
	PreloadSound("flashback_flash.snt");
	PreloadSound("hurt_pant.snt");
	PreloadSound("sanity_damage.snt");
	PreloadSound("sanity_drain_high.snt");
	PreloadSound("sanity_drain_med.snt");
	PreloadSound("sanity_drain_low.snt");
	PreloadSound("sanity_heartbeat.snt");
	PreloadSound("sanity_pant.snt");
	PreloadSound("ui_add_quest.snt");
	PreloadSound("ui_lantern_off.snt");
	PreloadSound("ui_lantern_on.snt");
	PreloadSound("ui_sanity_gain.snt");
	PreloadSound("ui_terror_meter.snt");
	PreloadSound("enemy_hallucination_disappear.snt");
	
	SetEntityInteractionDisabled("piano_1", true);
	SetEntityInteractionDisabled("chandelier_large_1", true);
	SetEntityInteractionDisabled("candlestick_tri_3", true);
	SetEntityInteractionDisabled("candlestick_tri_4", true);
	SetEntityInteractionDisabled("candlestick_tri_5", true);

	SetMapDisplayNameEntry("HouseDream");
	
	if(GetGlobalVarInt("HealthAchievement") == 1)
		AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
	if(GetGlobalVarInt("FastSeekerAchievement") == 1)
		SetPlayerRunSpeedMul(1.175f);
	if(GetGlobalVarInt("WardrobeAchievement") == 1)
		SetPlayerJumpForceMul(1.175f);
	if(GetGlobalVarInt("EnemiesAchievement") == 1)
	{
		SetEnemySanityDecreaseActive("grunt_1", false);
		SetEnemySanityDecreaseActive("suitor_1", false);
		SetEnemySanityDecreaseActive("suitor_2", false);
	}
	if(GetGlobalVarInt("LightsAchievement") == 1)
		SetLanternLitCallback("LanternOilForEver");
	else
		SetLanternLitCallback("LanternOilReduced");
}

void OnLeave()
{
	RemoveTimer("addhealth");
	RemoveTimer("checkhealth");
	if(GetGlobalVarInt("ItemsAchievement") == 1)
		if(GetPlayerLampOil() <= 20.0f)
			AddPlayerLampOil(20.0f);
}

void OnStart()
{
	AddQuest("FindPianoMission", "FindPianoMission");
	AddEntityCollideCallback("Player", "AreaActiveSuitor_1", "CollideAreaActiveSuitor", true, 1);
	AddEntityCollideCallback("Player", "AreaChangeFatherSound", "CollideAreaChangeFatherSound", true, 1);
	AddEntityCollideCallback("Player", "AreaDiscoverDream", "CollideAreaDiscoverDream", true, 1);
	AddEntityCollideCallback("Player", "AreaFalling", "CollideAreaFalling", false, 1);
	AddEntityCollideCallback("Player", "AreaMotherWardrobe", "CollideAreaMotherWardrobe", true, 1);
	AddEntityCollideCallback("Player", "AreaEndingPiano", "CollideAreaEndingPiano", true, 1);
	
	AddEntityCollideCallback("pot_plant_small02_26", "AreaGoblet", "CollideAreaGoblet", false, 0);

	SetMapDisplayNameEntry("HouseDream");
	
	SetupLoadScreen("LoadingHints", "20To21", 0, "game_loading_strappado.jpg");
	
	PlayMusic("23_amb.ogg", true, 1.0f, 4.0f, 0, true);
	PlaySoundAtEntity("fatherwhispers1", "05_saw_voice1", "AreaFatherPaintingSound", 0, true);
	
	CheckPoint ("Suitor1", "PlayerStartArea_2", "CPSuitor1", "DeathHints", "StealthyAndEscape");
	
	AddUseItemCallback("KeyMansion9", "key_tomb_1", "mansion_9", "UsedKeyOnDoor", true);
	
	SetMessage("Jack", "44", 8.0f);
	
	SetPropActiveAndFade("piano_2", false, 4.0f);
	
	if(GetGlobalVarInt("LabQuestFailed") == 1 || GetGlobalVarInt("CellQuestFailed") == 1)
	{
		AddEntityCollideCallback("Player", "AreaSuitorAmbush_1", "CollideAreaAmbush", true, 1);
		AddEntityCollideCallback("suitor_2", "AreaPoofSuitor_2", "CollideAreaPoofSuitor", true, 1);
	}
	else AddEntityCollideCallback("Player", "AreaPoofSuitor_1", "CollideAreaPoofSuitor", true, 1);
	if(GetGlobalVarInt("MotherQuestFailed") == 0) SetEntityActive("potion_oil_1", true);
	
	if(GetGlobalVarInt("SlimesAchievement") == 1)
		for(int p=2; p<=11; p++)
			SetEntityActive("SlimeDamageArea_" + p, false);
	if(GetGlobalVarInt("StatuesAchievement") == 1) PlaySoundAtEntity("note_generic_1_sound", "02_statue_terror.snt", "note_generic_1", 0.0f, true);
	if(ScriptDebugOn())
	{
		if(HasItem("lantern_1") == false) GiveItemFromFile("lantern_1", "lantern.ent");
		if(HasItem("ceremony_knife_1") == false) GiveItemFromFile("ceremony_knife_1", "ceremony_knife.ent");
	}
}

void LanternOilForEver(bool abLit)
{
	if(abLit == true)
	{
		SetPlayerLampOil(100.0f);
		AddTimer("fulloil", 20.0f, "TimerFullOil");
	}
	else
	{
		RemoveTimer("fulloil");
		SetPlayerLampOil(100.0f);
	}
}

void TimerFullOil(string &in asTimer)
{
	SetPlayerLampOil(100.0f);
	AddTimer(asTimer, 20.0f, "TimerFullOil");
}

void LanternOilReduced(bool abLit)
{
	if(abLit == true)
	{
		AddTimer("checkoil", 5.0f, "TimerCheckOil");
	}
	else
	{
		RemoveTimer("checkoil");
	}
}

void TimerCheckOil(string &in asTimer)
{
	if(asTimer == "checkoil")
	{
		if(GetPlayerLampOil() > 2.0f)
		{
			AddPlayerLampOil(-0.726f);
			AddTimer("checkoil", 5.0f, "TimerCheckOil");
		}
	}
}

void TimerHealthAchievement(string &in asTimer)
{
	if(asTimer == "addhealth")
	{
		if(GetPlayerHealth() <= 98.0f)
		{
			AddPlayerHealth(2.0f);
			AddTimer("addhealth", 7.0f, "TimerHealthAchievement");
		}
		else
		{
			AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
		}
	}
	else if(asTimer == "checkhealth")
	{
		if(GetPlayerHealth() > 98.0f)
		{
			AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
		}
		else
		{
			AddTimer("addhealth", 7.0f, "TimerHealthAchievement");
		}
	}
	else if(asTimer == "pausehealth")
	{
		RemoveTimer("addhealth");
		RemoveTimer("checkhealth");
	}
}

void CollideAreaGoblet(string &in asParent, string &in asChild, int alState)
{
	if(alState == -1)
	{
		AddTimer("ShooterAchievement", 0.75f, "TimerUnlockAchievement");
		SetEntityActive(asChild, false);
	}
}

void TimerUnlockAchievement(string &in asTimer)
{
	AddQuest(asTimer, asTimer);
	PlayMusic("00_achievement_unlocked", false, 0.7f, 0.5f, 10, false);
	SetGlobalVarInt(asTimer, 1);
	SetMessage("Hints", asTimer, 10.0f);
	if(asTimer == "ShooterAchievement")
	{
		SetPlayerHealth(100.0f);
		SetPlayerSanity(100.0f);
	}
}

void CollideAreaDiscoverDream(string &in asParent, string &in asChild, int alState)
{
	AddTimer("", 4.0f, "TimerStopLook");
	CheckPoint ("Falling", "PlayerStartArea_3", "CPFalling", "DeathHints", "DoNotFall");
	PlayMusic("05_house_dream_theme.ogg", true, 1.0f, 2.0f, 10, false);
	PlaySoundAtEntity("endingpianosound", "05_piano_memory", "piano_1", 0, true);
	SetMessage("Jack", "45", 8.0f);
	StartPlayerLookAt("piano_1", 2.0f, 4.0f, "");
	StopMusic(2.0f, 0);
	CompleteQuest("FindPianoMission", "FindPianoMission");
	AddQuest("PianoMission", "PianoMission");
}

void CollideAreaFalling(string &in asParent, string &in asChild, int alState)
{
	GivePlayerDamage(100000.0f, "BloodSplat", false, true);
	SetGlobalVarInt("PianoQuestFailed", 1);
	SetGlobalVarInt("PianoQuest", 1);
}

void CPFalling(string &in asName, int alCount)
{
	if(GetGlobalVarInt("ItemsAchievement") == 1)
		if(GetPlayerLampOil() <= 20.0f)
			AddPlayerLampOil(20.0f);
	if(GetGlobalVarInt("FastSeekerAchievement") == 1)
		SetPlayerRunSpeedMul(1.175f);
	if(GetGlobalVarInt("WardrobeAchievement") == 1)
		SetPlayerJumpForceMul(1.175f);
	if(GetGlobalVarInt("NoDeathAchievement") == 1)
		SetPlayerHealth(100.1f);
	if(GetGlobalVarInt("SanityAchievement") == 1)
		SetPlayerSanity(100.1f);
	if(GetGlobalVarInt("PuzzleAchievement") == 1)
	{
		if(alCount == 2)
		{
			AddTimer("piano", 2.0f, "TimerLoadCave");
			StopSound("endingpianosound", 1.0f);
			StopMusic(1.0f, 10);
			StopMusic(1.0f, 0);
		}
		else
		{
			PlayMusic("05_house_dream_theme.ogg", true, 1.0f, 2.0f, 10, false);
		}
	}
	else if(GetGlobalVarInt("NoPuzzleAchievement") == 1)
	{
		AddTimer("piano", 2.0f, "TimerLoadCave");
		StopSound("endingpianosound", 1.0f);
		StopMusic(1.0f, 10);
		StopMusic(1.0f, 0);
	}
	else
	{
		if(alCount == 1)
		{
			AddTimer("piano", 2.0f, "TimerLoadCave");
			StopSound("endingpianosound", 1.0f);
			StopMusic(1.0f, 10);
			StopMusic(1.0f, 0);
		}
		else
		{
			PlayMusic("05_house_dream_theme.ogg", true, 1.0f, 2.0f, 10, false);
		}
	}
}

void CollideAreaMotherWardrobe(string &in asParent, string &in asChild, int alState)
{
	AddBodyImpulse("cabinet_nice_1_leftDoor", -4, 0, 4, "world");
	AddBodyImpulse("cabinet_nice_1_rightDoor", -4, 0, 4, "world");
	GiveSanityBoostSmall();
	for(int i=1; i<=10; i++) SetPropActiveAndFade("candlestick_floor_red_" + i, true, 2.0f);
}

void CollideAreaEndingPiano(string &in asParent, string &in asChild, int alState)
{
	SetLanternActive(false, false);

	AddTimer("", 4.0f, "TimerStopLook");
	AddTimer("piano", 4.0f, "TimerLoadCave");
	GiveSanityBoost();
	if(GetGlobalVarInt("ShooterAchievement") == 1)
	{
		AddPlayerHealth(50.0f);
		AddPlayerSanity(50.0f);
	}
	PlayMusic("20_puzzle.ogg", false, 1.0f, 0.1f, 10, false);
	SetMessage("Jack", "46", 4.0f);
	SetPlayerActive(false);
	StartPlayerLookAt("piano_1", 2.0f, 4.0f, "");
	StopSound("endingpianosound", 1.0f);
	StopMusic(1.0f, 0);
	TeleportPlayer("PlayerStartArea_4");
	
	SetGlobalVarInt("PianoQuestFailed", 0);
	SetGlobalVarInt("PianoQuest", 1);
}

void TimerLoadCave(string &in asTimer)
{
	CompleteQuest("FindPianoMission", "FindPianoMission");
	CompleteQuest("PianoMission", "PianoMission");
	
	RemoveItem("key_tomb_1");
	
	string sPlayerStartArea = "PlayerStartArea_2";
	if(GetGlobalVarInt("PianoQuestFailed") == 1) sPlayerStartArea = "PlayerStartArea_3";

	if(asTimer == "piano") ChangeMap("05_cave_hard.map", sPlayerStartArea, "02_woosh", "enemy_hallucination_disappear");
}

void PickedUpNote(string &in asItem)
{
	if(asItem == "note_generic_1")
	{
		AddGlobalVarInt("StrangeNoteCount", 1);
		StopSound("note_generic_1_sound", 0.1f);
	}
	if(GetGlobalVarInt("StrangeNoteCount") == 9)
	{
		CompleteQuest("StrangeNotesMission", "StrangeNotesMission");
		GiveSanityBoost();
		PlaySoundAtEntity("danstatuesaw", "05_strange_suffer.snt", "Player", 0.0f, false);
		PlayMusic("12_puzzle_epoxy", false, 1.0f, 0.1f, 10, false);
		
		SetMessage("Strange", "Suffer", 5.0f);
		AddTimer("scareeffect", 1.0f, "TimerPlayerReactions");
		AddTimer("breatheffect", 3.0f, "TimerPlayerReactions");
	}
}

void PickedUpKey(string &in asEntity)
{
	if(asEntity == "key_tomb_1")
	{
		AddTimer("scare", 0.1f, "TimerPlayerReactions");
		AddTimer("breath", 2.0f, "TimerPlayerReactions");
		AddTimer("terrorsound", 8.0f, "TimerStopSound");
		StopSound("fatherwhispers2", 0.5f);
		PlaySoundAtEntity("fatherwhispers3", "05_saw_voice3", "AreaFatherPaintingSound", 0, true);
		PlaySoundAtEntity("terrorsound", "23_terror.snt", "Player", 3.0f, true);
		FadeLightTo("FatherPaintingLight", 1.0f, 0.1f, 0.2f, 1.0f, -1, 1);
		
		SetEntityActive("AreaActiveSuitor_1", true);
		
		SetLampLit("chandelier_large_1", true, false);
		SetLampLit("candlestick_tri_3", true, false);
		SetLampLit("candlestick_tri_4", true, false);
		SetLampLit("candlestick_tri_5", true, false);
		
		if(GetGlobalVarInt("FatherQuestFailed") == 1)
		{
			SetPlayerActive(false);
			SetEntityActive("SlimeDamageArea_1", true);
			AddTimer("activeplayer", 2.0f, "TimerStopLook");
		}
	}
}

void TimerStopSound(string &in asTimer)
{
	StopSound(asTimer, 2.0f);
}

void CPSuitor1(string &in asName, int alCount)
{
	if(GetGlobalVarInt("ItemsAchievement") == 1)
		if(GetPlayerLampOil() <= 20.0f)
			AddPlayerLampOil(20.0f);
	if(GetGlobalVarInt("FastSeekerAchievement") == 1)
		SetPlayerRunSpeedMul(1.175f);
	if(GetGlobalVarInt("WardrobeAchievement") == 1)
		SetPlayerJumpForceMul(1.175f);
	if(GetGlobalVarInt("NoDeathAchievement") == 1)
		SetPlayerHealth(100.1f);
	if(GetGlobalVarInt("SanityAchievement") == 1)
		SetPlayerSanity(100.1f);
	AddEntityCollideCallback("Player", "AreaActiveSuitor_1", "CollideAreaActiveSuitor", true, 1);
	PlayMusic("23_amb.ogg", true, 1.0f, 4.0f, 0, true);
}

void CollideAreaChangeFatherSound(string &in asParent, string &in asChild, int alState)
{
	AddTimer("scareeffect", 0.1f, "TimerPlayerReactions");
	AddTimer("breatheffect", 2.0f, "TimerPlayerReactions");
	PlaySoundAtEntity("fatherwhispers2", "05_saw_voice2", "AreaFatherPaintingSound", 0, true);
	StopSound("fatherwhispers1", 1.0f);
	
	AddPropImpulse("armour_rusty_complete_2", 10, 0, 0, "world");
	AddPropImpulse("armour_rusty_complete_20", -10, 0, 0, "world");
	AddPropImpulse("armour_rusty_complete_16", 10, 0, 0, "world");
	AddPropImpulse("armour_rusty_complete_19", -10, 0, 0, "world");
}

void CollideAreaPoofSuitor(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaPoofSuitor_2")
	{
		AddTimer("activeplayer", 0.5f, "TimerStopLook");
		FadeEnemyToSmoke(asParent, true);
		FadeLightTo("PointLight_3", 0, 0, 0, 0, -1, 0.5f);
		SetPlayerRollTo("medbig_midslow_fall_lanternoff", 8.0f);
		GiveSanityDamage(35.0f, true);
		PlayMusic("25_puzzle_escape", false, 0.7f, 0, 10, false);
	}
	if(asChild == "AreaPoofSuitor_1")
	{
		FadeEnemyToSmoke("suitor_1", true);
		FadeEnemyToSmoke("grunt_1", false);
		GiveSanityBoostSmall();
		PlayMusic("25_puzzle_escape", false, 0.6f, 0.1f, 10, false);
		StopMusic(0.1f, 0);
	}
}

//START PLAYER ROLL FUNCTIONS
void SetPlayerRollTo(string asType, float afTime)
{
	float fSpeed = 0.0f;
	string sProfile = "normal";
	if(StringContains(asType, "veryslow"))
	{
		fSpeed = RandFloat(10.0f, 20.0f);
		sProfile = "veryslow";
	}
	else if(StringContains(asType, "midslow"))
	{
		fSpeed = RandFloat(37.5f, 42.5f);
		sProfile = "midslow";
	}
	else if(StringContains(asType, "slow"))
	{
		fSpeed = RandFloat(25.0f, 30.0f);
		sProfile = "slow";
	}
	else if(StringContains(asType, "midquick"))
	{
		fSpeed = RandFloat(47.5f, 52.5f);
		sProfile = "midquick";
	}
	else if(StringContains(asType, "mid"))
	{
		fSpeed = RandFloat(45.0f, 50.0f);
		sProfile = "mid";
	}
	else if(StringContains(asType, "veryquick"))
	{
		fSpeed = 60.0f;
		sProfile = "veryquick";
	}
	else if(StringContains(asType, "quick"))
	{
		fSpeed = RandFloat(50.0f, 55.0f);
		sProfile = "quick";
	}
	else
		fSpeed = 1.0f;
	
	int iRand = RandInt(0, 1);
	if(iRand == 0)
	{
		if(StringContains(asType, "verysmall"))
			FadePlayerRollTo(RandFloat(5.0f, 10.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "medsmall"))
			FadePlayerRollTo(RandFloat(20.0f, 25.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "small"))
			FadePlayerRollTo(RandFloat(10.0f, 20.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "medbig"))
			FadePlayerRollTo(RandFloat(45.0f, 75.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "med"))
			FadePlayerRollTo(RandFloat(30.0f, 60.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "big"))
			FadePlayerRollTo(RandFloat(60.0f, 90.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "max"))
			FadePlayerRollTo(360.0f, fSpeed, fSpeed + 1.25f);
		else
			FadePlayerRollTo(45.0f, fSpeed, fSpeed + 1.25f);
	}
	else
	{
		if(StringContains(asType, "verysmall"))
			FadePlayerRollTo(RandFloat(-10.0f, -5.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "medsmall"))
			FadePlayerRollTo(RandFloat(-25.0f, -20.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "small"))
			FadePlayerRollTo(RandFloat(-20.0f, -10.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "medbig"))
			FadePlayerRollTo(RandFloat(-75.0f, -45.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "med"))
			FadePlayerRollTo(RandFloat(-60.0f, -30.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "big"))
			FadePlayerRollTo(RandFloat(-90.0f, -60.0f), fSpeed, fSpeed + 1.25f);
		else if(StringContains(asType, "max"))
			FadePlayerRollTo(-360.0f, fSpeed, fSpeed + 1.25f);
		else
			FadePlayerRollTo(-45.0f, fSpeed, fSpeed + 1.25f);
	}
	
	if(StringContains(asType, "fall"))
	{
		PlayGuiSound("player_bodyfall.snt", 0.9f);
		PlayGuiSound("step_sneak_rock_rev.snt", 0.8f);
		PlaySoundAtEntity("ear_ring_snt", "insanity_ear_ring.snt", "Player", 0.5f, false);
		SetPlayerCrouching(true);
		SetPlayerCrouchDisabled(true);
		SetPlayerState("speedslow");
	}
	
	if(StringContains(asType, "active"))
		SetPlayerState("activeoff_inventory");
	else if(StringContains(asType, "zoomin"))
	{
		SetPlayerState("activeoff");
		SetScreenEffect("zoomin_" + sProfile);
	}
	else if(StringContains(asType, "zoomout"))
	{
		SetPlayerState("activeoff");
		SetScreenEffect("zoomout_" + sProfile);
	}

	if(StringContains(asType, "lanternon") && GetLanternActive() == false)
	{
		if(StringContains(asType, "silent"))
			SetLanternActive(true, false);
		else
			SetLanternActive(true, true);
	}
	else if(StringContains(asType, "lanternoff") && GetLanternActive())
	{
		if(StringContains(asType, "silent"))
			SetLanternActive(false, false);
		else
			SetLanternActive(false, true);
	}
	
	if(afTime != 0)
		AddTimer(asType, afTime, "TimerPlayerStopRollTo");
}

void TimerPlayerStopRollTo(string asTimer)
{
	float fSpeed = 0.0f;
	if(StringContains(asTimer, "fall"))
	{
		StopSound("ear_ring_snt", 3.0f);
		SetPlayerCrouching(false);
		SetPlayerCrouchDisabled(false);
		SetPlayerState("speedslow");
		AddTimer("speednormal", RandFloat(1.75f, 2.25f), "SetPlayerState");
	}
	
	if(StringContains(asTimer, "active"))
		SetPlayerState("activeon_inventory");
	else if(StringContains(asTimer, "zoom"))
	{
		SetPlayerState("activeon");
		SetScreenEffect("zoomnormal_midslow");
	}
	
	if(StringContains(asTimer, "veryslow"))
		fSpeed = RandFloat(10.0f, 20.0f);
	else if(StringContains(asTimer, "midslow"))
		fSpeed = RandFloat(37.5f, 42.5f);
	else if(StringContains(asTimer, "slow"))
		fSpeed = RandFloat(25.0f, 30.0f);
	else if(StringContains(asTimer, "midquick"))
		fSpeed = RandFloat(47.5f, 52.5f);
	else if(StringContains(asTimer, "mid"))
		fSpeed = RandFloat(45.0f, 50.0f);
	else if(StringContains(asTimer, "veryquick"))
		fSpeed = 60.0f;
	else if(StringContains(asTimer, "quick"))
		fSpeed = RandFloat(50.0f, 55.0f);
	else
		fSpeed = 1.0f;
	
	FadePlayerRollTo(0.0f, fSpeed, fSpeed + 1.25f);
}
//END PLAYER ROLL FUNCTIONS

void SetScreenEffect(string asType)
{
	float fAmount = 0.0f;
	if(StringContains(asType, "verysmall"))
		fAmount = 0.2f;
	else if(StringContains(asType, "medsmall"))
		fAmount = 0.5f;
	else if(StringContains(asType, "small"))
		fAmount = 0.4f;
	else if(StringContains(asType, "medbig"))
		fAmount = 0.7f;
	else if(StringContains(asType, "med"))
		fAmount = 0.6f;
	else if(StringContains(asType, "big"))
		fAmount = 0.8f;
	else if(StringContains(asType, "max"))
		fAmount = 1.0f;
	else
		fAmount = 0.6f;
	
	float fSpeed = 0.0f;
	if(StringContains(asType, "veryslow"))
		fSpeed = 8.0f;
	else if(StringContains(asType, "midslow"))
		fSpeed = 3.0f;
	else if(StringContains(asType, "slow"))
		fSpeed = 4.0f;
	else if(StringContains(asType, "midquick"))
		fSpeed = 1.5f;
	else if(StringContains(asType, "mid"))
		fSpeed = 2.0f;
	else if(StringContains(asType, "veryquick"))
		fSpeed = 0.5f;
	else if(StringContains(asType, "quick"))
		fSpeed = 1.0f;
	else
		fSpeed = 2.0f;
	
	if(StringContains(asType, "flashbackon"))
	{
		PlayGuiSound("flashback_flash.snt", 0.8f);
		StartEffectFlash(0.75f, 1.0f, 0.5f);
		FadeImageTrailTo(0.3f, 0.3f);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.1f, 1.0f);
		FadeSepiaColorTo(0.5f, 0.25f);
	}
	else if(StringContains(asType, "flashbackoff"))
	{
		StartEffectFlash(0.5f, 1.0f, 0.75f);
		FadeImageTrailTo(0.0f, 2.0f);
		FadeSepiaColorTo(0.0f, 2.0f);
		FadeRadialBlurTo(0.0f, 2.0f);
	}
	else if(StringContains(asType, "whitetoblack"))
	{
		PlayGuiSound("scare_wall_stomp.snt", 1.0f);
		StartScreenShake(0.075f, 4.5f, 0.055f, 0.5f);
		FadeGlobalSoundVolume(0.0f, 0.3f);
		StartEffectFlash(0.2f, 0.1f, 0.3f);
		FadeOut(0.3f);
		FadePlayerFOVMulTo(0.5f, 0.5f);
		SetRadialBlurStartDist(0.1f);
		FadeRadialBlurTo(1.0f, 0.5f);
	}
	else if(StringContains(asType, "allnormal"))
	{
		FadeImageTrailTo(0.0f, fSpeed);
		FadeSepiaColorTo(0.0f, fSpeed);
		FadeRadialBlurTo(0.0f, fSpeed);
		FadePlayerFOVMulTo(1.0f, fSpeed);
		FadePlayerAspectMulTo(1.0f, fSpeed);
		ShowPlayerCrossHairIcons(true);
	}
	else if(StringContains(asType, "trail"))
		FadeImageTrailTo(fAmount, fSpeed);
	else if(StringContains(asType, "sepia"))
		FadeSepiaColorTo(fAmount, fSpeed);
	else if(StringContains(asType, "blur"))
	{
		if(fAmount != 0)
			SetRadialBlurStartDist(fAmount / 2);
		
		FadeRadialBlurTo(fAmount, fSpeed);
	}
	else if(StringContains(asType, "_whitetext"))
	{
		if(asType.length() > 10)
			StartEffectEmotionFlash("EmotionFlashbacks", StringSub(asType, 0, asType.length() - 10), "");
		
		return;
	}
	else if(StringContains(asType, "white"))
		StartEffectFlash(fSpeed, fAmount, fSpeed + 0.5f);
	else if(StringContains(asType, "zoomin"))
	{
		FadePlayerFOVMulTo(1.0f - fAmount, fSpeed);
		FadePlayerAspectMulTo(1.0f - fAmount, fSpeed);
	}
	else if(StringContains(asType, "zoomout"))
	{
		FadePlayerFOVMulTo(1.0f + fAmount, fSpeed);
		FadePlayerAspectMulTo(1.0f + fAmount, fSpeed);
	}
	else if(StringContains(asType, "zoomnormal"))
	{
		FadePlayerFOVMulTo(1.0f, fSpeed);
		FadePlayerAspectMulTo(1.0f, fSpeed);
	}
	else if(StringContains(asType, "in"))
		FadeIn(fSpeed);
	else if(StringContains(asType, "out"))
		FadeOut(fSpeed);
	
	if(StringContains(asType, "activeon"))
		SetPlayerState("activeon_inventory");
	else if(StringContains(asType, "activeoff"))
		SetPlayerState("activeoff_inventory");
}

void SetPlayerState(string asType)
{
	float fX = 0.0f;
	float fY = 0.0f;
	float fZ = 0.0f;
	float fAmount = 0.0f;
	if(StringContains(asType, "verysmall"))
		fAmount = RandFloat(100.0f, 500.0f);
	else if(StringContains(asType, "medsmall"))
		fAmount = RandFloat(1500.0f, 2000.0f);
	else if(StringContains(asType, "small"))
		fAmount = RandFloat(750.0f, 1000.0f);
	else if(StringContains(asType, "medbig"))
		fAmount = RandFloat(5500.0f, 7500.0f);
	else if(StringContains(asType, "med"))
		fAmount = RandFloat(2500.0f, 5000.0f);
	else if(StringContains(asType, "big"))
		fAmount = RandFloat(8000.0f, 9000.0f);
	else if(StringContains(asType, "max"))
		fAmount = 10000.0f;
	else
		fAmount = 5000.0f;
	
	if(StringContains(asType, "speedveryquick"))
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		if(StringContains(asType, "runoff") == false)
			SetPlayerRunSpeedMul(1.35f);
	}
	else if(StringContains(asType, "speedquick"))
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		if(StringContains(asType, "runoff") == false)
			SetPlayerRunSpeedMul(1.175f);
	}
	else if(StringContains(asType, "speednormal"))
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		if(GetGlobalVarInt("FastSeekerAchievement") == 1)
			SetPlayerRunSpeedMul(1.175f);
		else
			SetPlayerRunSpeedMul(1.0f);
		
		if(GetGlobalVarInt("WardrobeAchievement") == 1)
			SetPlayerJumpForceMul(1.175f);
	}
	else if(StringContains(asType, "speedslow"))
	{
		SetPlayerMoveSpeedMul(0.5f);
		SetPlayerLookSpeedMul(1.0f);
		if(StringContains(asType, "runoff") == false)
			SetPlayerRunSpeedMul(0.5f);
	}
	else if(StringContains(asType, "speedveryslow"))
	{
		SetPlayerMoveSpeedMul(0.1f);
		SetPlayerLookSpeedMul(0.5f);
		if(StringContains(asType, "runoff") == false)
			SetPlayerRunSpeedMul(0.1f);
	}
	
	if(StringContains(asType, "runoff"))
		SetPlayerRunSpeedMul(0.0f);
	
	if(StringContains(asType, "force"))
	{
		if(StringContains(asType, "-x"))
			fX = -fAmount;
		else if(StringContains(asType, "x"))
			fX = fAmount;
		
		if(StringContains(asType, "-y"))
			fY = -fAmount;
		else if(StringContains(asType, "y"))
			fY = fAmount;
		
		if(StringContains(asType, "-z"))
			fZ = -fAmount;
		else if(StringContains(asType, "z"))
			fZ = fAmount;
		
		AddPlayerBodyForce(fX, fY, fZ, false);
	}
	
	if(StringContains(asType, "sanitydrainon"))
		SetSanityDrainDisabled(false);
	else if(StringContains(asType, "sanitydrainoff"))
		SetSanityDrainDisabled(true);
	
	if(StringContains(asType, "darknesson"))
		SetInDarknessEffectsActive(true);
	else if(StringContains(asType, "darknessoff"))
		SetInDarknessEffectsActive(false);
	
	if(StringContains(asType, "falldamageon"))
		SetPlayerFallDamageDisabled(false);
	else if(StringContains(asType, "falldamageoff"))
		SetPlayerFallDamageDisabled(true);
	
	if(StringContains(asType, "jumpbig"))
		SetPlayerJumpForceMul(1.175f);
	else if(StringContains(asType, "jumpnormal"))
		SetPlayerJumpForceMul(1.0f);
	else if(StringContains(asType, "jumpon"))
		SetPlayerJumpDisabled(false);
	else if(StringContains(asType, "jumpoff"))
		SetPlayerJumpDisabled(true);
	
	if(StringContains(asType, "crouchon"))
		SetPlayerCrouchDisabled(false);
	else if(StringContains(asType, "crouchoff"))
	{
		SetPlayerCrouching(false);
		SetPlayerCrouchDisabled(false);
	}
	
	if(StringContains(asType, "bodynormal"))
	{
		SetPlayerSanity(100.0f);
		SetPlayerHealth(100.0f);
	}
	
	if(StringContains(asType, "allnormal"))
	{
		SetInventoryDisabled(false);
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		ShowPlayerCrossHairIcons(true);
		SetPlayerSanity(100.0f);
		SetPlayerHealth(100.0f);
	}

	if(StringContains(asType, "activeon"))
	{
		SetPlayerActive(true);
		ShowPlayerCrossHairIcons(true);
		if(StringContains(asType, "inventory"))
			SetInventoryDisabled(false);
	}
	else if(StringContains(asType, "activeoff"))
	{
		SetPlayerActive(false);
		ShowPlayerCrossHairIcons(false);
		ExitInventory();
		if(StringContains(asType, "inventory"))
			SetInventoryDisabled(true);
	}
}

void CollideAreaAmbush(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaSuitorAmbush_1")
	{
		FadeLightTo("PointLight_3", 1.0f, 0.1f, 0.2f, 1.0f, -1, 0.5f);
		SetPlayerSanity(90.0f);
	
		SetEntityActive("suitor_1", false);
		SetEntityActive("grunt_1", false);
		ResetProp("mansion_11");
		SetPlayerActive(false);
		SetPropHealth("mansion_11", 0);
		PlayMusic("29_amb_end_intense", false, 0.6f, 0.1f, 10, false);
		StopMusic(0.1f, 0);
		TeleportPlayer("PlayerStartArea_3");
		StartPlayerLookAt("suitor_2", 3.0f, 6.0f, "");
		
		AddEnemyPatrolNode("suitor_2", "PathNodeArea_413", 5.001f, "");
		
		SetEntityActive("suitor_2", true);
		
		if(GetGlobalVarInt("EnemiesAchievement") == 1)	
			SetEnemySanityDecreaseActive("suitor_2", false);
		
		SetMessage("Jack", "ICantMove", 5.0f);
	}
}

void CollideAreaActiveSuitor(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaActiveSuitor_1")
	{
		AddTimer("suitor1", RandFloat(2.0f, 4.0f), "TimerActiveEnemy");
	}
}

void TimerActiveEnemy(string &in asTimer)
{
	AddTimer("scare", 1.0f, "TimerPlayerReactions");
	AddTimer("breath", 3.0f, "TimerPlayerReactions");
	if(asTimer == "suitor1")
	{
		ClearEnemyPatrolNodes("suitor_1");
		
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_294", 2.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_281", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_179", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_156", 3.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_141", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_324", 3.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_141", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_159", 2.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_319", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_281", 1.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_286", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_288", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_424", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_491", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_489", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_500", 0.001f, "");
		AddEnemyPatrolNode("suitor_1", "PathNodeArea_506", 0.001f, "");
		
		SetEntityActive("suitor_1", true);
		
		if(GetGlobalVarInt("EnemiesAchievement") == 1)	
			SetEnemySanityDecreaseActive("suitor_1", false);
		
		if(GetGlobalVarInt("WineQuestFailed") == 1 || GetGlobalVarInt("StorageQuestFailed") == 1)
		{
			ClearEnemyPatrolNodes("grunt_1");
		
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_304", 3.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_285", 2.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_288", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_289", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_392", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_389", 5.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_282", 2.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_159", 3.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_319", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_281", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_389", 2.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_282", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_295", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_299", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_311", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_310", 3.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_311", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_299", 0.001f, "");
			AddEnemyPatrolNode("grunt_1", "PathNodeArea_286", 1.001f, "");
			
			SetEntityActive("grunt_1", true);
			
			if(GetGlobalVarInt("EnemiesAchievement") == 1)	
				SetEnemySanityDecreaseActive("grunt_1", false);
		}
	}
}

void UsedKeyOnDoor(string &in asItem, string &in asEntity)
{
	PlaySoundAtEntity("unlock_door", "unlock_door", asEntity, 0, false);
	SetSwingDoorLocked(asEntity, false, false);
	RemoveItem(asItem);
}

void TimerFadeScreen(string &in asTimer)
{
	if(asTimer == "fadein")
	{
		FadeIn(2.0f);
	}
	if(asTimer == "fadeout")
	{
		FadeOut(2.0f);
	}
	if(asTimer == "fadeinactiveplayer")
	{
		FadeIn(2.0f);
		SetPlayerActive(true);
	}
	if(asTimer == "fadeoutactiveplayer")
	{
		FadeOut(2.0f);
		SetPlayerActive(true);	
	}	
}

void TimerStopLook(string &in asTimer)
{
	if(asTimer == "resetspeedmul")
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		if(GetGlobalVarInt("FastSeekerAchievement") == 1)
			SetPlayerRunSpeedMul(1.175f);
		if(GetGlobalVarInt("WardrobeAchievement") == 1)
			SetPlayerJumpForceMul(1.175f);
	}
	if(asTimer == "activeplayer")
	{
		SetPlayerActive(true);
	}
	StopPlayerLookAt();
}

void TimerPlayerReactions(string &in asTimer)
{
	if(asTimer == "scareeffect")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(8.0f, false);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
	}
	else if(asTimer == "breatheffect")
	{
		PlayGuiSound("react_breath", 0.4f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "sigheffect")
	{
		PlayGuiSound("react_sigh", 0.4f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "panteffect")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(10.0f, false);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
	}
	else if(asTimer == "scare")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(8.0f, true);
	}
	else if(asTimer == "breath")
	{
		PlayGuiSound("react_breath", 0.5f);
		GiveSanityDamage(4.0f, false);
	}
	else if(asTimer == "sigh")
	{
		PlayGuiSound("react_sigh", 0.5f);
		GiveSanityDamage(2.0f, false);
	}
	else if(asTimer == "pant")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(10.0f, true);
	}
}