
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "02_entrance_hall";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8};
int[] gviEasierOilPotionsCodesArray = {1, 2};
int[] gviEasierHealthPotionsCodesArray = {0};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3, 4};
int[] gviNormalOilPotionsCodesArray = {1, 2};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {2, 6};
int[] gviToughOilPotionsCodesArray = {1};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

////////////////////
//BEGIN LARGE ROOM//
/*Bird wings when entering room first time
 */
void CollideEnterLargeRoom(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("BirdSound", "general_birds_flee", "BirdSound", 0, false);
	
	AddTimer("whirl", 7, "TimerDustWhirl");

	/*DEBUG
	 */	
	AddDebugMessage("Entered big room, birds flee!", true);
}
/*Random whirls of dust
 */
void TimerDustWhirl(string &in asTimer)
{
	int iWhirl= RandFloat(1, 4);
	float fWhirl= RandFloat(0.5f,15.5f);
	
	CreateParticleSystemAtEntity("whirl"+iWhirl, "ps_dust_whirl.ps", "Whirl0"+iWhirl, false);
	
	PlaySoundAtEntity("whirl"+iWhirl, "general_wind_whirl.snt", "Whirl0"+iWhirl, 0, false);
	
	AddTimer("whirl", 14.5f+fWhirl, "TimerDustWhirl");
	
	/*DEBUG
	 */
	AddDebugMessage("Where Whirl Now: "+iWhirl+" Next Whirl In: "+(14.5f+fWhirl), true);
}
//END LARGE ROOM//
//////////////////


//////////////////////
//BEGIN BLOCKED DOOR//
/*Break wood planks to unlock door
 */
void FuncUnlockDoor(string &in asEntity, string &in asType)
{
	SetSwingDoorLocked("castle_arched01_1", false, true);
	
	/*DEBUG
	 */
	AddDebugMessage("UnlockDoor!", true);
}
//END BLOCKED DOOR//
////////////////////


/////////////////////////
//BEGIN GUARDIAN EVENTS//
string[] aSlime;	//Holds the entities to SetPropActiveAndFade during the guardian events
/*Guardian setup and effects specific for each event
 */
void TimerGuardSlime(string &in asTimer)
{
	if(asTimer == "fade1"){
		//FadePlayerFOVMulTo(1.5f, 0.01f);
		
		/* if(GetLanternActive()){
			SetLocalVarInt("LanternActive", 1);
			SetLanternActive(false, true);
			SetLanternDisabled(true);
		} else SetLanternDisabled(true); */
		
		PlayerReactions(1.0f);
		SetPlayerMoveSpeedMul(0.8f);
		SetPlayerRunSpeedMul(0.5f);
		return;
	} 
	else if(asTimer == "fade2"){
		FadeImageTrailTo(0,2);
		//FadePlayerFOVMulTo(1, 1.0f);
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		AddTimer("lantern", 1.0f, "TimerGuardSlime");
		return;
	}
	else if(asTimer == "lantern"){
		/* if(GetLocalVarInt("LanternActive") == 1){
			SetLocalVarInt("LanternActive", 0);
			SetLanternDisabled(false);
			SetLanternActive(true, true);
		} else SetLanternDisabled(false);	 */
		return;
	}
	
	if(asTimer == "guard1"){
		GuardianEffects(0.02f,4.5f,1.0f,0.8f,1);

		FadeLightTo("BoxLight_2", 0.201f, 0.093f, 0.133f, 0.0f, -1, 5.0f);
		
		PlaySoundAtEntity("slimeloop1", "slime_loop", "slime_pile_3", 3, true);
		PlaySoundAtEntity("slimeloop2", "slime_loop", "slime_anim_ceiling_1", 4, true);
		PlaySoundAtEntity("slimeloop3", "slime_loop", "slime_pile_large_2", 6, true);
		PlaySoundAtEntity("amb_guard", "amb_guardian", "chandelier_simple_4", 5, true);
		
		SetEntityActive("SlimeDamageArea_1", true);
		AddTimer("SlimeDamageArea_2", 4, "TimerActivateSlimeEntity");		

		string[] aSlime = { "slime_pile_1","slime_pile_2","slime_pile_3","slime_pile_4","slime_pile_5",
							"slime_egg_1","slime_egg_2","slime_egg_3","slime_egg_4","slime_egg_5",
							"slime_pile_large_1","slime_pile_large_2","slime_pile_large_3","slime_pile_large_4","slime_pile_large_5",
							"slime_6way_1","slime_6way_2","slime_6way_3","slime_6way_4",
							"slime_3way_2","slime_3way_3","slime_3way_4","slime_3way_5",
							"slime_anim_wall_1","slime_anim_ceiling_1" };			
		::aSlime = aSlime;
	} 
	else if(asTimer == "guard2"){
		GuardianEffects(0.035f,3.0f,1.0f,1.1f,2);
	
		FadeLightTo("BoxLight_2", 0.201f, 0.04f, 0.08f, 0.0f, -1, 5.0f);
		
		PlaySoundAtEntity("slimeloop4", "slime_loop", "slime_egg2_3", 3, true);
		PlaySoundAtEntity("slimeloop5", "slime_loop", "slime_pile_large2_4", 4, true);
		PlaySoundAtEntity("slimeloop6", "slime_loop", "slime_pile_large2_1", 6, true);
		
		SetEntityActive("SlimeDamageArea_3", true);
		AddTimer("SlimeDamageArea_5", 4, "TimerActivateSlimeEntity");
		
		string[] aSlime = { "slime_pile_large2_1","slime_pile_large2_2","slime_pile_large2_3","slime_pile_large2_4","slime_pile_large2_5",
							"slime_pile2_1","slime_pile2_2","slime_pile2_3","slime_pile2_4","slime_pile2_5",
							"slime_egg2_1","slime_egg2_2","slime_egg2_3","slime_egg2_4","slime_egg2_5",
							"slime_3way2_1","slime_3way2_2","slime_3way2_3","slime_3way2_4","slime_3way2_5",
							"slime_anim_ceiling2_1","slime_anim_ceiling2_2","slime_anim_ceiling2_3","slime_anim_wall2_1","slime_anim_wall2_2",
							"slime_6way2_1","slime_6way2_2","slime_6way2_3","slime_6way2_4","slime_6way2_5" };			
		::aSlime = aSlime;
	} 
	else if(asTimer == "guard3") {
		GuardianEffects(0.05f,3.0f,1.0f,1.4f,3);

		FadeLightTo("BoxLight_2", 0.201f, 0.04f, 0.08f, 0.0f, -1, 5.0f);
		
		PlaySoundAtEntity("slimeloop7", "slime_loop", "slime_pile3_2", 3, true);
		PlaySoundAtEntity("slimeloop8", "slime_loop", "slime_pile_large3_5", 4, true);
		PlaySoundAtEntity("slimeloop9", "slime_loop", "slime_pile_large3_4", 6, true);
		
		SetEntityActive("SlimeDamageArea_4", true);
		AddTimer("SlimeDamageArea_6", 4, "TimerActivateSlimeEntity");
		
		string[] aSlime = { "slime_pile_large3_1","slime_pile_large3_2","slime_pile_large3_3","slime_pile_large3_4","slime_pile_large3_5",
							"slime_pile3_1","slime_pile3_2","slime_pile3_3","slime_pile3_4","slime_pile3_5",
							"slime_pile3_6","slime_pile3_7","slime_pile3_8","slime_pile3_9","slime_pile3_10",
							"slime_anim_wall3_1","slime_anim_wall3_2","slime_anim_ceiling3_1",
							"slime_6way3_1","slime_6way3_2","slime_6way3_3","slime_6way3_4","slime_6way3_5",
							"slime_egg3_1","slime_egg3_2","slime_egg3_3","slime_egg3_4","slime_egg3_5",
							"slime_3way3_1","slime_3way3_2","slime_3way3_3","slime_3way3_4"};
		::aSlime = aSlime;
	}
	
	SetPlayerMoveSpeedMul(0.6f);
	SetPlayerRunSpeedMul(0.25f);
	
	SetLocalVarFloat("SlimeSound",0.0f);
	
	for(int iSlime=0;iSlime<=aSlime.length();iSlime++) {
		int iRand = RandFloat(5,8);
			
		SetPropActiveAndFade(aSlime[iSlime], true, iRand);
			
		for(int i=0;i<=iRand;i++)
			AddTimer(aSlime[iSlime], RandFloat(1,iRand-1), "TimerSlimeSounds");
	}
}

void TimerActivateSlimeEntity(string &in asTimer)
{
	SetEntityActive(asTimer, true);	
}


/*General re-used guardian effects
 */
void GuardianEffects(float fSS1, float fSS2, float fSS4, float fIT1, int iSound)
{
	StartScreenShake(fSS1,fSS2, 1.0f,fSS4);
	FadeImageTrailTo(fIT1,2.0f);
	
	for(int i=1;i<=3;i++)
	{
			AddDebugMessage("Fading light PointLightx"+iSound+"_"+i, false);
			FadeLightTo("PointLightx"+iSound+"_"+i, -1, -1, -1, -1, 3, 5);
	}
	
	for(int i=1;i<=3;i++){
			CreateParticleSystemAtEntity("slime"+iSound+"ps"+i, "ps_slime_fog.ps", "AreaSlime"+iSound+"_"+i, true);
			//CreateParticleSystemAtEntity("slimewall"+iSound+"ps"+i, "ps_slime_wall_flat.ps", "AreaSlimeWall"+iSound+"_"+i, true);
	} 	
	
	CreateParticleSystemAtEntity("fogfall"+iSound+"ps", "ps_slime_fog_falling.ps", "AreaFogFall"+iSound, true);
	
	//PlaySoundAtEntity("player_guard"+iSound, "player_react_guardian"+iSound, "Player", 5);
	PlaySoundAtEntity("guard"+iSound, "guardian_distant"+iSound, "Player", 0, false);
	
	AddTimer("fade1", 0.3f, "TimerGuardSlime");
	AddTimer("fade2", 7.0f-(iSound/2), "TimerGuardSlime");
	
	GiveSanityDamage(10.0f, false);
	
	/*DEBUG
	 */
	AddDebugMessage("Guardian Effect with shake amount: "+fSS1+" With Sound: "+iSound, true);
}
/*Timer loop to play slime sounds during their SetPropActiveAndFade
 */
void TimerSlimeSounds(string &in asTimer)
{
	float fPlaySound = RandFloat(0.9f,1.5f);
	
	if(fPlaySound < 1)
		PlaySoundAtEntity(asTimer, "slime_create.snt", asTimer, 0.0f+GetLocalVarFloat("SlimeSound"), false);
		
	AddLocalVarFloat("SlimeSound",0.002f);
}
/*Player react to the guaridan effect
 */
void PlayerReactions(float fTimer)
{
	PlaySoundAtEntity("aah", "react_scare.snt", "Player", 0.3f, false);
	
	AddTimer("react1", fTimer*0.5f, "ReactionTimer");
	AddTimer("react2", fTimer*2.5f, "ReactionTimer");
	AddTimer("react3", fTimer*4.5f, "ReactionTimer");
	AddTimer("react4", fTimer*7.0f, "ReactionTimer");
}
void ReactionTimer(string &in asTimer)
{
	if(asTimer == "react1") PlaySoundAtEntity("s"+asTimer, "react_breath.snt", "Player", 0.0f, false);
	else if(asTimer == "react2") PlaySoundAtEntity("s"+asTimer, "react_breath.snt", "Player", 0.1f, false);
	else if(asTimer == "react3") PlaySoundAtEntity("s"+asTimer, "react_breath.snt", "Player", 0.3f, false);
	else PlaySoundAtEntity("s"+asTimer, "react_breath.snt", "Player", 0.6f, false);
}
//END GUARDIAN EVENTS//
///////////////////////


/////////////////////////////////
//BEGIN LOCKED WINE CELLAR DOOR//
void PlayerInteractDoor(string &in asEntity)
{
	if(HasItem("key_study_1")) SetMessage("Ch01Level02", "InteractDoorHaveKey", 0);
	else AddQuest("02LockedDoor", "02LockedDoor");
}
void UseKeyOnDoor(string &in asItem, string &in asEntity)
{
	PlaySoundAtEntity("unlocked", "unlock_door", asEntity, 0.0f, false);
	
	GiveSanityBoostSmall();
	
	SetLevelDoorLocked(asEntity, false);
	RemoveItem(asItem);
	
	CompleteQuest("02LockedDoor", "02LockedDoor");
}
//END LOCKED WINE CELLAR DOOR//
///////////////////////////////


////////////////////////
//BEGIN BLOCKING SLIME//
void CollideGiveQuestsWeb(string &in asParent, string &in asChild, int alState)
{
	AddQuest("02Web", "02Web");
	SetEntityActive(asChild, false);
}
void UseAcidOnWeb(string &in asItem, string &in asEntity)
{
	SetPropHealth(asEntity, 0);
	RemoveItem(asItem);
	GiveItemFromFile("empty_container", "chemical_container.ent");
	
	CompleteQuest("02Web", "02Web");
	
	GiveSanityBoost();
	
	AddTimer("music", 1, "TimerMusicDelay");
	
	FadeLightTo("PointLightAcid", -1, -1, -1, -1, 3, 1.5f);
	AddTimer("PointLightAcid", 4, "TimerFadeAcidLight");
}
void TimerMusicDelay(string &in asTimer)
{
	PlayMusic("02_puzzle", false, 1, 0.1f, 10, false);
}
void TimerFadeAcidLight(string &in asTimer)
{
	FadeLightTo(asTimer, 0, 0, 0, 0, -1, 3);
}

void UseEmptyContainerOnWeb(string &in asItem, string &in asEntity)
{
	SetMessage("Ch01Level02", "UseContainerOnSlime", 0);
}

void UseChemicalOnWeb(string &in asItem, string &in asEntity)
{
	SetMessage("Ch01Level02", "UseChemicalOnSlime", 0);
}

//END BLOCKING SLIME//
//////////////////////


///////////////////////////
//BEGIN FLASHBACK & TRAIL//
/*Begin timer to show trail
 */
void CollideAreaFlashBack(string &in asParent, string &in asChild, int alState)
{
	AddTimer("trail", 2.0f, "TimerCreateTrail");
	StartPlayerLookAt("AreaTrail_1", 3, 3, "");
	CreateParticleSystemAtEntity("rosesonmybed", "ps_rose_petals_wind.ps", "AreaTrail_1", false);
	PlayGuiSound("general_wind_whirl6.ogg", 0.3f);
}
void TimerCreateTrail(string &in asTimer)
{
	AddLocalVarInt("Trail", 1);
	
	int iTrail = GetLocalVarInt("Trail");
	
	switch(GetLocalVarInt("Trail")) {
		case 1:
			//AddTimer("trail", 2.0f, "TimerCreateTrail");
			StopPlayerLookAt();
			MakeTrailEffect();
		break;
		case 2:
			StartPlayerLookAt("AreaTrailDoor", 1, 1, "");
			MakeTrailEffect();
		break;
		case 3:
			StopPlayerLookAt();
			MakeTrailEffect();
		break;
		default:
			MakeTrailEffect();
		break;
	}
	
	if(iTrail < 8) AddTimer("trail", 1.5f, "TimerCreateTrail");
}
bool bSwing = true;
void MakeTrailEffect()
{
	if(GetLocalVarInt("Trail") == 8){
		FadeLightTo("PointLight_2", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
		return;
	}
	
	bSwing = bSwing == false ? true : false;
	if(bSwing) FadeLightTo("PointLight_2", 0.6f, 0.3f, 0.6f, 0.5f, -1, 1.4f);
	else FadeLightTo("PointLight_2", 0.3f, 0.1f, 0.3f, 0.25f, -1, 1.4f);
		
	AddDebugMessage("hello"+GetLocalVarInt("Trail"), false);
	//CreateParticleSystemAtEntity("trail"+GetLocalVarInt("Trail"), "ps_trail_flow.ps", "AreaTrail_"+GetLocalVarInt("Trail"), false);
}
//END FLASHBACK & TRAIL//
/////////////////////////

void InteractSlime(string &in asEntity)
{
	PlayGuiSound("slime_create3.ogg", 0.4f);
	SetMessage("Ch01Level02", "InteractSlime", 0);
	
	AddTimer("backoncellar", 1.0f, "TimerCellarSlime");
}
void TimerCellarSlime(string &in asTimer)
{
	SetEntityPlayerInteractCallback("web_1", "InteractSlime", true);
}
void InteractLockedDoor(string &in asEntity)
{
	AddTimer("lockeddoor", 0.5f, "TimerLockedDoor4evah");
	
	PlaySoundAtEntity("locked_"+asEntity, "locked_door", asEntity, 0.0f, false);
}
void TimerLockedDoor4evah(string &in asTimer)
{
	SetMessage("LevelDoors", "LockedForever", 0);
}

void TimerRunHint(string &in asTimer)
{
	GiveHint("run", "Hints", "RunHint", 0);
}


/////////////////////////////
//BEGIN INTERACT LARGE GATE//
void InteractLargeGate(string &in asEntity)
{
	PlayGuiSound("close_gate.ogg", 0.5f);
	PlaySoundAtEntity("guardboo", "guardian_distant1", "LargeGate", 2.0f, false);
	FadeLightTo("PointLight_15", 0.2f, 0.0f, 0.05f, 1.0f, -1, 4.0f);
	
	AddTimer("1", 0.5f, "TimerLargeGate");
	AddTimer("2", 1.2f, "TimerLargeGate");
	AddTimer("3", 1.7f, "TimerLargeGate");
	AddTimer("4", 2.0f, "TimerLargeGate");
}
void TimerLargeGate(string &in asTimer)
{
	if(asTimer == "1"){
		PlayMusic("01_event_critters", false, 0.7f, 1.0f, 10, false);
		StartScreenShake(0.005f, 2.0f, 1.0f, 1.0f);
		SetPropActiveAndFade("slime_static_slime_6way_1", true, 2.5f);
		SetPropActiveAndFade("slime_static_slime_6way_2", true, 1.5f);
		PlaySoundAtEntity("slimecreate", "slime_loop", "LargeGate", 4.0f, true);
		PlaySoundAtEntity("slimecreate1", "slime_create", "LargeGate", 0.0f, true);
		GiveSanityDamage(10.0f, true);
	}
	else if(asTimer == "2"){
		PlaySoundAtEntity("slimecreate2", "slime_create", "LargeGate", 0.1f, true);
	}
	else if(asTimer == "3"){
		PlaySoundAtEntity("slimecreate3", "slime_create", "LargeGate", 0.15f, true);
	}
	else if(asTimer == "4"){
		StopMusic(4.0f, 10);
		StopSound("guardboo", 2.0f);
		PlaySoundAtEntity("slimecreate4", "slime_create", "LargeGate", 0.2f, true);
		SetEntityPlayerInteractCallback("LargeGate", "InteractLargeGate02", true);
		PlayMusic("02_amb_strange", true, 1.0f, 2.0f, 0, true);
	}
}
void InteractLargeGate02(string &in asEntity)
{
	PlayGuiSound("slime_create3.ogg", 0.5f);
	
	AddTimer("intslimebackon", 1.0f, "TimerSlimeGateOn");
}
void TimerSlimeGateOn(string &in asTimer)
{
	SetEntityPlayerInteractCallback("LargeGate", "InteractLargeGate02", true);
}
//END INTERACT LARGE GATE//
///////////////////////////


/*Scream from 03 if player has been in Lab first, Scream from 04 if player goes towards 03 first
 */
void CollideDirectionHint(string &in asParent, string &in asChild, int alState)
{
	string sSound = "03_no.snt";
	
	if(GetFunnyModeOn())
	{
		sSound = "";
	}
	
	if(asChild == "LabHint"){
		PlaySoundAtEntity("scream1", sSound, "ArchiveHint", 0.1f, false);

		AddTimer("ArchiveHint", 0.2f, "TimerScream");
		AddTimer("scream2", 0.8f, "TimerScream");
		
		RemoveEntityCollideCallback("Player", "ArchiveHint");
		RemoveEntityCollideCallback("Player", "LabHint");
	}
	else{
		if(GetGlobalVarInt("BeenToLab") == 0) return;
		
		PlaySoundAtEntity("scream1", sSound, "LabHint", 0.1f, false);
		
		AddTimer("LabHint", 0.2f, "TimerScream");
		AddTimer("scream2", 0.8f, "TimerScream");
		
		RemoveEntityCollideCallback("Player", "LabHint");
		RemoveEntityCollideCallback("Player", "ArchiveHint");
	}
	
	if(GetFunnyModeOn())
	{
		PlayGuiSound(GetStringWithReplacedFunnySubString("suitor_enabled.snt", "suitor"), 0.5f);
	}
}
void TimerScream(string &in asTimer)
{
	if(asTimer == "scream2"){
		StopPlayerLookAt();
	}
	else if(asTimer == "stopmusic"){
		StopMusic(3.0f, 10);
	}
	else {
		PlayGuiSound("react_scare", 0.7f);
		StartPlayerLookAt(asTimer, 4.0f, 4.0f, "");
		PlayMusic("11_event_tree", false, 1.0f, 0.5f, 10, false);
		AddTimer("stopmusic", 3.0f, "TimerScream");
	}
}

////////////////////////////
// Run first time starting map
void OnStart()
{
	////////////////////
	// Hub start sanity boost
	GiveSanityBoost();
	
	
	//----COLLIDE CALLBACKS----//
	AddEntityCollideCallback("Player", "ScareBirds", "CollideEnterLargeRoom", true, 1);
	AddEntityCollideCallback("Player", "AreaGiveQuestWeb", "CollideGiveQuestsWeb", false, 1);
	AddEntityCollideCallback("Player", "AreaCollideFlash", "CollideAreaFlashBack", true, 1);
	AddEntityCollideCallback("Player", "LabHint", "CollideDirectionHint", false, 1);
	AddEntityCollideCallback("Player", "ArchiveHint", "CollideDirectionHint", false, 1);
	
	//---- INTERACT INIT ----//
	AddUseItemCallback("UseKeyOnDoor", "key_study_1", "level_wood_2", "UseKeyOnDoor", true);
	AddUseItemCallback("UseAcidOnWeb", "chemical_container_2", "web_1", "UseAcidOnWeb", true);
	AddUseItemCallback("UseEmptyContainerOnWeb", "chemical_container_1", "web_1", "UseEmptyContainerOnWeb", false);
	AddUseItemCallback("UseChemicalOnWeb", "Chemical_1", "web_1", "UseChemicalOnWeb", false);
	AddUseItemCallback("UseChemicalOnWeb", "Chemical_2", "web_1", "UseChemicalOnWeb", false);
	AddUseItemCallback("UseChemicalOnWeb", "Chemical_3", "web_1", "UseChemicalOnWeb", false);
	AddUseItemCallback("UseChemicalOnWeb", "Chemical_4", "web_1", "UseChemicalOnWeb", false);

	SetEntityPlayerInteractCallback("castle_1", "PlayerInteractDoor", true);
	SetEntityCustomFocusCrossHair("LargeGate", "LevelDoor");
	
	//---- ENITTY INIT----//
	SetNumberOfQuestsInMap(2);
	
	SetLocalVarInt("ScaryMusic", 0);
	
	UnBlockHint("QuestAdded");
	UnBlockHint("EntityGrab02"); UnBlockHint("EntityPush");
	
	AddTimer("runhint", 3, "TimerRunHint");
	
	//----DEBUG----//
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		/*GiveItemFromFile("chemical_container_1", "chemical_container.ent");
		GiveItemFromFile("chemical_container_2", "chemical_container.ent");
		GiveItemFromFile("Chemical_1", "flask01_aqua_regia.ent");
		GiveItemFromFile("Chemical_2", "flask01_aqua_regia.ent");
		GiveItemFromFile("Chemical_3", "flask01_aqua_regia.ent");
		GiveItemFromFile("Chemical_4", "flask01_aqua_regia.ent");
		
		GiveItemFromFile("key_study_1", "key_study.ent");*/
		
		//SetGlobalVarString("key_study_1","key_study_1");	//PlayerStartArea_3
		//SetGlobalVarInt("ChemJars",4);	//PlayerStartArea_2
		//SetGlobalVarString("chemical_container_2","chemical_container_2"); //PlayerStartArea_5
	}
	
	ClearSavedMaps();
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	SetMapDisplayNameEntry("EntranceHall");
		
	//----PRELOADING----//
	PreloadSound("react_scare"); PreloadSound("general_birds_flee"); PreloadSound("general_wind_whirl"); PreloadSound("slime_loop"); 
	PreloadSound("amb_guardian"); PreloadSound("guardian_distant1"); PreloadSound("guardian_distant2"); PreloadSound("guardian_distant3"); 
	PreloadSound("slime_create"); PreloadSound("03_no.snt");
   
	PreloadParticleSystem("ps_dust_whirl"); PreloadParticleSystem("ps_slime_fog"); //PreloadParticleSystem("ps_slime_wall_flat");
	PreloadParticleSystem("ps_slime_fog_falling"); PreloadParticleSystem("ps_trail_flow"); PreloadParticleSystem("ps_trail_large"); 
	
	     
	//----AUDIO----//
	SetFogProperties(10, 50, 1, false);
	SetFogColor(0.12f, 0.14f, 0.18f, 1);
	SetFogActive(true);
	
	//----GUARDIAN INIT----//
	float fGuardianDelay = 0.5f;
	if(GetGlobalVarString("key_study_1") == "key_study_1")
	{
		AddTimer("guard1", RandFloat(fGuardianDelay+0.25f,fGuardianDelay+0.5f), "TimerGuardSlime");
		SetLocalVarInt("ScaryMusic", 1);
		SetGlobalVarString("key_study_1", "");
	} 
	else if(GetGlobalVarInt("ChemJars") == 4)
	{
		AddTimer("guard2", RandFloat(fGuardianDelay+0.5f,fGuardianDelay+0.75f), "TimerGuardSlime");
		SetLocalVarInt("ScaryMusic", 1);
		SetGlobalVarInt("ChemJars",0);
	} 
	else if(GetGlobalVarString("chemical_container_2") == "chemical_container_2")
	{
		AddTimer("guard3", RandFloat(fGuardianDelay+0.75f,fGuardianDelay+1.0f), "TimerGuardSlime");
		SetLocalVarInt("ScaryMusic", 1);
		SetGlobalVarString("chemical_container_2", "");
	} 
	
	if(GetLocalVarInt("ScaryMusic") == 0) PlayMusic("02_amb_safe", true, 0.5f, 5, 0, true);
	else PlayMusic("02_amb_strange", true, 0.5f, 5, 0, true);
	
	//----PLAYER INIT----//
	SetPlayerRunSpeedMul(1.0f);	//Able to run now!
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
	
	if(GetFunnyModeOn())
	{
		PreloadSound(GetStringWithReplacedFunnySubString("suitor_enabled.snt", "suitor"));
	}
}

////////////////////////////
// Run when leaving map
void OnLeave()
{	
	StopMusic(5, 0);
}