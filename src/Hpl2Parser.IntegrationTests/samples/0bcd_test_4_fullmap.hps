void OnStart()
{
	ClearSavedMaps();
	/////PLAYER_COLLIDE_CALLBACKS
	AddEntityCollideCallback("Player", "area_trigger_brute", "SpawnBrute", true, 1);
	AddEntityCollideCallback("Player", "area_brute_aggressive", "BruteAggressive", false, 1);
	AddEntityCollideCallback("Player", "area_brute_passive", "BrutePassive", false, 1);
	AddEntityCollideCallback("Player", "area_trigger_lurker", "SpawnLurkerTimer", true, 1);
	AddEntityCollideCallback("Player", "area_lurker_aggressive_1", "LurkerAggressive", false, 1);
	AddEntityCollideCallback("Player", "area_lurker_passive_1", "LurkerPassive", false, 1);
	AddEntityCollideCallback("Player", "area_lurker_aggressive_2", "LurkerAggressive", false, 1);
	AddEntityCollideCallback("Player", "area_lurker_passive_2", "LurkerPassive", false, 1);
	AddEntityCollideCallback("Player", "area_trigger_grunt", "SpawnGrunt", true, 1);
	AddEntityCollideCallback("Player", "area_grunt_passive_1", "GruntPassive", false, 1);
	AddEntityCollideCallback("Player", "area_grunt_aggressive_1", "GruntAggressive", false, 1);
	AddEntityCollideCallback("Player", "area_grunt_passive_2", "GruntPassive", false, 1);
	AddEntityCollideCallback("Player", "area_grunt_aggressive_2", "GruntAggressive", false, 1);
	
	AddEntityCollideCallback("Player", "AreaGruntRespawn", "GruntAggressive", false, 1);
	AddEntityCollideCallback("Player", "AreaLurkerRespawn", "LurkerRespawn", false, 1);
	AddEntityCollideCallback("Player", "AreaLurkerDeoptimize", "FirstDeoptimize", false, 1);
	AddEntityCollideCallback("Player", "AreaLurkerOptimize", "FirstOptimize", false, 1);
	
	AddEntityCollideCallback("Player", "AreaBlockedMsg", "BlockedMsgArea", false, 0);
	AddEntityCollideCallback("Player", "AreaBruteAlert_1", "BruteAlert", true, 0);
	AddEntityCollideCallback("Player", "AreaBruteAlert_2", "BruteAlert", true, 0);
	AddEntityCollideCallback("Player", "AreaBruteAlert_3", "BruteAlert", true, 0);
	
	AddEntityCollideCallback("Player", "AreaBlockedMsg2", "BlockedMsgArea2", false, 0);
	AddEntityCollideCallback("Player", "AreaBreakableDoor", "AllowBreakableDoor", true, 1);
	AddEntityCollideCallback("Player", "AreaCrankRange", "CrankInRange", false, -1);
	
	AddEntityCollideCallback("Player", "AreaEndQuest_findExit", "EndQuest_findExit", true, 1);
	AddEntityCollideCallback("Player", "Autosave_Lurker", "AutosaveLurker", true, 1);
	
	
	/////PLAYER_INTERACT_CALLBACKS
	SetEntityCallbackFunc("oil_fake", "TortureScare");
	AddUseItemCallback("minikey", "key_closet", "cabinet_metal_3", "ClosetUnlock", true);
	AddUseItemCallback("mansionkey", "key_mansion", "mansion_12", "DoorLockedUnlock", true);
	AddUseItemCallback("crowbar_use", "crowbar", "mansion_3", "CrowbarAttach", true);
	AddUseItemCallback("key_up_use", "key_upstairs", "door_upstairs", "DoorUnlock", true);
	AddUseItemCallback("key_equip_use", "key_equipment", "castle_2", "EquipUnlock", true);
	AddUseItemCallback("needle_use", "needle", "castle_9", "NeedleUnlock", true);
	AddUseItemCallback("crank_use", "crank_item", "AreaCrank", "CrankAttach", true);
	
	SetEntityCallbackFunc("key_jar_1", "ReplaceJarKey");
	SetEntityPlayerInteractCallback("mansion_3", "DoorBrokenLock", false);
	SetEntityPlayerInteractCallback("mansion_2", "DoorBudge", false);
	SetEntityPlayerInteractCallback("mansion_10", "DoorBlocked", false);
	SetEntityPlayerInteractCallback("mansion_12", "DoorLocked", false);
	AddEntityCollideCallback("mansion_11", "Collide_blocked_door", "DoorBaricade", true, 1);
	SetEntityPlayerInteractCallback("key_jar_1", "DisableKeyLight", true);
	SetEntityPlayerInteractCallback("door_upstairs", "DoorLockedUp", false);
	
	SetEntityPlayerInteractCallback("cabinet_scare", "CabinetScare", true);
	SetEntityPlayerInteractCallback("castle_11", "DoorBlocked2", false);
	SetEntityPlayerInteractCallback("castle_11_new", "DoorBlocked2", false);
	AddEntityCollideCallback("castle_5", "Collide_blocked_door2", "DoorBaricade", true, 1);
	SetEntityCallbackFunc("key_upstairs", "EnableBruteScare");
	
	SetEntityPlayerInteractCallback("castle_2", "EquipDoorLocked", false);
	SetEntityPlayerInteractCallback("castle_9", "DoorLockedNeedle", false);
	SetEntityCallbackFunc("note_test4start", "DisableStartBlock");
	SetEntityCallbackFunc("note_test4end", "UnlockEnd");
	SetEntityPlayerInteractCallback("AreaCrank", "MissingCrank", false);
	SetEntityPlayerInteractCallback("cabinet_metal_3", "CabinetInteract", false);
	
	SetEntityPlayerInteractCallback("area_lever_attach_1", "LeverMissing", false);
	SetEntityPlayerInteractCallback("area_lever_attach_2", "LeverMissing", false);
	SetEntityPlayerInteractCallback("AreaGateHint", "GateHint", false);
	
	SetEntityCallbackFunc("crank_item", "PickUpCrank");
	
	
	/////ENTITY_CALLBACKS
	AddEntityCollideCallback("lever_part_1", "area_lever_attach_1", "DungeonLeversAttach", true, 1);
	AddEntityCollideCallback("lever_part_2", "area_lever_attach_1", "DungeonLeversAttach", true, 1);
	AddEntityCollideCallback("lever_part_1", "area_lever_attach_2", "DungeonLeversAttach", true, 1);
	AddEntityCollideCallback("lever_part_2", "area_lever_attach_2", "DungeonLeversAttach", true, 1);
	
	AddEntityCollideCallback("hatch_well", "area_hatch_open", "HatchOpen", true, 1);
	
	AddEntityCollideCallback("lurker", "area_lurker_tp_1", "LurkerTP", false, 1);
	AddEntityCollideCallback("lurker", "area_lurker_tp_2", "LurkerTP", false, 1);
	
	AddEntityCollideCallback("table_block", "AreaUnblockDoor", "TableUnblock", true, -1);
	AddEntityCollideCallback("crate_block", "AreaUnblockDoor2", "CrateUnblock", true, -1);
	
	/////ONSTART_SETUP
	SetPropHealth("door_look", 5);
	SetPropHealth("valve_holder", 0);
	SetPropStaticPhysics("valve_holder", true);
	SetEntityPos("valve_holder", 11, 2, 52);
	SetEntityInteractionDisabled("hatch_well", true);
	SetSwingDoorDisableAutoClose("hatch_well", true);
	SetSwingDoorClosed("hatch_well", false, false);
	InteractConnectPropWithRope("crank-hatch", "crank_full", "RopeArea", false, 3, 1, 5, true, 0);
	SetEntityInteractionDisabled("scewer_place_1", true);
	SetEntityInteractionDisabled("key_equipment", true);
	OptimizeLurkerArea(true);
	SetEntityActive("block_start", true);
	
	SetLocalVarInt("bothLevers", 0);
	SetLocalVarInt("prisoner_scared", 0);
	SetLocalVarInt("brute_refreshed", 0);
	SetLocalVarInt("grunt_refreshed", 0);
	SetLocalVarInt("blockedMsg", 1);
	SetLocalVarInt("blocked2Msg", 1);
	SetLocalVarInt("cabinetMsg", 1);
}

void OnEnter()
{
	SetMapDisplayNameEntry("test-4");
	PlayMusic("02_amb_safe.ogg", true, 1, 1, 1, false);
	AutoSave();
}

void OnLeave()
{
	StopMusic(1, 1);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////Quests & Messages/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MissingCrank(string &in asEntity)
{
	SetMessage("Actions", "test4crank", 0);
	if(not QuestIsAdded("test4_findCrank"))
	{
		AddQuest("test4_findCrank", "test4_findCrank");
		//AutoSave();
	}
}

void EndQuest_findExit(string &in asParent, string &in asChild, int alState)
{
	CompleteQuest("test4_findExit", "test4_findExit");
}

void PickUpCrank(string &in asEntity, string &in type)
{
	AutoSave();
}

void GateHint(string &in asEntity)
{
	SetMessage("Actions", "test4gate", 0);
	if(not QuestIsAdded("test4_openGate")) AddQuest("test4_openGate", "test4_openGate");
}

void LeverMissing(string &in asEntity)
{
	SetMessage("Actions", "test4nolever", 0);
	if(not QuestIsAdded("test4_findLevers")) AddQuest("test4_findLevers", "test4_findLevers");
}

void CabinetInteract(string &in asEntity)
{
	if(GetLocalVarInt("cabinetMsg")==1) SetMessage("Actions", "test4cabinet", 0);
}

void DoorLockedNeedle(string &in asEntity)
{
	SetMessage("Actions", "lockedNeedle", 0);
}

void DoorLockedUp(string &in asEntity)
{
	if(GetSwingDoorLocked("door_upstairs"))
	{
		if(not QuestIsAdded("test4_lockedUp")) AddQuest("test4_lockedUp", "test4_lockedUp");
		SetMessage("Actions", "locked", 0);
	}
}

void BlockedMsgArea2(string &in asParent, string &in asChild, int alState)
{
	if(alState==1) SetLocalVarInt("blocked2Msg", 0);
	else SetLocalVarInt("blocked2Msg", 1);
}

void DoorBlocked2(string &in asEntity)
{
	if(GetLocalVarInt("blocked2Msg")==1) SetMessage("Actions", "test4blocked", 0);
}

void BlockedMsgArea(string &in asParent, string &in asChild, int alState)
{
	if(alState==1) SetLocalVarInt("blockedMsg", 0);
	else SetLocalVarInt("blockedMsg", 1);
}

void DoorBaricade(string &in asParent, string &in asChild, int alState)
{
	SetMessage("Actions", "test4baricade", 0);
}

void EquipDoorLocked(string &in asEntity)
{
	SetMessage("Actions", "test4equipLocked", 0);
	if(not QuestIsAdded("test4_equipLocked")) AddQuest("test4_equipLocked", "test4_equipLocked");
}

void DoorLocked(string &in asEntity)
{
	SetMessage("Actions", "locked", 0);
	if(not QuestIsAdded("test4_lockedRoom")) AddQuest("test4_lockedRoom", "test4_lockedRoom");
}

void DoorBlocked(string &in asEntity)
{
	if(GetLocalVarInt("blockedMsg")==1) SetMessage("Actions", "test4blocked", 0);
}

void DoorBrokenLock(string &in asEntity)
{
	SetMessage("Actions", "test4brokenlock", 0);
	if(not QuestIsAdded("test4_brokenLock")) AddQuest("test4_brokenLock", "test4_brokenLock");
}

void DoorBudge(string &in asEntity)
{
	SetMessage("Actions", "budge", 0);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////Doors & MISC/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AllowBreakableDoor(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("castle_11", false);
	SetEntityActive("castle_11_new", true);
}

void DisableStartBlock(string &in asEntity, string &in type)
{
	SetEntityActive("block_start", false);
	AddQuest("test4_findExit", "test4_findExit");
}

void EquipUnlock(string &in asItem, string &in asEntity)
{
	SetEntityActive("Collide_blocked_door2", false);
	SetEntityActive("castle_2", false);
	SetEntityActive("castle_2_new", true);
	GiveSanityBoostSmall();
	PlayGuiSound("unlock_door.snt", 1);
	RemoveItem(asItem);
	CompleteQuest("test4_equipLocked", "test4_equipLocked");
}

void NeedleUnlock(string &in asItem, string &in asEntity)
{
	SetEntityActive("castle_9", false);
	SetEntityActive("castle_9_new", true);
	GiveSanityBoostSmall();
	PlayGuiSound("unlock_door.snt", 1);
	RemoveItem(asItem);
}

void CrateUnblock(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaUnblockDoor2", false);
	SetEntityActive("AreaBlockedMsg2", false);
	SetLocalVarInt("blocked2Msg", 0);
	SetSwingDoorLocked("castle_11_new", false, false);
}

void TableUnblock(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaUnblockDoor", false);
	SetEntityActive("AreaBlockedMsg", false);
	SetLocalVarInt("blockedMsg", 0);
	SetSwingDoorLocked("mansion_10", false, false);
}

void DoorLockedUnlock(string &in asItem, string &in asEntity)
{
	SetEntityActive("Collide_blocked_door", false);
	SetEntityActive("mansion_12", false);
	SetEntityActive("mansion_12_new", true);
	GiveSanityBoostSmall();
	PlayGuiSound("unlock_door.snt", 1);
	RemoveItem(asItem);
	CompleteQuest("test4_lockedRoom", "test4_lockedRoom");
	//AutoSave();
}

void ClosetUnlock(string &in asItem, string &in asEntity)
{
	SetSwingDoorLocked("cabinet_metal_3", false, true);
	PlayGuiSound("unlock_door.snt", 1);
	RemoveItem(asItem);
	SetEntityActive("alexander_insane", true);
	SetEntityInteractionDisabled("key_equipment", false);
	AutoSave();
}

void ReplaceJarKey(string &in asEntity, string &in type)
{
	if(type=="Break")
	{
		SetEntityActive("key_closet", true);
		SetEntityPos("key_closet", GetEntityPosX("key_jar_1_broken"), GetEntityPosY("key_jar_1_broken"), GetEntityPosZ("key_jar_1_broken"));
		AlertEnemyOfPlayerPresence("brute");
		SetLocalVarInt("cabinetMsg", 0);
	}
}

void DoorUnlock(string &in asItem, string &in asEntity)
{
	SetSwingDoorLocked(asEntity, false, true);
	PlayGuiSound("unlock_door.snt", 1);
	RemoveItem(asItem);
	GiveSanityBoostSmall();
	CompleteQuest("test4_lockedUp", "test4_lockedUp");
	//AutoSave();
}

void UnlockEnd(string &in asEntity, string &in type)
{
	SetLevelDoorLocked("leveldoor_end", false);
	SetGlobalVarInt("test", 4);
	AutoSave();
}

void DisableKeyLight(string &in asEntity)
{
	FadeLightTo("KeyLight", 0.6, 0.3, 0.6, 1, 0, 0.5);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////SCARES & EFFECTS//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TortureScare(string &in asEntity, string &in type)
{
	AddPlayerBodyForce(0, 2000, -15000, false);
	SetInventoryDisabled(true);
	SetLocalVarFloat("healthVar", GetPlayerHealth());
	SetLocalVarFloat("sanityVar", GetPlayerSanity());
	SetPlayerSanity(10);
	GiveSanityDamage(4, true);
	PlayGuiSound("react_scare.snt", 1);
	AddBodyImpulse("iron_maiden_leftDoor", -1, 0 , 0, "world");
	AddBodyImpulse("iron_maiden_rightDoor", 1, 0 , 0, "world");
	AddTimer("MaidenFreezeTimer", 0.2, "MaidenFreeze");
	SetSwingDoorDisableAutoClose("iron_maiden", false);
	SetSwingDoorClosed("iron_maiden", true, false);
	SetSwingDoorLocked("iron_maiden", true, false);
	PlaySoundAtEntity("bigScream", "15_the_big_scream.snt", "iron_maiden", 0.1, false);
	PlaySoundAtEntity("sc2", "slime_attack_normal_hit.snt", "iron_maiden", 0.1, false);
	AddTimer("TortureScareTimer1", 0.5, "TortureScare1");
	PlayMusic("15_event_prisoner.ogg", false, 10, 0.1, 10, false);
	SetPlayerMoveSpeedMul(0.5);
	SetPlayerRunSpeedMul(0.5);
	SetPlayerLookSpeedMul(0.5);
	SetPlayerHealth(10);
	SetEntityActive("lurker", false);
	SetEntityInteractionDisabled("iron_maiden", true);
	StartPlayerLookAt("AreaMaidenLook", 2, 4, "");
}

void TortureScare1(string &in asTimer)
{
	PlayGuiSound("react_breath.snt", 1);
	SetLocalVarFloat("tortureLenght", 0.0);
	for(int i = 1; i < 6; i++)
	{
		SetLocalVarFloat("tortureLoop_"+i, RandFloat(0.6, 1.6));
		AddLocalVarFloat("tortureLenght", GetLocalVarFloat("tortureLoop_"+i));
		AddTimer("tortureLoop_"+i, GetLocalVarFloat("tortureLenght"), "TortureEffects");
	}
	AddTimer("TortureScareTimer2", GetLocalVarFloat("tortureLenght")+1.0, "TortureScare2");
}

void TortureEffects(string &in asTimer)
{
	AddPropImpulse("shackles_1", 0, GetLocalVarFloat(asTimer)*3.0, GetLocalVarFloat(asTimer)*-2.0, "world");
	AddPropImpulse("shackles_2", 0, GetLocalVarFloat(asTimer)*3.0, GetLocalVarFloat(asTimer)*-2.0, "world");
	AddPropImpulse("shackles_3", GetLocalVarFloat(asTimer)*-2.0, GetLocalVarFloat(asTimer)*3.0, 0, "world");
	AddPropImpulse("shackles_4", GetLocalVarFloat(asTimer), GetLocalVarFloat(asTimer)*3.0, 0, "world");
	SetPropStaticPhysics("iron_maiden", false);
	AddBodyImpulse("iron_maiden_leftDoor", 0, 0 , 0.5, "world");
	AddBodyImpulse("iron_maiden_rightDoor", 0, 0 , 0.5, "world");
	AddTimer("MaidenFreezeTimer", 0.2, "MaidenFreeze");
	SetEntityActive(asTimer, true);
	PlayGuiSound("react_scare.snt", 1);
	int randSound = RandInt(1, 4);
	PlaySoundAtEntity("sc3_"+asTimer, "chains_monster_man_walk_soft.snt", "shackles_"+randSound, 0.1, false);
	if(randSound == 1) PlayGuiSound("react_breath.snt", 1);
	else if(randSound == 2) PlaySoundAtEntity("sc4_"+asTimer, "21_screams.snt", "iron_maiden", 0.1, false);
	else if(randSound == 3)
	{
		PlaySoundAtEntity("sc5_"+asTimer, "19_inject.snt", "iron_maiden", 0.1, false);
		PlaySoundAtEntity("bigScream", "15_the_big_scream.snt", "iron_maiden", 0.1, false);
	}
	else PlayGuiSound("general_chain_rattle.snt", 1);
	SetPropActiveAndFade("blood_"+asTimer, true, 0.5);
}

void MaidenFreeze(string &in asTimer)
{
	SetPropStaticPhysics("iron_maiden", true);
}

void TortureScare2(string &in asTimer)
{
	ChangePlayerStateToNormal();
	SetPropStaticPhysics("iron_maiden", false);
	SetSwingDoorDisableAutoClose("iron_maiden", true);
	SetSwingDoorClosed("iron_maiden", false, false);
	SetSwingDoorLocked("iron_maiden", false, false);
	AddBodyImpulse("iron_maiden_leftDoor", 1.7, 0 , -1.7, "world");
	AddBodyImpulse("iron_maiden_rightDoor", -1.7, 0 , -1.7, "world");
	SetPlayerSanity(GetLocalVarFloat("sanityVar"));
	GiveSanityDamage(20, true);
	PlayGuiSound("24_iron_maiden.snt", 1);
	PlayGuiSound("react_scare.snt", 1);
	AddTimer("TortureNormalTimer", 2, "TortureNormal");
}

void TortureNormal(string &in asTimer)
{
	SetPlayerMoveSpeedMul(1);
	SetPlayerRunSpeedMul(1);
	SetPlayerLookSpeedMul(1);
	SetPlayerHealth(GetLocalVarFloat("healthVar"));
	StopSound("bigScream", 0.1);
	SetEntityActive("lurker", true);
	SetEntityInteractionDisabled("iron_maiden", false);
	StopPlayerLookAt();
	SetInventoryDisabled(false);
	//AutoSave();
}

void PrisonersLookTimer(string &in asEntity, int alState)
{
	AddTimer("TimerPrisonersScare", 0.8, "PrisonersScare");
	PlayGuiSound("react_scare.snt", 1);
}

void PrisonersScare(string &in asTimer)
{
	for(int i=1; i<10; i++) SetPropActiveAndFade("hanging_prisoner_"+i, false, 0.4);
	PlayGuiSound("03_in_a_bottle.snt", 1);
	GiveSanityDamage(20, true);
}

void CabinetScare(string &in asEntity)
{
	ChangePlayerStateToNormal();
	GiveSanityDamage(40, true);
	SetEntityActive("fake_grunt", true);
	ShowEnemyPlayerPosition("fake_grunt");
	AddTimer("gruntScareDespawn", 1, "CabinetScareEnd");
}

void CabinetScareEnd(string &in asTimer)
{
	FadeEnemyToSmoke("fake_grunt", true);
}

void EnableBruteScare(string &in asEntity, string &in type)
{
	SetEntityActive("AreaBruteScare", true);
	AddEntityCollideCallback("Player", "AreaBruteScare", "SpawnFakeBrute", true, 1);
	GiveSanityBoostSmall();
	AutoSave();
}

void SpawnFakeBrute(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("fake_brute", true);
	ShowEnemyPlayerPosition("fake_brute");
	GiveSanityDamage(50, true);
	AddTimer("bruteScareDespawn", 5, "FakeBruteDespawn");
	AddTimer("bruteScareDespawn", 4.95, "FakeBruteTestPos");
}

void FakeBruteTestPos(string &in asTimer)
{
	SetLocalVarFloat("bruteX", GetEntityPosX("fake_brute"));
}

void FakeBruteDespawn(string &in asTimer)
{
	if(GetLocalVarFloat("bruteX")!=GetEntityPosX("fake_brute")) FadeEnemyToSmoke("fake_brute", true);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////MONSTERS///////////////////////////////////////////////////////////////////////////////////////////////

///////Lurker

void AutosaveLurker(string &in asParent, string &in asChild, int alState)
{
	CheckPoint("CheckPoint_Lurker", "AreaCheckpoint_Lurker", "LurkerDeath", "Deaths", "test4lurker");
	AutoSave();
}

void SpawnLurkerTimer(string &in asParent, string &in asChild, int alState)
{
	AddTimer("lurkerSpawnTimer", 1.7, "SpawnLurker");
}

void SpawnLurker(string &in asTimer)
{
	SetEntityActive("lurker", true);
	PlayGuiSound("react_scare.snt", 1);
	SetEntityActive("area_lurker_passive_1", true);
	SetEntityActive("AreaLurkerOptimize", false);
}

void LurkerAggressive(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("lurker", true);
	SetEntityActive("area_lurker_aggressive_1", false);
	SetEntityActive("area_lurker_aggressive_2", false);
	SetEntityActive("area_lurker_passive_1", true);
	SetEntityActive("area_lurker_passive_2", true);
	CheckPoint("CheckPoint_Lurker", "AreaCheckpoint_Lurker", "LurkerDeath", "Deaths", "test4lurker");
	if(asChild=="area_lurker_passive_1") OptimizeLurkerArea(false);
}

void LurkerPassive(string &in asParent, string &in asChild, int alState)
{
	if(asChild=="area_lurker_passive_1")
	{
		TeleportEnemyToNode("lurker", "PathNodeArea_1", true);
		OptimizeLurkerArea(true);
	}
	SetEntityActive("lurker", false);
	SetEntityActive("area_lurker_aggressive_1", true);
	SetEntityActive("area_lurker_aggressive_2", true);
	SetEntityActive("area_lurker_passive_1", false);
	SetEntityActive("area_lurker_passive_2", false);
}

void OptimizeLurkerArea(bool abState)
{
	for(int i=25; i<62; i++)
	{
		SetLightVisible("SpotLight_"+i, not abState);
	}
	for(int i=1; i<10; i++)
	{
		SetEntityActive("Area_Water_"+i, not abState);
	}
	string[] objs = {"chest_of_drawers_simple_broken_1", "chest_of_drawers_simple_1", "wood_box_small01_8", "chair_metal_1", "wood_box_small01_4", "wood_box_small01_5", "wood_box_small01_33", "wood_box_small01_1", "wood_box_small01_3", "dissect_knife_2", "dissect_scissors_2", "wood_box_small01_9"};
	for(int i=0; i<12; i++)
	{
		SetPropStaticPhysics(objs[i], abState);
	}
	for(int i=1; i<25; i++)
	{
		if(i!=17) SetLightVisible("SpotLight_"+i, abState);
	}
}

void FirstDeoptimize(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaLurkerDeoptimize", false);
	SetEntityActive("AreaLurkerOptimize", true);
	OptimizeLurkerArea(false);
}

void FirstOptimize(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaLurkerOptimize", false);
	SetEntityActive("AreaLurkerDeoptimize", true);
	OptimizeLurkerArea(true);
}

void LurkerTP(string &in asParent, string &in asChild, int alState)
{
	if(asChild=="area_lurker_tp_1") SetEntityPos(asParent, GetEntityPosX(asParent), GetEntityPosY(asParent), GetEntityPosZ(asParent)-2.2);
	else SetEntityPos(asParent, GetEntityPosX(asParent), GetEntityPosY(asParent), GetEntityPosZ(asParent)+1.0);
}

void DespawnDoor(string &in asEntity, string &in type)
{
	if(type=="Break") SetPropActiveAndFade(asEntity+"_broken", false, 0.1);
}

void RespawnLurker(string &in asEntity, string &in type)
{
	SetEntityActive("lurker", true);
}

void LurkerDeath(string &in asName, int alCount)
{
	SetEntityActive("AreaLurkerRespawn", true);
	SetEntityActive("area_lurker_passive_1", false);
	SetEntityActive("area_lurker_passive_2", false);
	SetEntityActive("area_lurker_aggressive_1", false);
	SetEntityActive("area_lurker_aggressive_2", true);
}

void LurkerRespawn(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaLurkerRespawn", false);
	SetEntityActive("lurker", true);
	SetEntityActive("area_lurker_passive_1", true);
	SetEntityActive("area_lurker_passive_2", true);
	SetEntityActive("area_lurker_aggressive_1", false);
	SetEntityActive("area_lurker_aggressive_2", false);
}


////////Grunt

void SpawnGrunt(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("grunt", true);
	PlayGuiSound("react_scare.snt", 1);
	GiveSanityDamage(10, true);
	StartPlayerLookAt("AreaGruntLook", 4, 8, "StopGruntLook");
	StartGruntPath();
	CheckPoint("CheckPoint_Start", "AreaCheckpoint_Start", "GruntDeath", "Deaths", "test4up");
}

void StopGruntLook()
{
	StopPlayerLookAt();
}

void GruntAggressive(string &in asParent, string &in asChild, int alState)
{
	SetEnemyDisableTriggers("grunt", false);
	SetEntityActive("area_grunt_aggressive_1", false);
	SetEntityActive("area_grunt_aggressive_2", false);
	SetEntityActive("area_grunt_passive_1", true);
	SetEntityActive("area_grunt_passive_2", true);
	RemoveTimer("gruntRefreshTimer");
	if(GetLocalVarInt("grunt_refreshed")==1)
	{
		SetLocalVarInt("grunt_refreshed", 0);
		SetEntityActive("grunt", true);
	}
	StartGruntPath();
	CheckPoint("CheckPoint_Start", "AreaCheckpoint_Start", "GruntDeath", "Deaths", "test4up");
}

void GruntPassive(string &in asParent, string &in asChild, int alState)
{
	SetEnemyDisableTriggers("grunt", true);
	SetEntityActive("area_grunt_aggressive_1", true);
	SetEntityActive("area_grunt_aggressive_2", true);
	SetEntityActive("area_grunt_passive_1", false);
	SetEntityActive("area_grunt_passive_2", false);
	if(GetEnemyStateName("grunt")!="Patrol" && GetEnemyStateName("grunt")!="Wait" && GetEnemyStateName("grunt")!="Investigate" && GetEnemyStateName("grunt")!="Search")
	{
		SetEntityActive("grunt", false);
		SetEntityActive("grunt", true);
		ClearEnemyPatrolNodes("grunt");
		AddEnemyPatrolNode("grunt", "PathNodeArea_422", 10, "");
		AddTimer("gruntRefreshTimer", 10, "RefreshGrunt");
	}
	else AddTimer("gruntRefreshTimer", 1, "RefreshGrunt");
}

void RefreshGrunt(string &in asTimer)
{
	TeleportEnemyToNode("grunt", "PathNodeArea_422", true);
	SetLocalVarInt("grunt_refreshed", 1);
	SetEntityActive("grunt", false);
}

void RespawnGrunt(string &in asEntity, string &in type)
{
	SetEntityActive("grunt", true);
	StartGruntPath();
}

void StartGruntPath()
{
	ClearEnemyPatrolNodes("grunt");
	//int[] gruntpath = {415, 408, 407, 405, 403, 401, 398, 394, 391, 225, 268, 419, 415};  //counter-clock-wise
	int[] gruntpath = {417, 268, 390, 392, 395, 398, 401, 403, 405, 407, 409, 415, 417}; //clock-wise
	for(int i=0; i<13; i++)
	{
		AddEnemyPatrolNode("grunt", "PathNodeArea_"+gruntpath[i], 0.001, "");
	}
}

void GruntDeath(string &in asName, int alCount)
{
	SetLocalVarInt("grunt_refreshed", 1);
	SetEntityActive("AreaGruntRespawn", true);
}

void GruntDoor(string &in asEntity, string &in type)
{
	if(type=="Break")
	{
		SetEntityActive("grunt", false);
		SetEntityActive("grunt", true);
		AlertEnemyOfPlayerPresence("grunt");
	}
}

/////////Brute

void BrutePassive(string &in asParent, string &in asChild, int alState)
{
	SetEnemyDisableTriggers("brute", true);
	SetEntityActive("area_brute_aggressive", true);
	SetEntityActive("area_brute_passive", false);
	if(GetEnemyStateName("brute")!="Patrol" && GetEnemyStateName("brute")!="Wait" && GetEnemyStateName("brute")!="Investigate" && GetEnemyStateName("brute")!="Search")
	{
		SetEntityActive("brute", false);
		SetEntityActive("brute", true);
		ClearEnemyPatrolNodes("brute");
		AddEnemyPatrolNode("brute", "PathNodeArea_269", 10, "");
		AddTimer("bruteRefreshTimer", 15, "RefreshBrute");
	}
	else AddTimer("bruteRefreshTimer", 1, "RefreshBrute");
}

void BruteAggressive(string &in asParent, string &in asChild, int alState)
{
	SetEnemyDisableTriggers("brute", false);
	SetEntityActive("area_brute_aggressive", false);
	SetEntityActive("area_brute_passive", true);
	RemoveTimer("bruteRefreshTimer");
	if(GetLocalVarInt("brute_refreshed")==1)
	{
		SetLocalVarInt("brute_refreshed", 0);
		SetEntityActive("brute", true);
	}
	StartBrutePath();
	CheckPoint("CheckPoint_Upstairs", "AreaCheckpoint_Upstairs", "BruteDeath", "Deaths", "test4up");
}

void RefreshBrute(string &in asTimer)
{
	TeleportEnemyToNode("brute", "PathNodeArea_269", true);
	SetLocalVarInt("brute_refreshed", 1);
	SetEntityActive("brute", false);
}

void RespawnBrute(string &in asEntity, string &in type)
{
	SetEntityActive("brute", true);
	StartBrutePath();
}

void SpawnBrute(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("brute", true);
	PlayGuiSound("react_scare.snt", 1);
	GiveSanityDamage(10, true);
	StartPlayerLookAt("AreaBruteLook", 4, 8, "StopBruteLook");
	StartBrutePath();
	SetEntityActive("area_brute_passive", true);
	CheckPoint("CheckPoint_Upstairs", "AreaCheckpoint_Upstairs", "BruteDeath", "Deaths", "test4up");
}

void StopBruteLook()
{
	StopPlayerLookAt();
}

void StartBrutePath()
{
	ClearEnemyPatrolNodes("brute");
	int[] brutepath = {269, 310, 304, 191, 182, 179, 177, 175, 270, 173, 172, 269};
	for(int i=0; i<12; i++)
	{
		if(i==3) AddEnemyPatrolNode("brute", "PathNodeArea_"+brutepath[i], 5, "");
		else AddEnemyPatrolNode("brute", "PathNodeArea_"+brutepath[i], 0.001, "");
	}
}

void BruteDeath(string &in asName, int alCount)
{
	SetEntityActive("area_brute_aggressive", true);
	SetEntityActive("area_brute_passive", false);
	SetLocalVarInt("brute_refreshed", 1);
}

void BruteAlert(string &in asParent, string &in asChild, int alState)
{
	AlertEnemyOfPlayerPresence("brute");
}

void BruteDoor(string &in asEntity, string &in type)
{
	if(type=="Break")
	{
		SetEntityActive("brute", false);
		SetEntityActive("brute", true);
		AlertEnemyOfPlayerPresence("brute");
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////MECHANISMS////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CrowbarAttach(string &in asItem, string &in asEntity)
{
	PlayGuiSound("player_crouch.snt", 1);
	RemoveItem(asItem);
	SetEntityActive("crowbar_joint", true);
	AddEntityCollideCallback("crowbar_joint", "crowbar_collide", "CrowbarOpen", true, 1);
	AutoSave();
}

void CrowbarOpen(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("crowbar_joint", false);
	SetEntityActive("crowbar_broken", true);
	SetEntityActive("mansion_3", false);
	SetEntityActive("mansion_3_new", true);
	SetSwingDoorDisableAutoClose("mansion_3_new", true);
	SetSwingDoorClosed("mansion_3_new", false, false);
	AddPropForce("mansion_3_new", 0, 0, -6000, "world");
	CreateParticleSystemAtEntity("door_broken", "ps_hit_wood.ps", "crowbar_collide", true);
	PlaySoundAtEntity("crowbar_sound", "break_wood_metal.snt", "crowbar_collide", 0, false);
	GiveSanityBoost();
	ShowEnemyPlayerPosition("brute");
	CompleteQuest("test4_brokenLock", "test4_brokenLock");
}

void DungeonLeversAttach(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(asParent, false);
	if(asChild=="area_lever_attach_1")
	{
		SetEntityActive("area_lever_attach_1", false);
		SetEntityActive("lever_mount_1", false);
		SetEntityActive("lever_full_1", true);
		RemoveEntityCollideCallback("lever_part_1", "area_lever_attach_1");
		RemoveEntityCollideCallback("lever_part_2", "area_lever_attach_1");
	}
	else
	{
		SetEntityActive("area_lever_attach_2", false);
		SetEntityActive("lever_mount_2", false);
		SetEntityActive("lever_full_2", true);
		RemoveEntityCollideCallback("lever_part_1", "area_lever_attach_2");
		RemoveEntityCollideCallback("lever_part_2", "area_lever_attach_2");
	}
	
	if(GetLocalVarInt("prisoner_scared")==0)
	{
		for(int i=1; i<10; i++) SetPropActiveAndFade("hanging_prisoner_"+i, true, 0.3);
		SetEntityPlayerLookAtCallback("area_prisoners_look", "PrisonersLookTimer", true);
		SetLocalVarInt("prisoner_scared", 1);
		if(not QuestIsAdded("test4_findLevers")) AddQuest("test4_findLevers", "test4_findLevers");
	}
	else CompleteQuest("test4_findLevers", "test4_findLevers");
}

void DungeonLeverPull(string &in asEntity, int alState) 
{
	if(alState==1)
	{
		SetLeverStuckState(asEntity, 1, true);
		AddLocalVarInt("bothLevers", 1);
		PlaySoundAtEntity("leverSound", "joint_large_wood_min_max.snt", asEntity, 1, false);
		SetPropStaticPhysics(asEntity, true);
		if(GetLocalVarInt("bothLevers")==2)
		{
			SetMoveObjectState("gate_exit", 1);
			SetEntityActive("AreaGateHint", false);
			GiveSanityDamage(1, false);
			GiveSanityBoost();
			PlayMusic("02_puzzle.ogg", false, 1, 0.2, 2, false);
			PlayGuiSound("unlock_door.snt", 1);
			for(int i = 1; i < 4; i++)
			{
				PlaySoundAtEntity("gateSound"+i, "joint_metal_chain.snt", "area_gatesound_"+i, 1.5, true);
			}
			CompleteQuest("test4_openGate", "test4_openGate");
			AutoSave();
		}
	}
}

void CrankAttach(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	GiveSanityBoost();
	PlayGuiSound("puzzle_place_jar.snt", 1);
	SetEntityActive("crank_full", true);
	SetEntityActive("AreaCrank", false);
	SetEntityPlayerInteractCallback("crank_full", "HatchAddHint", true);
	CompleteQuest("test4_findCrank", "test4_findCrank");
}

void HatchAddHint(string &in asEntity)
{
	SetEntityActive("AreaHatchInfo", true);
	SetPropStaticPhysics("hatch_well", false);
	SetEntityActive("AreaCrankRange", true);
	SetEntityPlayerInteractCallback("crank_full", "HatchUnfreeze", false);
}

void HatchUnfreeze(string &in asEntity)
{
	SetPropStaticPhysics("hatch_well", false);
}

void CrankInRange(string &in asParent, string &in asChild, int alState)
{
	SetPropStaticPhysics("hatch_well", true);
}

void HatchOpen(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaHatchInfo", false);
	SetEntityActive("AreaCrankRange", false);
	SetPropStaticPhysics("hatch_well", false);
	AddBodyImpulse("hatch_well_Body_2", 0, 0 , -1, "world");
	ChangePlayerStateToNormal();
	SetEntityInteractionDisabled("crank_full", true);
	SetWheelStuckState("crank_full", 1, true);
	SetEntityActive("ladder_well", true);
	SetEntityActive("block_hatch", false);
	AddTimer("hatchWait", 1, "HatchWait");
}

void HatchWait(string &in asTimer)
{
	SetPropStaticPhysics("hatch_well", true);
	//AutoSave();
}