
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "20_sewer";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6};
int[] gviEasierOilPotionsCodesArray = {1, 2};
int[] gviEasierHealthPotionsCodesArray = {1, 2};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2};
int[] gviNormalOilPotionsCodesArray = {0};
int[] gviNormalHealthPotionsCodesArray = {1, 2};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {4};
int[] gviToughOilPotionsCodesArray = {0};
int[] gviToughHealthPotionsCodesArray = {2};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

////////////////////////////
// HELPER AND DEBUG
////////////////////////////

//------------------------------

/////////////////////////
// Debug variables

bool gbForceWaterWheelSlowSpeed = false;

//------------------------------

//////////////////////////////
// Cog combo Helpers
int GetCogComboIndex()
{
	if(gbForceWaterWheelSlowSpeed)
		return 0;
	else	
		return GetLocalVarInt("water_wheel_cog_panel_1") + (2-GetLocalVarInt("water_wheel_cog_panel_2"));
}

string GetCogComboString()
{
	string[] vComboStrings = { "lowest", "low", "med", "high", "highest" };
	
	return vComboStrings[GetCogComboIndex()];
}

//This is the number of steps to wait before playing next impact sound (depends on what speed the wheel is turning)
int GetCogPlaySoundWaitSteps()
{
	int[] vWaitSteps = { 1, 1, 1, 1, 0 };
	
	return vWaitSteps[GetCogComboIndex()];
}

float GetCogRotateSpeed()
{
	if(GetLocalVarInt("WaterWheelBlocked")==1) return 0.0f;
		
	int lCogComboIdx = GetCogComboIndex();
	//AddDebugMessage("CogIdx: "+lCogComboIdx, false);
	
	return GetLocalVarFloat("WaterWheelRotateSpeed"+lCogComboIdx);
}

//------------------------------

//////////////////////////////
// Bone dropper helper
int glBoneCount = 0;
string[] gvBoneEnts = { "human_skull.ent", "human_bone.ent" };

string GetBoneModel()
{
	int lIndex = RandInt(0, 1);
	
	return gvBoneEnts[lIndex];
}

void DropBone(string &in asArea, float fTime)
{
	AddTimer(asArea, fTime, "TimerCreateBone");
}

void TimerCreateBone(string &in asTimer)
{
	string sBoneName = "script_created_bone_"+glBoneCount;
	CreateEntityAtArea(sBoneName, GetBoneModel(), asTimer, false);
	SetEntityInteractionDisabled(sBoneName, false);
	AddTimer(sBoneName, 5, "TimerRemoveBone");
	
	glBoneCount++;
}

void TimerRemoveBone(string &in asTimer)
{
	SetPropActiveAndFade(asTimer, false, 0.5f);
}


//------------------------------

////////////////////////////
// INTERACT WITH PIPE
////////////////////////////

//------------------------------

/////////////////////////
// Interact pipe piece
void InteractWithPipePiece(string &in asEntity)
{
	SetMessage("Ch02Level20", "PipeLoose", 0);
	AddQuest("20Pipe", "20Pipe");
}

//------------------------------

/////////////////////////
// Break pipe piece
void CollidePipePieceWithBreakArea(string &in asParent, string &in asChild, int alState)
{
	///////////////////////////////////////////
	// Check how many times the pipe has collided with area, and break if enough
	int lBreakAmount = GetLocalVarInt("PipeBreakAmount");
	if(lBreakAmount==2)
	{
		PlaySoundAtEntity("PipeBreak", "17_break_wheel.snt", asParent, 0.3f, false);
		PlaySoundAtEntity("PipeBreak2", "25_bar_drop.snt", asParent, 0, false);
		PlaySoundAtEntity("PipeBreak3", "impact_water_med.snt", asParent, 0, false);
		
		SetEntityActive(asParent, false);
		SetEntityActive("pipe_piece", true);
		RemoveEntityCollideCallback(asParent, asChild);
		
		CompleteQuest("20Pipe", "20Pipe");
		
		SetEntityActive("AreaScaryWaterLurkerEvent", true); //Activate a scary water lurker event.
	}
	else
	{
		lBreakAmount++;
		SetLocalVarInt("PipeBreakAmount", lBreakAmount);
	}
}


//------------------------------

////////////////////////////
// COG CONTROL PANEL
////////////////////////////

//------------------------------

void CogPanelChange(string &in asEntity, int alState)
{
	AddDebugMessage(asEntity + " state: " + alState, false);
	SetLocalVarInt(asEntity, alState);
	
	int lCogsInRightPlace = 0;
	if(GetLocalVarInt("water_wheel_cog_panel_1")==0 && GetLocalVarInt("water_wheel_cog_panel_2")==2)
		lCogsInRightPlace = 1;
	
	SetLocalVarInt("CogsInRightPlace", lCogsInRightPlace);
	
	PlayGuiSound("20_lever_position.snt", 0.9f);
	
	UpdateWaterWheelRotateSpeed();
}

/*
/////////////////////////
// Cog panel controls
void CogLeverInPlace(string &in asAreaName, string &in asBodyName)
{
	
	///////////////////////////////////////////
	// Set cog state based on lever position
	for(int i=0;i<3;++i)
	{
		string sAreaName = "water_wheel_cogpanel_"+lID+"_leverpos_"+i;
		//AddDebugMessage("Checking agains area: " + sAreaName, false);
		if(asAreaName==sAreaName)
		{
			SetLocalVarInt("CogPanel"+lID+"State", i);
			AddDebugMessage("CogPanel"+lID+"State is now "+i+" Speed: "+GetCogRotateSpeed(),false);
						
			PlaySoundAtEntity("LeverInPlace", "20_stick_"+GetCogComboString()+".snt", asAreaName,0.3, false);
			
			// Fix so that player releases lever
			SetPlayerActive(false);
			SetPlayerActive(true);
			
			break;
		}
	}
	
	int lCogsInRightPlace=0;
	if(GetLocalVarInt("CogPanel1State")==0 && GetLocalVarInt("CogPanel2State")==0) 
		lCogsInRightPlace=1;
	
	SetLocalVarInt("CogsInRightPlace", lCogsInRightPlace);
	
	UpdateWaterWheelRotateSpeed();
}
*/

void InteractWheelMachine(string &in asEntity)
{
	AddQuest("20Machine", "20Machine");
}
//------------------------------------------------------

//////////////////////////
// WATER WHEEL SPEED HELPER
//////////////////////////

//------------------------------------------------------

/////////////////////////
// Wheel rotate speed
void UpdateWaterWheelRotateSpeed()
{
	//AddDebugMessage("Calling UpdateWaterWheelRotateSpeed()", false);
	
	float fRotateSpeed = GetCogRotateSpeed();
	
	//AddDebugMessage("Updating rotation speed: "+fRotateSpeed, false);
	
	//////////////////////////
	// Modify wheel movement
	if(fRotateSpeed==0.0f)
	{
		StopPropMovement("water_wheel_1");
		SetPropStaticPhysics("water_wheel_1", true);
	}
	else
	{
		RotatePropToSpeed("water_wheel_1", 1.0f, fRotateSpeed, 1.0f, 0.0f,0.0f, true, "water_wheel_center_area");
	}
	
	///////////////////////////
	// Update stream particles
	DestroyParticleSystem("PS_WaterWheelStream");
	if(fRotateSpeed>0.0f)
	{
		if(GetCogComboIndex()==0)
			CreateParticleSystemAtEntity("PS_WaterWheelStream", "ps_waterwheel_stream.ps", "water_wheel_splasharea_in", false);
		else
			CreateParticleSystemAtEntity("PS_WaterWheelStream", "ps_waterwheel_stream.ps", "water_wheel_splasharea_out", false);
	}
		
	StopSound("CogMachinery",2);
	AddTimer("UpdateCogSounds", 0.5f, "TimerUpdateCogMachinerySounds");
}


//------------------------------------------------------

//////////////////////////
// COG MACHINERY SOUNDS (played in control room)
//////////////////////////

//------------------------------------------------------

void TimerUpdateCogMachinerySounds(string &in asTimer)
{
	UpdateCogMachinerySounds(GetCogRotateSpeed());
}

void UpdateCogMachinerySounds(float afRotateSpeed)
{
	////////////////////////////////////
	// All sound files in here are placeholders
	string sSndFile;
	if(afRotateSpeed==0.0f)
	{
		sSndFile = "20_machinery_stop.snt";
	}
	else
	{
		sSndFile = "20_machinery_running_"+GetCogComboString()+".snt";
	}
	
	//AddDebugMessage("Setting machinery sound for speed "+ afRotateSpeed +": " + sSndFile, false);

	StopSound("CogMachinery",2);
	for(int i=1;i<2;++i)
		PlaySoundAtEntity("CogMachinery", sSndFile, "WaterWheelMachinerySoundArea"+i, 0.5, true);	
}

//------------------------------------------------------

//////////////////////////
// WATER WHEEL SPLASH EFFECT
//////////////////////////

//------------------------------------------------------


/////////////////////////
// Wheel splash IN
void CollideWaterWheelBladeWithWaterIn(string &in asParent, string &in asChild, int alState)
{
	//AddDebugMessage("Collision between " + asParent	+ " and " + asChild + " state: " +alState, false);
	string sSplashType = GetCogComboString();

	// Play splashes every 3rd time
	int lSoundCounter = GetLocalVarInt("WaterWheelPlayingSplashSound");
	
	if(lSoundCounter>=GetCogPlaySoundWaitSteps())	//So count is high enough for sound to play	
	{
		//AddDebugMessage("WaterSound: "+lSoundCounter+" ID:"+GetCogComboIndex() , false);
		lSoundCounter=0;
					
		//CheckSo player is in area close enough to play sound.
		if(GetLocalVarInt("WaterWheelSplashSoundHeard")==1)
		{
			PlaySoundAtEntity(asChild + "SplashSound", "20_waterwheel_impact_"+sSplashType+".snt", asChild, 0, false);
		}
	}
	else
	{
		lSoundCounter++;
	}
		
	SetLocalVarInt("WaterWheelPlayingSplashSound", lSoundCounter);	
	CreateParticleSystemAtEntity("PS_Splash_"+asChild, "ps_impact_water_wheel_splash_"+sSplashType+".ps", asChild, false);
	
	//PlaySoundAtEntity(asChild + "SplashSound", "20_waterwheel_impact_"+sSplashType+".snt", asChild, 0, false);
	//CreateParticleSystemAtEntity("PS_Splash_"+asChild, "ps_impact_water_wheel_splash_"+sSplashType+".ps", asChild, false);
}

/////////////////////////
// Wheel splash OUT
void CollideWaterWheelBladeWithWaterOut(string &in asParent, string &in asChild, int alState)
{
	//AddDebugMessage("Collision between " + asParent	+ " and " + asChild + " state: " +alState, false);
	string sSplashType = GetCogComboString();
		
	CreateParticleSystemAtEntity("PS_Splash_"+asChild, "ps_impact_water_wheel_splash_out.ps", asChild, false);
}


//------------------------------------------------------

//////////////////////////
// WATER WHEEL VS PLAYER DAMAGE
//////////////////////////

//------------------------------------------------------

//////////////////////////
// Collide with player
void CollidePlayerWithWaterWheel(string &in asParent, string &in asChild, int alState)
{
	//AddDebugMessage("Collision between " + asParent	+ " and " + asChild + " state: " +alState, false);	
	AddQuest("20WaterWheelBlocking", "20WaterWheelBlocking");
	
	AddPlayerBodyForce(0,0,9000, false);
		
	GivePlayerDamage(10, "BloodSplat", true, false);
	
	PlayGuiSound("20_hit_wheel.snt", 0.8f);
}

//------------------------------------------------------

//////////////////////////
// JAM WATER WHEEL
//////////////////////////

//------------------------------------------------------

/////////////////////////
// Use pipe
void UsePipeOnWaterWheelCallback(string &in asItem, string &in asEntity)
{
	//AddDebugMessage("Using pipe on wheel", false);
	int lCogComboIndex = GetCogComboIndex();
	
	////////////////////////////////////////////////////////////////////////////////
	// Player is not allowed to put pipe on wheel unless the wheel rotate speed is low
	if(lCogComboIndex!=0)
	{
		AddQuest("20WaterWheelFast", "20WaterWheelFast");
		
		SetMessage("Ch02Level20", "WheelTooFast", 0);
		PlaySoundAtEntity("PipeHitSound", "20_pipe_reject.snt", "PipeHitArea", 0, false); 
		CreateParticleSystemAtEntity("PipeHitSpark", "ps_hit_metal.ps", "PipeHitArea", false);
		CreateParticleSystemAtEntity("PipeHitSpark", "ps_hit_metal.ps", "PipeHitArea", false);
		CreateParticleSystemAtEntity("PipeHitSmoke", "ps_dust_impact.ps", "PipeHitArea", false);
	}
	else
	{
		// Start LookAt to pipe pos
		SetPlayerActive(false);
		StartPlayerLookAt("PipeBlockPosArea", 2.0f,4.0f,"");
		RemoveUseItemCallback("UsePipeOnWaterWheel");
		
		SetEntityPlayerInteractCallback("WheelInteractArea", "", false);
		
		CompleteQuest("20WaterWheelFast", "20WaterWheelFast");
		CompleteQuest("20WaterWheelBlocking", "20WaterWheelBlocking");
		CompleteQuest("20Machine", "20Machine");
		
		PlayMusic("20_puzzle.ogg", false, 1.0f, 0.0f, 10, false);
		//Wait a second until starting area that allows pipe to be placed.
		AddTimer("PipePosTarget",1.0f,"TimerPipePosTargetedCallback");
	}
}

// Called when pipe position is targeted
void TimerPipePosTargetedCallback(string &in asTimer)
{
	// Check pipe pos is not blocked
	//AddDebugMessage("Looking at target!!", false);
	AddEntityCollideCallback("water_wheel_1", "PipeBlockPosArea", "PipePosClear", true, -1);
}

////////////////////////
// Pipe position is clear
void PipePosClear(string &in asParent, string &in asChild, int alState)
{
	// Put pipe in place
	StopPlayerLookAt();
	SetEntityActive("PipeBlock", true);
	SetPropStaticPhysics("PipeBlock", true);
	SetEntityInteractionDisabled("PipeBlock", true);
	AddEntityCollideCallback("water_wheel_1", "PipeHitArea", "CollideWheelWithPipe", true, 1);
	
	StopSound("WheelLoop", 2.0f);
	
	RemoveItem("pipe_piece");
}

////////////////////////
// Water wheel collide with static pipe piece
void CollideWheelWithPipe(string &in asParent, string &in asChild, int alState)
{
	SetPlayerActive(true);
	///////////////////////////
	// Set block boolean and do some effects, also block wheel (done by the update func)
	SetLocalVarInt("WaterWheelBlocked", 1);
	StartScreenShake(0.025f, 2, 0, 1.5f);
	
	//Remove blocker so player can pass.
	SetEntityActive("WaterWheelBlocker", false);
	
	//No more damage from water wheel!
	RemoveEntityCollideCallback("Player", "water_wheel_1"); 
	
	//Puzzle complete extras!
	PlayMusic("12_puzzle_epoxy.ogg", false, 1.0, 0.1, 10, false);
	GiveSanityBoostSmall();
			
	// Create particles
	CreateParticleSystemAtEntity("PipeHitSpark", "ps_hit_metal.ps", "PipeHitArea", false);
	CreateParticleSystemAtEntity("PipeHitSpark", "ps_hit_metal.ps", "PipeHitArea", false);
	CreateParticleSystemAtEntity("PipeHitSmoke", "ps_dust_impact.ps", "PipeHitArea", false);
	
	PlaySoundAtEntity("WheelPipeHit", "20_pipe_stuck.snt", asChild, 0, false);
	
	UpdateWaterWheelRotateSpeed();
}

//------------------------------------------------------

/////////////////////////
// Player is near enough to hear
void CollidePlayerWithSplashHeardArea(string &in asParent, string &in asChild, int alState)
{
	AddDebugMessage("Wheel Splash is heard? " + alState, false);
	SetLocalVarInt("WaterWheelSplashSoundHeard", alState);
}

//------------------------------------------------------

//////////////////////////
// BRUTE ENCOUNTER - CENTER ROOM
//////////////////////////

//------------------------------------------------------

void CollidePlayerWithBruteArea1(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_2"), true);
	
	ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_2"));
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_143", GetEnemyIdleTime(3.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_116", GetEnemyIdleTime(3.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_124", GetEnemyIdleTime(1.0f), "");
	
	AddTimer("TimerEBrute01", 1.5f, "TimerEBrute01");
	if(GetToughModeOn() >= 1){SetEnemyIsHallucination(GetStringWithExtraModesSuffix("servant_brute_2"), false); CheckPoint("checktoughmode", "PlayerStartArea_1", "CheckPoint00", "", "");}
}

void TimerEBrute01(string &in asTimer)
{
	string sEvent = asTimer;	//Do not edit, sets timer loop function name.
	AddLocalVarInt(sEvent, 1);	//Do not edit, steps through timer loop events.
	bool bPauseAtStep = false;	//Do not edit, to pause or end the timer loop at specified step.

	float fEventSpeed = 1.0f;	//Set to preferred default time for the timer loop.

	switch(GetLocalVarInt(sEvent)){
		//////////
		//First step in the event - replace with step comment.
		case 1:
			StartScreenShake(0.003f, 2.0f, 2.0f, 2.0f);
			if(GetToughModeOn() <= 1)	GiveSanityDamage(10.0f, true);
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
			if(GetToughModeOn() <= 1)	AddTimer("scare", 0.5f, "TimerPlayerReact");
			AddTimer("breath", 2.5f, "TimerPlayerReact");
			AddTimer("breathl", 4.5f, "TimerPlayerReact");
		break;
		case 2:
			SetPlayerMoveSpeedMul(0.7f);
			SetPlayerRunSpeedMul(0.7f);
		break;
		case 3:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
		break;
		case 4:
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerRunSpeedMul(0.5f);
		break;
		case 5:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
		break;
		case 6:
			SetPlayerMoveSpeedMul(0.7f);
			SetPlayerRunSpeedMul(0.7f);
		break;
		case 7:
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
		break;
		case 8:
			SetPlayerMoveSpeedMul(1.0f);
			SetPlayerRunSpeedMul(1.0f);
		break;
		//////////
		//End timer when no more steps in the event found.
		default:
			bPauseAtStep = true;
		break;
	}

	if(!bPauseAtStep) AddTimer(sEvent, fEventSpeed, sEvent);
}

void TimerPlayerReact(string &in asTimer)
{
	if(asTimer == "scare")
		PlayGuiSound("react_scare", 1.0f);
	else if(asTimer == "breath")
		PlayGuiSound("react_breath", 0.8f);
	else if(asTimer == "breathl")
		PlayGuiSound("react_breath", 0.5f);
	else if(asTimer == "sanity")
		GiveSanityDamage(5, true);
	else if(asTimer == "restore")
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
	}
}
//------------------------------------------------------

//////////////////////////
// BRUTE ENCOUNTER - HALL 3
///////////////////////////

//------------------------------------------------------

void CollidePlayerWithBruteAreaHall3(string &in asParent, string &in asChild, int alState)
{
	/////////////////////////////////////////////
	// Check if wheel is slowed down
	if(GetLocalVarInt("CogsInRightPlace")==1)
	{
		//////////////////////////////
		// Destroy callback
		RemoveEntityCollideCallback(asParent, asChild);
		CheckPoint("check01", "PlayerStartArea_10", "CheckPoint01", "Hints", "DeathBrute_20_Sewer_01");
		
		if(GetEasyModeOn() >= 2)
		{
			return;
		}
		
		string sEnemyName = GetStringWithExtraModesSuffix("servant_brute_3");
		SetEntityActive(sEnemyName, true);
		
		ClearEnemyPatrolNodes(sEnemyName);
		AddEnemyPatrolNode(sEnemyName, "PathNodeArea_145", GetEnemyIdleTime(3.0f), "");	
		if(GetEasyModeOn() <= 0)
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_99", GetEnemyIdleTime(2.0f), "");
		AddEnemyPatrolNode(sEnemyName, "PathNodeArea_94", 4.0f, "");
		AddEnemyPatrolNode(sEnemyName, "PathNodeArea_64", GetEnemyIdleTime(6.0f), "");
		
		if(GetToughModeOn() >= 1)
		{
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_50", 0.125f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_30", GetEnemyIdleTime(3.0f), "");
			
			if(GetToughModeOn() == 1)
			{
				AddEnemyPatrolNode(sEnemyName, "PathNodeArea_33", GetEnemyIdleTime(3.0f), "");
			}
			else
			{
				AddEnemyPatrolNode(sEnemyName, "PathNodeArea_143", GetEnemyIdleTime(3.0f), "");
				AddEnemyPatrolNode(sEnemyName, "PathNodeArea_116", GetEnemyIdleTime(3.0f), "");
				AddEnemyPatrolNode(sEnemyName, "PathNodeArea_124", GetEnemyIdleTime(1.0f), "");
			}
		}
		
		AddTimer("scare", 1.2f, "TimerPlayerReact");
		AddTimer("sanity", 1.2f, "TimerPlayerReact");
		AddTimer("breath", 3.2f, "TimerPlayerReact");
		AddTimer("breathl", 5.5f, "TimerPlayerReact");
		PlayMusic("20_event_darkness.ogg",false , 1.0f, 10, 20, false);
		
		if(GetToughModeOn() >= 1)	AlertEnemyOfPlayerPresence(sEnemyName);
		
		/*
		RemoveTimer("caveinlurkersplash1");
		RemoveTimer("caveinlurkersplash2");
		RemoveTimer("caveinlurkersplash3");
		RemoveTimer("caveinlurkersplash4");
		RemoveTimer("caveinlurkersplash5");
		*/
	}
}

void ResetDoorIfBroken(string asDoor)
{
	if(GetPropHealth(asDoor) <= 0.0f)
	{
		ResetProp(asDoor);
	}
}

//------------------------------------------------------

void CheckPoint00(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("sewer_arched_1");
	ResetDoorIfBroken("sewer_arched_2");
	ResetDoorIfBroken("sewer_arched_3");
	ResetDoorIfBroken("sewer_arched_4");
	ResetDoorIfBroken("sewer_grate_rusty_1");
	ResetDoorIfBroken("sewer_grate_rusty_2");
	ResetDoorIfBroken("sewer_grate_rusty_3");
	ResetDoorIfBroken("sewer_grate_rusty_4");
	ResetDoorIfBroken("sewer_grate_rusty_5");
	ResetDoorIfBroken("sewer_grate_rusty_6");
	ResetDoorIfBroken("sewer_grate_rusty_7");
	ResetDoorIfBroken("sewer_grate_broken_1");
	
	StopMusic(3.0f, 0);
}

void CheckPoint01(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("sewer_arched_1");
	ResetDoorIfBroken("sewer_arched_2");
	ResetDoorIfBroken("sewer_arched_3");
	ResetDoorIfBroken("sewer_arched_4");
	ResetDoorIfBroken("sewer_grate_rusty_1");
	ResetDoorIfBroken("sewer_grate_rusty_2");
	ResetDoorIfBroken("sewer_grate_rusty_3");
	ResetDoorIfBroken("sewer_grate_rusty_4");
	ResetDoorIfBroken("sewer_grate_rusty_5");
	ResetDoorIfBroken("sewer_grate_rusty_6");
	ResetDoorIfBroken("sewer_grate_rusty_7");
	ResetDoorIfBroken("sewer_grate_broken_1");
	
	ResetProp("sewer_arched_3");
	
	if(alCount == 0)
	{	
		SetEntityPlayerInteractCallback("sewer_arched_3","InteractHall3CheckPoint01Door", true);
	}
	else if(alCount == 1)
	{
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_3"), true);
		
		ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_3"));
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_74", 5.0f, "");	
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_94", 3.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_72", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_50", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_64", 6.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_50", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_74", 5.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_53", 6.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_30", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_3"), "PathNodeArea_33", 3.0f, "");
	}
	else
	{
		//Free path for player!
	}
}

void InteractHall3CheckPoint01Door(string &in asEntity)
{
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_4"), true);
	
	ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_4"));
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_4"), "PathNodeArea_93", 5.0f, "");	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_4"), "PathNodeArea_94", 3.0f, "");
	if(GetToughModeOn() >= 1)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_4"), "PathNodeArea_99", GetEnemyIdleTime(2.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_4"), "PathNodeArea_64", 3.0f, "");
}

//------------------------------------------------------

//////////////////////////
// GRUNT CORPSE + ALEXANDER VOICE
//////////////////////////

//------------------------------------------------------

void CollideGruntCorpse(string &in asParent, string &in asChild, int alState)
{
	GiveSanityDamage(10, true);
	
	PlayMusic("20_event_darkness.ogg", false, 1.0, 0, 20, false);
	
	AddTimer("Music", 4.0f, "TimerAlexanderVoice01");
	AddTimer("AlexVoice01", 10.0f, "TimerAlexanderVoice01");
	
	SetEntityActive("AreaBruteHall4Encount", true); //Enable area that start brute Hall 4 encounter.
}

//------------------------------------------------------

void TimerAlexanderVoice01(string &in asTimer)
{
	if(asTimer == "Music"){
		StopMusic(4.0, 20);
		return;
	}
	AddEffectVoice("CH02L20_Alexander_01", "", "Voice", "CH02L20_Alexander_01", false, "", 0.0f, 0.0f);
}

//------------------------------------------------------

//////////////////////////
// BRUTE ENCOUNTER - HALL 4
//////////////////////////

//------------------------------------------------------

void CollideBruteHall4Encount(string &in asParent, string &in asChild, int alState)
{
	SetPropHealth("sewer_grate_worn_1",0); //Break the grate! <- this shall play lound sound, if not enough play other sound here!
	StartScreenShake(0.05, 0.5, 0.1, 0.1);
	
	SetEntityPlayerInteractCallback("sewer_grate_worn_1", "", true);
	
	AddTimer("BarsBrokenQuest",2, "TimerBarsBrokenQuest");
	
	PlayMusic("20_event_darkness.ogg", false, 1.0, 10, 20, false);
	
	AddTimer("scare", 0.5f, "TimerPlayerReact");
	AddTimer("sanity", 0.5f, "TimerPlayerReact");
	AddTimer("breath", 3.0f, "TimerPlayerReact");
	AddTimer("breathl", 6.0f, "TimerPlayerReact");
	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_5"), true);
	
	PlaySoundAtEntity("breakbars", "15_ripp_door.snt", GetStringWithExtraModesSuffix("servant_brute_5"), 0.0f, false);
	
	CheckPoint("check02","PlayerStartArea_12", "CheckPoint02", "Hints", "DeathBrute_20_Sewer_02");
	
	ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_5"));
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_5"), "PathNodeArea_169", GetEnemyIdleTime(5.0f), "");	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_5"), "PathNodeArea_217", GetEnemyIdleTime(3.0f), ""); 
	if(GetToughModeOn() >= 1)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_5"), "PathNodeArea_222", 2.0f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_5"), "PathNodeArea_313", GetEnemyIdleTime(3.0f), "");
	
	//Disalbe the area that activates the guard brute.
	SetEntityActive("AreaBruteEncountHall5", false);
}

void TimerBarsBrokenQuest(string &in asTimer)
{
	CompleteQuest("20Bars", "20Bars");
	AddQuest("20Bars02", "20Bars02");
}

//------------------------------------------------------

void CheckPoint02(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("sewer_arched_1");
	ResetDoorIfBroken("sewer_arched_2");
	ResetDoorIfBroken("sewer_arched_3");
	ResetDoorIfBroken("sewer_arched_4");
	ResetDoorIfBroken("sewer_grate_rusty_1");
	ResetDoorIfBroken("sewer_grate_rusty_2");
	ResetDoorIfBroken("sewer_grate_rusty_3");
	ResetDoorIfBroken("sewer_grate_rusty_4");
	ResetDoorIfBroken("sewer_grate_rusty_5");
	ResetDoorIfBroken("sewer_grate_rusty_6");
	ResetDoorIfBroken("sewer_grate_rusty_7");
	ResetDoorIfBroken("sewer_grate_broken_1");
	
	ResetProp("sewer_arched_4");
	
	if(alCount ==0)
	{
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_5"), true);
		ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_5"));
		
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_5"), "PathNodeArea_312", 5.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_5"), "PathNodeArea_162", GetEnemyIdleTime(3.0f), "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_5"), "PathNodeArea_179", 2.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_5"), "PathNodeArea_313", 1.0f, "");
	}
	else
	{
		//Free path for player!	
		
		//Turn off the grunt appearance up ahead!
		//Not today!
		SetEntityActive("AreaBruteEncountHall5", true);
	}
}

//------------------------------------------------------

void OnBrute05AutoDisabled(string &in asEntity, string &in asType)
{
	SetEntityActive("AreaBruteEncountHall5", true);
}

//------------------------------------------------------

//////////////////////////
// BRUTE ENCOUNTER - HALL 5
//////////////////////////

//------------------------------------------------------

void CollideBruteEncountHall5(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("metalamb", "15_amb_metal.snt", "AreaBruteEncountHall5", 4.0f, true);
	CheckPoint("check03","PlayerStartArea_4", "CheckPoint03", "Hints", "DeathBrute_20_Sewer_03");
	
	if(GetEasyModeOn() >= 2)	return;
	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_6"), true);
	
	ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_6"));
	
	//AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_6"), "PathNodeArea_269", 9.0f, "");
	
	StartScreenShake(0.003f, 1.0f, 2.0f, 2.0f);
	if(GetToughModeOn() <= 1){
	AddTimer("breath", 2.0f, "TimerPlayerReact");
	AddTimer("breathl", 4.0f, "TimerPlayerReact");}
	
	if(GetToughModeOn() >= 1)	AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_brute_6"));
}

void CheckPoint03(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("sewer_arched_1");
	ResetDoorIfBroken("sewer_arched_2");
	ResetDoorIfBroken("sewer_arched_3");
	ResetDoorIfBroken("sewer_arched_4");
	ResetDoorIfBroken("sewer_grate_rusty_1");
	ResetDoorIfBroken("sewer_grate_rusty_2");
	ResetDoorIfBroken("sewer_grate_rusty_3");
	ResetDoorIfBroken("sewer_grate_rusty_4");
	ResetDoorIfBroken("sewer_grate_rusty_5");
	ResetDoorIfBroken("sewer_grate_rusty_6");
	ResetDoorIfBroken("sewer_grate_rusty_7");
	ResetDoorIfBroken("sewer_grate_broken_1");
	
	ResetProp("sewer_arched_*");
	ResetProp("stone_small01*");
	
	if(alCount ==0)
	{
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_6"), true);
	}
	else if(alCount ==1)
	{
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_6"), true);
		ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_6"));
		
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_6"), "PathNodeArea_258", 5.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_6"), "PathNodeArea_269", 5.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_6"), "PathNodeArea_242", 5.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_6"), "PathNodeArea_269", 5.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_6"), "PathNodeArea_258", 5.0f, "");
	}
	else
	{
		//Set that the brute is in the patrol area so we get a run event.
		SetLocalVarInt("Brute06IsInPatrolArea", 1);
	}
	
}

//Check and see if brute 6 is in the patrol area.
void CollideBruteInsidePatrolArea(string &in asParent, string &in asChild, int alState)
{
	int lVar = alState==1 ? 1 : 0;
	SetLocalVarInt("Brute06IsInPatrolArea", lVar);
	
	AddDebugMessage("Grunt 06 Patrol area: "+lVar, false);
}

//////////////////////////
// BRUTE ENCOUNTER - HALL 6
//////////////////////////

//------------------------------------------------------

void CollideBruteEncountHall6(string &in asParent, string &in asChild, int alState)
{
	//If brute 6 is not in patrol area, then we do not spawn this one!
	if(GetLocalVarInt("Brute06IsInPatrolArea")==0) return;
	
	//Do not want another event.
	SetEntityActive("AreaBruteEncountHall6", false);
	
	float fPlayerSpeed = 0.6f;
	if(GetEasyModeOn() == 1)
		fPlayerSpeed = 0.8f;
	else if(GetEasyModeOn() == 2)
		fPlayerSpeed = 1.0f;
	else if(GetToughModeOn() == 1)
		fPlayerSpeed = 0.4f;
	else if(GetToughModeOn() == 2)
		fPlayerSpeed = 0.2f;
	SetPlayerMoveSpeedMul(fPlayerSpeed);
	SetPlayerRunSpeedMul(fPlayerSpeed);
	SetPlayerLookSpeedMul(fPlayerSpeed);
	
	AddTimer("scare", 0.5f, "TimerPlayerReact");
	AddTimer("sanity", 0.55f, "TimerPlayerReact");
	AddTimer("restore", 1.0f, "TimerPlayerReact");
	AddTimer("breath", 2.5f, "TimerPlayerReact");
	AddTimer("breathl", 4.5f, "TimerPlayerReact");
	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_7"), true);
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_6"), false); //Turn off the guard!
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_5"), false); //Turn off the guard!
	
	SetLocalVarInt("Brute07Activated",1);
	
	PlayEnemySoundAtEntity("notice.snt", "Player", "brute");
	
	ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_7"));
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_248", GetEnemyIdleTime(3.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_245", 0.5f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_234", 0.5f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_177", 0.5f, "");
	
	//ShowEnemyPlayerPosition("servant_brute_7");
	
	//New checkpoint
	//if player reaches this point, can let him through without any problems.
	CheckPoint("check04","PlayerStartArea_13", "CheckPoint04", "Hints", "DeathGuardian_25_CellTunnels");
	
	//add a timer to make sure the player is not lost!
	if(GetEasyModeOn() <= 0)
	{
		AddTimer("ShowBrute7Player", 0.25f, "TimerShowBrute7Player");
	}
	else
	{
		AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_brute_7"));
	}
}

void TimerShowBrute7Player(string &in asTimer)
{
	ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("servant_brute_7"));
	AddTimer("ShowBrute7Player", 2.5f, "TimerShowBrute7Player");	
}

//------------------------------------------------------

void CheckPoint04(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("sewer_arched_1");
	ResetDoorIfBroken("sewer_arched_2");
	ResetDoorIfBroken("sewer_arched_3");
	ResetDoorIfBroken("sewer_arched_4");
	ResetDoorIfBroken("sewer_grate_rusty_1");
	ResetDoorIfBroken("sewer_grate_rusty_2");
	ResetDoorIfBroken("sewer_grate_rusty_3");
	ResetDoorIfBroken("sewer_grate_rusty_4");
	ResetDoorIfBroken("sewer_grate_rusty_5");
	ResetDoorIfBroken("sewer_grate_rusty_6");
	ResetDoorIfBroken("sewer_grate_rusty_7");
	ResetDoorIfBroken("sewer_grate_broken_1");
	
	ResetProp("sewer_arched_*");
	ResetProp("stone_small01*");
	
	RemoveTimer("ShowBrute7Player");
	
	SetLocalVarInt("Brute06IsInPatrolArea", 1);
	SetLocalVarInt("Brute07Activated", 0);
	SetLocalVarInt("Brute7Disabled", 0);
	
	SetEntityActive("AreaBruteEncountHall6", true);
	SetEntityActive("AreaExit_EnableBrute", false);
	SetEntityActive("AreaExit_DisableBrute", false);
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_6"), false);
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_7"), false);
	
	AddTimer("ReactivateExitAreas", 3, "TimerActiveExitAreas");
}

void TimerActiveExitAreas(string &in asTimer)
{
	SetEntityActive("AreaExit_EnableBrute", true);
	SetEntityActive("AreaExit_DisableBrute", true);
}

//------------------------------------------------------

//////////////////////////
// WATER LURKER SCARE IN HALL 2
//////////////////////////

//------------------------------------------------------

void CollideScaryWaterLurkerEvent(string &in asParent, string &in asChild, int alState)
{
	if((GetPlayerSanity() >= 50 || GetEasyModeOn() >= 2) && (GetToughModeOn() <= 1))
		return;
	
	PlayMusic("04_event_stairs.ogg", false, 0.7, 0.1, 10, false);
	
	AddTimer("scare", 0.7f, "TimerPlayerReact");
	AddTimer("breath", 2.7f, "TimerPlayerReact");
	AddTimer("breathl", 4.7f, "TimerPlayerReact");
	
	AddTimer("AreaLurkerSound", 0.5f, "TimerLurkerSplash");
	AddTimer("AreaLurkerSplash_1", 1.0f, "TimerLurkerSplash");
	AddTimer("AreaLurkerSplash_2", 2.2f, "TimerLurkerSplash");
	AddTimer("AreaLurkerSplash_3", 3.0f, "TimerLurkerSplash");
	AddTimer("AreaLurkerSplash_4", 3.5f, "TimerLurkerSplash");
	AddTimer("AreaLurkerSplash_5", 4.0f, "TimerLurkerSplash");
	
	RemoveEntityCollideCallback(asParent, asChild);
}

//------------------------------------------------------

void TimerLurkerSplash(string &in asTimer)
{
	if(asTimer == "AreaLurkerSound"){
		PlayEnemySoundAtEntity("hunt.snt", "AreaLurkerSplash_1", "waterlurker");
		GiveSanityDamage(10.0f, true);
		StartScreenShake(0.003f, 0.0f, 0.5f, 3.0f);
		
	}else{
	
		PlaySoundAtEntity("LurkerSound","impact_water_high.snt", asTimer, 0, false);
		CreateParticleSystemAtEntity("LurkerPS", "waterlurker_walk_splash", asTimer, false);	
	}
	
	if(asTimer == "AreaLurkerSplash_5")
	{
		PlayEnemySoundAtEntity("attack.snt", asTimer, "waterlurker");
		PlayEnemySoundAtEntity("eat.snt", asTimer, "waterlurker");
		StartScreenShake(0.003f, 0.0f, 0.5f, 3.0f);
		GivePlayerDamage(5.0f, "BloodSplat", true, false);
		PlayGuiSound("impact_water_high.snt", 0.5f);
	}
}

//------------------------------------------------------


//////////////////////////
// EXIT MAP
//////////////////////////

//------------------------------------------------------

void CollideExitMap(string &in asParent, string &in asChild, int alState)
{
	ChangeMap("21_torture_nave.map", "PlayerStartArea_1", "20_exit", "");
}

//------------------------------------------------------


//////////////////////////
// INTERACT BARS
//////////////////////////

//------------------------------------------------------
void InteractMetalBars(string &in asEntity)
{
	PlaySoundAtEntity("squeak", "20_bend_pipe", asEntity, 0.5f, false);
	
	SetMessage("Ch02Level20", "BruteMetalBars", 0);
	AddQuest("20Bars", "20Bars");
	
	AddTimer(asEntity, 1.0f, "TimerMetalBars");
}
void TimerMetalBars(string &in asTimer)
{
	StopSound("squeak", 0.5f);
	SetEntityPlayerInteractCallback(asTimer, "InteractMetalBars", true);
}

void CollideAreaBarQuest(string &in asParent, string &in asChild, int alState)
{
	CompleteQuest("20Bars02","20Bars02");
}


//------------------------------------------------------

//////////////////////////
// INTERACT WATER WHEEL
//////////////////////////

//------------------------------------------------------

void InteractWaterWheel(string &in asEntity)
{
	CollidePlayerWithWaterWheel("","",1);
	AddTimer(asEntity, 1.0f, "TimerWaterWheel");
}
void TimerWaterWheel(string &in asTimer)
{
	StopSound("squeak", 0.5f);
	SetEntityPlayerInteractCallback(asTimer, "InteractWaterWheel", true);
}


//------------------------------------------------------

//////////////////////////
// FINAL TUNNEL EVENTS
//////////////////////////

//------------------------------------------------------

void CollideAreaExitEvent(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaExitEvent_1")
	{
		PlayGuiSound("insanity_monster_roar03.ogg", 1.0f);
		StartScreenShake(0.01f, 0.5f, 2.0f, 4.0f);
		AddTimer("scare", 0.5f, "TimerPlayerReact");
		AddTimer("breath", 2.5f, "TimerPlayerReact");
		AddTimer("breathl", 4.5f, "TimerPlayerReact");
		
		//This is just to make sure that no enemy is hunting the player at this point!
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_6"), false);
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_5"), false);
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_4"), false);
	}
	else
	{
		// Grunt stops getting player position
		if(asChild=="AreaExitEvent_5")
		{
			RemoveTimer("ShowBrute7Player");
		}
		
		AddTimer("breathl", 1.5f, "TimerPlayerReact");
		PlayGuiSound("15_sand_debris.snt", 1.0f);
	}
}

//------------------------------------------------------

void CollideExitAreaDisableBrute(string &in asParent, string &in asChild, int alState)
{
	//Do not do anything if brute is not activated
	if(GetLocalVarInt("Brute07Activated")==0)return;
	
	if(GetLocalVarInt("Brute7Disabled")==1) return;
	SetLocalVarInt("Brute7Disabled", 1);
	
	//PlaySoundAtEntity("brute_scream", "brute/amb_alert.snt", "servant_brute_7", 0, false);
	SetEnemyDisableTriggers(GetStringWithExtraModesSuffix("servant_brute_7"), true); 
	RemoveTimer("ShowBrute7Player");
	
	//Reset enemy
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_7"), false);
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_7"), true);

	ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_7"));
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_297", GetEnemyIdleTime(4.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_288", 0.5f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_248", GetEnemyIdleTime(2.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_245", 0.5f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_234", 0.5f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_7"), "PathNodeArea_177", 0.5f, "");
}

void CollideExitAreaEnableBrute(string &in asParent, string &in asChild, int alState)
{
	//Do not do anything if brute is not activated
	if(GetLocalVarInt("Brute07Activated")==0)return;
	
	if(GetLocalVarInt("Brute7Disabled")==0) return;
	SetLocalVarInt("Brute7Disabled", 0);
	
	SetEnemyDisableTriggers(GetStringWithExtraModesSuffix("servant_brute_7"), false);
	//ShowEnemyPlayerPosition("servant_brute_7");
}

//------------------------------------------------------

//////////////////////////
// MONSTER BREATHS
//////////////////////////

//------------------------------------------------------

void CollideAreaBreath(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("warn", "04_warn.snt", "AreaBreath_1", 0.0f, false);
	PlaySoundAtEntity("rocks", "03_rock_move.snt", "AreaBreath_1", 0.0f, false);
	CreateParticleSystemAtEntity("warnps", "ps_cave_monster_warn.ps", "AreaBreath_1", false);
	StartScreenShake(0.01f, 0.5f, 2.0f, 3.5f);
	AddTimer("scare", 0.5f, "TimerPlayerReact");
	AddTimer("sanity", 0.5f, "TimerPlayerReact");
	AddTimer("breath", 3.0f, "TimerPlayerReact");
	AddTimer("breathl", 5.0f, "TimerPlayerReact");
	AddTimer("AreaBreath_1", 5.0f, "TimerCaveBreath");
}
void TimerCaveBreath(string &in asTimer)
{
	PlaySoundAtEntity("breaths", "04_breath.snt", "AreaBreath_1", 0.0f, false);
	PlaySoundAtEntity("rocksm", "03_rock_move.snt", "AreaBreath_1", RandFloat(2.0f,6.0f), false);
	CreateParticleSystemAtEntity("breathps", "ps_cave_monster_breath.ps", "AreaBreath_1", false);
	
	AddTimer(asTimer, RandFloat(6.0f,18.0f), "TimerCaveBreath");
}


//CAVE WITH A BIT OF A SPLAH
void CollideAreaCaveEvent(string &in asParent, string &in asChild, int alState)
{
	GiveSanityDamage(5.0f, false);
	
	PlayEnemySoundAtEntity("eat_rev.snt", "AreaCaveEvent_1", "waterlurker");
	
	AddTimer("scare", 0.5f, "TimerPlayerReact");
	AddTimer("breath", 2.5f, "TimerPlayerReact");
	AddTimer("breathl", 4.5f, "TimerPlayerReact");
	
	AddTimer("caveinlurkersplash1", 7.0f, "TimerCaveSplah");
	AddTimer("caveinlurkersplash2", 16.0f, "TimerCaveSplah");
	AddTimer("caveinlurkersplash3", 25.0f, "TimerCaveSplah");
	AddTimer("caveinlurkersplash4", 50.0f, "TimerCaveSplah");
	AddTimer("caveinlurkersplash5", 100.0f, "TimerCaveSplah");
}
void TimerCaveSplah(string &in asTimer)
{
	PlayEnemySoundAtEntity("idle_rev.snt", "AreaCaveEvent_1", "waterlurker");
	GiveSanityDamage(2.0f, false);
}

//------------------------------------------------------

////////////////////////////
// BONE DROPPERS
//////////////////////////

//------------------------------------------------------

void LookAtBoneDropper(string &in asEntity, int alState)
{
	if(alState==-1)
		return;
	
	if(GetPlayerSanity()>=25)
		return;
	
	int lNumBones = RandInt(3,5);
	AddDebugMessage("Dropping bones!", false);	
	for(int i=0;i<lNumBones;++i)
		DropBone(asEntity + "_source", (i+1)*0.3f);
}

//------------------------------------------------------

//////////////////////////
// DEAD END GROWLS
//////////////////////////

//------------------------------------------------------

void CollideAreaGateMonster(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("GateMonsterDisabled")==1)
		return;
		
	AddTimer(asChild, RandFloat(1.0f,3.0f), "TimerStartGateMonster");
}

void TimerStartGateMonster(string &in asTimer)
{
	// TODO : add more fluff here
	GiveSanityDamage(5.0f, false);
	PlaySoundAtEntity("growl", "04_warn.snt", asTimer+"_sound", 0, false);
	StartScreenShake(0.1f, 0.5f, 1, 0.25f);
	SetLocalVarInt("GateMonsterDisabled", 1);
	AddTimer("TimerRestoreGateMonster", 30, "TimerRestoreGateMonster");
}

void TimerRestoreGateMonster(string &in asTimer)
{
	SetLocalVarInt("GateMonsterDisabled", 0);
}

//------------------------------------------------------


////////////////////////////
// Run first time starting map
void OnStart()
{
	SetMapDisplayNameEntry("Sewer");
	
	/////////////////////////////////
	// Clear all previously saved maps.
	ClearSavedMaps();
	
	/////////////////////////////////
	//Sanity Boost
	GiveSanityBoostSmall();
	
	/////////////////////////////////
	// Set up variables
	
	// Pipe puzzle
	///AddLocalVarInt("PipeBreakAmount", 0);
	
	// Wheel puzzle
	float[] vRotateSpeeds = 
	{
		1.5708f,
		3.1416f,
		4.7124f,
		5.1832f,
		5.354f,
	};
	
	for(int i=0;i<5;++i)
		SetLocalVarFloat("WaterWheelRotateSpeed"+i, vRotateSpeeds[i]);

	/*
	AddLocalVarInt("CogPanel1State", 0);
	AddLocalVarInt("CogPanel2State", 0);
	
	AddLocalVarInt("CogsInRightPlace", 0);
	
	AddLocalVarInt("WaterWheelBlocked", 0);
	
	AddLocalVarInt("WaterWheelPlayingSplashSound", 0);
	AddLocalVarInt("WaterWheelSplashSoundHeard", 0);
	*/
	
	//Init this var so one is sure it is 1 at start! (Otherwise grunt 7 will not appear is testing.!)
	SetLocalVarInt("Brute06IsInPatrolArea", 1);
	
	///////////////////////////////
	// Set up collide callbacks
	AddEntityCollideCallback("Player", "water_wheel_1", "CollidePlayerWithWaterWheel", false, 0);
	AddEntityCollideCallback("water_wheel_1", "water_wheel_splasharea_in", "CollideWaterWheelBladeWithWaterIn", false, 1);
	AddEntityCollideCallback("water_wheel_1", "water_wheel_splasharea_out", "CollideWaterWheelBladeWithWaterOut", false, -1);
	
	AddEntityCollideCallback("pipe_piece_static", "PipeBreakArea", "CollidePipePieceWithBreakArea", false, 1);
	
	AddEntityCollideCallback("Player", "AreaScaryWaterLurkerEvent", "CollideScaryWaterLurkerEvent", false, 1);
	
	AddEntityCollideCallback("Player", "WheelSplashHeardArea", "CollidePlayerWithSplashHeardArea", false, 0);
	
	AddEntityCollideCallback("Player", "BruteScriptEvent1", "CollidePlayerWithBruteArea1", true, 0);
	AddEntityCollideCallback("Player", "BruteHall3EventArea", "CollidePlayerWithBruteAreaHall3", false, 0);
	
	AddEntityCollideCallback("sewer_arched_4", "AreaGruntCorpse", "CollideGruntCorpse", true, 0);
	AddEntityCollideCallback("Player", "AreaBruteHall4Encount", "CollideBruteHall4Encount", true, 0);
	
	AddEntityCollideCallback("Player", "AreaBruteEncountHall5", "CollideBruteEncountHall5", true, 1);
	AddEntityCollideCallback("Player", "AreaBruteEncountHall6", "CollideBruteEncountHall6", false, 1);
	
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_brute_6"), "AreaBruteInsidePatrolArea", "CollideBruteInsidePatrolArea", false, 0);
	
	AddEntityCollideCallback("Player", "AreaExitMap", "CollideExitMap", true, 0);
	
	AddEntityCollideCallback("Player", "AreaBarQuest", "CollideAreaBarQuest", true, 1);
	
	AddEntityCollideCallback("Player", "AreaBreath", "CollideAreaBreath", true, 1);
	
	AddEntityCollideCallback("Player", "AreaCaveEvent", "CollideAreaCaveEvent", true, 1);
	
	for(int i=1;i<7;i++) AddEntityCollideCallback("Player", "AreaExitEvent_"+i, "CollideAreaExitEvent", true,1);
	
	for(int i=1;i<=6;++i)
		AddEntityCollideCallback("Player", "AreaGateMonster_" + i, "CollideAreaGateMonster", false, 1); 
		
	AddEntityCollideCallback("Player", "AreaExit_DisableBrute", "CollideExitAreaDisableBrute", false, 1);
	AddEntityCollideCallback("Player", "AreaExit_EnableBrute", "CollideExitAreaEnableBrute", false, 1);
	
	///////////////////////////////
	// Set up use item callbacks
	AddUseItemCallback("UsePipeOnWaterWheel", "pipe_piece", "WheelInteractArea", "UsePipeOnWaterWheelCallback", false);
	
	///////////////////////////////
	// Set up interaction callbacks
	SetEntityPlayerInteractCallback("pipe_piece_static", "InteractWithPipePiece", true); 
	
	///////////////////////////////
	// Debug!
	if(ScriptDebugOn())
	{
		//SetPlayerSanity(25.0);
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		//GiveItem("pipe_piece", "Puzzle", "PipePiece", "pipe_piece.tga", 1); 
		//gbForceWaterWheelSlowSpeed = true;
	}
	
	StopMusic(4.0f, 0);
	
	if(HasItem("crank_wood"))
	{
		RemoveItem("crank_wood");
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{
	PreloadSound("20_waterwheel_impact_low"); PreloadSound("20_waterwheel_impact_med"); PreloadSound("20_waterwheel_impact_high"); PreloadSound("25_bar_drop");
	PreloadSound("20_machinery_stop"); PreloadSound("20_machinery_running_high"); PreloadSound("20_machinery_running_low"); PreloadSound("20_machinery_running_med");
	PreloadSound("waterlurker_hunt.snt"); PreloadSound("04_warn"); PreloadSound("03_rock_move"); PreloadSound("04_breath");
	PreloadSound("waterlurker_idle.snt"); PreloadSound("react_breath"); PreloadSound("react_scare"); PreloadSound("insanity_monster_roar03");
	PreloadSound("15_sand_debris"); PreloadSound("waterlurker_eat_rev.snt");
	
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
	
	string sEnemyName = "";
	
	sEnemyName = "waterlurker";
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_rev.snt", sEnemyName);
	PreloadEnemySound("eat.snt", sEnemyName);
	PreloadEnemySound("eat_rev.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("hunt_rev.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_rev.snt", sEnemyName);
	
	sEnemyName = "brute";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	//////////////////////
	//Load Screen Setup
	SetupLoadScreen("LoadingText", "Ch02_Sewer02", 1, "game_loading_well.jpg");
}