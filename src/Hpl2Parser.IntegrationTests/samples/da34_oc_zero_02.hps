void OnStart()
{
	FadeOut(0);
	FadeIn(2);
	GiveItemFromFile("lantern_1", "lantern");
	PlayMusic("16_amb", true, 1, 5, 0, true);
	SetPlayerMoveSpeedMul(0.8f);
	SetPlayerRunSpeedMul(0);
	SetPlayerLampOil(20);
	SetLocalVarInt("orbpieces", 1);
	AddUseItemCallback("", "stone_hammer_chipper", "AreaOrb", "UseHammerChipper", false);
	AddUseItemCallback("", "wooden_bucket_1", "fillwater", "FillBucket", false);
	AddUseItemCallback("", "wooden_bucket_filled_1", "torch", "UnlitTorch", false);
	AddEntityCollideCallback("Player", "gruntact", "GruntActivate", true, 1);
	SetEntityPlayerInteractCallback("stone_hammer_1", "PickUpHammerAndChipper", true);
	SetEntityPlayerInteractCallback("stone_chipper_1", "PickUpHammerAndChipper", true);
	AddEntityCollideCallback("servant_grunt_silent_1", "grunt1_deact", "GruntDeActivate1", true, 1);
	AddEntityCollideCallback("servant_grunt_silent_2", "grunt2_deact", "GruntDeActivate2", true, 1);
	for(int i=1; i<=5; i++)
	{
		SetEntityInteractionDisabled("orbpiece_"+i, true);
	}
	SetEntityInteractionDisabled("bridge_torch_1", true);
	SetEntityInteractionDisabled("bridge_torch_2", true);
	AutoSave();
}

void GruntActivate(string &in asParent, string &in asChild, int alState)
{
	SetPlayerMoveSpeedMul(0.5f);
	PlayMusic("16_puzzle_bridge", false, 1, 0, 1, true);
	SetEntityActive("servant_grunt_silent_2", true);
	SetEntityActive("servant_grunt_silent_1", true);
	AddEnemyPatrolNode("servant_grunt_silent_2", "PathNodeArea_1", 0, "");
	AddEnemyPatrolNode("servant_grunt_silent_2", "PathNodeArea_2", 0, "");
	AddEnemyPatrolNode("servant_grunt_silent_2", "PathNodeArea_3", 0, "");
	AddEnemyPatrolNode("servant_grunt_silent_1", "PathNodeArea_4", 0, "");
	AddEnemyPatrolNode("servant_grunt_silent_1", "PathNodeArea_5", 0, "");
}

void GruntDeActivate1(string &in asParent, string &in asChild, int alState)
{
	SetPlayerMoveSpeedMul(1);
	SetPlayerRunSpeedMul(1);
	FadeEnemyToSmoke("servant_grunt_silent_1", false);
}

void GruntDeActivate2(string &in asParent, string &in asChild, int alState)
{
	FadeEnemyToSmoke("servant_grunt_silent_2", false);
}

void CollideAreaFire(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1) AddTimer("burn", 0.1f, "TimerBurnFire");
	else RemoveTimer("burn");
}
void InteractFire(string &in asEntity)
{
	TimerBurnFire("touch");
}
void TimerInteractFire(string &in asTimer)
{
	SetEntityPlayerInteractCallback("AreaFire", "InteractFire", true);
}
void TimerBurnFire(string &in asTimer)
{
	if(asTimer == "touch"){
		PlayGuiSound("15_player_burn.snt", 1.0f);
		GivePlayerDamage(5.0f, "BloodSplat", false,false);
		AddTimer("InteractFire", 1.0f, "TimerInteractFire");
		SetMessage("Message", "InteractFire", 4);
		return;
	}
	
	PlayGuiSound("15_player_burn.snt", 1.0f);
	GivePlayerDamage(5.0f, "BloodSplat", false,false);
	
	AddTimer("burn", 1.0f, "TimerBurnFire");
}

void FillBucket(string &in asItemA, string &in asItemB)
{
	PlaySoundAtEntity("", "puzzle_place_jar", "fillwater", 0, false);
	SetEntityActive("wooden_bucket_filling", true);
	RemoveItem("wooden_bucket_1");
	AddTimer("waterdrips", 3, "Waterdrips");
}
void Waterdrips(string &in asTimer)
{
	SetEntityActive("wooden_bucket_filling", false);
	SetEntityActive("fillwater", false);
	SetEntityActive("wooden_bucket_filled_1", true);
}

void UnlitTorch(string &in asItemA, string &in asItemB)
{
	GiveSanityBoostSmall();
	RemoveItem("wooden_bucket_filled_1");
	PlaySoundAtEntity("", "puzzle_acid_fail", "torch", 0, false);
	SetLampLit("bridge_torch_1", false, true);
	SetEntityActive("torch", false);
}

void PickUpHammerAndChipper(string &in asEntity)
{
	if (HasItem("stone_hammer_1") == true && HasItem("stone_chipper_1") == true)
	{
		PlayGuiSound("15_make_hammer", 1.0f);
		AddPlayerSanity(10);
		RemoveItem("stone_hammer_1");
		RemoveItem("stone_chipper_1");
		GiveItem("stone_hammer_chipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0);
	}
}

void UseHammerChipper(string &in asItemA, string &in asItemB)
{
	switch(GetLocalVarInt("orbpieces")) {
	case 1:
		PlaySoundAtEntity("", "guardian_distant", "AreaOrb", 0, false);
		SetEntityActive("orb_6", false);
		SetEntityActive("orb_5", true);
		SetEntityActive("orbpiece_1", true);
		SetLocalVarInt("orbpieces", (GetLocalVarInt("orbpieces") + 1));
	break;
		case 2:
		SetEntityActive("orb_5", false);
		SetEntityActive("orb_4", true);
		SetEntityActive("orbpiece_2", true);
		SetLocalVarInt("orbpieces", (GetLocalVarInt("orbpieces") + 1));
	break;
		case 3:
		SetEntityActive("orb_4", false);
		SetEntityActive("orb_3", true);
		SetEntityActive("orbpiece_3", true);
		SetLocalVarInt("orbpieces", (GetLocalVarInt("orbpieces") + 1));
	break;
		case 4:
		SetEntityActive("orb_3", false);
		SetEntityActive("orb_2", true);
		SetEntityActive("orbpiece_4", true);
		SetLocalVarInt("orbpieces", (GetLocalVarInt("orbpieces") + 1));
	break;
		case 5:
		PlaySoundAtEntity("", "guardian_activated", "AreaOrb", 0, false);
		SetEntityActive("orb_2", false);
		SetEntityActive("orb_1", true);
		SetEntityActive("orbpiece_5", true);
		SetLocalVarInt("orbpieces", (GetLocalVarInt("orbpieces") + 1));
		SetPlayerActive(false);
		AddTimer("text10", 1, "Text10");
		AddTimer("sanityout", 2.5f, "SanityOut");
		AddTimer("startfadeout", 6, "StartFadeOut");
		AddTimer("text11", 15, "Text11");
		AddTimer("nextmap", 22, "NextMap");
		RemoveItem("stone_hammer_chipper");
		RemoveItem("lantern_1");
	break;}
	PlaySoundAtEntity("", "impact_metal_high", "AreaOrb", 0, false);
	CreateParticleSystemAtEntity("orbparticle","ps_orb_room_alex_die","AreaOrb", true);
	CreateParticleSystemAtEntity("orbparticle","ps_rose_petals_whirl","AreaOrb", true);
}

void Text10(string &in asTimer)
{
	SetMessage("Message", "Intro10", 13);
}

void SanityOut(string &in asTimer)
{
	GiveSanityDamage(200, false);
}

void StartFadeOut(string &in asTimer)
{
	RemoveItem("lantern_1");
	FadeOut(8);
	SetPlayerSanity(100);
}

void Text11(string &in asTimer)
{
	SetMessage("Message", "Intro11", 6);
}

void NextMap(string &in asTimer)
{
	PlayMusic("02_amb_safe", true, 1, 3, 0, true);
	ChangeMap("oc_zero_03", "PlayerStartArea_1", "", "");
}

void OnLeave()
{
	FadeIn(0);
	SetupLoadScreen("", "", 0, "cs_loadscreen2");
}