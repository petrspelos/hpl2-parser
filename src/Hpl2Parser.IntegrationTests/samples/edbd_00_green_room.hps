void OnEnter()
{
	if(ScriptDebugOn())
	{
		SetGlobalVarInt("FastSeekerAchievement", 1);
		SetGlobalVarInt("HealthAchievement", 1);
		SetGlobalVarInt("ItemsAchievement", 1);
		SetGlobalVarInt("NoDeathAchievement", 1);
		//SetGlobalVarInt("StatuesAchievement", 1);
		SetGlobalVarInt("WardrobeAchievement", 1);
		SetGlobalVarInt("EnemiesAchievement", 1);
		SetGlobalVarInt("PuzzleAchievement", 1);
		//SetGlobalVarInt("NoPuzzleAchievement", 1);
		SetGlobalVarInt("NoStatuesAchievement", 1);
		SetGlobalVarInt("SanityAchievement", 1);
		SetGlobalVarInt("SlimesAchievement", 1);
		SetGlobalVarInt("LightsAchievement", 1);
	}
	
	StopMusic(0.1f, 10);
	StopMusic(0.1f, 1);
	StopMusic(0.1f, 0);

	PreloadParticleSystem("ps_light_dust.ps");
	
	PreloadSound("general_wind_whirl_rand.snt");

	SetMapDisplayNameEntry("GreenRoom");
	
	SetupLoadScreen("LoadingHints", "ToTavern", 0, "menu_loading_screen.jpg");
	
	for(int i=1; i<=12; i++) SetEntityInteractionDisabled("phonograph_" + i, true);
	
	CheckPoint ("OutOfMap", "PlayerStartArea_1", "CPOutOfMap", "DeathHints", "DoNotFall");
	
	if(GetGlobalVarInt("HealthAchievement") == 1)
		AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
	if(GetGlobalVarInt("FastSeekerAchievement") == 1)
		SetPlayerRunSpeedMul(1.175f);
	if(GetGlobalVarInt("WardrobeAchievement") == 1)
		SetPlayerJumpForceMul(1.175f);
}

void OnLeave()
{
	RemoveTimer("addhealth");
	RemoveTimer("checkhealth");
	if(GetGlobalVarInt("ItemsAchievement") == 1)
		if(GetPlayerLampOil() <= 20.0f)
			AddPlayerLampOil(20.0f);
}

void OnStart()
{
	SetMapDisplayNameEntry("GreenRoom");
}

void TimerHealthAchievement(string &in asTimer)
{
	if(asTimer == "addhealth")
	{
		if(GetPlayerHealth() <= 98.0f)
		{
			AddPlayerHealth(2.0f);
			AddTimer("addhealth", 7.0f, "TimerHealthAchievement");
		}
		else
		{
			AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
		}
	}
	else if(asTimer == "checkhealth")
	{
		if(GetPlayerHealth() > 98.0f)
		{
			AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
		}
		else
		{
			AddTimer("addhealth", 7.0f, "TimerHealthAchievement");
		}
	}
	else if(asTimer == "pausehealth")
	{
		RemoveTimer("addhealth");
		RemoveTimer("checkhealth");
	}
}

void CPOutOfMap(string &in asName, int alCount)
{
	if(GetGlobalVarInt("ItemsAchievement") == 1)
		if(GetPlayerLampOil() <= 20.0f)
			AddPlayerLampOil(20.0f);
	if(GetGlobalVarInt("FastSeekerAchievement") == 1)
		SetPlayerRunSpeedMul(1.175f);
	if(GetGlobalVarInt("WardrobeAchievement") == 1)
		SetPlayerJumpForceMul(1.175f);
	if(GetGlobalVarInt("NoDeathAchievement") == 1)
		SetPlayerHealth(100.1f);
	if(GetGlobalVarInt("SanityAchievement") == 1)
		SetPlayerSanity(100.1f);
	StopMusic(0.1f, 10);
	StopMusic(0.1f, 1);
	StopMusic(0.1f, 0);
}

void PlayPhonograph(string &in asEntity)
{
	if(asEntity == "AreaPhonograph_1") PlayMusic("08_wood_theme.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_2") PlayMusic("00_maze_theme_complete.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_3") PlayMusic("06_cave_theme.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_4") PlayMusic("05_house_dream_theme.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_5") PlayMusic("03_wood_theme_alternative.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_6") PlayMusic("03_maze_theme.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_7") PlayMusic("02_wood_theme.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_8") PlayMusic("02_strange.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_9") PlayMusic("00_maze_ending.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_10") PlayMusic("02_house_piano_theme.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_11") PlayMusic("07_countdown01.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_12") PlayMusic("00_end_credits.ogg", false, 1.0f, 0.0f, 10, true);
	if(asEntity == "AreaPhonograph_13") PlayMusic("00_piano_theme.ogg", false, 1.0f, 0.0f, 10, true);
	SetEntityActive(asEntity, false);
	AddTimer(asEntity, 1.0f, "TimerActivePhonograph");
}

void TimerActivePhonograph(string &in asTimer)
{
	if(asTimer == "AreaPhonograph_1") SetEntityActive("AreaPhonograph_1", true);
	if(asTimer == "AreaPhonograph_2") SetEntityActive("AreaPhonograph_2", true);
	if(asTimer == "AreaPhonograph_3") SetEntityActive("AreaPhonograph_3", true);
	if(asTimer == "AreaPhonograph_4") SetEntityActive("AreaPhonograph_4", true);
	if(asTimer == "AreaPhonograph_5") SetEntityActive("AreaPhonograph_5", true);
	if(asTimer == "AreaPhonograph_6") SetEntityActive("AreaPhonograph_6", true);
	if(asTimer == "AreaPhonograph_7") SetEntityActive("AreaPhonograph_7", true);
	if(asTimer == "AreaPhonograph_8") SetEntityActive("AreaPhonograph_8", true);
	if(asTimer == "AreaPhonograph_9") SetEntityActive("AreaPhonograph_9", true);
	if(asTimer == "AreaPhonograph_10") SetEntityActive("AreaPhonograph_10", true);
	if(asTimer == "AreaPhonograph_11") SetEntityActive("AreaPhonograph_11", true);
	if(asTimer == "AreaPhonograph_12") SetEntityActive("AreaPhonograph_12", true);
	if(asTimer == "AreaPhonograph_13") SetEntityActive("AreaPhonograph_13", true);
}

void UsedKeyOnDoor(string &in asItem, string &in asEntity)
{
	PlaySoundAtEntity("unlock_door", "unlock_door", asEntity, 0, false);
	SetSwingDoorLocked(asEntity, false, false);
}

void TimerFadeScreen(string &in asTimer)
{
	if(asTimer == "fadein")
	{
		FadeIn(2.0f);
	}
	if(asTimer == "fadeout")
	{
		FadeOut(2.0f);
	}
	if(asTimer == "fadeinactiveplayer")
	{
		FadeIn(2.0f);
		SetPlayerActive(true);
	}
	if(asTimer == "fadeoutactiveplayer")
	{
		FadeOut(2.0f);
		SetPlayerActive(true);	
	}	
}

void TimerFadeGlobalSound(string &in asTimer)
{
	if(asTimer == "globalsoundon")	FadeGlobalSoundVolume(1.0f, 4.0f);
	if(asTimer == "globalsoundonquick")	FadeGlobalSoundVolume(1.0f, 0.5f);
	if(asTimer == "globalsoundoff") FadeGlobalSoundVolume(0.0f, 4.0f);
	if(asTimer == "globalsoundoffquick") FadeGlobalSoundVolume(0.0f, 0.5f);
}


void TimerStopLook(string &in asTimer)
{
	if(asTimer == "resetspeedmul")
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		if(GetGlobalVarInt("FastSeekerAchievement") == 1)
			SetPlayerRunSpeedMul(1.175f);
		if(GetGlobalVarInt("WardrobeAchievement") == 1)
			SetPlayerJumpForceMul(1.175f);
	}
	if(asTimer == "activeplayer")
	{
		SetPlayerActive(true);
	}
	StopPlayerLookAt();
}

void TimerPlayerReactions(string &in asTimer)
{
	if(asTimer == "scareeffect")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(8.0f, false);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
	}
	else if(asTimer == "breatheffect")
	{
		PlayGuiSound("react_breath", 0.4f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "sigheffect")
	{
		PlayGuiSound("react_sigh", 0.4f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "panteffect")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(10.0f, false);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
	}
	else if(asTimer == "scare")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(8.0f, true);
	}
	else if(asTimer == "breath")
	{
		PlayGuiSound("react_breath", 0.5f);
		GiveSanityDamage(4.0f, false);
	}
	else if(asTimer == "sigh")
	{
		PlayGuiSound("react_sigh", 0.5f);
		GiveSanityDamage(2.0f, false);
	}
	else if(asTimer == "pant")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(10.0f, true);
	}
}