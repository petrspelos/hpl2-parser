
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "09_back_hall";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8};
int[] gviEasierOilPotionsCodesArray = {1, 2};
int[] gviEasierHealthPotionsCodesArray = {1};
int[] gviEasierSanityPotionsCodesArray = {1};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3, 4};
int[] gviNormalOilPotionsCodesArray = {1, 2};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {6, 8};
int[] gviToughOilPotionsCodesArray = {0};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

////////////////////////////
// Distant Howl - When player has everything needed to repair the elevator
void TimerDistantHowl(string &in asTimer)
{
	AddTimer("scare", 1.0f, "TimerPlayerReact");
	AddTimer("breath", 3.0f, "TimerPlayerReact");
	AddTimer("breathl", 5.0f, "TimerPlayerReact");
	
	PlaySoundAtEntity("howl","guardian_distant3","Player", 0, false);	
	AddDebugMessage("Distant howling...", false);
	
	SetLampLit("torch_static01_9", false, true);
	SetLampLit("torch_static01_10", false, true);
	SetLampLit("torch_static01_11", false, true);
	SetLampLit("torch_static01_12", false, true);
	SetLampLit("torch_static01_13", false, true);
	SetLampLit("torch_static01_14", false, true);
	SetLampLit("torch_static01_15", false, true);
	SetLampLit("torch_static01_16", false, true);
	SetLampLit("torch_static01_17", false, true);
}


////////////////////////////
// Guardian Near - When player exits machine room and got the machine running
void TimerGuardianNearEffect(string &in asTimer)
{
	FadeOut(0.3);
	AddTimer("TeleportHowl", 0.5f, "TimerGuardianNearHowl");	
	AddTimer("TeleportDone", 1.3f, "TimerGuardianNearDone");
	
	AddTimer("scare", 0.3f, "TimerPlayerReact");
	AddTimer("breath", 2.0f, "TimerPlayerReact");
	AddTimer("breathl", 4.0f, "TimerPlayerReact");
	AddTimer("breathl", 7.0f, "TimerPlayerReact");
	
	PlaySoundAtEntity("stomp","scare_wall_stomp","Player", 0, false);
	
	PlayMusic("23_amb02.ogg", true, 1, 1, 0, true);
	PlayMusic("05_event_falling.ogg", false, 0.8f, 0.1, 5, false);
	
	StartEffectFlash(0.2, 0.1,0.3);
	
	FadeGlobalSoundVolume(0,3);
	StartScreenShake(0.1, 4.7, 0.05, 0.5);
	
	FadePlayerFOVMulTo(0.5, 3);
}

void TimerGuardianNearHowl(string &in asTimer)
{
	PlaySoundAtEntity("howl","guardian_distant3","Player", 0, false);
	
	FadeLightTo("BoxLight_2", 0.25f, 0, 0.062f, 0, -1, 0.1f);

	for(int i=1; i<=6; ++i)
		CreateParticleSystemAtEntity("fog", "ps_scare_dust.ps", "SlineFog_"+i, false);
	
	for(int i=2; i<=5; ++i)
		SetLampLit("chandelier_simple_"+i, false, true);
	for(int i=5; i<=10; ++i)
		SetLampLit("candlestick_wall_"+i, false, true);
}

void TimerGuardianNearDone(string &in asTimer)
{
	StopMusic(5.0f, 5);
	
	FadeGlobalSoundVolume(1,1);
	FadeIn(0.7);
	
	FadePlayerFOVMulTo(1, 1);
	
	SetEntityActive("Even02Slime*", true);
	
	for(int i=3; i<=9; ++i)
		SetEntityActive("SlimeDamageArea_"+i, true);
	
	PlaySoundAtEntity("slimes2_1", "slime_loop", "Even02Slime_1", 2.0f, true);
	PlaySoundAtEntity("slimes2_2", "slime_loop", "Even02Slime_5", 2.0f, true);
	PlaySoundAtEntity("slimes2_3", "slime_loop", "Even02Slime_15", 2.0f, true);
	PlaySoundAtEntity("slimes2_4", "slime_loop", "Even02Slime_25", 2.0f, true);
	PlaySoundAtEntity("slimes2_5", "slime_loop", "Even02Slime_18", 2.0f, true);
}

////////////////////////////
// Start elevator
void InteractElevatorLever(string &in asEntity)
{
	if(GetGlobalVarInt("ElevatorMachineRunning")==0)
	{
		SetMessage("Ch01Level09", "ElevatorNotWorking", -1);
		AddQuest("09StartElevator", "09StartElevator");
	}
}

void PullElevatorLever(string &in asEntity, int alState)
{
	if(alState != -1) return;
	
	SetLeverStuckState(asEntity, -1, true);
	SetSwingDoorLocked("elevator_door_1", true, true);
	
	PlaySoundAtEntity("activate","14_elevator_activate","Player", 0, false);
	
	AddTimer("StartElevator", 2.0f, "TimerStartElevator");
}

void TimerStartElevator(string &in asTimer)
{
	PlaySoundAtEntity("run","elevator_move_normal.snt","Player", 2, false);
	
	StartScreenShake(0.01f, 3, 1,0);	
	ChangeMap("14_elevator.map", "PlayerStartArea_1", "","");
}


void CollideFlashBack(string &in asParent, string &in asChild, int alState)
{
	AddTimer("trail", 1.0f, "TimerCreateTrail");
	
	StopMusic(4.0f, 0);
}
void TimerCreateTrail(string &in asTimer)
{
	AddLocalVarInt("Trail", 1);
	
	int iTrail = GetLocalVarInt("Trail");
	
	switch(iTrail) {
		case 1:
			CreateParticleSystemAtEntity("rosesonmybed", "ps_rose_petals_wind.ps", "AreaTrail_1", false);
			PlayGuiSound("general_wind_whirl6.ogg", 0.5f);
			FadeLightTo("PointLight_30", 0.8f, 0.2f, 0.4f, -1, -1, 2);
			//CreateParticleSystemAtEntity("trail"+iTrail, "ps_trail_large.ps", "AreaTrail_"+iTrail, false);
		break;
		case 2:
			FadeLightTo("PointLight_30", 0.0f, 0.0f, 0.0f, -1, -1, 2);
			StartPlayerLookAt("AreaTrail_1", 2, 2, "");
			//MakeTrailEffect();
		break;
		case 3:
			CreateParticleSystemAtEntity("rosesonmybed", "ps_rose_petals_wind.ps", "AreaTrail_3", false);
			PlayGuiSound("general_wind_whirl6.ogg", 0.5f);
			FadeLightTo("PointLight_30", 0.8f, 0.2f, 0.4f, -1, -1, 2);
			AddTimer("push1", 0.3f, "TimerPushElevatorDoors");
			AddTimer("push2", 0.6f, "TimerPushElevatorDoors");
			AddTimer("push3", 0.9f, "TimerPushElevatorDoors");
			AddTimer("push4", 1.2f, "TimerPushElevatorDoors");
			AddTimer("push5", 1.5f, "TimerPushElevatorDoors");
			PlaySoundAtEntity("creak", "09_gate_open.snt", "elevator_door_1", 1.5f, false);
			StopPlayerLookAt();
			//MakeTrailEffect();
		break;
		case 4:
			FadeLightTo("PointLight_30", 0.0f, 0.0f, 0.0f, -1, -1, 2);
			StopSound("creak", 3.0f);
			//MakeTrailEffect();
		break;
		case 5:
			FadeLightTo("PointLight_30", 0.8f, 0.2f, 0.4f, -1, -1, 2);
			//MakeTrailEffect();
		break;
		case 6:
			FadeLightTo("PointLight_30", 0.0f, 0.0f, 0.0f, -1, -1, 6);
			//CreateParticleSystemAtEntity("trail"+iTrail, "ps_trail_large.ps", "AreaTrail_"+iTrail, false);
			AddTimer("trailkill", 20, "TimerKillTrail");
		break;
	}
	
	if(iTrail < 6) AddTimer("trail", 2, "TimerCreateTrail");
}
void MakeTrailEffect()
{
	CreateParticleSystemAtEntity("trail"+GetLocalVarInt("Trail"), "ps_trail_flow.ps", "AreaTrail_"+GetLocalVarInt("Trail"), false);
}
/*Remove the trail when flashback done and some time has passed
 */
void TimerKillTrail(string &in asTimer)
{
	if(GetLocalVarInt("EventGuardianNear")==1)
		PlayMusic("02_amb_strange", true, 1, 4, 0, true);
	else if(GetLocalVarInt("EventBloodFountain")==1)
		PlayMusic("01_amb_darkness", true, 1, 4, 0, true);
	else if(GetGlobalVarInt("EnemySeenInBackHallLevel")==1)
		PlayMusic("02_amb_safe.ogg", true, 1, 4, 0, true);
	else 
		PlayMusic("09_amb_safe", true, 1, 6, 0, true);
				
	//DestroyParticleSystem("trail"+GetLocalVarInt("Trail"));
	
	//AddLocalVarInt("Trail", -1);
	
	//if(GetLocalVarInt("Trail") > 0) AddTimer("trailkill", 1, "TimerKillTrail");
}

void TimerPushElevatorDoors(string &in asTimer)
{
	AddPropForce("elevator_door_1", -50.0f, 0, 0, "world");
}
////////////////////////////
// Machine room door locked

void InteractMachineRoomDoor(string &in asEntity)
{
	if(!HasItem("key_jar_1_item"))
		AddQuest("MachineRoomDoorLocked", "09UnlockMachineRoomDoor");
	else
		AddTimer("hintdelay", 1.5f, "TimerDelayUnLockHint");	//If player has key when interacting with door, do not give quest, only message to use key
}
void TimerDelayUnLockHint(string &in asTimer)
{
	SetMessage("Ch01Level02", "InteractDoorHaveKey", 0);
	SetEntityPlayerInteractCallback("level_wood_4", "InteractMachineRoomDoor", true);
}
void UnlockMachineRoomDoor(string &in asItem, string &in asEntity)
{
	RemoveTimer("hintdelay"); //Just so no quest is added if player is quick to use key
	
	PlaySoundAtEntity("unlock", "unlock_door", "Player", 0, false);
	SetLevelDoorLocked("level_wood_4", false);
	
	CompleteQuest("MachineRoomDoorLocked", "09UnlockMachineRoomDoor");
	
	RemoveItem("key_jar_1_item");
}


///////////////////////////
//PLAYER REACTIONS
void TimerPlayerReact(string &in asTimer)
{
	if(asTimer == "scare"){
		PlayGuiSound("react_scare", 1.0f);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.1f, 0.05f);
		StartScreenShake(0.02f, 0.5f, 1.0f, 2.0f);
	}
	else if(asTimer == "breath"){
		PlayGuiSound("react_breath", 0.9f);
		FadeRadialBlurTo(0.0f, 0.02f);
	}
	else if(asTimer == "breathl"){
		PlayGuiSound("react_breath", 0.5f);
	}
}

//Interact fountain
void InteractFountainWater(string &in asEntity)
{
	PlaySoundAtEntity("splashs", "impact_water_low.snt", asEntity, 0.0f, false);
	CreateParticleSystemAtEntity("splashps", "ps_impact_water_low.ps", asEntity, false);
	//SetMessage("Ch01Level09", "SignFontain", 0);
	
	float fHealth = GetPlayerHealth();
	float fSanity = GetPlayerSanity();
	float fDelay = 4.0f;
	
	if(fHealth <= 25.0f)
	{
		SetPlayerHealth(fHealth + 7.0f);
		fDelay = fDelay - 1.5f;
	}
	else
	if(fHealth <= 75.0f)
	{
		SetPlayerHealth(fHealth + 5.0f);
		fDelay = fDelay - 1.0f;
	}
	else
	if(fHealth <= 95.0f)
	{
		SetPlayerHealth(fHealth + 3.0f);
		fDelay = fDelay - 0.5f;
	}
	else
	{
		SetPlayerHealth(100.0f);
		fDelay = fDelay - 0.0f;
	}
	
	if(fSanity <= 25.0f)
	{
		SetPlayerSanity(fSanity + 7.0f);
		fDelay = fDelay - 1.5f;
	}
	else
	if(fSanity <= 75.0f)
	{
		SetPlayerSanity(fSanity + 5.0f);
		fDelay = fDelay - 1.0f;
	}
	else
	if(fSanity <= 95.0f)
	{
		SetPlayerSanity(fSanity + 3.0f);
		fDelay = fDelay - 0.5f;
	}
	else
	{
		SetPlayerSanity(100.0f);
		fDelay = fDelay - 0.0f;
	}
	
	for(int i=1; i<=4; i++)
	{
		SetEntityActive("ScriptArea_" + i, false);
	}
	
	AddTimer(asEntity, fDelay, "TimerFountainWater");
}
void TimerFountainWater(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractFountainWater", true);
	
	for(int i=1; i<=4; i++)
	{
		SetEntityActive("ScriptArea_" + i, true);
	}
}

//Push door open to elevator room, to lure the player towars vision
void CollideAreaShowDoor(string &in asParent, string &in asChild, int alState)
{
	StartPlayerLookAt("castle_1", 2.0f, 2.0f, "");
	PlaySoundAtEntity("wind", "09_wind_whirl.snt", "AreaPushDoor", 0.0f, false);
	PlaySoundAtEntity("creak", "09_door_creak.snt", "castle_1", 0.5f, false);
	CreateParticleSystemAtEntity("windps", "ps_dust_push", "AreaPushDoor", false);
	
	SetSwingDoorClosed("castle_1", false, false);
	SetSwingDoorDisableAutoClose("castle_1", true);
	AddPropImpulse("castle_1", -2.0f, 0.0f, 0.0f, "World");
	
	AddTimer("pushagaindamnit", 0.3f, "TimerSecondBreakfast");
	AddTimer("StopShow", 1.0f, "TimerStopShow");
}
void TimerSecondBreakfast(string &in asTimer)
{
	AddPropImpulse("castle_1", -2.0f, 0.0f, 0.0f, "World");
}
void TimerStopShow(string &in asTimer)
{
	StopSound("creak", 1.0f);
	StopPlayerLookAt();
}

/////////////////////////////////////////
// HERBERT VISION AREAS

// Vision 1 (Random_Mirage01)
void CollideWithHerbertVision_1()
{
	SetGlobalVarInt("LastHerbertVisionTriggered", 1);
	
	SetUpHerbertVisionAreas();
}

// Vision 2 (Random_Mirage02)
void CollideWithHerbertVision_2()
{
	SetGlobalVarInt("LastHerbertVisionTriggered", 2);
	
	SetUpHerbertVisionAreas();
}

void SetUpHerbertVisionAreas()
{
	AddDebugMessage("Vision_triggered:" + GetLocalVarInt("Vision_1_triggered"), false);
	AddDebugMessage("CompletedLevel_10_11:" + GetGlobalVarInt("CompletedLevel_10_11"), false);
	AddDebugMessage("CompletedLevel_12:" + GetGlobalVarInt("CompletedLevel_12"), false);
	
	// Initial setup : all disabled
	SetEntityActive("HerbertVisionArea_1_1", false);
	SetEntityActive("HerbertVisionArea_1_2", false);
	SetEntityActive("HerbertVisionArea_2_1", false);
	SetEntityActive("HerbertVisionArea_2_2", false);
	
	int lLastVisionTriggered = GetGlobalVarInt("LastHerbertVisionTriggered");
	// No visions have been triggered
	if(lLastVisionTriggered==0)
	{
		AddDebugMessage("Setting up vision 1", false);
		
		if(GetGlobalVarInt("CompletedLevel_10_11")==1)
		{
			AddDebugMessage("Level 10 or 11 completed first, activating fountain area", false);
			SetEntityActive("HerbertVisionArea_1_1", true);
		}
		else if(GetGlobalVarInt("CompletedLevel_12")==1)
		{
			if(GetGlobalVarInt("GuidingRod")==3 && GetGlobalVarInt("PickedMachineInstructions")==1) return;	//To not collide with guardian event
			
			AddDebugMessage("Level 12 completed first, activating 12 entrance area", false);
			SetEntityActive("HerbertVisionArea_2_1", true);
		}
	}
	// First vision was triggered
	else if(lLastVisionTriggered==1)
	{
		AddDebugMessage("Setting up vision 2", false);
		
		if(GetGlobalVarInt("CompletedLevel_10_11")==2)
		{
			AddDebugMessage("Level 10 or 11 completed second, activating fountain area", false);
			SetEntityActive("HerbertVisionArea_1_2", true);
		}
		else if(GetGlobalVarInt("CompletedLevel_12")==2)
		{
			if(GetGlobalVarInt("GuidingRod")==3 && GetGlobalVarInt("PickedMachineInstructions")==1) return;	//To not collide with guardian event
			AddDebugMessage("Level 12 completed second, activating 12 entrance area", false);
			SetEntityActive("HerbertVisionArea_2_2", true);
		}
	}
}
// END HERBERT VISION AREAS
/////////////////////////////////////////

////////////////////////////
// Run first time starting map
void OnStart()
{
	SetMapDisplayNameEntry("BackHall");
	
	////////////////////
	// Hub start sanity boost
	GiveSanityBoost();
	
	///////////////////////////////
	//Callbacks
	AddEntityCollideCallback("Player", "AreaFlashTrigger", "CollideFlashBack", true, 1);
	
	AddUseItemCallback("UnlockMachineRoomDoor", "key_jar_1_item", "level_wood_4", "UnlockMachineRoomDoor", true);

	AddEntityCollideCallback("Player", "AreaShowDoor", "CollideAreaShowDoor", true, 1);
	
	///////////////////////////////
	// Init Variables
	SetLocalVarInt("EventBloodFountain", 0);
	SetLocalVarInt("EventGuardianNear", 0);
	
	//////////////////////
	//Load Screen Setup
	// Setup here as it must only happen once.
	SetupLoadScreen("LoadingText", "Ch01_Diary03_", 6, "game_loading_trunk.jpg");
	
	
	///////////////////////////////
	// Particle System
	CreateParticleSystemAtEntity("FountainPourWater", "ps_childsnake_water_stream.ps", "AreaFountainWater", true);
			
	///////////////////////////////
	// Debug
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		
		//GiveItemFromFile("key_jar_1_item", "key_study.ent");
		
		//- Start Blood fountain event
		//SetGlobalVarInt("GuidingRod", 3);
		//SetGlobalVarInt("PickedMachineInstructions", 1);
		
		//SetGlobalVarInt("CompletedLevel_10_11", 1);
		//SetGlobalVarInt("CompletedLevel_12", 1);
		//- Start the final howl event
		//SetGlobalVarInt("ElevatorMachineRunning", 1);
		
		//SetGlobalVarInt("EnemySeenInBackHallLevel",1);
	}
	else
	{
		PlayMusic("08_amb_success", false, 1, 1, 10, false);
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{
	///////////////////////////////////////
	// Guardian is near
	// - Check if elevator machine is running
	if(	GetGlobalVarInt("ElevatorMachineRunning")!=0 &&
		GetLocalVarInt("EventGuardianNear")==0)
	{
		SetLocalVarInt("EventGuardianNear", 1);
		
		SetSwingDoorLocked("castle_1", true, false);
		SetLevelDoorLocked("level_wood_4", true);
				
		AddTimer("GuardianNear", 2.1f, "TimerGuardianNearEffect");
		
		SetLeverStuckState("elevator_lever_1", 0, false);	
	}
	
	///////////////////////////////////////
	// Blood in fountain event
	// - Check if player has picked up all machine guiding rods	
	if(	GetGlobalVarInt("GuidingRod")==3 &&
		GetGlobalVarInt("PickedMachineInstructions")==1 &&
		GetLocalVarInt("EventBloodFountain")==0)
	{
		SetLocalVarInt("EventBloodFountain", 1);
		AddDebugMessage("Event Blood Fountain active", false);
		
		SetEntityActive("fountain_childsnake_1", false);
		SetEntityActive("childsnake_floor_water_normal_1", false);
		
		SetEntityActive("fountain_childsnake_blood_1", true);
		SetEntityActive("childsnake_floor_water_blood_1", true);
		
		SetEntityActive("SlimeDamageArea_1",true);
		SetEntityActive("SlimeDamageArea_2",true);
		SetEntityActive("SlimeDamageArea_10", true);
		
		SetEntityActive("Even01Slime*", true);
		PlaySoundAtEntity("slimes1", "slime_loop", "Even01Slime02_2", 0.0f, true);
		PlaySoundAtEntity("slimes2", "slime_loop", "Even01Slime08_6", 0.0f, true);
		PlaySoundAtEntity("slimes3", "slime_loop", "Even01Slime04_1", 0.0f, true);
		PlaySoundAtEntity("slimes4", "slime_loop", "Even01Slime08_4", 0.0f, true);
		PlaySoundAtEntity("slimes5", "slime_loop", "Even01Slime04_5", 0.0f, true);
		PlaySoundAtEntity("slimes6", "slime_loop", "Even01Slime02_4", 0.0f, true);
	
		FadeLightTo("BoxLight_2", 0.17f, 0.1f, 0.22f, -1, -1, 0.1f);
		
		FadeOut(0.0f);
		FadeIn(4.0f);
		
		// New Particle System at fountain
		DestroyParticleSystem("FountainPourWater");
		CreateParticleSystemAtEntity("FountainPourBlood", "ps_childsnake_blood_stream.ps", "AreaFountainWater", true);
		
		for(int i=1;i<=4;i++)SetEntityActive("ScriptArea_"+i, false); //Remove interact water areas
		
		AddTimer("DistantHowl", 1.0f, "TimerDistantHowl");
	}
	
	///////////////////////////////////////
	// Bloody trail at Guest Room door
	// - Check if a grunt was activated in Guest Room
	if(GetGlobalVarInt("GruntLeftGuestRoom")==1)
	{
		ResetProp("grunt_trail_corpse_male_torso_1");
		SetEntityVisible("grunt_trail_corpse_male_torso_1", true);
		SetPropActiveAndFade("grunt_trail_corpse_male_torso_1", true, 0.1f);
		
		for(int i=1; i<=2; i++)
		{
			ResetProp("grunt_trail_blood_spatter01_" + i);
			SetEntityVisible("grunt_trail_blood_spatter01_" + i, true);
			SetPropActiveAndFade("grunt_trail_blood_spatter01_" + i, true, 0.1f);
		}
		for(int j=1; j<=3; j++)
		{
			ResetProp("grunt_trail_blood_spatter02_" + j);
			SetEntityVisible("grunt_trail_blood_spatter02_" + j, true);
			SetPropActiveAndFade("grunt_trail_blood_spatter02_" + j, true, 0.1f);
		}
		for(int k=1; k<=4; k++)
		{
			ResetProp("grunt_trail_blood_spatter03_" + k);
			SetEntityVisible("grunt_trail_blood_spatter03_" + k, true);
			SetPropActiveAndFade("grunt_trail_blood_spatter03_" + k, true, 0.1f);
		}
		for(int z=1; z<=6; z++)
		{
			ResetProp("grunt_trail_blood_spatter04_" + z);
			SetEntityVisible("grunt_trail_blood_spatter04_" + z, true);
			SetPropActiveAndFade("grunt_trail_blood_spatter04_" + z, true, 0.1f);
		}
	}
	
	////////////////////////////////////////////////////////
	// Set up Herbert visions
	SetUpHerbertVisionAreas();
		
	////////////////////////////////////////////////////////
	// Set up correct music to play	
	if(GetLocalVarInt("EventGuardianNear")==1)
		PlayMusic("02_amb_strange", true, 1, 4, 0, true);
	else if(GetLocalVarInt("EventBloodFountain")==1)
		PlayMusic("01_amb_darkness", true, 1, 4, 0, true);
	else if(GetGlobalVarInt("EnemySeenInBackHallLevel")==1)
		PlayMusic("02_amb_safe.ogg", true, 1, 4, 0, true);
	else
		PlayMusic("09_amb_safe", true, 1, 4, 0, true);

	PreloadParticleSystem("ps_scare_dust"); PreloadParticleSystem("ps_trail_large"); PreloadParticleSystem("ps_trail_flow");
	
	PreloadSound("guardian_distant3"); PreloadSound("scare_wall_stomp"); PreloadSound("14_elevator_activate");
	  
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	StopMusic(5, 0);
}