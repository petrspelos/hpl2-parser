
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "15_prison_south";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
int[] gviEasierOilPotionsCodesArray = {1, 2, 3, 4, 5, 6, 7, 8};
int[] gviEasierHealthPotionsCodesArray = {1};
int[] gviEasierSanityPotionsCodesArray = {1};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3, 4, 5, 6};
int[] gviNormalOilPotionsCodesArray = {1, 2, 3, 4};
int[] gviNormalHealthPotionsCodesArray = {1};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {2, 5, 7};
int[] gviToughOilPotionsCodesArray = {7, 8};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {2};
int[] gviTougherOilPotionsCodesArray = {4};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//CURRENT MAP SPECIFIC
string[] gvsDangerousLampsArray = {
	"candlestick_floor_3", "torch_static01_6", "torch_static01_5", "torch_static01_7", "torch_static01_8", "torch_static01_10", "torch_static01_9"
};

float GetEntityPlayerDistance(string asEntity)
{
	float fPlayerPosX = GetPlayerPosX();
	float fPlayerPosY = GetPlayerPosY();
	float fPlayerPosZ = GetPlayerPosZ();
	float fEntityPosX = GetEntityPosX(asEntity);
	float fEntityPosY = GetEntityPosY(asEntity);
	float fEntityPosZ = GetEntityPosZ(asEntity);
	float fDistance = MathSqrt(MathPow((fEntityPosX - fPlayerPosX), 2.0f) + MathPow((fEntityPosY - fPlayerPosY), 2.0f) + MathPow((fEntityPosZ - fPlayerPosZ), 2.0f));
	return fDistance;
}

void OnLampStateChange(string asEntity, string asType)
{
	string[] vsDangerousEnemiesArray = {"servant_grunt_1", "servant_grunt_2"};
	
	if(asType == "OnIgnite")
	{
		if(GetToughModeOn() >= 1)
		{
			for(int i=0; i<vsDangerousEnemiesArray.length(); i++)
			{
				string sEnemyName = GetStringWithExtraModesSuffix(vsDangerousEnemiesArray[i]);
				string sEnemyState = GetEnemyStateName(sEnemyName);
				
				if(sEnemyState != "Idle" && sEnemyState != "GoHome" && sEnemyState != "Dead" && sEnemyState != "NULL" && sEnemyState != "")
				{
					if((GetToughModeOn() == 1 && GetEntityPlayerDistance(sEnemyName) <= 20.0f) || (GetToughModeOn() >= 2))
					{
						AlertEnemyOfPlayerPresence(sEnemyName);
						AddDebugMessage("DEBUG: Enemy " + sEnemyName + " is now in alert state!", false);
						return;
					}
				}
			}
		}
		
		AddDebugMessage("DEBUG: Could not trigger enemy alert from enviroment lamp lit!", false);
	}
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

////TINDERBOX THAT IS NEAR THE GATE
void PlayerInteractTinderbox(string &in asEntity)
{
	SetGlobalVarInt("PrisonTinderboxCollected", 1);
}

/////////////////////
//BEGIN LOCKED DOOR//
/*Sound, quest and message on door or pad interact
 */
void InteractBarDoor(string &in asEntity)
{
	AddTimer(asEntity, 0.3f, "TimerRattle");

	if(GetLocalVarInt("IwalkedThePath") == 1) return;
	
	SetEntityActive(GetStringWithExtraModesSuffix("im_just_cute_and_happy"), true);
	SetLocalVarInt("IwalkedThePath", 1);
	
	AddTimer("breath", 1.5f, "TimerPlayerReact");
	AddTimer("breathl", 3.5f, "TimerPlayerReact");
	AddTimer("dude", 0.8f, "TimerRattle");
}
void TimerRattle(string &in asTimer)
{
	if(asTimer == "dude"){
		PlaySoundAtEntity("AreaRunDudeS", "15_man_hunted.snt", "AreaRunDude", 0.0f, false);
		GiveSanityDamage(10.0f, true);
	}
	
	if(GetLocalVarInt("RattleQuest") == 0){
		AddQuest("15Rattle", "15Rattle");
		SetLocalVarInt("RattleQuest", 1);
	} else{ 
		if(asTimer == "prison_section_static_1") SetMessage("Ch02Level15", "RattleBars", 0);
		else SetMessage("Ch02Level15", "MetalPad", 0);
	}
}

/*Try to use hammer, chipper or combo on door/pad in vain
 */
void UseHCDoor(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level15", "DoorItemNoUse", 0);
}
//END LOCKED DOOR//
///////////////////


///////////////////////////
//BEGIN THE HIDDEN TUNNEL//
/*When moved bed activate help hints for Exit
 */
 void CollideAreaHammer(string &in asParent, string &in asChild, int alState)
 {
 	if(asChild == "AreaHammer_1") SetLocalVarInt("HammerArea", 1);
	else if(asChild == "AreaHammer_2") SetLocalVarInt("HammerArea", 2);
	else if(asChild == "AreaHammer_3") SetLocalVarInt("HammerArea", 3);
	else SetLocalVarInt("HammerArea", 4);
 }
void CollideMoveBed(string &in asParent, string &in asChild, int alState)
{
	SetEntityPlayerInteractCallback("prison_tunnel_entry_1", "InteractHole", false);
	
	SetEntityActive("prison_tunnel_entry_static", false);
	SetEntityActive("prison_tunnel_entry_1", true);
	
	AddUseItemCallback("shc", "stone_hammer_chipper", "prison_tunnel_entry_1", "UseHCH", true);
	AddUseItemCallback("sh", "stone_hammer_1", "prison_tunnel_entry_1", "UseHCH", false);
	AddUseItemCallback("sc", "stone_chipper_1", "prison_tunnel_entry_1", "UseHCH", false);
	AddUseItemCallback("shc2", "stone_hammer_chipper", "BedOverHole", "UseHCH", true);
	AddUseItemCallback("sh2", "stone_hammer_1", "BedOverHole", "UseHCH", false);
	AddUseItemCallback("sc2", "stone_chipper_1", "BedOverHole", "UseHCH", false);
}

/*Hint message on interact with small hole
 */
void InteractHole(string &in asEntity)
{
	AddTimer(asEntity, 0.3f, "TimerHoleSmall");
	
	AddQuest("15Hole", "15Hole");
}
void TimerHoleSmall(string &in asTimer)
{
	PlaySoundAtEntity("rock2", "impact_rock_low", asTimer, 0.1f, false);
}

/*Use the Hammer, Chipper or Combo on the hole and break if correct items in possesion.
 */
void UseHCH(string &in asItem, string &in asEntity)
{	
	if(asItem == "stone_hammer_1" && HasItem("stone_chipper_1")){ 
		BeingHoleBreak();
		
		RemoveItem("stone_chipper_1");
		RemoveItem("stone_hammer_1");
		
		GiveItem("stone_hammer_chipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0);	
	}
	else if(asItem == "stone_chipper_1" && HasItem("stone_hammer_1")){ 
		BeingHoleBreak();
		
		RemoveItem("stone_chipper_1");
		RemoveItem("stone_hammer_1");
		
		GiveItem("stone_hammer_chipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0);	
	}
	else if(asItem == "stone_hammer_chipper") BeingHoleBreak();
	else{ 
		SetMessage("Ch02Level15", "HoleNotEnoughItem", 0);
		AddQuest("15NeedMoreTool", "15NeedMoreTool");
	}
}
/*Do a simple animation and event at using the tools on hole
 */
void BeingHoleBreak()
{
	CompleteQuest("15Hole", "15Hole");
	
	SetEntityActive("stone_hammer_move_"+GetLocalVarInt("HammerArea"), true);
	SetEntityActive("stone_chipper_move_"+GetLocalVarInt("HammerArea"), true);
	
	SetPlayerCrouching(true);
	StartPlayerLookAt("stone_hammer_move_"+GetLocalVarInt("HammerArea"), 2.0f, 2.0f, "");
	
	if(GetLocalVarInt("HammerTime") == 0){
		SetLocalVarInt("HammerTime", 1);
		
		AddTimer("movehammer", 0.1f, "TimerMoveHammer");
		AddTimer("movechipper", 0.27f, "TimerMoveHammer");
		AddTimer("resethammer", 0.4f, "TimerMoveHammer");
		AddTimer("resetchipper", 0.6f, "TimerMoveHammer");
	}
	
	PlaySoundAtEntity("cumble1", "15_rock_break", "prison_tunnel_entry_1", 0, false);
	PlaySoundAtEntity("begin", "15_make_hammer", "Player", 0.25f, false);
	PlaySoundAtEntity("crumble", "03_rock_move", "prison_tunnel_entry_1", 2.0f, false);
}
void TimerMoveHammer(string &in asTimer)
{
	if(asTimer == "movehammer"){
		SetMoveObjectState("stone_hammer_move_"+GetLocalVarInt("HammerArea"), 0.40);
	}
	else if(asTimer == "movechipper"){
		StopPlayerLookAt();
		SetMoveObjectState("stone_chipper_move_"+GetLocalVarInt("HammerArea"), 1);
		PlaySoundAtEntity("bang", "impact_rock_high", "Player", 0, false);
		PlaySoundAtEntity("hammer", "15_hammer", "Player", 0, false);
	} 
	else if(asTimer == "resethammer"){
		SetMoveObjectState("stone_hammer_move_"+GetLocalVarInt("HammerArea"), 0);
	} 
	else if(asTimer == "resetchipper"){
		SetMoveObjectState("stone_chipper_move_"+GetLocalVarInt("HammerArea"), 0);	
	}
	
	if(GetLocalVarInt("HammerTime") < 3 && asTimer == "resetchipper"){
		AddTimer("movehammer", 0.01f, "TimerMoveHammer");
		AddTimer("movechipper", 0.17f, "TimerMoveHammer");
		AddTimer("resethammer", 0.3f, "TimerMoveHammer");
		AddTimer("resetchipper", 0.5f, "TimerMoveHammer");
		AddLocalVarInt("HammerTime", 1);
	} 
	else if(GetLocalVarInt("HammerTime") == 3 && asTimer == "resetchipper"){
		AddTimer("movehammer", 0.2f, "TimerMoveHammer");
		AddTimer("movechipper", 0.37f, "TimerMoveHammer");
		AddTimer("break", 0.42f, "TimerMoveHammer");
		AddTimer("resethammer", 0.5f, "TimerMoveHammer");
		AddTimer("resetchipper", 0.8f, "TimerMoveHammer");
		AddLocalVarInt("HammerTime", 1);
	} 
	else if(GetLocalVarInt("HammerTime") == 4 && asTimer == "break"){
		BreakHole();
	} 
	else if(GetLocalVarInt("HammerTime") == 4 && asTimer == "resetchipper"){
		SetEntityActive("stone_hammer_move_"+GetLocalVarInt("HammerArea"), false);
		SetEntityActive("stone_chipper_move_"+GetLocalVarInt("HammerArea"), false);
	} 
}
/*Break the hole and add callbacks for exiting the level
 */
void BreakHole()
{
	CompleteQuest("15Rattle", "15Rattle");
	
	PlayMusic("15_puzzle_hole.ogg", false, 1.0f, 0.5f, 10, false);
	
	SetEntityPlayerInteractCallback("ExitArea", "InteractHoleExit", false);
	
	AddEntityCollideCallback("Player", "ExitArea", "CollideExitArea", true, 1);

	GiveSanityBoost();
	
	SetEntityActive("block_box_1", false); //An invisible block to keep the player from falling through the hole before breaking it.
	
	SetEntityActive("prison_tunnel_entry_1", false);
	SetEntityActive("prison_tunnel_entry_broken_1", true);
	CreateParticleSystemAtEntity("breakps", "ps_break_prison_tunnel.ps", "BedOverHole", false);
	PlaySoundAtEntity("breaks", "03_break_wall", "BedOverHole", 0.0f, false);

	AddUseItemCallback("shc3", "stone_hammer_chipper", "prison_tunnel_entry_1_broken", "UseHCHB", true);
	AddUseItemCallback("sh3", "stone_hammer_1", "prison_tunnel_entry_1_broken", "UseHCHB", false);
	AddUseItemCallback("sc3", "stone_chipper_1", "prison_tunnel_entry_1_broken", "UseHCHB", false);
	
	for(int i=1; i<=5; i++)
	{
		SetEntityActive("stone_hammer_move_" + i, false);
		SetEntityActive("stone_chipper_move_" + i, false);
	}
}

/*A message just incase player tries to use tools again
 */
void UseHCHB(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level15", "HoleAlreadyDone", 0);
}

/*Load next level on collide or interact with exit area
 */
void CollideExitArea(string &in asParent, string &in asChild, int alState)
{
	ChangeMap("15_prison_north.map", "PlayerStartArea_1", "15_exit_level", "");
	
	InteractHoleExit("ExitArea");
}
void InteractHoleExit(string &in asEntity)
{
	PlaySoundAtEntity("crawl", "scare_wall_scratch_single", "Player", 0.3f, false);
}
//END THE HIDDEN TUNNEL//
/////////////////////////


//////////////////////
//BEGIN DRAGGED AWAY//
/*Plead, break door, drag a prisoner
 */
void CollideAreaDrag(string &in asParent, string &in asChild, int alState)
{
	if(GetFunnyModeOn())
	{
		PlayGuiSound(GetStringWithReplacedFunnySubString("brute_enabled.snt", "brute"), 0.6f);
	}
	else
	{
		PlaySoundAtEntity("AreaPrison_brutesnt", "15_brute.snt", "AreaPrison", 0.0f, false);
	}
	
	AddTimer("p0", 0.5, "TimerDoPrisoner01");
	AddTimer("p01", 2.5, "TimerDoPrisoner01");
	AddTimer("p02", 4.5, "TimerDoPrisoner01");
	AddTimer("p03", 5.5, "TimerDoPrisoner01");
	
	AddTimer("TimerEPlayerReact", 0.7f, "TimerEPlayerReact");
}
void TimerDoPrisoner01(string &in asTimer)
{
	if(asTimer == "p0") PlaySoundAtEntity("beg", "15_prisoner_beg", "AreaPrison", 0.0f, false);
	if(asTimer == "p01"){ 
		PlaySoundAtEntity("ripp", "15_ripp_door", "AreaPrison", 0.0f, false);
		StartScreenShake(0.01f, 1.0f, 0.2f, 1.0f);
		PlayMusic("15_event_prisoner.ogg", false, 0.6f, 0.5f, 10, false);
	}
	if(asTimer == "p02"){
		PlaySoundAtEntity("scream", "15_prisoner_scream", "AreaPrison", 0.0f, false);
		if(GetFunnyModeOn())
		{
			PlayGuiSound(GetStringWithReplacedFunnySubString("brute_enabled.snt", "brute"), 0.7f);
		}
		else
		{
			PlaySoundAtEntity("AreaPrison_brutesnt", "15_brute.snt", "AreaPrison", 0.0f, false);
		}
	}
	if(asTimer == "p03"){ 
		PlaySoundAtEntity("dragv", "15_prisoner_dragged", "AreaPrison_2", 0.0f, false);
		PlaySoundAtEntity("drags", "15_drag_body", "AreaPrison_2", 0.0f, false);
	}
}
void TimerEPlayerReact(string &in asTimer)
{
	int iMaxEventStep = 10;
	float fEventSpeed = 1.5f;
	string sEvent = asTimer;

	AddLocalVarInt(sEvent, 1);

	switch(GetLocalVarInt(sEvent)){
		case 1:
			GiveSanityDamage(20.0f, false);
			PlaySoundAtEntity("scare", "react_scare", "Player", 0.3f, false);
			PlaySoundAtEntity("creak", "00_creak", "Player", 6.0f, true);
			FadeSepiaColorTo(1.0f, 0.1f);
			FadePlayerAspectMulTo(2.0f, 0.02f);
			FadeImageTrailTo(2.0f, 3.0f);
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
		break;
		case 2:
			PlaySoundAtEntity("b1", "react_breath", "Player", 0.5f, false);
			SetPlayerMoveSpeedMul(0.7f);
			SetPlayerRunSpeedMul(0.7f);
		break;
		case 3:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
		break;
		case 4:
			PlaySoundAtEntity("b2", "react_breath", "Player", 0.5f, false);
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerRunSpeedMul(0.5f);
		break;
		case 5:
			SetPlayerMoveSpeedMul(0.4f);
			SetPlayerRunSpeedMul(0.4f);
		break;
		case 6:
			if(GetFunnyModeOn())
			{
				PlaySoundAtEntity("AreaPrison_brutesnt", GetStringWithReplacedFunnySubString("brute_idle_extra.snt", "brute"), "AreaPrison", 0.0f, false);
			}
			else
			{
				PlaySoundAtEntity("AreaPrison_brutesnt", "15_brute.snt", "AreaPrison", 0.0f, false);
			}
			
			PlaySoundAtEntity("b3", "react_breath", "Player", 0.5f, false);
			FadeSepiaColorTo(0.0f, 0.1f);
			FadePlayerAspectMulTo(1.0f, 0.1f);
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerRunSpeedMul(0.5f);
		break;
		case 7:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
		break;
		case 8:
			PlaySoundAtEntity("b4", "react_breath", "Player", 0.5f, false);
			StopSound("creak", 6.0f);
			FadeImageTrailTo(0.0f, 0.1f);
			SetPlayerMoveSpeedMul(0.7f);
			SetPlayerRunSpeedMul(0.7f);
		break;
		case 9:
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
		break;
		case 10:
			PlaySoundAtEntity("b5", "react_breath", "Player", 0.6f, false);
			SetPlayerMoveSpeedMul(1.0f);
			SetPlayerRunSpeedMul(1.0f);
		break;
	}

	if(GetLocalVarInt(sEvent) <= iMaxEventStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
/*Bang on door and see brute walk away
 */
void CollideAreaDrag02(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("death", "15_prisoner_death", "prison_6", 0.0f, false);
	StopSound("Sound_1", 0.0f);

	AddTimer("TimerEBangLast", 0.25f, "TimerEBangLast");
}
void TimerEBangLast(string &in asTimer)
{
	int iMaxEventStep = 9;
	float fEventSpeed = 0.5f;
	string sEvent = asTimer;

	AddLocalVarInt(sEvent, 1);

	switch(GetLocalVarInt(sEvent)){
		case 1:
			if(GetFunnyModeOn())
			{
				PlayGuiSound(GetStringWithReplacedFunnySubString("brute_attack.snt", "brute"), 0.5f);
			}
			else
			{
				PlaySoundAtEntity("AreaPrison_brutesnt", "15_attack_claw.snt", "AreaPrison", 0.0f, false);
			}
			
			PlaySoundAtEntity("scare", "react_scare", "Player", 0.0f, false);
			fEventSpeed = 0.5;
		break;
		case 2:
			FadeImageTrailTo(3.0f, 4.0f);
			GiveSanityDamage(30.0f, false);
			PlaySoundAtEntity("puff", "15_body_impact", "prison_6", 0.0f, false);
			fEventSpeed = 0.3;
		break;
		case 3:
			SetEntityActive(GetStringWithExtraModesSuffix("im_in_a_bad_mood"), true);
			SetEntityActive("corpse_male_1", true);
			AddPropImpulse("corpse_male_1", -5.0f, 3.0f, 5.0f, "World");
			fEventSpeed = 0.12;
		break;
		case 4:
			StartScreenShake(0.04f, 0.3f, 0.2f, 0.7f);
			PlaySoundAtEntity("scare2", "react_scare", "Player", 0.0f, false);
			AddPropImpulse("prison_6", 0.0f, 0.0f, 10.0f, "World");
			PlaySoundAtEntity("doorbang", "player_falldamage_max.snt", "prison_6", 0.0f, false);
			CreateParticleSystemAtEntity("splatt", "blood.ps", "AreaBloodSplatt", false);
			fEventSpeed = 1.0f;
		break;
		case 5:
			PlaySoundAtEntity("dinbe", "scare_tingeling", "Player", 0.0f, false);
			PlaySoundAtEntity("scare3", "react_scare", "Player", 0.5f, false);
			AddPropImpulse("corpse_male_1", 1.0f, 0.0f, -0.5f, "World");
			fEventSpeed = 0.01f;
		break;
		case 6:
			FadeImageTrailTo(0.0f, 0.1f);
			StartScreenShake(0.2f, 0.1f, 0.0f, 0.0f);
			//StartEffectFlash(0.2f, 0.1f, 0.2f);
			PlaySoundAtEntity("shake1", "scare_wall_stomp", "Player", 0.0f, false);
			PlaySoundAtEntity("shake2", "scare_whine_loop4", "Player", 0.0f, false);
			fEventSpeed = 0.2f;
		break;
		case 7:
			StartScreenShake(0.2f, 0.1f, 0.0f, 0.0f);
			fEventSpeed = 0.1f;
		break;
		case 8:
			StartScreenShake(0.2f, 0.1f, 0.0f, 0.0f);
			PlaySoundAtEntity("breath", "react_breath", "Player", 0.5f, false);
			fEventSpeed = 2.0f;
		break;
		case 9:
			PlaySoundAtEntity("breath2", "react_breath", "Player", 0.7f, false);
		break;
	}

	if(GetLocalVarInt(sEvent) <= iMaxEventStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
void EntityCallMonsterNoise(string &in asEntity, string &in type)
{
	AddTimer("noise", 4.0f, "TimerMakeMonsterNoise");
}
void TimerMakeMonsterNoise(string &in asTimer)
{
	int iRand = RandInt(8, 16);
	
	if(iRand <= 8)
	{
		PlayEnemySoundAtEntity("giveup.snt", "prison_7", "brute");
	}
	else
	{
		PlayEnemySoundAtEntity("alert.snt", "prison_7", "brute");
	}

	AddTimer("noise"+iRand, iRand, "TimerMakeMonsterNoise");
}
//END DRAGGED AWAY//
////////////////////


///////////////
//BEGIN INTRO//
void TimerEIntro(string &in asTimer)
{
	int iMaxEventStep = 16;
	float fEventSpeed = 1.0f;
	string sEvent = asTimer;

	AddLocalVarInt(sEvent, 1);

	switch(GetLocalVarInt(sEvent)){
		case 1:
			FadeIn(2.0f);
			CreateParticleSystemAtEntity("dust", "ps_dust_elevator_crash.ps", "AreaDust", false);
			PlaySoundAtEntity("breath1", "react_breath_slow", "Player", 0.5f, false);
			StartPlayerLookAt("AreaLook_2", 1.2f, 1.2f, "");
			MovePlayerHeadPos(0.0f, -0.8f, 0.5f, 0.8f, 0.8f);
			FadePlayerRollTo(-30.0f, 2.0f, 2.0f);
			PlayMusic("15_event_elevator.ogg", false, 1.0f, 0.5f, 10, false);
			fEventSpeed = 1.0f;
		break;
		case 2:
			SetPlayerActive(true);
			PlaySoundAtEntity("cloth1", "player_crouch", "Player", 0.2f, false);
			SetPlayerMoveSpeedMul(0.05f);
			SetPlayerRunSpeedMul(0.05f);
			SetPlayerLookSpeedMul(0.05f);
			MovePlayerHeadPos(0.0f, -0.8f, -0.5, 1.2f, 1.2f);
			fEventSpeed = 1.0f;
		break;
		case 3:
			FadePlayerRollTo(30.0f, 6.0f, 6.0f);
			SetPlayerMoveSpeedMul(0.1f);
			SetPlayerRunSpeedMul(0.1f);
			SetPlayerLookSpeedMul(0.1f);
			StartPlayerLookAt("AreaLook_3", 0.5f, 0.5f, "");
			SetPlayerLookSpeedMul(0.2f);
			fEventSpeed = 2.0f;
		break;
		case 4:
			SetPlayerMoveSpeedMul(0.15f);
			SetPlayerRunSpeedMul(0.15f);
			SetPlayerLookSpeedMul(0.15f);
			FadeOut(5.0f);
			PlaySoundAtEntity("sight1", "react_sigh", "Player", 0.5f, false);
			StartPlayerLookAt("AreaLook_1", 0.5f, 0.5f, "");
			FadePlayerRollTo(-30.0f, 10.0f, 10.0f);
			fEventSpeed = 0.5f;
		break;
		case 5:
			PlaySoundAtEntity("cloth2", "player_climb", "Player", 0.2f, false);
			SetPlayerMoveSpeedMul(0.2f);
			SetPlayerRunSpeedMul(0.2f);
			SetPlayerLookSpeedMul(0.2f);
			MovePlayerHeadPos(0.0f, -0.5f, -0.25f, 0.5f, 0.5f);
			fEventSpeed = 0.5f;
		break;
		case 6:
			SetPlayerMoveSpeedMul(0.25f);
			SetPlayerRunSpeedMul(0.25f);
			SetPlayerLookSpeedMul(0.25f);
			FadePlayerRollTo(0.0f, 15.0f, 15.0f);
			fEventSpeed = 2.0f;
		break;
		case 7:
			PlaySoundAtEntity("sight2", "react_sigh", "Player", 0.4f, false);
			SetPlayerMoveSpeedMul(0.3f);
			SetPlayerRunSpeedMul(0.3f);
			SetPlayerLookSpeedMul(0.3f);
			FadeIn(2.0f);
			FadePlayerRollTo(30.0f, 8.0f, 8.0f);
			MovePlayerHeadPos(0.0f, -0.8f, -0.5f, 0.7f, 0.5f);
			PlaySoundAtEntity("cloth3", "player_crouch", "Player", 0.2f, false);
		break;
		case 8:
			SetPlayerMoveSpeedMul(0.35f);
			SetPlayerRunSpeedMul(0.35f);
			SetPlayerLookSpeedMul(0.35f);
			StartPlayerLookAt("AreaLook_3", 1.0f, 0.5f, "");
			fEventSpeed = 0.5f;
		break;
		case 9:
			SetPlayerMoveSpeedMul(0.4f);
			SetPlayerRunSpeedMul(0.4f);
			SetPlayerLookSpeedMul(0.4f);
			FadePlayerRollTo(-30, 30.0f, 30.0f);
			MovePlayerHeadPos(0.0f, 0.0f, 0.0f, 0.8f, 0.8f);
			PlaySoundAtEntity("cloth4", "player_stand", "Player", 0.2f, false);
			fEventSpeed = 0.5f;
		break;
		case 10:
			FadePlayerRollTo(30, 8.0f, 8.0f);
			PlaySoundAtEntity("cloth5", "player_climb", "Player", 0.5f, false);
			SetPlayerMoveSpeedMul(0.45f);
			SetPlayerRunSpeedMul(0.45f);
			SetPlayerLookSpeedMul(0.45f);
			FadeOut(4.0f);
			StartPlayerLookAt("AreaLook_2", 1.5f, 1.5f, "");
			fEventSpeed = 1.0f;
		break;
		case 11:
			FadePlayerRollTo(-30, 10.0f, 10.0f);
			fEventSpeed = 0.5f;
		break;
		case 12:
			FadePlayerRollTo(0, 8.0f, 8.0f);
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerRunSpeedMul(0.5f);
			SetPlayerLookSpeedMul(0.5f);
			FadeIn(1.0f);
			StopPlayerLookAt();
		break;
		case 13:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
			SetPlayerLookSpeedMul(0.7f);
		break;
		case 14:
			SetPlayerMoveSpeedMul(0.75f);
			SetPlayerRunSpeedMul(0.75f);
			SetPlayerLookSpeedMul(0.9f);
		break;
		case 15:
			SetPlayerMoveSpeedMul(0.85f);
			SetPlayerRunSpeedMul(0.85f);
			SetPlayerLookSpeedMul(1.0f);
		break;
		case 16:
			SetPlayerCrouchDisabled(false);
			SetPlayerJumpDisabled(false);
			SetPlayerMoveSpeedMul(1.0f);
			SetPlayerRunSpeedMul(1.0f);
			PlayMusic("12_amb.ogg", true, 1.0f, 0.5f, 0, true);
		break;
	}

	if(GetLocalVarInt(sEvent) <= iMaxEventStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
//END INTRO//
/////////////


/////////////////////
//BEGIN MISC EVENTS//
/*Active second grunt if player goes back down
 */
void CollideAreaGrunt(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("servant_grunt_1") == 1 || GetLocalVarInt("servant_grunt_2") == 1) return; //Don't do this while the first grunt is active.
	
	if(asChild == "AreaCorridorGrunt_1"){
		SetLocalVarInt("BeenInB", 1);
	} else {
		if(GetLocalVarInt("BeenInB") != 1) return;
		
		SetEntityActive(GetStringWithExtraModesSuffix("grunt"), true);
		if(GetEasyModeOn() >= 2)
		{
			SetEnemyIsHallucination(GetStringWithExtraModesSuffix("grunt"), true);
		}
		else
		{
			SetEnemyIsHallucination(GetStringWithExtraModesSuffix("grunt"), false);
		}
		
		CheckPoint("checkpoint1","PlayerStartArea_6","CPCallDeath", "", "");
		
		SetEntityActive("AreaCorridorGrunt_1", false);
		SetEntityActive("AreaCorridorGrunt_2", false);
	}
}
/*Some special events for the activation
 */
void CollideAreaFlickGrunt(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaFlick_2" or asChild == "AreaFlick_4"){
		GiveSanityDamage(10.0f, true);
		PlaySoundAtEntity("scare", "react_scare", "Player", 0.3f, false);
	}
	
	StartScreenShake(0.2f, 0.1f, 0.1f, 0.1f);
	PlaySoundAtEntity("s"+asChild, "sanity_flick.snt", asChild, 0.0f, false);
	FadeLightTo("Light"+asChild, 1, 1, 1, 1, -1, 0.1);
	AddTimer("Light"+asChild, 0.2f, "TimerLightOff02");	
	AddTimer("backon", 0.4f, "TimerLightOff02");

	if(GetToughModeOn() >= 2 && asChild == "AreaFlick_4")
	{
		AddTimer(GetStringWithExtraModesSuffix("grunt"), 0.8f, "ShowEnemyPlayerPosition");
	}
	else
	if(GetToughModeOn() >= 1 && asChild == "AreaFlick_4")
	{
		AddTimer(GetStringWithExtraModesSuffix("grunt"), 0.8f, "AlertEnemyOfPlayerPresence");
	}
}		
void TimerLightOff02(string &in asTimer)
{
	if(asTimer == "backon"){
		SetEntityActive(GetStringWithExtraModesSuffix("grunt"), true);
		StartScreenShake(0.1f, 0.1f, 0.0f, 0.1f);
		return;
	}
	FadeLightTo(asTimer, 0, 0, 0, 1, -1, 0.1);
	SetEntityActive(GetStringWithExtraModesSuffix("grunt"), false);
}

/*Event if player dies when second grunt activated
 */
 
void ResetDoorIfBroken(string asDoor)
{
	if(GetPropHealth(asDoor) <= 0.0f)
	{
		ResetProp(asDoor);
	}
}

void CPCallDeath(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("prison_1");
	ResetDoorIfBroken("prison_2");
	ResetDoorIfBroken("prison_3");
	ResetDoorIfBroken("prison_4");
	ResetDoorIfBroken("prison_5");
	
	AddEntityCollideCallback("Player", "AreaRumble", "CollideAreaRumblePart2", false, 1);
	AddEntityCollideCallback("Player", "ScriptArea_4", "CollideAreaRumblePart2", false, 1);
	SetLocalVarInt("servant_grunt_1", 0);
	SetLocalVarInt("servant_grunt_2", 0);

	SetGlobalVarInt("15CPEvent", 1);

	SetPlayerCrouching(true);
	
	StartPlayerLookAt("AreaLookCP", 4.0f, 4.0f, "");
	
	SetPlayerMoveSpeedMul(0.2f);
	SetPlayerRunSpeedMul(0.2f);
	SetPlayerLookSpeedMul(0.2f);
	
	AddTimer("1", 0.5f, "TimerCPEvent");
	AddTimer("2", 3.0f, "TimerCPEvent");
	AddTimer("3", 3.8f, "TimerCPEvent");
	AddTimer("4", 4.0f, "TimerCPEvent");
	AddTimer("5", 4.5f, "TimerCPEvent");
}
void TimerCPEvent(string &in asTimer)
{
	if(asTimer == "1"){
		SetEntityActive(GetStringWithExtraModesSuffix("grunt_2"), true);
		StopPlayerLookAt();
	}	
	else if(asTimer == "2"){
		SetPlayerMoveSpeedMul(0.4f);
		SetPlayerRunSpeedMul(0.4f);
		SetPlayerLookSpeedMul(0.4f);
	}
	else if(asTimer == "3"){
		StartScreenShake(0.1f, 0.1f, 0.1f, 0.1f);
		PlaySoundAtEntity("flick1", "sanity_flick.snt", "Player", 0.0f, false);
		FadeLightTo("CPLight", 1, 1, 1, 1, -1, 0.1);
		AddTimer("lightoff", 0.2f, "TimerLightOff");
		SetPlayerMoveSpeedMul(0.6f);
		SetPlayerRunSpeedMul(0.6f);
		SetPlayerLookSpeedMul(0.6f);
	}
	else if(asTimer == "4"){
		FadeLightTo("CPLight", 1, 1, 1, 1, -1, 0.1);
		AddTimer("lightoff", 0.2f, "TimerLightOff");
		StartScreenShake(0.3f, 0.1f, 0.1f, 0.1f);
		PlaySoundAtEntity("flick1", "sanity_flick.snt", "Player", 0.0f, false);
		SetPlayerMoveSpeedMul(0.7f);
		SetPlayerRunSpeedMul(0.7f);
		SetPlayerLookSpeedMul(0.7f);
		FadeGlobalSoundVolume(0.0f, 0.5f);
	}
	else if(asTimer == "5"){
		PlaySoundAtEntity("aa", "sreact_scare.snt", "Player", 0.5f, false);
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		FadeGlobalSoundVolume(1.0f, 10.0f);
	}
}
void TimerLightOff(string &in asTimer)
{
	FadeLightTo("CPLight", 0, 0, 0, 1, -1, 0.1f);
}

/*A bit of a rumble at a cavein
 */
void CollideAreaRumble(string &in asParent, string &in asChild, int alState)
{
	StartScreenShake(0.008f, 1.0f, 2.0f,6.0f);
	
	PlaySoundAtEntity("rumbs", "general_rock_rumble_no3d", "AreaRumbleEffect", 4.0f, false);
	
	CreateParticleSystemAtEntity("rumbp", "ps_dust_falling_rumble.ps", "AreaRumbleEffect", false);
	
	AddTimer("roar", 1.5f, "TimerEndRumble");
	AddTimer("rumbs", 3.0f, "TimerEndRumble");
}
void TimerEndRumble(string &in asTimer)
{
	if(asTimer == "roar")
	{
		PlaySoundAtEntity("AreRoars", "04_warn.snt", "AreRoar", 1.0f, false);
		CreateParticleSystemAtEntity("AreRoarp", "ps_cave_monster_warn.ps", "AreRoar", false);
		
		AddTimer("scare", 1.0f, "TimerPlayerReact");
		AddTimer("breath", 3.0f, "TimerPlayerReact");
		AddTimer("breathl", 5.0f, "TimerPlayerReact");
		
		GiveSanityDamage(5.0f, false);
		if(GetToughModeOn() >= 2)
			AddEntityCollideCallback("Player", "AreaRumble", "CollideAreaRumblePart2", false, 1);
		return;
	}
	else if(asTimer == "servant_grunt_1" || asTimer == "servant_grunt_2")
	{
		SetLocalVarInt(asTimer, 1);
		SetEntityActive(GetStringWithExtraModesSuffix(asTimer), true);
		if(asTimer == "servant_grunt_1")
			TeleportEnemyToNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_121", true);
		else
			TeleportEnemyToNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_46", true);
		
		ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix(asTimer));
		int lRand = RandInt(1, 2);
		if(asTimer == "servant_grunt_1")
		{
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_97", GetEnemyIdleTime(4.0f), "IdleExtra" + lRand);
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_102", GetEnemyIdleTime(4.0f), "IdleExtra" + lRand);
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_144", GetEnemyIdleTime(4.0f), "IdleExtra" + lRand);
		}
		else
		{
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_123", GetEnemyIdleTime(4.0f), "IdleExtra" + lRand);
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_101", GetEnemyIdleTime(4.0f), "IdleExtra" + lRand);
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_53", GetEnemyIdleTime(4.0f), "IdleExtra" + lRand);
		}
		return;
	}
	
	StopSound(asTimer, 8.0f);
}
void CollideAreaRumblePart2(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaRumble")
	{
		if(GetLocalVarInt("servant_grunt_1") != 1 && GetLocalVarInt("servant_grunt_2") != 1)
		{
			AddTimer("servant_grunt_1", RandFloat(1.0f, 3.5f), "TimerEndRumble");
			RemoveEntityCollideCallback(asParent, asChild);
		}
	}
	else if(asChild == "ScriptArea_4")
	{
		if(GetLocalVarInt("servant_grunt_1") != 1 && GetLocalVarInt("servant_grunt_2") != 1)
		{
			AddTimer("servant_grunt_2", RandFloat(1.0f, 2.5f), "TimerEndRumble");
			RemoveEntityCollideCallback(asParent, asChild);
		}
	}
}
void TimerPlayerReact(string &in asTimer)
{
	if(asTimer == "breathl") PlayGuiSound("react_breath", 0.5f);
	else PlayGuiSound("react_"+asTimer, 0.7f);
}

/*Extra small puzzle to get sanity potion
 */
 void StateOfLockedDoor(string &in asEntity, string &in asType)
 {
	if(asType == "Break")
	{
		if(QuestIsCompleted("15ExtraDoor"))
		{
			return;
		}
		else
		{
			ResetProp(asEntity);
		}
	}
 }
void InteractLockedDoor(string &in asEntity)
{
	if(GetLocalVarInt("DoorOpenExtra") == 1) return;
	
	AddQuest("15ExtraDoor", "15ExtraDoor");
	
	AddTimer("mess", 0.3f, "TimerDoorMess");
}
void TimerDoorMess(string &in asTimer)
{
	SetMessage("Ch02Level15", "InteractExtraDoor", 0);
}
void UseHCExtra(string &in asItem, string &in asEntity)
{
	if(GetLocalVarInt("DoorOpenExtra") == 1){ 
		SetMessage("Ch02Level15", "UseExtraDoorDone", 0);
		return;
	}
	if(asItem == "stone_hammer_1" && HasItem("stone_chipper_1")){ 
		UnlockDoor();
		
		RemoveItem("stone_chipper_1");
		RemoveItem("stone_hammer_1");
		
		GiveItem("stone_hammer_chipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0);	
	}
	else if(asItem == "stone_chipper_1" && HasItem("stone_hammer_1")){ 
		UnlockDoor();
		
		RemoveItem("stone_chipper_1");
		RemoveItem("stone_hammer_1");
		
		GiveItem("stone_hammer_chipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0);	
	}
	else if(asItem == "stone_hammer_chipper") UnlockDoor();
	else SetMessage("Ch02Level15", "UseExtraDoor", 0);
}
void UnlockDoor()
{
	GiveSanityBoostSmall();
	
	PlaySoundAtEntity("ready", "player_crouch", "Player", 0.0f, false);
	StartPlayerLookAt("SwindArea_1", 2.0f, 2.0f, "");
	
	CompleteQuest("15ExtraDoor", "15ExtraDoor");
	
	AddTimer("e1", 0.1f, "TimerDoorUnlock");
	AddTimer("e2", 0.3f, "TimerDoorUnlock");
	AddTimer("e3", 0.4f, "TimerDoorUnlock");
	
	SetEntityActive("stone_hammer_move_5", true);
	SetEntityActive("stone_chipper_move_5", true);
}
void TimerDoorUnlock(string &in asTimer)
{
	if(asTimer == "e1"){
		SetMoveObjectState("stone_hammer_move_5", 0.25f);
	}
	else if(asTimer == "e2"){
		PlaySoundAtEntity("hammer", "15_hammer", "Player", 0, false);
		SetMoveObjectState("stone_chipper_move_5", 1.0f);
		SetMoveObjectState("stone_hammer_move_5", 0.0f);
		CreateParticleSystemAtEntity("bling", "ps_hit_metal", "stone_chipper_move_5", false);
	}
	else if(asTimer == "e3"){
		StopPlayerLookAt();
		SetSwingDoorLocked("prison_3", false, true);
		
		SetEntityActive("stone_hammer_move_5", false);
		SetEntityActive("stone_chipper_move_5", false);
		
		PlaySoundAtEntity("break", "impact_metal_high", "Player", 0, false);
		PlaySoundAtEntity("unlock", "unlock_door", "Player", 0, false);
		
		SetLocalVarInt("DoorOpenExtra", 1);
		
		PlayMusic("10_puzzle01", false, 1.0f, 0.5f, 10, false);
	}
}

/*Extra lights for the torch casting shadows
 */
void EntityCallFack(string &in asEntity, string &in type)
{
	SetLocalVarInt("DoBreezeScare", 1);
	
	FadeLightTo("PointLight_6", 0.35f, 0.25f, 0.1f, -1, -1, 1.0f);
	FadeLightTo("PointLight_4", 0.35f, 0.25f, 0.1f, -1, -1, 1.0f);
}

/*Play Music for girl and mother flashback
 */
void CollideFlashBackGirlMother(string &in asParent, string &in asChild, int alState)
{
	AddTimer("gmmusic", 3.0f, "TimerFlashBackGirlMother");
	AddTimer("girlcry", 30.0f, "TimerBeginGirlCry");
}
void TimerFlashBackGirlMother(string &in asTimer)
{
	PlayMusic("15_event_girl_mother.ogg", false, 0.7f, 0.5f, 10, false);
}
void TimerBeginGirlCry(string &in asTimer)
{
	PlaySoundAtEntity("girlcry", "15_girl_cry", "AreaGirlCry_"+RandInt(1,4), 0.0f, false);
	
	AddTimer("TimerBeginGirlCry", RandInt(15, 40), "TimerBeginGirlCry");
}

/*Interact with the blue cloth
 */
void InteractAreaCloth(string &in asEntity)
{
	PlayGuiSound("12_cloth.snt", 0.9f);
	//AddTimer(asEntity, 1.0f, "TimerClothOn");
		
	//if(GetLocalVarInt("TouchedCloth") == 1) return;
	
	StartEffectEmotionFlash("Ch02Level15", "InteractGirlCloth", "ui_insanity_touch.snt");
	
	//SetLocalVarInt("TouchedCloth", 1);
	
	//SetMessage("Ch02Level15", "InteractGirlCloth", 0);
}
void TimerClothOn(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractAreaCloth", true);
}

/*Rose petals for mother vision 
 */
void CollideFlashBackMother(string &in asParent, string &in asChild, int alState)
{
	AddTimer("TimerRosePetals", 2.0f, "TimerRosePetals");
}
void TimerRosePetals(string &in asTimer)
{
	AddLocalVarInt("RosePetals", 1);
	
	int iRose = GetLocalVarInt("RosePetals");
	
	CreateParticleSystemAtEntity("rose"+iRose, "ps_rose_petals.ps", "AreaRose_"+RandInt(1,5), false);
	
	if(GetLocalVarInt("RosePetals") == 1)
		PlayGuiSound("general_wind_blow.ogg", 0.5f);
		
	if(GetLocalVarInt("RosePetals") <= 10) 
		AddTimer("TimerRosePetals", RandFloat(0.5f, 2.5f), "TimerRosePetals");
}

/*Rose petals for journey to sanctum
 */
void CollideFlashBackJourney(string &in asParent, string &in asChild, int alState)
{
	AddTimer("TimerJourneyRosePetals", 2.0f, "TimerJourneyRosePetals");
}
void TimerJourneyRosePetals(string &in asTimer)
{
	PlayGuiSound("general_wind_blow.ogg", 0.5f);
	
	CreateParticleSystemAtEntity("AreaRoseJourney", "ps_rose_petals_wind.ps", "AreaRoseJourney", false);
}

/*A breeze flows through the level and turns off all corridor lights
 */
 void LitScareLantern(string &in asEntity, string &in type)
 {
 	SetLocalVarInt("DoBreezeScare", 1);
 }
void EntityCallPickItem(string &in asEntity, string &in type)
{
	AddLocalVarInt("PickedItems", 1);
	
	if(QuestIsAdded("15NeedMoreTool")) CompleteQuest("15NeedMoreTool", "15NeedMoreTool");	
	
	AddDebugMessage("Var is: " + GetLocalVarInt("PickedItems"), false);
	
	if(GetLocalVarInt("PickedItems") == 2)
	{
		AddDebugMessage("Activating breeze area", true);
		SetEntityActive("AreaBreeze", true);
	}
	
	if(GetToughModeOn() >= 1)
	{
		if(GetLocalVarInt("servant_grunt_2") == 1)
		{
			AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_grunt_2"));
		}
		else
		if(GetLocalVarInt("servant_grunt_1") == 1)
		{
			AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_grunt_1"));
		}
		else
		{
			AddDebugMessage("DEBUG: Could not alert the enemy of player presence because toughmode + pickupitem!", false);
		}
	}
}
void CollideAreaBreeze(string &in asParent, string &in asChild, int alState)
{
	AddDebugMessage("Collided with breeze area", false);
	if(GetLocalVarInt("DoBreezeScare") != 1) return;
	
	AddDebugMessage("Starting breeze!", false);
	
	AddTimer("TimerEBreeze", 0, "TimerEBreeze");
	
	RemoveEntityCollideCallback(asParent, asChild);
}
void TimerEBreeze(string &in asTimer)
{
	string sEvent = asTimer;	//Do not edit, sets timer loop function name.
	AddLocalVarInt(sEvent, 1);	//Do not edit, steps through timer loop events.
	bool bPauseAtStep = false;	//Do not edit, to pause or end the timer loop at specified step.

	float fEventSpeed = 0.5f;	//Set to preferred default time for the timer loop.

	switch(GetLocalVarInt(sEvent)){
		//////////
		//Breeze from Prison North
		case 1:
			CreateParticleSystemAtEntity("ScriptArea_1p", "ps_dust_push_15.ps", "ScriptArea_1", false);
			PlaySoundAtEntity("ScriptArea_1s", "general_wind_whirl.snt", "ScriptArea_1", 0, false);
			PlaySoundAtEntity("amb_metal", "15_amb_metal", "ScriptArea_1", 8, true);
			StopSound("Sound_8", 8.0f);
		break;

		//////////
		//Breeze into corridor
		case 2:
			CreateParticleSystemAtEntity("ScriptArea_3p", "ps_dust_push_15.ps", "ScriptArea_3", false);
			PlaySoundAtEntity("ScriptArea_3s", "general_wind_whirl.snt", "ScriptArea_3", 0, false);
			CreateParticleSystemAtEntity("ScriptArea_4p", "ps_dust_push_15.ps", "ScriptArea_4", false);
			PlaySoundAtEntity("ScriptArea_4s", "general_wind_whirl.snt", "ScriptArea_4", 0, false);
		break;
		
		//////////
		//Breeze flows around corner
		case 3:
			CreateParticleSystemAtEntity("ScriptArea_2p", "ps_dust_push_15.ps", "ScriptArea_2", false);
			PlaySoundAtEntity("ScriptArea_2s", "general_wind_whirl.snt", "ScriptArea_2", 0, false);
			CreateParticleSystemAtEntity("ScriptArea_5p", "ps_dust_push_15.ps", "ScriptArea_5", false);
			PlaySoundAtEntity("ScriptArea_5s", "general_wind_whirl.snt", "ScriptArea_5", 0, false);
			SetLampLit("torch_static0b1_1*", false, true);
			GiveSanityDamage(5.0f, true);
			AddTimer("scare", 0.2f, "TimerPlayerReact");
			AddTimer("breath", 2.0f, "TimerPlayerReact");
			AddTimer("breathl", 4.0f, "TimerPlayerReact");
		break;
		
		//////////
		//Breeze has swept all around
		case 4:
			SetLampLit("torch_static0b2_1*", false, true);
		break;
		
		//////////
		//Breeze has swept all around
		case 5:
			SetLampLit("torch_static0b3_1*", false, true);
		break;
		
		//////////
		//Breeze has swept all around
		case 6:
			SetLampLit("torch_static0b4_11", false, true);
			SetLampLit("torch_static0b4_18", false, true);
			//SetLightVisible("SpotLight_7", false);
		break;
		
		//////////
		//End timer when no more steps in the event found.
		default:
			bPauseAtStep = true;
		break;
	}

	if(!bPauseAtStep) AddTimer(sEvent, fEventSpeed, sEvent);
}

/*Manly cries
 */
 void TimerManCry(string &in asTimer)
 {
	PlaySoundAtEntity("AreaManCryS", "15_man0"+RandInt(1,2)+"_whimp", "AreaManCry_"+RandInt(1,6), 0.0, false);
	
	AddTimer("TimerManCry", RandInt(10, 60), "TimerManCry");
 }
//END MISC EVENTS//
///////////////////


//GRUNT WHEN WALKING UP STAIRS
void CollideAreaStairGrunt(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_1"), true);
	
	if(GetToughModeOn() <= 1){
	AddTimer("scare", 1.0f, "TimerPlayerReact");
	AddTimer("breath", 3.0f, "TimerPlayerReact");
	AddTimer("breathl", 5.0f, "TimerPlayerReact");}
	
	SetLocalVarInt("servant_grunt_1", 1);
	
	CheckPoint("grunt_stairs", "ScriptArea_6", "CPCallGruntStairs", "", "");
}
void EntityCallStairGrunt(string &in asEntity, string &in type)
{
	if(StringContains(asEntity, "servant_grunt_1") == true)
		SetLocalVarInt("servant_grunt_1", 0);	//Grunt when going back down again can be activated.
	else if(StringContains(asEntity, "servant_grunt_2") == true)
		SetLocalVarInt("servant_grunt_2", 0);
	
	SetEntityActive("AreaDoLastGrunt", true);	//A grunt can be activated outside one of the cells upstairs when inside that cell.
	
	AddDebugMessage("Stair Grunt Gone", false);
}
void CPCallGruntStairs(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("prison_1");
	ResetDoorIfBroken("prison_2");
	ResetDoorIfBroken("prison_3");
	ResetDoorIfBroken("prison_4");
	ResetDoorIfBroken("prison_5");
	
	AddEntityCollideCallback("Player", "AreaRumble", "CollideAreaRumblePart2", false, 1);
	AddEntityCollideCallback("Player", "ScriptArea_4", "CollideAreaRumblePart2", false, 1);
	SetLocalVarInt("servant_grunt_1", 0);
	SetLocalVarInt("servant_grunt_2", 0);
	
	SetEntityActive("rat_hell_*", true);
	SetEntityActive("AreaDoLastGrunt", true);	//A grunt can be activated outsidfe one of the cells upstairs when inside that cell.
	
	PlaySoundAtEntity("rats", "insanity_bug3.snt", "Player", 5.0f, false);
	
	SetPlayerCrouching(true);
	StartPlayerLookAt("AreaRatLook", 10.0f, 10.0f, "");
	
	AddTimer("stoplook", 1.0f, "TimerRemoveRats");
	AddTimer("rat_hell", 7.0f, "TimerRemoveRats");
	
	AddDebugMessage("I died!", false);
}
void TimerRemoveRats(string &in asTimer)
{
	if(asTimer == "stoplook"){
		StopPlayerLookAt();
		return;
	}
	
	SetPropActiveAndFade("rat_hell_*", false, 5.0f);
	StopSound("rats", 5.0f);
}

//LAST GRUNT 
void CollideAreaDoLastGrunt(string &in asParent, string &in asChild, int alState)
{
	if(GetToughModeOn() >= 2)
		AddEntityCollideCallback("Player", "ScriptArea_4", "CollideAreaRumblePart2", false, 1);
	
	SetLocalVarInt("servant_grunt_2", 1);
	SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_2"), true);
	AddDebugMessage("In cell!", false);
	
	CheckPoint("grunt_cell", "PlayerStartArea_10", "CPCallGruntCell", "", "");
}
void CPCallGruntCell(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("prison_1");
	ResetDoorIfBroken("prison_2");
	ResetDoorIfBroken("prison_3");
	ResetDoorIfBroken("prison_4");
	ResetDoorIfBroken("prison_5");
	
	AddEntityCollideCallback("Player", "AreaRumble", "CollideAreaRumblePart2", false, 1);
	AddEntityCollideCallback("Player", "ScriptArea_4", "CollideAreaRumblePart2", false, 1);
	SetLocalVarInt("servant_grunt_1", 0);
	SetLocalVarInt("servant_grunt_2", 0);

	StartPlayerLookAt("LookCellGrunt", 10, 10, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("super_brute"), "PathNodeArea_117", 0, "");

	FadeRadialBlurTo(0.5f, 0.5f);
	SetRadialBlurStartDist(0.3f);
	
	SetPlayerMoveSpeedMul(0.0f);
	SetPlayerRunSpeedMul(0.0f);
	
	FadeLightTo("PointLight_38", 0.8f, 0.4f, 0.2f, 1.0f, -1, 1);
	
	AddTimer("1", 1.0f, "TimerGruntCell");
	AddTimer("2", 2.0f, "TimerGruntCell");
	AddTimer("3", 3.0f, "TimerGruntCell");
	AddTimer("4", 5.0f, "TimerGruntCell");
}
void TimerGruntCell(string &in asTimer)
{
	if(asTimer == "1"){
		StopPlayerLookAt();
		SetSwingDoorClosed("prison_4", true, true);
		SetPlayerMoveSpeedMul(0.1f);
	}
	if(asTimer == "2"){
		AddTimer("scare", 0.5f, "TimerPlayerReact");
		AddTimer("breath", 2.5f, "TimerPlayerReact");
		AddTimer("breathl", 4.5f, "TimerPlayerReact");
		SetEntityActive(GetStringWithExtraModesSuffix("super_brute"), true);
		SetPlayerMoveSpeedMul(0.3f);
	}
	if(asTimer == "3"){
		FadeLightTo("PointLight_38", 0, 0, 0, 0, -1, 1);
		SetPlayerMoveSpeedMul(0.5f);
	}
	if(asTimer == "4"){
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		FadeRadialBlurTo(0.0f, 0.1f);
		SetEntityActive(GetStringWithExtraModesSuffix("super_brute"), false);
	}
}


////////////////////////////
// Run first time starting map
void OnStart()
{
	for(int i=0; i<gvsDangerousLampsArray.length(); i++)
	{
		SetEntityCallbackFunc(gvsDangerousLampsArray[i], "OnLampStateChange");
	}
	
	SetMapDisplayNameEntry("PrisonSouth");
	
	////////////////////
	// Hub start sanity boost
	GiveSanityBoostSmall();
	
	
	//---- COLLIDE INTI ----//
	AddEntityCollideCallback("bed_simple_movable_1", "BedOverHole", "CollideMoveBed", true, -1);
	AddEntityCollideCallback("Player", "AreaDrag", "CollideAreaDrag", true, 1);
	AddEntityCollideCallback("Player", "AreaDrag_2", "CollideAreaDrag02", true, 1);
	AddEntityCollideCallback("Player", "AreaCorridorGrunt_1", "CollideAreaGrunt", false, 1);
	AddEntityCollideCallback("Player", "AreaCorridorGrunt_2", "CollideAreaGrunt", false, 1);
	AddEntityCollideCallback("Player", "AreaRumble", "CollideAreaRumble", true, 1);
	for(int i=0;i<5;i++)
	{
		AddEntityCollideCallback(GetStringWithExtraModesSuffix("grunt"), "AreaFlick_"+i, "CollideAreaFlickGrunt", true, 1);
		AddEntityCollideCallback("Player", "AreaHammer_"+i, "CollideAreaHammer", false, 1);
	}
	
	AddEntityCollideCallback("Player", "FlashbackArea_3", "CollideFlashBackGirlMother", true, 1);
	AddEntityCollideCallback("Player", "FlashbackArea_2", "CollideFlashBackMother", true, 1);
	AddEntityCollideCallback("Player", "FlashbackArea_1", "CollideFlashBackJourney", true, 1);
	
	AddEntityCollideCallback("Player", "AreaBreeze", "CollideAreaBreeze", false, 1);
	
	AddEntityCollideCallback("Player", "AreaStairGrunt", "CollideAreaStairGrunt", true, 1);
	
	AddEntityCollideCallback("Player", "AreaDoLastGrunt", "CollideAreaDoLastGrunt", true, 1);
	
	//---- INTERACT INIT ----//	
	AddUseItemCallback("shcd", "stone_hammer_chipper", "prison_section_static_1", "UseHCDoor", true);
	AddUseItemCallback("shd", "stone_hammer_1", "prison_section_static_1", "UseHCDoor", false);
	AddUseItemCallback("scd", "stone_chipper_1", "prison_section_static_1", "UseHCDoor", false);
	AddUseItemCallback("shcp", "stone_hammer_chipper", "padlock_1", "UseHCDoor", true);
	AddUseItemCallback("shp", "stone_hammer_1", "padlock_1", "UseHCDoor", false);
	AddUseItemCallback("scp", "stone_chipper_1", "padlock_1", "UseHCDoor", false);
	AddUseItemCallback("shcx", "stone_hammer_chipper", "prison_3", "UseHCExtra", false);
	AddUseItemCallback("shx", "stone_hammer_1", "prison_3", "UseHCExtra", false);
	AddUseItemCallback("scx", "stone_chipper_1", "prison_3", "UseHCExtra", false);
	
	//---- ENEMY PATROL ----//
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("im_in_a_bad_mood"), "PathNodeArea_9", 0.1f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("im_in_a_bad_mood"), "PathNodeArea_1", 0.2f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("im_in_a_bad_mood"), "PathNodeArea_4", 0, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("im_in_a_bad_mood"), "PathNodeArea_6", 0, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("im_just_cute_and_happy"), "PathNodeArea_169", 0, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt"), "PathNodeArea_53", 2.0f, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_2"), "PathNodeArea_65", 2.0f, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_45", GetEnemyIdleTime(2.0f), "");
	if(GetEasyModeOn() <= 0)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_69", GetEnemyIdleTime(2.0f), "");
	if(GetToughModeOn() >= 1)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_59", 1.0f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_144", 1.0f, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_113", GetEnemyIdleTime(8.0f), "");
	if(GetToughModeOn() >= 1)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_158", 1.0f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_102", GetEnemyIdleTime(2.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_52", 1.0f, "");
	
	SetNumberOfQuestsInMap(1);
	
	AddTimer("TimerManCry", RandInt(30, 40), "TimerManCry");
	
	//----DEBUG----//
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		
		//GiveItemFromFile("stone_hammer_1", "stone_hammer.ent");
		//GiveItemFromFile("stone_chipper_1", "stone_chipper.ent");
		
		//SetEntityActive("AreaDoLastGrunt", true);
		
		/*Test pickup event on 1 item*/
		//AddLocalVarInt("PickedItems", 1);
		
		/*Test Intro*/
		SetPlayerActive(false);
		MovePlayerHeadPos(0, -1.0f, -0.5f, 10.0f, 0.0f);
		FadeOut(0.0f);
		StartPlayerLookAt("AreaLook_1", 8.0f, 8.0f, "");
		AddTimer("TimerEIntro", 0.25f, "TimerEIntro");
		SetPlayerMoveSpeedMul(0.0f);
		SetPlayerRunSpeedMul(0.0f);
		SetPlayerLookSpeedMul(0.0f);
		StartScreenShake(0.01f, 5.0f, 0.0f,5.0f);
		PlaySoundAtEntity("intro", "15_intro", "Player", 0.1f, false);
		
	} 
	else
	{
		SetPlayerActive(false);
		SetPlayerCrouchDisabled(true);
		SetPlayerJumpDisabled(true);
		MovePlayerHeadPos(0, -1.0f, -0.5f, 10.0f, 0.0f);
		FadeOut(0.0f);
		StartPlayerLookAt("AreaLook_1", 8.0f, 8.0f, "");
		AddTimer("TimerEIntro", 0.25f, "TimerEIntro");
		SetPlayerMoveSpeedMul(0.0f);
		SetPlayerRunSpeedMul(0.0f);
		SetPlayerLookSpeedMul(0.0f);
		PlaySoundAtEntity("intro", "15_intro", "Player", 0.1f, false);
	}
	SetPlayerHealth(42.5f);
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	PreloadSound("15_intro"); PreloadSound("15_prisoner_death"); PreloadSound("react_breath"); PreloadSound("00_creak");
	PreloadSound("react_scare"); PreloadSound("15_man_hunted"); PreloadSound("impact_rock_low"); PreloadSound("15_rock_break");
	PreloadSound("03_rock_move"); PreloadSound("impact_rock_high"); PreloadSound("03_break_wall"); PreloadSound("scare_wall_scratch_single");
	PreloadSound("15_brute"); PreloadSound("15_prisoner_beg"); PreloadSound("15_prisoner_scream"); PreloadSound("15_ripp_door");
	PreloadSound("15_prisoner_dragged"); PreloadSound("15_drag_body"); PreloadSound("react_scare"); PreloadSound("15_body_impact");
	PreloadSound("scare_tingeling"); PreloadSound("scare_wall_stomp"); PreloadSound("scare_whine_loop4");
	PreloadSound("react_breath_slow"); PreloadSound("player_crouch"); PreloadSound("react_sigh"); PreloadSound("player_stand");
	PreloadSound("player_climb"); PreloadSound("sanity_flick"); PreloadSound("general_rock_rumble_no3d"); PreloadSound("04_warn");
	PreloadSound("impact_metal_high"); PreloadSound("15_girl_cry"); PreloadSound("general_wind_whirl"); PreloadSound("15_attack_claw");
	
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
	
	string sEnemyName = "";
	
	sEnemyName = "grunt";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
	
	sEnemyName = "brute";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	CompleteQuest("15ExtraDoor", "15ExtraDoor");
	
	//////////////////////
	//Load Screen Setup
	//SetupLoadScreen("LoadingText", "Ch02_Prison02", 1, "game_loading_well.jpg");
}