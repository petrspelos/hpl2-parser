int swings = 0;
//////////////////////////////////////////////////////////////////////////////////////	
//OnStart
//////////////////////////////////////////////////////////////////////////////////////
void OnStart()
{
    AddUseItemCallback("", "ItemHammer", "AreaUseItem", "HammerAnimation", true);
	PlayMusic("Track20.ogg", true, 2, 1, 1, true);
	SetEntityPlayerInteractCallback("ItemHammer","Spawn", true);
	AddEntityCollideCallback("Player", "SpawnMonster", "Spawn", true, 1);
	AddEntityCollideCallback("Player", "SpawnMonster_Alt", "Spawn", true, 1);
	AddEntityCollideCallback("Player", "UnlockIfActive", "UnlockDoor", true, 1);
	AddEntityCollideCallback("Player", "LockDoor", "Lock", true, 1);
	AddEntityCollideCallback("RandomMonster", "ShowPos", "ShowPosition", false, 1);
	SetEntityPlayerInteractCallback("Piece_2", "SwingDoorOpenOrb", false);
}

//////////////////////////////////////////////////////////////////////////////////////	
//OnEnter
//////////////////////////////////////////////////////////////////////////////////////

void OnEnter()
{
	AutoSave();
}

//////////////////////////////////////////////////////////////////////////////////////	
//Checkpoint Deaths
//////////////////////////////////////////////////////////////////////////////////////

void Reset(string &in asName, int alCount)
{
	if(GetLocalVarInt("P2Check")== 0)
	{
	TeleportPlayer("PlayerStartArea_2");
	SetEnemyDisabled("RandomMonster", false);
	SetEntityActive("RandomMonster", false);
	AddTimer("", 1, "Active");
		}
	if(GetLocalVarInt("P2Check")== 1)
	{
	TeleportPlayer("PlayerStartArea_3");
	SetEnemyDisabled("RandomMonster", false);
	SetEntityActive("RandomMonster", false);
	AddTimer("", 1, "Active");
		}
	if(GetLocalVarInt("P2Check")== 2)
	{
	TeleportPlayer("SpawnSE");
	SetEnemyDisabled("FastSE", false);
	SetEntityActive("FastSE", false);
	AddTimer("", 1, "Active2");
		}
}

void Reset2(string &in asName, int alCount)
{
	if(GetLocalVarInt("P2Check")== 2)
	{
	TeleportPlayer("SpawnSE");
	SetEnemyDisabled("FastSE", false);
	SetEntityActive("FastSE", false);
	AddTimer("", 1, "Active2");
		}
}

void Active(string &in asTimer)
{
	SetEntityActive("RandomMonster", true);
}

void Active2(string &in asTimer)
{
	SetEntityActive("FastSE", true);
}

//////////////////////////////////////////////////////////////////////////////////////	
//Spawn Grunt
//////////////////////////////////////////////////////////////////////////////////////

void Spawn(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "SpawnMonster")
	{
		SetLocalVarInt("P2Check", 0);
		CheckPoint ("", "PlayerStartArea_2", "Reset", "DeathHint", "Run");
		SetEntityActive("RandomMonster", true);
		SetEntityActive("SpawnMonster_Alt", false);
		AddEnemyPatrolNode("RandomMonster", "Node_1", 0.001f, "");
        AddEnemyPatrolNode("RandomMonster", "Node_2", 0.001f, "");
	}
	
	if(asChild == "SpawnMonster_Alt")
	{
		SetLocalVarInt("P2Check", 1);
		CheckPoint ("", "PlayerStartArea_3", "Reset", "DeathHint", "Run");
		SetEntityActive("RandomMonster", true);
		SetEntityActive("SpawnMonster", false);
		AddEnemyPatrolNode("RandomMonster", "Node_1", 0.001f, "");
        AddEnemyPatrolNode("RandomMonster", "Node_2", 0.001f, "");
	}
	
}

void ShowPosition(string &in asParent, string &in asChild, int alState)
{
	ShowEnemyPlayerPosition("RandomMonster");
}

//////////////////////////////////////////////////////////////////////////////////////	
//Door Mechanics
//////////////////////////////////////////////////////////////////////////////////////

void UnlockDoor(string &in asParent, string &in asChild, int alState)
{
	SetSwingDoorLocked("DoorSafe", false, true);
}

void Lock(string &in asParent, string &in asChild, int alState)
{
	SetSwingDoorLocked("DoorSafe", true, true);
}

void SwingDoorOpenOrb(string &in asItem)
{
	SetEntityActive("RandomMonster", false);
	SetLightVisible("Orb_Light", false);
	SetSwingDoorLocked("DoorUnsafe", false, true);
	AddTimer("", 0.5, "OpenDoorSlightly");
	}
	
	void OpenDoorSlightly(string &in asTimer)
		{
        SetSwingDoorClosed("DoorUnsafe", false, false);
        SetSwingDoorDisableAutoClose("DoorUnsafe", true);
        PlaySoundAtEntity("creak", "joint_door_move_special.snt", "DoorUnsafe", 1, false);
        AddTimer("", 2, "TimerStopSound");
        AddTimer("DoorUnsafe", 0, "TimerMoveDoor");
}
 
void TimerMoveDoor(string &in asTimer)
{
        if(GetLocalVarInt("VarDoor") == 10) return;
        AddLocalVarInt("VarDoor", 1);
 
        AddTimer(asTimer, 0.03, "TimerMoveDoor");
 
        AddPropForce(asTimer, -70, 0, 0, "world");
}
 
void TimerStopSound(string &in asTimer)
{
        StopSound("creak", 0.4);

}

void Locked(string &in asEntity)
{
	if(GetSwingDoorLocked(asEntity) == true)
	{
		SetMessage("Messages", "Locked", 1);
	}
}

void Locked2(string &in asEntity)
{
	if(GetSwingDoorLocked(asEntity) == true)
	{
		SetMessage("Messages", "Never", 1);
	}
}

//////////////////////////////////////////////////////////////////////////////////////	
//Sanity Loss
//////////////////////////////////////////////////////////////////////////////////////

void SanityLoss(string &in asEntity, int alState)
{
	GiveSanityDamage(30, true);
}

//////////////////////////////////////////////////////////////////////////////////////	
//Spawn SE
//////////////////////////////////////////////////////////////////////////////////////

void Spawn(string &in item)
{
	AddTimer("", 2, "SpawnSEHammer");
}

void SpawnSEHammer(string &in asTimer)
{
	SetLocalVarInt("P2Check", 2);
	CheckPoint ("", "SpawnSE", "Reset2", "DeathHint", "Run");
	SetEntityActive("FastSE", true);
	ShowEnemyPlayerPosition("FastSE");
	AddTimer("", 3, "BreakDoor");
}

void BreakDoor(string &in asTimer)
{
	SetPropHealth("VeryBreakableDoor", 0);
	AddQuest("Monster", "NewMonster");
}

//////////////////////////////////////////////////////////////////////////////////////	
//Hammer Animation
//////////////////////////////////////////////////////////////////////////////////////
 
void HammerAnimation(string &in asItem, string &in asEntity)
{
        SetEntityActive("ObjectHammer", true);
       
        swings = 1;
       
        StartPlayerLookAt("ObjectHammer", 2, 2, "");
       
        AddTimer("movehammer", 0.1, "TimerMoveHammer");
        AddTimer("hammersound", 0.27, "TimerMoveHammer");
        AddTimer("resethammer", 0.4, "TimerMoveHammer");
        AddTimer("repeat", 0.6, "TimerMoveHammer");
       
        PlaySoundAtEntity("", "15_rock_break", "FakeWall", 0, false);
        PlaySoundAtEntity("", "15_make_hammer", "Player", 0.25, false);
        PlaySoundAtEntity("", "03_rock_move", "FakeWall", 2, false);
}
 
void TimerMoveHammer(string &in asTimer)
{
        if(asTimer == "movehammer") SetMoveObjectState("ObjectHammer", 0.4);
       
        else if(asTimer == "hammersound") {
                StopPlayerLookAt();
                PlaySoundAtEntity("", "impact_rock_high", "Player", 0, false);
                PlaySoundAtEntity("", "15_hammer", "Player", 0, false);
        }
       
        else if(asTimer == "resethammer") SetMoveObjectState("ObjectHammer", 0);
       
        if(swings < 3 && asTimer == "repeat") 
		{
                AddTimer("movehammer", 0.01, "TimerMoveHammer");
                AddTimer("hammersound", 0.17, "TimerMoveHammer");
                AddTimer("resethammer", 0.3, "TimerMoveHammer");
                AddTimer("repeat", 0.5, "TimerMoveHammer");
               
                swings = swings + 1;
        }
       
        else if(swings == 3 && asTimer == "repeat") {
                AddTimer("movehammer", 0.2, "TimerMoveHammer");
                AddTimer("hammersound", 0.37, "TimerMoveHammer");
                AddTimer("resethammer", 0.5, "TimerMoveHammer");
                AddTimer("repeat", 0.8, "TimerMoveHammer");
               
                AddTimer("break", 0.42, "TimerMoveHammer");
               
                swings = swings + 1;
        }
       
        else if(swings == 4 && asTimer == "break") FinishAnimation();
       
        else if(swings == 4 && asTimer == "repeat") SetEntityActive("ObjectHammer", false);
}
 
void FinishAnimation()
{
        SetPropHealth("FakeWall", 0);
		SetEntityActive("FakeWall", false);
		SetEntityActive("Woody", false);
		SetEntityActive("Destroyed", true);
        GiveSanityBoost();
        PlaySoundAtEntity("", "03_break_wall", "FakeWall", 0, false);
		CreateParticleSystemAtEntity("Fog", "ps_area_fog_sewer.ps", "FakeWall", true);
}

//////////////////////////////////////////////////////////////////////////
//OnLeave
//////////////////////////////////////////////////////////////////////////
void OnLeave()
{
int load = RandInt(0, 19);
if(load == 16) SetupLoadScreen("Loading", "LoadScreen1", 0,"loading_screen1.jpg");
if(load == 1) SetupLoadScreen("Loading", "LoadScreen2", 0, "loading_screen2.jpg");
if(load == 2) SetupLoadScreen("Loading", "LoadScreen3", 0, "loading_screen3.jpg");
if(load == 3) SetupLoadScreen("Loading", "LoadScreen4", 0,"loading_screen4.jpg");
if(load == 4) SetupLoadScreen("Loading", "LoadScreen5", 0,"loading_screen5.jpg");
if(load == 5) SetupLoadScreen("Loading", "LoadScreen6", 0,"loading_screen6.jpg");
if(load == 6) SetupLoadScreen("Loading", "LoadScreen7", 0,"loading_screen7.jpg");
if(load == 7) SetupLoadScreen("Loading", "LoadScreen8", 0,"loading_screen8.jpg");
if(load == 8) SetupLoadScreen("Loading", "LoadScreen9", 0,"loading_screen9.jpg");
if(load == 9) SetupLoadScreen("Loading", "LoadScreen10", 0,"loading_screen10.jpg");
if(load == 10) SetupLoadScreen("Loading", "LoadScreen11", 0,"loading_screen11.jpg");
if(load == 11) SetupLoadScreen("Loading", "LoadScreen12", 0,"loading_screen12.jpg");
if(load == 12) SetupLoadScreen("Loading", "LoadScreen13", 0,"loading_screen13.jpg");
if(load == 13) SetupLoadScreen("Loading", "LoadScreen14", 0,"loading_screen14.jpg");
if(load == 14) SetupLoadScreen("Loading", "LoadScreen15", 0,"loading_screen15.jpg");
if(load == 15) SetupLoadScreen("Loading", "LoadScreen16", 0,"loading_screen16.jpg");
if(load == 0) SetupLoadScreen("Loading", "LoadScreen17", 0,"loading_screen17.jpg");
if(load == 17) SetupLoadScreen("Loading", "LoadScreen18", 0,"loading_screen18.jpg");
if(load == 18) SetupLoadScreen("Loading", "LoadScreen19", 0,"loading_screen19.jpg");
if(load == 19) SetupLoadScreen("Loading", "LoadScreen20", 0,"loading_screen20.jpg");
CompleteQuest("Monster", "NewMonster");
}
