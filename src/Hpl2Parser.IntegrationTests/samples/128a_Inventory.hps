////////////////////////////

/////STRING & CONTAINER/////
void CombineContainerAndString(string &in asItemA, string &in asItemB)
{
	PlayGuiSound("26_string_on_glass.ogg", 0.8f);
	
	RemoveItem(asItemA); RemoveItem(asItemB);
	
	GiveItem("ropeglass", "Puzzle", "ropeglass", "glass_container_string.tga", 0);		
}

/////HAMMER & CHIPPER/////
void hammernchipper(string &in asItemA, string &in asItemB)
{
PlayGuiSound("15_make_hammer", 1.0f);
 RemoveItem(asItemA); RemoveItem(asItemB);
 GiveItem("stone_hammer_chipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0); 
}

/////MEDiCINE/////
void CombineMedicine(string &in asItemA, string &in asItemB)
{
        RemoveItem(asItemA);
        RemoveItem(asItemB);
        PlayGuiSound("puzzle_add_chemical", 1);
        GiveItem("notdone", "Puzzle", "notdone", "glass_container_mix_done.tga", 1);
} 

void CombineMedicine2(string &in asItemA, string &in asItemB)
{
        RemoveItem(asItemA);
        RemoveItem(asItemB);
        PlayGuiSound("puzzle_add_chemical", 1);
        GiveItem("notdone2", "Puzzle", "notdone2", "glass_container_mix_notdone.tga", 1);
}

void CombineMedicine3(string &in asItemA, string &in asItemB)
{
        RemoveItem(asItemA);
        RemoveItem(asItemB);
        PlayGuiSound("puzzle_add_chemical", 1);
        GiveItem("medicine", "Puzzle", "medicine", "glass_container_mix_notdone.tga", 1);
        GiveSanityBoostSmall();
}

void CombineMedicineFail(string &in asItemA, string &in asItemB)
{
        PlayGuiSound("player_falldamage_max", 1);
        PlayGuiSound("explosion_rock_large", 1);
        GivePlayerDamage(200, "BloodSplat", false, true);
        SetInventoryMessage("Inventory", "Medicinefail", -1);
} 

/////Explosives/////
void CombineExplosive(string &in asItemA, string &in asItemB)
{
        RemoveItem(asItemA);
        RemoveItem(asItemB);
        PlayGuiSound("puzzle_add_chemical", 1);
        GiveItem("unfinishedexplosive", "Puzzle", "unfinishedexplosive", "bucket_of_tar.tga", 1);
}

void CombineExplosive2(string &in asItemA, string &in asItemB)
{
        RemoveItem(asItemA);
        RemoveItem(asItemB);
        PlayGuiSound("puzzle_add_chemical", 1);
        GiveItem("finishedexplosive", "Puzzle", "finishedexplosive", "bucket_of_tar.tga", 1);
}

 // Run at the start of the game.
void OnGameStart()
 {
/////STRING & CONTAINER/////
AddCombineCallback("containerandstring","string_pile_1" , "glass_container_1", "CombineContainerAndString", false);

/////HAMMER & CHIPPER/////
AddCombineCallback("hammer_chipper", "hammer", "chipper", "hammernchipper", false);

/////MEDiCINE/////
AddCombineCallback("bottle", "blood", "gland", "CombineMedicine", true);
AddCombineCallback("bottle", "bottlea", "notdone", "CombineMedicine2", true);
AddCombineCallback("bottle", "bottleb", "notdone2", "CombineMedicine3", true);
AddCombineCallback("bottle", "blood", "bottlea", "CombineMedicineFail", false);
AddCombineCallback("bottle", "blood", "bottleb", "CombineMedicineFail", false);
AddCombineCallback("bottle", "gland", "bottlea", "CombineMedicineFail", false);
AddCombineCallback("bottle", "gland", "bottleb", "CombineMedicineFail", false);
AddCombineCallback("bottle", "bottlea", "bottleb", "CombineMedicineFail", false);
AddCombineCallback("bottle", "notdone", "bottleb", "CombineMedicineFail", false);

/////MEDiCINE 2/////
AddCombineCallback("bottle", "gland2", "bottlec", "CombineMedicineFail", false);
AddCombineCallback("bottle", "gland2", "bottled", "CombineMedicineFail", false);
AddCombineCallback("bottle", "bottlec", "bottled", "CombineMedicineFail", false);

/////Explosives/////
AddCombineCallback("bottleb", "urn", "bottle1", "CombineExplosive", true);
AddCombineCallback("bottleb", "bottle2", "unfinishedexplosive", "CombineExplosive2", true);
}