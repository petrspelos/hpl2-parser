




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////   HPL Animation Sub-System   ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////// (also known as H.P.L  A.S.S) ///////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Designed & Created by MysteryGooberman (The G.O.A.T)
// Nov. 1, 2023







string[] frames;
int frameIndex = -1;


int X;
int Y;
float Scale;
bool UseRelativeCoordinates;
float Duration;
int frameDelayMax;
int frameDelay = 0;
bool Loop;
bool hasEnded = false;
bool Playing = false;




/// 
/// The following function must be kept in OnUpdate.
/// 

void ASS_AnimationSystem(float deltaTime){

if(Playing == true){

if(frameDelay < frameDelayMax){
	frameDelay++;
}else{

		if(hasEnded==false){

		if(frameIndex==frames.length()-1){
			hasEnded=true;
		}

			
	

		if(hasEnded==false){
			frameIndex++;
		}
		
		if(hasEnded==true){
			
		
		
		
		
			if(Loop == true){
				frameIndex = 0;
				hasEnded=false;
				}
			if(Loop == false){
				ASS_StopAnimation();
				}
			
		}
		
		
		if(frameIndex<=frames.length()){

			ShowScreenImage(frames[frameIndex], X, Y, Scale, UseRelativeCoordinates, frameDelay+deltaTime, 0.0f, 0.0f);
		
			}
	
	
		frameDelay = 0;
	
	
	}
	

	
	
	
	}
}

}


















/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// SCRIPT FUNCTIONS //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////// InitalizeNewAnimation
////// Acts like a constructor. Must be called before each new animation.

void ASS_InitalizeNewAnimation(int Xi, int Yi, float ScaleI, bool UseRelativeCoordinatesI, int frameDelayI, bool loopI)
{
	X=Xi;
	Y=Yi;
	Scale=ScaleI;
	UseRelativeCoordinates=UseRelativeCoordinatesI;
	frameDelayMax = frameDelayI;
	frameDelay = frameDelayMax;
	Loop = loopI;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////// AddFrame
////// Adds a frame to the animation. Each new frame is added at the end of the array, so call this function in-order for each frame.

void ASS_AddFrame(string fileName){

	frames.resize(frames.length() + 1);
	frames[frames.length() - 1] = fileName;
	

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////// PlayAnimation
////// Plays the animation.

void ASS_PlayAnimation(){
	Playing = true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////// PlayAnimation
////// Stops the animation. Should be called before any new animation plays.

void ASS_StopAnimation(){

AddDebugMessage("StopAnimation", false);

	hasEnded=true;
	frameDelayMax=1;
	ShowScreenImage("ASS_EmptyFrame.png", X, Y, Scale, UseRelativeCoordinates, 0.1f, 0.0f, 0.0f);
	ASS_ResetAnimation();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////// ResetAnimation
////// Resets the animation. Likely not used in scripting. It is already called in StopAnimation(). Basically removes all the frames in preparation for a new, different animation.

void ASS_ResetAnimation(){
	Playing = false;
	frames.resize(0);
	hasEnded=false;
	frameIndex = -1;
}
