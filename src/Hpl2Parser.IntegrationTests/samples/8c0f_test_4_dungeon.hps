void OnStart()
{
	ClearSavedMaps();
	
	//PLAYER COLLIDE CALLBACKS
	AddEntityCollideCallback("Player", "area_trigger_lurker", "SpawnLurkerTimer", true, 1);
	AddEntityCollideCallback("Player", "area_lurker_aggressive_2", "LurkerAggressive", false, 1);
	AddEntityCollideCallback("Player", "area_lurker_passive_2", "LurkerPassive", false, 1);
	AddEntityCollideCallback("Player", "AreaLurkerRespawn", "LurkerRespawn", false, 1);
	
	AddEntityCollideCallback("Player", "Area_BarrelRoll", "DoABarrelRoll", true, 1);
	AddEntityCollideCallback("Player", "AreaEndQuest_findExit", "EndQuest_findExit", true, 1);
	
	//PLAYER INTERACT CALLBACKS
	SetEntityCallbackFunc("oil_fake", "TortureScare");
	SetEntityCallbackFunc("note_test4end", "UnlockEnd");
	SetEntityPlayerInteractCallback("area_lever_attach_1", "LeverMissing", false);
	SetEntityPlayerInteractCallback("area_lever_attach_2", "LeverMissing", false);
	SetEntityPlayerInteractCallback("AreaGateHint", "GateHint", false);
	
	//OTHER CALLBACKS
	AddEntityCollideCallback("lever_part_1", "area_lever_attach_1", "DungeonLeversAttach", true, 1);
	AddEntityCollideCallback("lever_part_2", "area_lever_attach_1", "DungeonLeversAttach", true, 1);
	AddEntityCollideCallback("lever_part_1", "area_lever_attach_2", "DungeonLeversAttach", true, 1);
	AddEntityCollideCallback("lever_part_2", "area_lever_attach_2", "DungeonLeversAttach", true, 1);
	AddEntityCollideCallback("lurker", "area_lurker_tp_1", "LurkerTP", false, 1);
	AddEntityCollideCallback("lurker", "area_lurker_tp_2", "LurkerTP", false, 1);
	AddEntityCollideCallback("lurker", "Area_LurkerFall", "LurkerFall", false, 1);
	
	//ONSTART SETUP
	SetPropHealth("door_look", 5);
	SetEntityInteractionDisabled("hatch_well", true);
	SetSwingDoorDisableAutoClose("hatch_well", true);
	for(int i=1; i<7; i++)
	{
		SetPropStaticPhysics("sewer_arched_"+i, true);
		SetPropHealth("sewer_arched_"+i, 20);
		SetPropStaticPhysics("sewer_arched_"+i, false);
	}
	SetLocalVarInt("bothLevers", 0);
	SetLocalVarInt("prisoner_scared", 0);
	
	SetEntityCustomFocusCrossHair("easter_egg_11", "Pick");
	SetEntityPlayerInteractCallback("easter_egg_11", "CollectEasterEgg", true);
}

void OnEnter()
{
	SetMapDisplayNameEntry("test-4-dungeon");
	PlayMusic("02_amb_safe.ogg", true, 1, 1, 1, false);
	AutoSave();
}

void OnLeave()
{
	StopMusic(1, 1);
	SetupLoadScreen("LoadingScreens", "to_testing_center_redux", 0, "");
}

void CollectEasterEgg(string &in asEntity)
{
	PlayGuiSound("pick_orb_piece.snt", 1);
	SetPropActiveAndFade(asEntity, false, 0.35);
	AddGlobalVarInt("easter_eggs", 1);
	SetMessage("EasterEggs", "collected"+GetGlobalVarInt("easter_eggs"), 5);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////Quests & Messages/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void EndQuest_findExit(string &in asParent, string &in asChild, int alState)
{
	CompleteQuest("test4_findExit", "test4_findExit");
}

void GateHint(string &in asEntity)
{
	SetMessage("Actions", "test4gate", 0);
	if(not QuestIsAdded("test4_openGate")) AddQuest("test4_openGate", "test4_openGate");
}

void LeverMissing(string &in asEntity)
{
	SetMessage("Actions", "test4nolever", 0);
	if(not QuestIsAdded("test4_findLevers")) AddQuest("test4_findLevers", "test4_findLevers");
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////Doors & MISC/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void UnlockEnd(string &in asEntity, string &in type)
{
	SetLevelDoorLocked("leveldoor_end", false);
	SetGlobalVarInt("test", 4);
	AutoSave();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////SCARES & EFFECTS//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TortureScare(string &in asEntity, string &in type)
{
	AddPlayerBodyForce(0, 2000, -15000, false);
	SetInventoryDisabled(true);
	SetPlayerJumpDisabled(true);
	SetLocalVarFloat("healthVar", GetPlayerHealth());
	SetLocalVarFloat("sanityVar", GetPlayerSanity());
	SetPlayerSanity(10);
	GiveSanityDamage(4, true);
	SetPlayerHealth(10);
	PlayGuiSound("react_scare.snt", 1);
	AddBodyImpulse("iron_maiden_leftDoor", -1, 0 , 0, "world");
	AddBodyImpulse("iron_maiden_rightDoor", 1, 0 , 0, "world");
	AddTimer("MaidenFreezeTimer", 0.2, "MaidenFreeze");
	SetSwingDoorDisableAutoClose("iron_maiden", false);
	SetSwingDoorClosed("iron_maiden", true, false);
	SetSwingDoorLocked("iron_maiden", true, false);
	PlaySoundAtEntity("bigScream", "15_the_big_scream.snt", "iron_maiden", 0.1, false);
	PlaySoundAtEntity("sc2", "slime_attack_normal_hit.snt", "iron_maiden", 0.1, false);
	AddTimer("TortureScareTimer1", 0.5, "TortureScare1");
	PlayMusic("15_event_prisoner.ogg", false, 10, 0.1, 10, false);
	SetPlayerMoveSpeedMul(0.5);
	SetPlayerRunSpeedMul(0.5);
	SetPlayerLookSpeedMul(0.5);
	SetEntityActive("lurker", false);
	SetEntityActive("block_scare_*", true);
	SetEntityInteractionDisabled("iron_maiden", true);
	StartPlayerLookAt("AreaMaidenLook", 2, 4, "");
	AddTimer("", 5, "TortureFOV");
	FadePlayerFOVMulTo(0.7, 8);
}

void TortureScare1(string &in asTimer)
{
	PlayGuiSound("react_breath.snt", 1);
	SetLocalVarFloat("tortureLenght", 0.0);
	for(int i=1; i<6; i++)
	{
		SetLocalVarFloat("tortureLoop_"+i, RandFloat(0.6, 1.6));
		AddLocalVarFloat("tortureLenght", GetLocalVarFloat("tortureLoop_"+i));
		AddTimer("tortureLoop_"+i, GetLocalVarFloat("tortureLenght"), "TortureEffects");
	}
	AddTimer("TortureScareTimer2", GetLocalVarFloat("tortureLenght")+1.0, "TortureScare2");
}

void TortureEffects(string &in asTimer)
{
	AddPropImpulse("shackles_1", 0, GetLocalVarFloat(asTimer)*3.0, GetLocalVarFloat(asTimer)*-2.0, "world");
	AddPropImpulse("shackles_2", 0, GetLocalVarFloat(asTimer)*3.0, GetLocalVarFloat(asTimer)*-2.0, "world");
	AddPropImpulse("shackles_3", GetLocalVarFloat(asTimer)*-2.0, GetLocalVarFloat(asTimer)*3.0, 0, "world");
	AddPropImpulse("shackles_4", GetLocalVarFloat(asTimer), GetLocalVarFloat(asTimer)*3.0, 0, "world");
	SetPropStaticPhysics("iron_maiden", false);
	AddBodyImpulse("iron_maiden_leftDoor", 0, 0 , 0.5, "world");
	AddBodyImpulse("iron_maiden_rightDoor", 0, 0 , 0.5, "world");
	AddTimer("MaidenFreezeTimer", 0.2, "MaidenFreeze");
	SetEntityActive(asTimer, true);
	PlayGuiSound("react_scare.snt", 1);
	int randSound = RandInt(1, 4);
	PlaySoundAtEntity("sc3_"+asTimer, "chains_monster_man_walk_soft.snt", "shackles_"+randSound, 0.1, false);
	if(randSound == 1) PlayGuiSound("react_breath.snt", 1);
	else if(randSound == 2) PlaySoundAtEntity("sc4_"+asTimer, "21_screams.snt", "iron_maiden", 0.1, false);
	else if(randSound == 3)
	{
		PlaySoundAtEntity("sc5_"+asTimer, "19_inject.snt", "iron_maiden", 0.1, false);
		PlaySoundAtEntity("bigScream", "15_the_big_scream.snt", "iron_maiden", 0.1, false);
	}
	else PlayGuiSound("general_chain_rattle.snt", 1);
	SetPropActiveAndFade("blood_"+asTimer, true, 0.5);
}

void MaidenFreeze(string &in asTimer)
{
	SetPropStaticPhysics("iron_maiden", true);
}

void TortureScare2(string &in asTimer)
{
	ChangePlayerStateToNormal();
	SetPropStaticPhysics("iron_maiden", false);
	SetSwingDoorDisableAutoClose("iron_maiden", true);
	SetSwingDoorClosed("iron_maiden", false, false);
	SetSwingDoorLocked("iron_maiden", false, false);
	AddBodyImpulse("iron_maiden_leftDoor", 1.7, 0 , -1.7, "world");
	AddBodyImpulse("iron_maiden_rightDoor", -1.7, 0 , -1.7, "world");
	SetPlayerSanity(GetLocalVarFloat("sanityVar"));
	GiveSanityDamage(20, true);
	PlayGuiSound("24_iron_maiden.snt", 1);
	PlayGuiSound("react_scare.snt", 1);
	SetEntityActive("block_maiden", false);
	SetEntityActive("block_scare_*", false);
	AddTimer("TortureNormalTimer", 1.5, "TortureNormal");
}

void TortureNormal(string &in asTimer)
{
	SetPlayerMoveSpeedMul(1);
	SetPlayerRunSpeedMul(1);
	SetPlayerLookSpeedMul(1);
	FadePlayerFOVMulTo(1, 2);
	SetPlayerJumpDisabled(false);
	SetPlayerHealth(GetLocalVarFloat("healthVar"));
	StopSound("bigScream", 0.1);
	SetEntityActive("lurker", true);
	SetEntityInteractionDisabled("iron_maiden", false);
	StopPlayerLookAt();
	SetInventoryDisabled(false);
	//AutoSave();
}

void PrisonersLookTimer(string &in asEntity, int alState)
{
	AddTimer("TimerPrisonersScare", 2.2, "PrisonersScare");
	PlayGuiSound("scare_tingeling_rev2.snt", 1);
	PlayGuiSound("react_scare.snt", 1);
}

void PrisonersScare(string &in asTimer)
{
	for(int i=1; i<10; i++) SetPropActiveAndFade("hanging_prisoner_"+i, false, 0.4);
	PlayGuiSound("03_in_a_bottle.snt", 1);
	StartScreenShake(0.2, 0.2, 0.01, 0.01);
	GiveSanityDamage(20, true);
}

void DoABarrelRoll(string &in asParent, string &in asChild, int alState)
{
	SetPropStaticPhysics("barrel_roll", false);
	AddTimer("", 1.3, "BarrelScare");
}

void BarrelScare(string &in asTimer)
{
	PlayGuiSound("react_scare.snt", 1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////LURKER/////////////////////////////////////////////////////////////////////////////////////////////////

void SpawnLurkerTimer(string &in asParent, string &in asChild, int alState)
{
	AddTimer("lurkerSpawnTimer", 1.7, "SpawnLurker");
}

void SpawnLurker(string &in asTimer)
{
	SetEntityActive("lurker", true);
	PlayGuiSound("react_scare.snt", 1);
	CheckPoint("CheckPoint_Lurker", "AreaCheckpoint_Lurker", "Respawn", "Deaths", "test4lurker");
}

void LurkerAggressive(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("lurker", true);
	SetEntityActive("area_lurker_aggressive_2", false);
	SetEntityActive("area_lurker_passive_2", true);
}

void LurkerPassive(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("lurker", false);
	SetEntityActive("area_lurker_aggressive_2", true);
	SetEntityActive("area_lurker_passive_2", false);
}

void LurkerTP(string &in asParent, string &in asChild, int alState)
{
	if(asChild=="area_lurker_tp_1") SetEntityPos(asParent, GetEntityPosX(asParent), GetEntityPosY(asParent), GetEntityPosZ(asParent)-2.2);
	else SetEntityPos(asParent, GetEntityPosX(asParent), GetEntityPosY(asParent), GetEntityPosZ(asParent)+1.0);
}

void LurkerFall(string &in asParent, string &in asChild, int alState)
{
	TeleportEnemyToNode("lurker", "PathNodeArea_1", true);
}

void DespawnDoor(string &in asEntity, string &in type)
{
	if(type=="Break") SetPropActiveAndFade(asEntity+"_broken", false, 0.5);
}

void ReactivateLurker(string &in asEntity, string &in type)
{
	SetEntityActive("lurker", true);
}

void Respawn(string &in asName, int alCount)
{
	SetEntityActive("AreaLurkerRespawn", true);
	SetEntityActive("area_lurker_passive_2", false);
	SetEntityActive("area_lurker_aggressive_2", true);
}

void LurkerRespawn(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaLurkerRespawn", false);
	SetEntityActive("lurker", true);
	SetEntityActive("area_lurker_passive_2", true);
	SetEntityActive("area_lurker_aggressive_2", false);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////MECHANISMS////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DungeonLeversAttach(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(asParent, false);
	if(asChild=="area_lever_attach_1")
	{
		SetEntityActive("area_lever_attach_1", false);
		SetEntityActive("lever_mount_1", false);
		SetEntityActive("lever_full_1", true);
		RemoveEntityCollideCallback("lever_part_1", "area_lever_attach_1");
		RemoveEntityCollideCallback("lever_part_2", "area_lever_attach_1");
	}
	else
	{
		SetEntityActive("area_lever_attach_2", false);
		SetEntityActive("lever_mount_2", false);
		SetEntityActive("lever_full_2", true);
		RemoveEntityCollideCallback("lever_part_1", "area_lever_attach_2");
		RemoveEntityCollideCallback("lever_part_2", "area_lever_attach_2");
	}
	
	if(GetLocalVarInt("prisoner_scared")==0)
	{
		for(int i=1; i<10; i++) SetPropActiveAndFade("hanging_prisoner_"+i, true, 0.3);
		SetEntityPlayerLookAtCallback("area_prisoners_look", "PrisonersLookTimer", true);
		SetLocalVarInt("prisoner_scared", 1);
		if(not QuestIsAdded("test4_findLevers")) AddQuest("test4_findLevers", "test4_findLevers");
	}
	else CompleteQuest("test4_findLevers", "test4_findLevers");
}

void DungeonLeverPull(string &in asEntity, int alState) 
{
	if(alState==1)
	{
		SetLeverStuckState(asEntity, 1, true);
		AddLocalVarInt("bothLevers", 1);
		PlaySoundAtEntity("leverSound", "joint_large_wood_min_max.snt", asEntity, 1, false);
		SetPropStaticPhysics(asEntity, true);
		if(GetLocalVarInt("bothLevers")==2)
		{
			SetMoveObjectState("gate_exit", 1);
			SetEntityActive("AreaGateHint", false);
			SetPlayerSanity(GetPlayerSanity()-0.1);
			GiveSanityBoost();
			PlayMusic("02_puzzle.ogg", false, 1, 0.2, 2, false);
			PlayGuiSound("unlock_door.snt", 1);
			for(int i=1; i<4; i++) PlaySoundAtEntity("gateSound"+i, "joint_metal_chain.snt", "area_gatesound_"+i, 0.7, true);
			CompleteQuest("test4_openGate", "test4_openGate");
			AddTimer("autosave", 0.7, "AutosaveTimer");
		}
	}
}

void AutosaveTimer(string &in asTimer)
{
	AutoSave();
}