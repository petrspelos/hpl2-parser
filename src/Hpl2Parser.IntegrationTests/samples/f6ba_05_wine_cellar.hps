
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "05_wine_cellar";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
int[] gviEasierOilPotionsCodesArray = {1};
int[] gviEasierHealthPotionsCodesArray = {1, 2, 3};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {3, 4, 5, 6, 7, 8, 9, 10};
int[] gviNormalOilPotionsCodesArray = {0};
int[] gviNormalHealthPotionsCodesArray = {2};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {2, 4, 11, 14, 16};
int[] gviToughOilPotionsCodesArray = {0};
int[] gviToughHealthPotionsCodesArray = {2};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {14};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {2};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

//CURRENT MAP SPECIFIC
string[] gvsDangerousLampsArray = {
	"candlestick01_5", "candlestick01_4", "torch_static01_7", "torch_static01_8", "torch_static01_9", "torch_static01_10", 
	"torch_static01_11", "torch_static01_3", "candlestick02_1", "candlestick02_3", "candlestick01_2", "torch_static01_4", 
	"candlestick01_3"
};

float GetEntityPlayerDistance(string asEntity)
{
	float fPlayerPosX = GetPlayerPosX();
	float fPlayerPosY = GetPlayerPosY();
	float fPlayerPosZ = GetPlayerPosZ();
	float fEntityPosX = GetEntityPosX(asEntity);
	float fEntityPosY = GetEntityPosY(asEntity);
	float fEntityPosZ = GetEntityPosZ(asEntity);
	float fDistance = MathSqrt(MathPow((fEntityPosX - fPlayerPosX), 2.0f) + MathPow((fEntityPosY - fPlayerPosY), 2.0f) + MathPow((fEntityPosZ - fPlayerPosZ), 2.0f));
	return fDistance;
}

void OnLampStateChange(string asEntity, string asType)
{
	string[] vsDangerousEnemiesArray = {"grunt_normal_1"};
	
	if(asType == "OnIgnite")
	{
		if(GetToughModeOn() >= 1)
		{
			for(int i=0; i<vsDangerousEnemiesArray.length(); i++)
			{
				string sEnemyName = GetStringWithExtraModesSuffix(vsDangerousEnemiesArray[i]);
				string sEnemyState = GetEnemyStateName(sEnemyName);
				
				if(sEnemyState != "Idle" && sEnemyState != "GoHome" && sEnemyState != "Dead" && sEnemyState != "NULL" && sEnemyState != "")
				{
					if((GetToughModeOn() == 1 && GetEntityPlayerDistance(sEnemyName) <= 20.0f) || (GetToughModeOn() >= 2))
					{
						AlertEnemyOfPlayerPresence(sEnemyName);
						AddDebugMessage("DEBUG: Enemy " + sEnemyName + " is now in alert state!", false);
						return;
					}
				}
			}
		}
		
		AddDebugMessage("DEBUG: Could not trigger enemy alert from enviroment lamp lit!", false);
	}
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//////////////////////
//BEGIN BLOCKED DOOR//
/*Move wooden barrel to unlock door
 */
void FuncUnlockDoor(string &in asParent, string &in asChild, int alState)
{
	SetSwingDoorLocked("cellar_wood01_3", false, false);
	
	/*DEBUG
	 */
	AddDebugMessage("UnlockDoor!", true);
}
//END BLOCKED DOOR//
////////////////////


////////////////////////////////
//BEGIN MOANING & CREAK HORROR//
/*Start the creak sounds + ps when entering basement, stop them when leaving the basement/area
 */
void FuncMoanHorrors(string &in asParent, string &in asChild, int alState)
{
	float fMoan = RandFloat(5.5f,15.5f);
	
	AddTimer("moanTimer", 4.5f+fMoan, "FuncMoanTimer");	
	AddTimer("stepTimer", 4.5f, "FuncMoanTimer");	
	
	PlaySoundAtEntity("moanSoundx", "scare_male_terrified5.snt", "Player", 0.0f, false);
	AddTimer("sanity", 0.7f, "TimerSanity");
	
	/*DEBUG
	 */
	AddDebugMessage("Begin moaning sounds", true);
}
/*Random placment of moan at random time
 */
void FuncMoanTimer(string &in asTimer)
{
	int iMoan = RandFloat(1, 9);	
	float fMoan = RandFloat(5.5f,15.5f);
	
	if(asTimer == "moanTimer") {
		PlaySoundAtEntity("moanSound"+iMoan, "scare_male_terrified.snt", "HorrorMoan_"+iMoan, 0.0f, false);
		
		AddTimer("moanTimer", 6.5f+fMoan, "FuncMoanTimer");
		
	} else if(asTimer == "stepTimer") {
		iMoan = RandFloat(1, 6);	
	
		PlaySoundAtEntity("stepSound"+iMoan, "scare_steps_big.snt", "HorrorMoan_"+iMoan, 0.0f, false);
		
		AddTimer("stepTimer", 7.5f+fMoan, "FuncMoanTimer");
	}	

	/*DEBUG
	 */
	AddDebugMessage("Now moaning in area: "+iMoan, false);
}
/*Random placment of creak at random time
 */
void CreakTimer(string &in asTimer)
{
	int iCreak = RandFloat(1, 12);	
	float fCreak = RandFloat(1.5f,7.5f);
	
	//ADD GRUNTING FROM GRUNT ENEMY
	PlaySoundAtEntity("creakSound"+iCreak, "scare_wood_creak_mix", "HorrorCreak_"+iCreak, 0.0f, false);
	CreateParticleSystemAtEntity("creakPS"+iCreak, "ps_dust_falling_small", "HorrorCreak_"+iCreak, false);
		
	AddTimer("creak", 0.5f+fCreak, "CreakTimer");
		
	/*DEBUG
	 */
	AddDebugMessage("Now creaking in area: "+iCreak, false);
}
void TimerSanity(string &in asTimer)
{
	GiveSanityDamage(10, true);
}
//END MOANING & CREAK HORROR//
//////////////////////////////


/////////////////////////////////////////////////////////////////
//BEGIN GRUNT ACTIVATION/DEACTIVATION(GRUNTS REMOVED FROM LEVEL//
/*When picking oil in barrel room slam door !PICK CHEMICAL INSTEAD!
 */
void PickOil(string &in asEntity, string &in asType)
{
	//SetSwingDoorClosed("cellar_wood01_4", false, false);
	//SetSwingDoorDisableAutoClose("cellar_wood01_4", true);
	
	//AddPropImpulse("cellar_wood01_4", 2.0f, 0, 0, "World");
	
	/*if(!GetSwingDoorClosed("cellar_wood01_1"))
		PlaySoundAtEntity("SlamDoor","scare_slam_door.snt", "cellar_wood01_1", 0, false);
		
	SetSwingDoorClosed("cellar_wood01_1", true, true);
	PlaySoundAtEntity("gruntgruff", "amb_idle", "AreaGruntSound1", 0.0f, false);
	
	AddTimer("sanity", 1, "TimerSanity");

	PlaySoundAtEntity("PlayerScare","scare_tingeling.snt", "Player", 0, false);*/
}
/*Second grunt encounter
 */
void CollideActivateGrunt(string &in asParent, string &in asChild, int alState)
{
	SetSwingDoorClosed("cellar_wood01_1", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_1", true);
	
	AddPropImpulse("cellar_wood01_1", -2.0f, 0, 0, "World");
}
//END GRUNT ACTIVATION/DEACTIVATION//
/////////////////////////////////////


//////////////////////////////////////////////////
//BEGIN DEBRIS FALL DOWN AND LOCK PLAYER IN ROOM//
/*Three areas decide which barrel on the loft should fall down on players head during debris event
 */
void CollideBlockDoor(string &in asParent, string &in asChild, int alState)
{
	SetLocalVarString("WhatBarrel", asChild);
}
/*When Picking the chem jar(it was a coin bag ...) in the room begin the debris event
 */
void PickCoin(string &in asEntity, string &in asType)
{
	SetSwingDoorClosed("cellar_wood01_7", true, false);
	AddPropImpulse("wood_beam_1", 1.7f, 0, 0, "World");
	AddPropImpulse("wood_beam_2", -1.7f, 0, 0, "World");
	
	SetEntityActive("AreaGiveSanity", true);
	
	AddTimer("activaterocks", 1.0f, "TimerActiveRocks");
	AddTimer("TimerRockEvents", 0.1f, "TimerRockEvents");
	
	AddGlobalVarInt("ChemJars",1);
	
	SetEntityActive("InsanityArea_2", true);
	
	SetEntityActive("AreaBlockDoor_1", false);
	SetEntityActive("AreaBlockDoor_2", false);
	SetEntityActive("AreaBlockDoor_3", false);
	
	SetPlayerCrouchDisabled(true);
	SetPlayerJumpDisabled(true);
	
	FadeLightTo("PointLight_31", 0,0,0,0, -1, 1);
	
	PlaySoundAtEntity("CaveInMonsterSound", "04_warn", "Player", 0, false);
	
	SetPlayerActive(false);
	
	if(GetPlayerLampOil() < 5)
		SetPlayerLampOil(5.0f);
		
	if(GetLanternActive() == false)
		SetLanternActive(true, false);
}
void TimerActiveRocks(string &in asTimer)
{
	for(int i=1;i<=5;i++) SetEntityActive("Rock_"+i, true);
}
void TimerRockEvents(string &in asTimer)
{	
	/*Configurables
	 */
	int iMaxEventStep = 16;		//How many steps there are in the switch event
	float fEventSpeed = 0.5f;	//The default time between steps in an event
	
	/*Helpers - Do not edit
	 */
	string sEvent = asTimer;	//Using first timer name for variable, timer name & callback for the timer that loops
	AddLocalVarInt(sEvent, 1);	//What step to play in the event
	
	switch(GetLocalVarInt(sEvent)){
		case 1:
			PlayMusic("05_event_falling.ogg", false, 0.7f, 0, 10, false);
			PlaySoundAtEntity("wind", "01_whirl", "Player", 2.0f, false);
			PlaySoundAtEntity("rumble", "general_rock_rumble", "Player", 1.0f, false);
			StartScreenShake(0.1, 4, 0.75f,2.25f);
			CreateParticleSystemAtEntity("windPS", "ps_dust_whirl_large", "Player", false);
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerRunSpeedMul(0);
			SetPlayerLookSpeedMul(0.8f);
		break;
		case 2:
			SetPlayerMoveSpeedMul(0.25f);
			SetPlayerLookSpeedMul(0.6f);
			
		break;
		case 3:
			SetLampLit("candlestick02_1", false, true);
			SetLampLit("torch_static01_1", false, true);
			
			//FadeLightTo("PointLight_21", 0, 0, 0, 0, 0, 12);
			SetPlayerMoveSpeedMul(0.1f);
			SetPlayerLookSpeedMul(0.4f);
			PlaySoundAtEntity("breakrock", "05_rock_fall", "cellar_wood01_7", 0, false);
			PlaySoundAtEntity("breakrock2", "05_rock_fall_2", "cellar_wood01_7", 0, false);
			CreateParticleSystemAtEntity("rockPS", "ps_break_mansionbase_wall", "cellar_wood01_7", false);
			StartPlayerLookAt("cellar_wood01_7", 5, 5, "");
		break;
		case 4:
			StopSound("wind", 4);
			StopSound("rumble", 4);
			SetPlayerLookSpeedMul(0.2f);
			PlaySoundAtEntity("player_breath", "react_breath", "Player", 0, false);	
		break;
		case 5:
			SetPlayerLookSpeedMul(0.1f);
			PlaySoundAtEntity("barrelroll", "roll_wood", "Barrel"+GetLocalVarString("WhatBarrel"), 0.1, false);
		break;
		case 6:
			StartPlayerLookAt("Barrel"+GetLocalVarString("WhatBarrel"), 4, 4, "");
			AddPropImpulse("Barrel"+GetLocalVarString("WhatBarrel"), 0, 0, -2.5, "World");
			StopSound("barrelroll", 1);
		break;
		case 7:
			PlaySoundAtEntity("player_shock", "react_scare", "Player", 0, false);
			GiveSanityDamage(10, false);
			fEventSpeed = 0.55f;
		break;
		case 8:
			PlaySoundAtEntity("player_hit", "player_falldamage_max", "Player", 0, false);
			GivePlayerDamage(25.0f, "BloodSplat", false, false);
			StopMusic(6, 0);
			StopSound("amb_sound1", 6);
			StopSound("amb_sound2", 6);
			FadeOut(1.0f);
			fEventSpeed = 0.15f;
			
			SetLampLit("torch_static01_3", false, true);
			SetLampLit("candlestick02_3", false, true);
		break;
		case 9:
			PlaySoundAtEntity("player_fall_to_ground", "player_bodyfall", "Player", 0, false);
			MovePlayerHeadPos(0, -1.1f, 0, 8, 0.5f);
			StartPlayerLookAt("candlestick02_1", 3, 3, "");
			FadePlayerRollTo(-60, 5, 5);
			
			
			SetLanternActive(false, false);
			SetLanternDisabled(true);
						
			for(int i=1;i<=3;i++) AddPropImpulse("BarrelAreaBlockDoor_"+i, 1, 2, 2, "World");
			fEventSpeed = 2.0f;
		break;
		case 10:
			SetPlayerActive(false);
			PlaySoundAtEntity("blackcloud", "05_cloud_swarm", "AreaBlockDoor_2", 24, false);
			PlaySoundAtEntity("creak", "00_creak", "AreaBlockDoor_2", 4, false);
			
			PlaySoundAtEntity("CaveInMonsterSound", "04_warn", "Player", 0, false);
			
			SetEntityInteractionDisabled("BarrelAreaBlockDoor_1", false);
			SetEntityInteractionDisabled("BarrelAreaBlockDoor_2", false);
			SetEntityInteractionDisabled("BarrelAreaBlockDoor_3", false);
			
			fEventSpeed = 4.0f;
		break;
		case 11:
			FadeSepiaColorTo(0.5f, 0.025f);
			FadeRadialBlurTo(0.1f, 0.025f);
			SetRadialBlurStartDist(0.2f);
			//SetLampLit("candlestick02_1", true, false);
			StopSound("blackcloud", 12);
			StopSound("creak", 6);
			
			for(int i=1;i<=3;i++) AddPropImpulse("BarrelAreaBlockDoor_"+i, 0, 0.1f, 0, "World");	//To fix hanging in mid air
			
			fEventSpeed = 3.0f;
		break;
		case 12:
			FadeIn(1.5f);
			SetPlayerActive(true);

			SetPlayerLookSpeedMul(0.2f);
			PlaySoundAtEntity("reactpant", "react_pant", "AreaBlockDoor_2", 0.5f, false);
			fEventSpeed = 3.0f;
		break;
		case 13:
			SetPlayerLookSpeedMul(0.4f);
			PlayMusic("04_amb", true, 1, 10, 0, true);
			PlaySoundAtEntity("amb_sound1", "05_amb1", "AreaAmb", 10, true);
			PlaySoundAtEntity("amb_sound2", "05_amb2", "AreaAmb", 10, true);
			PlaySoundAtEntity("player_get_up", "player_climb", "Player", 0, false);
			FadePlayerRollTo(0, 80, 80);
			MovePlayerHeadPos(0, 0, 0, 1, 0.5f);
			FadeSepiaColorTo(0, 0.01f);
			FadeRadialBlurTo(0, 0.01f);
			SetPlayerMoveSpeedMul(0.4f);
			SetPlayerRunSpeedMul(0.4f);
			
			SetLanternDisabled(false);	
			
			SetPlayerCrouchDisabled(false);
			SetPlayerJumpDisabled(false);
			
			fEventSpeed = 1.0f;
		break;
		case 14:
			SetPlayerLookSpeedMul(0.6f);
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
			fEventSpeed = 1.0f;
		break;
		case 15:
			StopPlayerLookAt();
			SetPlayerLookSpeedMul(0.8f);
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
			fEventSpeed = 1.0f;
		break;
		case 16:
			SetPlayerLookSpeedMul(1.0f);
			SetPlayerMoveSpeedMul(1.0f);
			SetPlayerRunSpeedMul(1.0f);
		break;
	}
	
	if(GetLocalVarInt(sEvent) <= iMaxEventStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
/*The player can attach a ladder to get up on the loft
 */
void CollideStickLadder(string &in asArea, string &in asBody)
{
	return; //Disable event as you can't crouch on ladder any longer.
	
	SetEntityActive("LadderArea_1", true);
}
/*When on the loft begin a strange event with light
 */
void CollideLoft(string &in asParent, string &in asChild, int alState)
{
	return; //Disable event as you can't crouch on ladder any longer.
	
	AddTimer("L1", 1, "TimerLoft");
	
	StartScreenShake(0.01, 6, 1.5f,2.5f);
	PlaySoundAtEntity("cloud", "05_cloud", "Player", 6, false);
	PlaySoundAtEntity("orb", "03_orb_loop", "AreaLoftEnd", 6, false);
	
	/*DEBUG
	 */
	AddDebugMessage("Collide "+asChild, false);
}
void TimerLoft(string &in asTimer)
{	
	if(asTimer == "L1"){
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
		FadeLightTo("LoftLight_1", -1, -1, -1, -1, 7, 1.25f);
		AddTimer("L2", 1, "TimerLoft");
	}
	else if(asTimer == "L2"){
		FadeLightTo("LoftLight_2", -1, -1, -1, -1, 7, 1.25f);
		FadeLightTo("LoftLight_1", -1, -1, -1, -1, 0,8);
		AddTimer("L3", 1, "TimerLoft");
	}
	else if(asTimer == "L3"){
		FadeLightTo("LoftLight_3", -1, -1, -1, -1, 7, 1.25f);
		FadeLightTo("LoftLight_2", -1, -1, -1, -1, 0, 6);
		AddTimer("L4", 1, "TimerLoft");
	}
	else if(asTimer == "L4"){
		StopSound("cloud", 6);
		StopSound("orb", 8);
		FadeLightTo("LoftLight_4", -1, -1, -1, -1, 7, 1.25f);
		FadeLightTo("LoftLight_3", -1, -1, -1, -1, 0, 8);
		AddTimer("L5", 1, "TimerLoft");
	}
	else if(asTimer == "L5"){
		FadeLightTo("LoftLight_4", -1, -1, -1, -1, 0, 8);
		FadeRadialBlurTo(0, 0.04f);

		CreateParticleSystemAtEntity("bottlePS", "ps_ghost_release", "AreaLoftEnd", false);
		PlaySoundAtEntity("bottle", "03_in_a_bottle", "AreaLoftEnd", 0, false);
	}
	
	/*DEBUG
	 */
	AddDebugMessage("Loft Timer "+asTimer, false);
}
/*Give a hint about push force when touching debris
 */
void GiveHintPush(string &in asEntity)
{
	GiveHint("PushHint", "Hints", "PushHint", 0);
}
void CollideGiveSanity(string &in asParent, string &in asChild, int alState)
{
	GiveSanityBoostSmall();
}
//END DEBRIS FALL DOWN AND LOCK PLAYER IN ROOM//
////////////////////////////////////////////////


void PickChemical(string &in asEntity, string &in asType)
{
	//Turn off a light used to make the chemical more visible.
	if(asEntity == "Chemical_1") FadeLightTo("PointLight_32", 0,0,0,0, -1, 2);
	if(asEntity == "Chemical_3") FadeLightTo("PointLight_33", 0,0,0,0, -1, 2);
	if(asEntity == "Chemical_4") FadeLightTo("PointLight_34", 0,0,0,0, -1, 2);
	
	
	if(asEntity == "Chemical_3")
	{
		//if(!GetSwingDoorClosed("cellar_wood01_1"))
			//PlaySoundAtEntity("SlamDoor","scare_slam_door.snt", "cellar_wood01_1", 0, false);
		
		//SetSwingDoorClosed("cellar_wood01_1", true, true);
		
		if(!GetSwingDoorClosed("cellar_wood01_1")){
			PlaySoundAtEntity("SlamDoor","joint_door_move.snt", "cellar_wood01_1", 0.5f, false);
			
			AddDebugMessage("Hey!", false);
			
			AddTimer("doorforce1", 0.2f, "TimerDoorForce");
			AddTimer("doorforce2", 0.4f, "TimerDoorForce");
			AddTimer("doorforce3", 0.6f, "TimerDoorForce");
			AddTimer("doorforce4", 0.8f, "TimerDoorForce");
			AddTimer("doorforce5", 1.0f, "TimerDoorForce");
		}
		
		PlayEnemySoundAtEntity("notice_long.snt", "AreaGruntSound1", "grunt");
	
		AddTimer("sanity", 1, "TimerSanity");

		PlaySoundAtEntity("PlayerScare","scare_tingeling.snt", "Player", 0, false);
	}
	
	AddGlobalVarInt("ChemJars",1);
	
	CompleteQuest("04ChemicalsMoved", "04ChemicalsMoved");
	
	if(GetGlobalVarInt("ChemJars") == 4){
		PlayMusic("02_puzzle.ogg", false, 0.7f, 0, 10, false);
		GiveSanityBoost();
		if(GetLocalVarInt("EnemyEventDone") == 1 && GetEasyModeOn() <= 1)
			SetEntityActive("AreaExtraEnemy", true);
	}
}
void TimerDoorForce(string &in asTimer)
{
	AddPropForce("cellar_wood01_1", 200.0f, 0.0f, 200.0f, "World");

	AddDebugMessage("Hey!", false);
	if(asTimer == "doorforce5")
		StopSound("SlamDoor", 1.0f);
}
void PickNoteTrans(string &in asEntity, string &in asType)
{
	PlayMusic("05_paper_transformation.ogg", false, 0.7f, 0, 10, false);
}


////////////////////////////////////////////////////////////
//BEGIN CHAINS AND HANGING CORPSES(CARCASS AS PLACEHOLDERS//
/*Create a blood drip particle and play a blood drip sound a bit later
 */
void TimerBloodDrop(string &in asTimer)
{
	if(asTimer == "AreaEndBlood_1" or asTimer == "AreaEndBlood_2" or asTimer == "AreaEndBlood_3" ){
		PlaySoundAtEntity("blooddrop", "general_blood_drop", asTimer, 0, false);
		AddTimer("AreaBeginBlood_"+GetLocalVarInt("Blood"), 0.1f, "TimerBloodDrop");
	}
	else{
		CreateParticleSystemAtEntity("PSblood", "ps_blood_drop.ps", asTimer, false);
		AddTimer("AreaEndBlood_"+GetLocalVarInt("Blood"), 2.5f, "TimerBloodDrop");
	}

	int iBlood = RandFloat(1,3);
	
	SetLocalVarInt("Blood", iBlood);
}
/*Give the chains a bit of a push to make them swagel in air
*/
void TimerChain(string &in asTimer)
{	
	for(int i=1;i<=6;i++) 
		AddPropForce("invisible_body_"+i, RandFloat(100,300), 0, RandFloat(100,300), "Local");
		
	AddTimer(asTimer, 5, asTimer);
}
/*An area to activate the lookat area in ceiling
 */
void CollideActiveCeiling(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1) SetEntityActive("AreaCeiling", true);
	else if(alState == -1) SetEntityActive("AreaCeiling", false);
}
/*When looking at ceiling and seeing corpses, loose sanity
 */
void LookAtCeiling(string &in entity, int alState) 
{
	if(alState == 1){
		FadeSepiaColorTo(0.75f, 0.3f);
		GiveSanityDamage(10, false);
		PlaySoundAtEntity("whine", "05_whine", "Player", 4, false);
	} 
	else if(alState == -1){
		FadeSepiaColorTo(0, 0.3f);
		StopSound("whine", 4);
		SetEntityActive("AreaCeiling", false);
		SetEntityActive("AreaCeilingActivate", false);
	} 
}
//END CHAINS AND HANGING CORPSES(CARCASS AS PLACEHOLDERS//
//////////////////////////////////////////////////////////


//////////////////////////////////////
//BEGIN EVENT WITH BOTTLES AND STEPS//
void CollideAreaRemoveDoorEvent(string &in asParent, string &in asChild, int alState)
{
	SetEntityPlayerInteractCallback("cellar_wood01_3", "", false);
}
/*Interact door and rumble is played behind it
 */
void InteractDoorWithGruntBehind(string &in asEntity)
{
	if(GetLocalVarInt("EnemyEventDone") == 1 || GetSwingDoorLocked(asEntity) == false)
	{
		return;
	}
	
	if(GetLocalVarInt("HeardRumble") >= 1){
		SetEntityActive("AreaOtherEscape", true);
		SetEntityActive("AreaHoleEvents", false);
		AddEntityCollideCallback("Player", "AreaOtherEscape", "CollideAreaOtherEscape", true, 1);
	}
	
	AddLocalVarInt("HeardRumble", 1);
	
	PlayEnemySoundAtEntity("notice_long.snt", "AreaBottleEvent", "grunt");
	PlaySoundAtEntity("bottlevent", "05_event_bottles", "AreaBottleEvent", 0, false);
	AddTimer("sanity", 0.75, "TimerGiveSanityDamage");
}
/*When going the other way, some rumble for the room on other side
 */
void InteractDoorToHole(string &in asEntity)
{
	AddLocalVarInt("HeardRumble", 1);
	
	if(GetLocalVarInt("HeardRumble") <= 1) return;
	
	PlaySoundAtEntity("steps1", "scare_wood_creak_walk", "HoleParticle", 0, false);
	
	AddTimer("step1", 0.3f, "TimerPlaySteps");
	AddTimer("step2", 0.6f, "TimerPlaySteps");
	AddTimer("step3", 0.9f, "TimerPlaySteps");
}
void TimerPlaySteps(string &in asTimer)
{	
	if(asTimer == "step1") SetEntityActive("wood_box01_19", true);
	else if(asTimer == "step2") SetEntityActive("wood_box01_20", true);
	else SetEntityActive("wood_box01_21", true);
}
/*As looking in the room with a hole in the ceiling, debris fall down
 */
void CollideHoleEvents(string &in asParent, string &in asChild, int alState)
{	
	AddLocalVarInt("HeardRumble", 1);
	
	if(GetLocalVarInt("HeardRumble") <= 2) return;
	
	for(int i=1;i<=3;i++) SetEntityActive("rock_small_"+i, true);
	CreateParticleSystemAtEntity("PShole", "ps_dust_falling_hole.ps", "HoleParticle", false);
	PlaySoundAtEntity("scratches", "05_wall_scratch", "HoleParticle", 0, false);
	
	SetEntityPlayerInteractCallback("cellar_wood01_3", "", true);
	
	AddTimer("sanity", 1.5f, "TimerGiveSanityDamage");
}
void TimerGiveSanityDamage(string &in asTimer)
{	
	GiveSanityDamage(10, true);
}
//Alternate escape route
void CollideAreaOtherEscape(string &in asParent, string &in asChild, int alState)
{
	RemoveEntityCollideCallback("AreaUnlockDoor", "BarrelBlock");
	
	SetSwingDoorClosed("cellar_wood01_6", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_6", true);
	
	SetSwingDoorLocked("cellar_wood01_3", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_3", true);
	SetSwingDoorClosed("cellar_wood01_3", false, false);
	
	AddTimer("cellar_wood01_3", 0.1f, "TimerPushTheDumbDoor02"); AddTimer("cellar_wood01_3", 0.2f, "TimerPushTheDumbDoor02");
	
	AddPropImpulse("cellar_wood01_6", 2.0f, 0, 0, "World");
	AddPropImpulse("BarrelBlock", 0.0f, 16.0f, -16.0f, "World");
	
	PlaySoundAtEntity("closedoorsound", "close_door.snt", "cellar_wood01_6", 0, false);	
}
void TimerPushTheDumbDoor02(string &in asTimer)
{
	AddPropImpulse(asTimer, 0, 0, -2.0f, "World");
	AddDebugMessage("Push door!", false);
}
//END EVENT WITH BOTTLES AND STEPS//
////////////////////////////////////


//////////////////////////////
//BEGIN BANG AND PAIN SOUNDS//
void CollideBangDoor(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("bangs", "05_event_door_bang", "cellar_wood01_5", 1, false);
	PlaySoundAtEntity("whineaa", "scare_whine_loop", "Player", 0.5f, false);
		
	FadeSepiaColorTo(0.75f, 0.3f);
	FadeImageTrailTo(1.5, 0.5);
	
	AddTimer("bang1", 0.6f, "TimerBangDoor");
	AddTimer("bang2", 1.6f, "TimerBangDoor");
	AddTimer("bang3", 2.5f, "TimerBangDoor");
	AddTimer("bang4", 3.0f, "TimerBangDoor");
}
void TimerBangDoor(string &in asTimer)
{	
	if(asTimer == "bang1"){ 
		AddPropImpulse("cellar_wood01_5", 0, 0, 5, "World");
		PlaySoundAtEntity("scare", "react_scare", "Player", 0.25f, false);
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "cellar_wood01_5", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
		GiveSanityDamage(10, true);
	}
	else if(asTimer == "bang2") { 
		AddPropImpulse("cellar_wood01_5", 0, 0, 5, "World");
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "cellar_wood01_5", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
	}
	else if(asTimer == "bang3") { 
		AddPropImpulse("cellar_wood01_5", 0, 0, 5, "World");
		PlaySoundAtEntity("scare", "react_breath", "Player", 0.5f, false);
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "cellar_wood01_5", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
	}
	else {
		SetSwingDoorLocked("cellar_wood01_5", false, false);
		FadeSepiaColorTo(0, 0.3f);
		FadeImageTrailTo(0, 0.1);
		StopSound("whineaa", 4);
	}
}
//END BANG AND PAIN SOUNDS//
////////////////////////////


/////////////////////
//BEGIN ENEMY EVENT//
void PickEnemy(string &in asEntity, string &in asType)
{
	if(GetLocalVarInt("EnemyEventDone") == 1) return;
	if(GetGlobalVarInt("IGF")==1) return;
	
	SetEntityActive("AreaOtherEscape", false);
	
	AddEntityCollideCallback("Player", "AreaEnemyEvent_2", "CollideActivateEnemy", true, 1);
	
	SetSwingDoorDisableAutoClose("cellar_wood01_4", true);
	SetSwingDoorClosed("cellar_wood01_4", false, false);
	
	AddPropImpulse("cellar_wood01_4", 2.0f, 0, 0, "World");
	
	PlayEnemySoundAtEntity("notice_long.snt", "torch_static01_7", "grunt");
	
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("grunt_normal_1"), "AreaEnemyEvent_3", "CollideDeactivateEnemy", true, 1);	//Begin the door bang and pain event
	SetEntityActive(GetStringWithExtraModesSuffix("grunt_normal_1"), true);

	AddTimer("enemy1", 0.2f, "TimerEnemy");

	SetEntityPlayerLookAtCallback("AreaHoleEvents", "LookAtEnemy", true);

	SetPlayerRunSpeedMul(0.6f);
	SetPlayerMoveSpeedMul(0.8f);
	
	SetLocalVarInt("EnemyEventDone", 1);
}
void LookAtEnemy(string &in asEntity, int alState)
{
	RemoveEntityCollideCallback("Player", "AreaEnemyEvent_2");
	
	AddTimer("enemy2", 1.5f, "TimerEnemy");
	AddTimer("enemy3", 5, "TimerEnemy");
	AddTimer("enemy4", 10, "TimerEnemy");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_3", 0, "");
	
	SetEntityPlayerLookAtCallback("AreaHoleEvents", "", true);
}
void CollideActivateEnemy(string &in asParent, string &in asChild, int alState)
{
	SetEntityPlayerLookAtCallback("AreaHoleEvents", "", true);
	
	AddTimer("enemy2", 1.5f, "TimerEnemy");
	AddTimer("enemy3", 5, "TimerEnemy");
	AddTimer("enemy4", 10, "TimerEnemy");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_3", 0, "");
}

void TimerEnemy(string &in asTimer)
{
	if(asTimer == "speed"){
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerMoveSpeedMul(1);
		//FadePlayerFOVMulTo(1, 0.01f);
		//FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "enemy1"){
		PlayMusic("05_event_steps.ogg", false, 0.8f, 1, 10, false);
		PlaySoundAtEntity("scare", "react_scare", "Player", 0.5f, false);
		//StartPlayerLookAt("grunt_normal_1", 5, 5, "");
		//FadePlayerFOVMulTo(2, 0.01f);
		//FadeRadialBlurTo(0.1f, 0.025f);
		//SetRadialBlurStartDist(0.2f);
		SetPlayerRunSpeedMul(0.4f);
		SetPlayerMoveSpeedMul(0.6f);
	}
	else if(asTimer == "enemy2"){
		//StopPlayerLookAt();
		PlaySoundAtEntity("react", "react_breath", "Player", 0.6f, false);	
		SetPlayerRunSpeedMul(0.2f);
		SetPlayerMoveSpeedMul(0.4f);
	}
	else if(asTimer == "enemy3"){
		SetPlayerRunSpeedMul(0.4f);
		SetPlayerMoveSpeedMul(0.6f);
	}
	else{
		SetEntityActive("AreaEnemyEvent_3", false);	//If player throw box at enemy, enemy will chase player until player leaves level
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerMoveSpeedMul(1);
		//FadePlayerFOVMulTo(1, 0.01f);
		//FadeRadialBlurTo(0, 0.1f);
	}
}
void CollideDeactivateEnemy(string &in asParent, string &in asChild, int alState)
{
	SetPlayerRunSpeedMul(0.6f);
	SetPlayerMoveSpeedMul(0.8f);
	
	SetEntityActive(GetStringWithExtraModesSuffix("grunt_normal_1"), false);
	RemoveEntityCollideCallback("AreaUnlockDoor", "BarrelBlock");
	
	SetSwingDoorClosed("cellar_wood01_4", true, false);
	PlaySoundAtEntity("cellar_wood01_4slam", "scare_slam_door", "cellar_wood01_4", 0.0f, false);
	GiveSanityDamage(10, false);
	
	SetSwingDoorClosed("cellar_wood01_6", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_6", true);
	
	SetSwingDoorLocked("cellar_wood01_3", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_3", true);
	SetSwingDoorClosed("cellar_wood01_3", false, false);
	
	AddTimer("speed", 2, "TimerEnemy");
	
	RemoveTimer("enemy4");
	
	AddTimer("cellar_wood01_3", 0.1f, "TimerPushTheDumbDoor"); AddTimer("cellar_wood01_3", 0.2f, "TimerPushTheDumbDoor");
	
	AddPropImpulse("cellar_wood01_6", 2.0f, 0, 0, "World");
	AddPropImpulse("BarrelBlock", 0.0f, 16.0f, -16.0f, "World");
	
	PlaySoundAtEntity("closedoorsound", "close_door.snt", "cellar_wood01_6", 0, false);	
	PlaySoundAtEntity("react2", "react_breath", "Player", 0.8f, false);
}
void TimerPushTheDumbDoor(string &in asTimer)
{
	AddPropImpulse(asTimer, 0, 0, -2.0f, "World");
	AddDebugMessage("Push door!", false);
}
void CollideEnemyHint(string &in asParent, string &in asChild, int alState)
{
	GiveHint("EnemyTip01", "Hints", "EnemyTip01", 0);
}

void CollideExtraEnemy(string asParent, string asChild, int alState)
{
	if(GetEasyModeOn() >= 2)	return;
	
	if(GetLocalVarInt("WineCellarGruntCount") >= 1)
	{
		AddTimer("react_scare", 0.75f, "TimerExtraEnemy");
		PlayEnemySoundAtEntity("notice_long.snt", asChild, "grunt");
		return;
	}
	AddTimer("grunt", 1.0f, "TimerExtraEnemy");
	AddTimer("react_pant", 1.75f, "TimerExtraEnemy");
	CheckPoint("CPExtraEnemy", "PlayerStartArea_3", "CPExtraEnemy", "Hints", "DefaultDeath");
	PlayGuiSound("scare_slam_door", 1.0f);
	StartScreenShake(0.175f, 0.1f, 0.0f, 0.0f);
	SetPlayerMoveSpeedMul(0.1f);
	SetPlayerRunSpeedMul(0.1f);
	SetPlayerLookSpeedMul(0.1f);
	FadeOut(3.0f);
	GiveHint("EnemyTip02", "Hints", "EnemyTip02", 0);
}

void TimerExtraEnemy(string asTimer)
{
	if(StringContains(asTimer, "react") == true)
	{
		if(StringContains(asTimer, "pant") == true)
		{
			AddTimer("react_breath_slow", 1.75f, "TimerExtraEnemy");
			GiveSanityDamage(7.5f, true);
		}
		else if(StringContains(asTimer, "scare") == true)
		{
			AddTimer("react_breath", 2.0f, "TimerExtraEnemy");
			FadeSepiaColorTo(0.5f, 0.025f);
			FadeRadialBlurTo(0.1f, 0.025f);
			SetRadialBlurStartDist(0.2f);
			GiveSanityDamage(10.0f, false);
		}
		else if(StringContains(asTimer, "breath") == true)
		{
			FadeSepiaColorTo(0, 0.1f);
			FadeRadialBlurTo(0, 0.1f);
		}
		PlayGuiSound(asTimer, 1.0f);
	}
	else
	{
		AddLocalVarInt("WineCellarGruntCount", 1);
		SetEntityPlayerInteractCallback("potion_health_2", "", false);
		PlayMusic("03_event_books.ogg", false, 1.0f, 0.5f, 10, false);
		string sEnemyName = GetStringWithExtraModesSuffix("grunt_normal_1");
		SetEnemyDisableTriggers(sEnemyName, false);
		
		if(GetToughModeOn() >= 1)
			SetEnemyIsHallucination(sEnemyName, false);
		else
			SetEnemyIsHallucination(sEnemyName, true);
		
		TeleportEnemyToNode(sEnemyName, "PathNodeArea_757", true);
		ClearEnemyPatrolNodes(sEnemyName);
		AddEnemyPatrolNode(sEnemyName, "PathNodeArea_770", GetEnemyIdleTime(4.0f), "");
		AddEnemyPatrolNode(sEnemyName, "PathNodeArea_449", GetEnemyIdleTime(3.0f), "");
		AddEnemyPatrolNode(sEnemyName, "PathNodeArea_696", GetEnemyIdleTime(2.0f), "");
		if(GetToughModeOn() >= 1)
		{
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_449", 0.001f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_545", 0.001f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_392", 0.001f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_237", 1.0f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_322", GetEnemyIdleTime(2.0f), "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_391", 0.001f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_544", 0.001f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_449", 0.001f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_447", 0.001f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_547", 0.001f, "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_555", GetEnemyIdleTime(2.0f), "");
			AddEnemyPatrolNode(sEnemyName, "PathNodeArea_447", 0.001f, "");
		}
		AddEnemyPatrolNode(sEnemyName, "PathNodeArea_698", 0.001f, "");
		AddEnemyPatrolNode(sEnemyName, "PathNodeArea_756", 1.0f, "");
		SetEntityActive(sEnemyName, true);
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		FadeIn(1.5f);
	}
}

void GruntDisabledCall(string asEntity, string asType)
{
	if(GetLocalVarInt("WineCellarGruntCount") >= 1)
		PlayGuiSound("door_level_cellar_open.snt", 1.0f);
}

void ResetDoorIfBroken(string asDoor)
{
	if(GetPropHealth(asDoor) <= 0.0f)
	{
		ResetProp(asDoor);
	}
}

void CPExtraEnemy(string asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("cellar_wood01_3");
	ResetDoorIfBroken("cellar_wood01_4");
	ResetDoorIfBroken("cellar_wood01_5");
	ResetDoorIfBroken("cellar_wood01_6");
	ResetDoorIfBroken("cellar_wood01_7");
	
	AddLocalVarInt("WineCellarGruntCount", 1);
	PlayMusic("04_amb", true, 1, 5, 0, true);
	AddEntityCollideCallback("Player", "AreaExtraEnemy", "CollideExtraEnemy", true, 1);
}

//END ENEMY EVENT//
///////////////////


//BEING MISC//
void InteractTouchIt(string &in asEntity)
{
	PlayGuiSound("impact_organic_low2.ogg", 0.5f);
	
	GiveSanityDamage(1.0f, false);
	
	//SetMessage("Ch01Level05", "TouchIt", 0);
	
	AddTimer(asEntity, 1.0f, "TimerTouchIt");
}
void TimerTouchIt(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractTouchIt", true);
}
//END MISC//

////////////////////////////
// Run first time starting map
void OnStart()
{
	for(int i=0; i<gvsDangerousLampsArray.length(); i++)
	{
		SetEntityCallbackFunc(gvsDangerousLampsArray[i], "OnLampStateChange");
	}
	
	SetMapDisplayNameEntry("WineCellar");
	
	//----COLLIDE CALLBACKS----//
	AddEntityCollideCallback("Player", "AreaRemoveDoorEvent", "CollideAreaRemoveDoorEvent", false, 1);
	AddEntityCollideCallback("AreaUnlockDoor", "BarrelBlock", "FuncUnlockDoor", true, -1);	//Barrel blocking door, move it out area to unlock door
	AddEntityCollideCallback("Player", "AreaBeginMoan", "FuncMoanHorrors", true, 1);	//Big area in first room to trigger moans
	for(int i=1;i<=3;i++) AddEntityCollideCallback("Player", "AreaBlockDoor_"+i, "CollideBlockDoor", false, 1);	//Three areas for barrel selection 
	AddEntityCollideCallback("Player", "AreaLoft", "CollideLoft", true, 1);	//Trigger event on loft
	AddEntityCollideCallback("Player", "AreaCeilingActivate", "CollideActiveCeiling", false, 0);	//Activate lookat area for corpses in ceiling
	AddEntityCollideCallback("Player", "AreaHoleEvents", "CollideHoleEvents", true, 1);	//Debris and particles from ceiling hole
	AddEntityCollideCallback("Player", "AreaBangDoor", "CollideBangDoor", true, 1);	//Begin the door bang and pain event
	AddEntityCollideCallback("Player", "AreaEnemyHint", "CollideEnemyHint", false, 1);	//Display hint about enemies
	AddEntityCollideCallback("Player", "AreaGiveSanity", "CollideGiveSanity", true, 1);	//Display hint about enemies
	AddEntityCollideCallback("Player", "AreaExtraEnemy", "CollideExtraEnemy", true, 1);
	
	SetEntityPlayerLookAtCallback("AreaCeiling", "LookAtCeiling", false);
	SetEntityPlayerInteractCallback("cellar_wood01_3", "InteractDoorWithGruntBehind", true);
	SetEntityPlayerInteractCallback("cellar_wood01_4", "InteractDoorToHole", true);
	
	// ENTITY INIT
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_1", true);
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_2", true);
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_3", true);
	
	//----SOUND INIT----//
	PlaySoundAtEntity("amb_sound1", "05_amb1", "AreaAmb", 10, true);	//So that the sound can be faded out/in
	PlaySoundAtEntity("amb_sound2", "05_amb2", "AreaAmb", 10, true);	//So that the sound can be faded out/in

															
	//----ROPE CREATION----//
	/*Hanging chains in room with corpses in ceiling
	 */
	/*for(int i=1;i<=6;i++) CreateRope("Rope0"+i, "RopeStart_"+i, "RopeEnd_"+i, "", "invisible_body_"+i+"_Body_1", //StartBody, EndBody
		0.5, 4.5, 0.2, 0.001, 100, 1, 					//Min total length, Max total length, Segment size, Damping, Strength, Stiffness
		"textures/ropes/chain.mat", 0.025, 0.5, 0.5, //Material, Radius, LengthTileAmount, LengthTileSize
		"",	0.49, 0.45,									//Sound, Sound start speed, Sound stop speed
		true, 5, 3 										//Automove, Automove acc, Automove max speed
		);*/
	
	//---- TIMER INIT ----//
	AddTimer("TimerChain", 1, "TimerChain");	//Push chains to make them swagel a bit
	AddTimer("AreaBeginBlood_1", 0.1f, "TimerBloodDrop");	//Drip blood from corpses
	AddTimer("creak", 1, "CreakTimer");		//Creaking from the floor above
	
	//----QUEST INIT----//
	SetNumberOfQuestsInMap(0);
	
	//----VARIABLES ----//
	SetLocalVarString("WhatBarrel", "AreaBlockDoor_2");	//A default barrel selected for debris event, incase player does not touch an area
	SetGlobalVarInt("PlayerBeenInLevel05",1);
	
	//Remove the dakrness hint, so the player can get it once more!
	RemoveHint("DarknessDecrease");
	
	/* TODO: This stays commented just in case it is needed in the future (read comment below)
	// Disable interaction with barrels, just in case the player tries to bring em down before triggering the event (Luis: I managed to do this and we really dont want the player to watch in fear a barrel lying still on the floor :P)
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_1", true);
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_2", true);
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_3", true);
	*/
	 
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		
		//SetEntityActive("FlashbackArea_1", false);
	}
	
	//SetEntityActive("BarrelBlock", true);
	SetEntityActive("block_box_1", false);
	SetEntityActive("block_box_2", false);
	SetEntityActive("block_box_3", false);
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	//----PRELOADING----//
	PreloadSound("scare_male_terrified5"); PreloadSound("scare_male_terrified"); PreloadSound("scare_steps_big"); PreloadSound("scare_wood_creak_mix"); 
	PreloadSound("scare_tingeling"); PreloadSound("01_whirl"); PreloadSound("general_rock_rumble"); PreloadSound("05_rock_fall"); 
	PreloadSound("05_rock_fall_2"); PreloadSound("scare_slam_door"); PreloadSound("react_breath"); PreloadSound("roll_wood"); 
	PreloadSound("react_scare"); PreloadSound("player_falldamage_max"); PreloadSound("player_bodyfall"); PreloadSound("05_cloud_swarm"); 
	PreloadSound("00_creak"); PreloadSound("react_pant"); PreloadSound("05_amb1"); PreloadSound("05_amb2"); 
	PreloadSound("player_climb"); PreloadSound("05_cloud"); PreloadSound("03_orb_loop"); PreloadSound("03_in_a_bottle"); 
	PreloadSound("general_blood_drop"); PreloadSound("05_whine"); PreloadSound("05_event_bottles"); PreloadSound("scare_wood_creak_walk"); 
	PreloadSound("05_event_door_bang"); PreloadSound("05_wall_scratch"); PreloadSound("scare_whine_loop"); PreloadSound("close_door"); PreloadSound("door_level_cellar_open.snt");

	PreloadParticleSystem("ps_dust_falling_small"); PreloadParticleSystem("ps_dust_whirl_large"); PreloadParticleSystem("ps_break_mansionbase_wall"); 
	PreloadParticleSystem("ps_ghost_release"); PreloadParticleSystem("ps_blood_drop"); PreloadParticleSystem("ps_dust_falling_hole"); 
	PreloadParticleSystem("ps_dust_impact_vert"); 
	      
	
	//----AUDIO----//
	PlayMusic("04_amb", true, 1, 5, 0, true);
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	string sEnemyName = "";
	
	sEnemyName = "grunt";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	SetEntityActive(GetStringWithExtraModesSuffix("grunt_normal_1"), false);	//Just incase player would be very very fast and throw a box at enemy during event.
	
	//////////////////////
	//Load Screen Setup
	SetupLoadScreen("LoadingText", "Ch01_Diary02_", 4, "game_loading_desert.jpg");
}