
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "03_archives";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
int[] gviEasierOilPotionsCodesArray = {1, 2, 3, 4, 5};
int[] gviEasierHealthPotionsCodesArray = {1};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9};
int[] gviNormalOilPotionsCodesArray = {1, 2, 3, 4};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {3, 8, 11, 15, 16};
int[] gviToughOilPotionsCodesArray = {2, 5};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {5};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

/////////////////////////
//BEGIN DIARY FLASHBACK//
/*Generates random numbers that are only used 1 time
 */
int iLength;		//Length of array
int iEnd;			//Stop the random number search, incase time loop is ran 1 time too many
int iRand;			//Temporary random number
int[] aRand;		//Array to store the requested length of numbers
int iUniqueRand;	//The unique random int returned
int UniqueRandom(int iMin, int iMax, bool bRepeat)
{
	if(GetLocalVarInt("InitUniqueRandom") == 0){
		iLength = iMax-iMin+1;
		iEnd = iLength;
		
		aRand.resize(iLength);
		
		for(int i=0;i<iLength;i++) {aRand[i] = iMin; iMin++;}
		
		SetLocalVarInt("InitUniqueRandom", 1);
	}	
	
	if(iEnd == 0){ 
		if(bRepeat){  
			SetLocalVarInt("InitUniqueRandom", 0);
			return RandFloat(iMin,iMax);
			
		} else return 0;	
	}
	
	for(;;){
		iRand = RandFloat(0, iLength);

		if(aRand[iRand] != -1){
			iUniqueRand = aRand[iRand];
			
			aRand[iRand] = -1;

			iEnd--;
			break;
		}
	}
	
	return iUniqueRand;
}


/*Picking the third diary activates the vision
 */
void MapFlashbackOver()
{
	//If the diary flashback is running, then need to set back some stuff when flashback is over.
	if(GetLocalVarInt("DiaryFlashbackActive")==1)
	{
		SetLocalVarInt("DiaryFlashbackActive",0);		
		
		FadeImageTrailTo(1.2f, 2);
		FadeSepiaColorTo(0.65f, 0.5f);
		FadePlayerFOVMulTo(2, 0.04f);
	}	
}

/*Picking the third diary activates the vision
 */
void PickDiary(string &in asItem, int alEntryIdx)
{	
	AddLocalVarInt("diary", 1);
	
	if(GetLocalVarInt("diary") == 1)
		PlayMusic("03_paper_daniel01.ogg", false, 0.4f, 0, 10, false);
	
	else if(GetLocalVarInt("diary") == 2)
		PlayMusic("03_paper_daniel02.ogg", false, 0.4f, 0, 10, false);
	
	else if(GetLocalVarInt("diary") == 3){	
		ReturnOpenJournal(false);
		
		SetLocalVarString("startposition", "Start_"+asItem);
		
		PlayMusic("03_event_tomb.ogg", false, 0.4f, 0, 10, false);
		
		AddTimer("TimerFlashBack", 0.01f, "TimerFlashBack");
	}	
	
	/*DEBUG
	 */
	AddDebugMessage("Got Diary and Int is: "+GetLocalVarInt("diary"), true);
}
/*Player touches orb and end of vision is triggered
 */
void InteractOrb(string &in entity)
{	
	RemoveTimer("TimerFlashBack");
	
	SetLocalVarInt("TimerFlashBack", 9);

	AddTimer("TimerFlashBack", 0.1f, "TimerFlashBack");
	
	AddEffectVoice("CH01L03_DanielDiary03_05", "", "Flashbacks", "CH01L03_DanielDiary03_05", false, "", 0, 0);
	
	if(GetLanternActive()){
		SetLanternActive(false, true);
		SetLanternDisabled(true);
	} else SetLanternDisabled(true);
			
	/*DEBUG
	 */
	AddDebugMessage("Interacted with ORB", true);
}
void TimerFlashBack(string &in asTimer)
{	
	/*Configurables
	 */
	int iMaxEventStep = 18;		//How many steps there are in the switch event
	float fEventSpeed = 0.5f;	//The default time between steps in an event
	
	/*Helpers - Do not edit
	 */
	string sEvent = asTimer;	//Using first timer name for variable, timer name & callback for the timer that loops
	AddLocalVarInt(sEvent, 1);	//What step to play in the event
	
	if(GetPlayerLampOil() <= 10) AddPlayerLampOil(5); //Make sure player always has oil for lantern during flashback
	
	switch(GetLocalVarInt(sEvent)){
		case 1:
			SetPlayerLookSpeedMul(0.8f);
			
			SetPlayerCrouchDisabled(true);
			SetInventoryDisabled(true);
			SetSanityDrainDisabled(true);
			
			if(GetLanternActive())
			{
				SetLocalVarInt("LanternActive", 1);
				SetLanternActive(false, true);
				SetLanternDisabled(true);
			}
			else 
			{
				SetLanternDisabled(true);
			}
			
			StartEffectFlash(0.1f, 0.1f, 0.25f);
			SetPlayerRunSpeedMul(0.6);
			SetPlayerMoveSpeedMul(0.75f);
			PlaySoundAtEntity("SoundFlash1", "scare_thump_flash.snt", "Player", 0.0f, false);
			PlaySoundAtEntity("creak", "03_creak.snt", "Player", 16.0f, false);
			PlaySoundAtEntity("Breath1", "react_breath.snt", "Player", 1.0f, false);
			fEventSpeed = 0.3f;
		break;
		case 2:
			SetLocalVarInt("DiaryFlashbackActive",1);
			
			SetPlayerLookSpeedMul(0.6f);
			//AddEffectVoice("CH01L03_DanielDiary03_01", "", "Flashbacks", "CH01L03_DanielDiary03_01", false, "", 0, 0);
			//SetEffectVoiceOverCallback("DiaryPartsOver");
			StartScreenShake(0.01f, 0.75f, 0.25f,1.5f);
			FadePlayerRollTo(60, 5, 5);
			FadeImageTrailTo(1.2f, 2);
			FadeSepiaColorTo(0.65f, 0.5f);
			FadePlayerFOVMulTo(4, 0.04f);
			MovePlayerHeadPos(0, -1.2f, 0, 0.3f, 0.25f);
			//AddTimer("extrap", 0.5, "TimerExtraVoiceEffects");
			//AddTimer("extrap2", 1.0f, "TimerExtraVoiceEffects");
			//AddTimer("extrap3", 1.75f, "TimerExtraVoiceEffects");
			//AddTimer("extrap4", 2.75f, "TimerExtraVoiceEffects");
			//AddTimer("extrap5", 3.5f, "TimerExtraVoiceEffects");
			fEventSpeed = 2.0f;
		break;
		case 3:
			SetPlayerLookSpeedMul(0.4f);
			for(int i=1;i<=3;i++)
			{
				StopSound("ambs"+i, 8);
			}
			FadePlayerRollTo(-60, 10, 10);
			MovePlayerHeadPos(0, 0, 0, 0.2f, 0.25f);
			SetPlayerRunSpeedMul(0.3);
			SetPlayerMoveSpeedMul(0.5f);
			PlaySoundAtEntity("Breath1", "react_breath.snt", "Player", 1.5f, false);
			fEventSpeed = 1.75f;
		break;
		case 4:
			SetPlayerLookSpeedMul(0.2f);
			//FadeOut(6);
			FadeOut(4);
			FadePlayerRollTo(0, 10, 10);
			MovePlayerHeadPos(0, -1.2f, 0, 1.0f, 0.25f);
			StartPlayerLookAt("AreaLookUp", 0.5f, 0.5f, "");
			SetPlayerRunSpeedMul(0);
			SetPlayerMoveSpeedMul(0.3f);
			PlaySoundAtEntity("rock_amb", "03_rock_amb.snt", "Player", 6, false);
			PlaySoundAtEntity("Breath1", "react_breath.snt", "Player", 1.25f, false);
			//fEventSpeed = 1.5f;
			fEventSpeed = 4.0f;
		break;
		case 5:
			SetPlayerLookSpeedMul(0.1f);
			FadePlayerFOVMulTo(2, 0.1f);
			AddEffectVoice("CH01L03_DanielDiary03_01", "", "Flashbacks", "CH01L03_DanielDiary03_01", false, "", 0, 0);
			SetEffectVoiceOverCallback("DiaryPartsOver");
			AddTimer("extrap", 4.5, "TimerExtraVoiceEffects");
			AddTimer("extrap2", 5.0f, "TimerExtraVoiceEffects");
			AddTimer("extrap3", 5.75f, "TimerExtraVoiceEffects");
			AddTimer("extrap4", 6.75f, "TimerExtraVoiceEffects");
			AddTimer("extrap5", 7.5f, "TimerExtraVoiceEffects");
			SetSkyBoxActive(false);
			SetPlayerActive(false);
			MovePlayerHeadPos(0, 0, 0, 0.5f, 0.25f);
			PlaySoundAtEntity("Breath1", "react_breath.snt", "Player", 1.5f, false);
			SetLocalVarInt("VoiceResume", 5);
			RemoveTimer(sEvent);
			return;
		break;
		case 6:
			StartPlayerLookAt("AreaRock_4", 5, 5, "");
			AddEffectVoice("CH01L03_DanielDiary03_02", "", "Flashbacks", "CH01L03_DanielDiary03_02", false, "", 0, 0);
			SetEffectVoiceOverCallback("DiaryPartsOver");
			SetLocalVarInt("VoiceResume", 7);
			MovePlayerHeadPos(0, -1.2f, 0, 3, 0.25f);
			PlaySoundAtEntity("loop", "03_loop.snt", "Player", 2, false);
			StopSound("creak", 8);
			AddTimer("randrock", 10, "TimerRandRock");
			AddTimer("extra1", 0.5f, "TimerExtraVoiceEffects");
			AddTimer("extra2", 2, "TimerExtraVoiceEffects");
			AddTimer("extra3", 3.5f, "TimerExtraVoiceEffects");
			AddTimer("extra3.1", 4.5f, "TimerExtraVoiceEffects");
			fEventSpeed = 6;
		break;
		case 7:
			FadeIn(5);
			FadeImageTrailTo(0, 2);
			FadePlayerFOVMulTo(1, 0.1f);
			TeleportPlayer("PlayerStartArea_Flash");
			StartPlayerLookAt("orb_1", 0.1f, 0.1f, "");
			MovePlayerHeadPos(0, 0, 0, 0.25f, 0.25f);
			PlaySoundAtEntity("orb_loop", "03_orb_loop.snt", "orb_1", 6, false);
			StopSound("loop", 4);
			SetLocalVarInt(sEvent, 7);
			AddTimer("lookat", 8, "TimerExtraVoiceEffects");
			SetPlayerActive(true);
			RemoveTimer(sEvent);
			return;
		break;
		case 8:
			//SetLanternDisabled(false);
			//SetLanternActive(true, false);
			SetPlayerLookSpeedMul(0.3f);
			AddEffectVoice("CH01L03_DanielDiary03_03", "", "Flashbacks", "CH01L03_DanielDiary03_03", false, "", 0, 0);
			AddTimer("extra4", 0.1, "TimerExtraVoiceEffects");
			AddTimer("extra5", 2, "TimerExtraVoiceEffects");
			AddTimer("extra6", 3.5f, "TimerExtraVoiceEffects");
		break;
		case 9:
			SetPlayerLookSpeedMul(0.5f);
			SetLocalVarInt(sEvent, 8);
			AddTimer(sEvent, fEventSpeed, sEvent);
			return;
		break;
		case 10:
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerLookSpeedMul(0.3f);
			StartScreenShake(0.025f, 2,4,4);
			FadeLightTo("OrbLight",1,1,1,1,0,4);
			FadePlayerFOVMulTo(0.2, 0.2f);
			SetPropActiveAndFade("orb_1", false, 10);
			FadePlayerRollTo(60, 1, 1);
			AddEffectVoice("CH01L03_DanielDiary03_06", "", "Flashbacks", "CH01L03_DanielDiary03_06", false, "", 0, 0);
			fEventSpeed = 4.0f;
		break;
		case 11: 
			SetPlayerMoveSpeedMul(0.3f);
			SetPlayerLookSpeedMul(0.2f);
			SetPlayerActive(false);
			FadePlayerFOVMulTo(3, 0.25f);
			StartPlayerLookAt("orb_1", 0.5f, 0.5f, "");
			FadeLightTo("OrbLight",1,1,1,1,20,8);
			FadePlayerRollTo(-60, 2, 2);
			MovePlayerHeadPos(0, -0.5f, 0, 0.2f, 0.2f);
			SetEffectVoiceOverCallback("DiaryPartsLast");
			StopSound("orb_loop", 4);
			PlaySoundAtEntity("orb_loop2", "03_orb_loop_loud.snt", "orb_1", 6, false);
			fEventSpeed = 2.0f;
		break;
		case 12:
			SetPlayerMoveSpeedMul(0.1f);
			SetPlayerLookSpeedMul(0.1f);
			StartEffectFlash(4, 2, 4);
			FadePlayerRollTo(0, 1, 1);
			fEventSpeed = 5.0f;
		break;
		case 13:
			FadeOut(1);
			MovePlayerHeadPos(0, -1.3f, 0, 5, 0.25f);
			PlaySoundAtEntity("player_fall", "player_bodyfall.snt", "Player", 0.5f, false);
			fEventSpeed = 0.35f;
		break;
		case 14:
			StartPlayerLookAt("AreaLookUp", 0.5f, 0.5f, "");
			PlaySoundAtEntity("BreakOrb", "03_orb.snt", "Player", 0.0f, false);
			PlaySoundAtEntity("creak", "03_creak.snt", "Player", 8.0f, false);
			StopSound("orb_loop2", 1);
			RemoveTimer("randrock");
			fEventSpeed = 1.0f;
		break;
		case 15:
			StopSound("rock_amb", 8);
			fEventSpeed = 4.0f;
		break;
		case 16:
			FadePlayerFOVMulTo(1, 1);
			StartPlayerLookAt("candlestick_tri_5", 5, 5, "");
			SetPlayerLookSpeedMul(0.1f);
			PlaySoundAtEntity("ambs1", "03_amb.snt", "AmbSounds", 4.0f, true);
			PlaySoundAtEntity("ambs2", "03_amb_library.snt", "AmbSounds", 4.0f, true);
			PlaySoundAtEntity("ambs3", "03_insects.snt", "AmbSounds", 4.0f, true);
			StopSound("creak", 6);
			AddTimer("music", 8, "TimerExtraVoiceEffects");
			fEventSpeed = 8.0f;
		break;
		case 17:
			SetLocalVarInt("DiaryFlashbackActive",0);
			SetPlayerLookSpeedMul(0.5f);
			FadeSepiaColorTo(0, 0.05f);
			MovePlayerHeadPos(0, 0, 0, 0.5, 0.25f);
			
			SetPlayerCrouchDisabled(false);
			SetInventoryDisabled(false);
			if(GetEasyModeOn() <= 1) SetSanityDrainDisabled(false);
			
			SetPlayerActive(true);
			
			//SetSkyBoxActive(true);
			if(GetLocalVarInt("LanternActive") == 1)
			{
				SetLocalVarInt("LanternActive", 0);
				SetLanternDisabled(false);
				SetLanternActive(true, true);
			}
			else
			{
				SetLanternDisabled(false);
			}
			
			StopPlayerLookAt();
			TeleportPlayer(GetLocalVarString("startposition"));
			PlaySoundAtEntity("Breath3", "react_breath_slow.snt", "Player", 0.8f, false);
			CreateParticleSystemAtEntity("pearls", "ps_orb_on_player.ps", "Player", false);
			FadeIn(7);
			fEventSpeed = 4.0f;
		break;
		case 18:
			SetPlayerLookSpeedMul(1.0f);
			AddTimer("lookloop", 0.1f, "TimerRandomLook");
		break;
	}
	
	if(GetLocalVarInt(sEvent) <= iMaxEventStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
void TimerExtraVoiceEffects(string &in asTimer)
{
	if(asTimer == "extrap") PlaySoundAtEntity("pound1", "03_pound.snt", "Player", 0.01, false);	
	if(asTimer == "extrap2") PlaySoundAtEntity("pound2", "03_pound.snt", "Player", 0.02, false);	
	if(asTimer == "extrap3") PlaySoundAtEntity("pound3", "03_pound.snt", "Player", 0.03, false);
	if(asTimer == "extrap4") PlaySoundAtEntity("pound3", "03_pound.snt", "Player", 0.04, false);
	if(asTimer == "extrap5") PlaySoundAtEntity("pound3", "03_pound.snt", "Player", 0.05, false);
	if(asTimer == "extra1") PlaySoundAtEntity("player_fall", "player_bodyfall.snt", "Player", 0.2f, false);
	if(asTimer == "extra2") PlaySoundAtEntity("gasp1", "react_pant.snt", "Player", 0.75f, false);
	if(asTimer == "extra3") PlaySoundAtEntity("gasp1", "react_pant.snt", "Player", 0.8f, false);
	if(asTimer == "extra3.1") PlaySoundAtEntity("gasp1", "react_pant.snt", "Player", 0.85f, false);
	if(asTimer == "extra4") PlaySoundAtEntity("player_push", "player_climb.snt", "Player", 0.5f, false);
	if(asTimer == "extra5") PlaySoundAtEntity("player_push", "player_climb.snt", "Player", 0.25f, false);
	if(asTimer == "extra6") PlaySoundAtEntity("player_push", "player_climb.snt", "Player", 0.0f, false);
	if(asTimer == "extra7"){ 
		AddEffectVoice("CH01L03_DanielDiary03_07", "", "Flashbacks", "CH01L03_DanielDiary03_07", false, "", 0, 0);
		PlaySoundAtEntity("rock", "03_lift_rock.snt", "Player", 3, false);
	}
	if(asTimer == "extra7.1") PlaySoundAtEntity("drag1", "03_drag_dirt.snt", "Player", 0, false);
		
	if(asTimer == "extra7.2") PlaySoundAtEntity("drag2", "03_drag_dirt.snt", "Player", 0.25f, false);
	if(asTimer == "extra7.3") PlaySoundAtEntity("drag3", "03_drag_dirt.snt", "Player", 0.5f, false);	
	if(asTimer == "extra8"){ 
		StopSound("rock", 3);
		PlaySoundAtEntity("crew", "03_crew_talk.snt", "Player", 0, false);
	}
	
	if(asTimer == "music"){
		PlaySoundAtEntity("pianoonplayer", "03_waking_up.snt", "Player", 1, false);
		SetPlayerLookSpeedMul(0.3f);
	}
	if(asTimer == "lookat"){ 
		StartPlayerLookAt("orb_1", 0.6f, 0.6f, "");
		SetPlayerLookSpeedMul(0.1f);
	}
}
void DiaryPartsOver()
{
	SetLocalVarInt("TimerFlashBack", GetLocalVarInt("VoiceResume"));
	
	AddTimer("TimerFlashBack", 0.01f, "TimerFlashBack");
	
	/*DEBUG
	 */	
	AddDebugMessage("Resume with CH01L03_DanielDiary03_0", true);
}
void DiaryPartsLast()
{
	AddTimer("extra7", 0.01f, "TimerExtraVoiceEffects");
	AddTimer("extra8", 3, "TimerExtraVoiceEffects");
	AddTimer("extra7.1", 5, "TimerExtraVoiceEffects");
	AddTimer("extra7.2", 6.5, "TimerExtraVoiceEffects");
	AddTimer("extra7.3", 8, "TimerExtraVoiceEffects");
}
void CollideOrb(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaHalfToOrb"){
		AddEffectVoice("CH01L03_DanielDiary03_04", "", "Flashbacks", "CH01L03_DanielDiary03_04", false, "", 0, 0);
	}
	if(asChild == "AreaCloseToOrb"){
		SetEntityPlayerLookAtCallback("orb_1", "LookAtOrb", true);
	}
}
void LookAtOrb(string &in entity, int alState)
{
	if(alState == 1){
		SetEntityPlayerInteractCallback("orb_1", "InteractOrb", true);
		//AddEntityCollideCallback("Player", "AreaOrbX", "CollideActualOrb", false, 0);	
	}
}
/*void CollideActualOrb(string &in asParent, string &in asChild, int alState)
{
	InteractOrb("hitpa");
	//SetEntityPlayerInteractCallback("orb_1", "", true);
}*/
/*Player movement gets slower and slower the farther away from the path he goes
 */
void CollideSlowArea(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1){
		if(asChild == "SlowArea_1") SetPlayerMoveSpeedMul(0.75f);
		else if(asChild == "SlowArea_2") SetPlayerMoveSpeedMul(0.6f);
		else if(asChild == "SlowArea_3") SetPlayerMoveSpeedMul(0.5f);
		else SetPlayerMoveSpeedMul(0.35f);

		/*DEBUG
		 */	
		AddDebugMessage("Player enter "+asChild, true);
	} 
	else {
		if(asChild == "SlowArea_1"){
			SetPlayerMoveSpeedMul(0.6f);
			
			if(GetLocalVarInt("FirstEnterSlowArea") == 0){
				AddEntityCollideCallback("Player", "SlowArea_2", "CollideSlowArea", false, 0);	
				
				SetLocalVarInt("FirstEnterSlowArea", 1);
			}
		}
		else if(asChild == "SlowArea_2"){
			SetPlayerMoveSpeedMul(0.5f);
			
			if(GetLocalVarInt("FirstEnterSlowArea") == 1){
				AddEntityCollideCallback("Player", "SlowArea_3", "CollideSlowArea", false, 0);	
				
				SetLocalVarInt("FirstEnterSlowArea", 2);
			}
		}
		else if(asChild == "SlowArea_3"){
			SetPlayerMoveSpeedMul(0.35f);
			
			if(GetLocalVarInt("FirstEnterSlowArea") == 2){
				AddEntityCollideCallback("Player", "SlowArea_4", "CollideSlowArea", false, 0);	
				
				SetLocalVarInt("FirstEnterSlowArea", 3);
			}
		} 
		else SetPlayerMoveSpeedMul(0.2f);

		/*DEBUG
		 */	
		AddDebugMessage("Player leave "+asChild, true);
	}
}
/*Some random rock falling sounds while walking towards orb
 */
void TimerRandRock(string &in asTimer)
{
	int iRand = UniqueRandom(1, 6, true);
	float fLoop = RandFloat(5,10);

	PlaySoundAtEntity("RockSound"+iRand, "03_rock_move.snt", "AreaRock_"+iRand, 0.4f, false);
	
	AddTimer("randrock", fLoop, "TimerRandRock");
	
	/*DEBUG
	 */	
	AddDebugMessage("Sound in AreaRock_"+iRand, true);
}
//END DIARY FLASHBACK//
///////////////////////


//////////////////////////
//BEGIN RANDOM LOOK SPIN//
/*Player has a bit of a random head during the level
 */
 bool bRoll = true;
void TimerRandomLook(string &in asTimer)
{
	int iLook = RandFloat(1,5);
	
	if(iLook > 4){
		SetPlayerRunSpeedMul(0.5);
		SetPlayerMoveSpeedMul(1);
		FadePlayerRollTo(0, 0.5f, 1); 
		FadePlayerFOVMulTo(1, 1);
		FadeImageTrailTo(0,1.5f);
		
		AddTimer("lookloop", RandFloat(6.0f,8.0f), "TimerRandomLook");
		return;
	}
	
	if(iLook == 1 or iLook == 3)
		PlaySoundAtEntity("sigh", "react_sigh.snt", "Player", 1.0 / 0.75f, false);
	
	FadePlayerFOVMulTo(RandFloat(0.7f,1.3f), RandFloat(0.05f,0.1f));
	
	SetPlayerMoveSpeedMul(RandFloat(0.6f,0.9f));
	SetPlayerRunSpeedMul(RandFloat(0.2f,0.4f));
	
	FadeImageTrailTo(RandFloat(0.75f,1.0f),RandFloat(0.75f,1.25f));
	
	bRoll= bRoll == false ? true : false;
	
	if(bRoll)
		FadePlayerRollTo(RandFloat(2,10), RandFloat(0.075f,0.35f), RandFloat(0.55f,1.15f)); 
	else
		FadePlayerRollTo(RandFloat(-2,-10), RandFloat(0.05f,0.25f), RandFloat(0.5f,1)); 
	
	AddLocalVarInt("Dizzy",1);
	
	if(GetLocalVarInt("Dizzy") <= 4) AddTimer("lookloop", RandFloat(3.0f,6.0f), "TimerRandomLook");
	else {
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerMoveSpeedMul(1);
		FadePlayerRollTo(0, 0.5f, 1); 
		FadePlayerFOVMulTo(1, 1);
		FadeImageTrailTo(0,1.5f);
	}
}
void StopRandomLook()
{
	RemoveTimer("lookloop");
	
	SetPlayerMoveSpeedMul(1);
	FadePlayerFOVMulTo(1, 1);
	FadeImageTrailTo(0,1.0f);
	FadePlayerRollTo(0, 0.5f, 2); 
}
//END RANDOM LOOK SPING//
/////////////////////////


//////////////////////////
//BEGIN MANY BOOKS SCARE//
//Skipped for now.
/*void CollideBeginManyBook(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("SoundScratchx_1", "scare_scratch", "throwbook_13", 0.5f, false);
	
	PlayMusic("03_event_books.ogg", false, 0.7f, 0, 10, false);
	
	AddTimer("manybooks", 3, "TimerManyBooks");
	
	//DEBUG
	AddDebugMessage("Begin Many Books Scare ", true);
}
void TimerManyBooks(string &in asTimer)
{
	AddLocalVarInt("VarMany", 1);	//What step to play in the event
	float fSpeedMany = 0.5f;	//The default time between steps in an event
	
	switch(GetLocalVarInt("VarMany")) {
		case 1:
			CreateParticleSystemAtEntity("PSGhostBang", "ps_break_wood.ps", "throwbook_14", false);
			PlaySoundAtEntity("SoundBang", "break_wood.snt", "throwbook_13", 0.0f, false);
			PlaySoundAtEntity("SoundFearx2", "scare_male_terrified.snt", "Player", 0.5f, false);
			fSpeedMany = 0.2f;
		break;
		case 2:
			GiveSanityDamage(10, true);
			for(int i=1;i<=5;i++) AddPropForce("throwbook_"+i, -100, 50, 0, "world");
			fSpeedMany = 0.2f;
		break;
		case 3:
			for(int i=6;i<=10;i++) AddPropForce("throwbook_"+i, -200, 120, -50, "world");
			fSpeedMany = 0.1f;
		break;
		case 4:
			for(int i=11;i<=15;i++) AddPropForce("throwbook_"+i, -300, 200, 50, "world");
			FadeLightTo("BoxLight_4",1,0,0.2f,1,-1,0.1f);
			fSpeedMany = 0.2f;
		break;
		case 5:
			StartEffectFlash(0.05f, 0.15f, 0.05f);
			PlaySoundAtEntity("SoundFlash1", "scare_thump_flash.snt", "Player", 0, false);
			fSpeedMany = 0.8f;
		break;
		case 6:
			FadeLightTo("BoxLight_4",0,0,0,0,-1,0.1f);
			StopSound("SoundFearx2", 2);
			StopSound("SoundScratchx_1", 2);
			SetPropActiveAndFade("throwbook_*", false, 2);
		break;
	}

	if(GetLocalVarInt("VarMany") < 6) AddTimer("manybooks", fSpeedMany, "TimerManyBooks");
}*/
//END MANY BOOKS SCARE//
////////////////////////


/////////////////////
//BEGIN PIANO MUSIC//
void CollideBeginPiano(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaSecondPiano"){
		SetLeverStuckState("piano_2", 0, false);
		AddBodyImpulse("piano_2_BodyLid", 0,100, 0, "world");
		
		PlaySoundAtEntity("SoundPiano2", "general_piano02.snt", "AreaPlayPiano", 0.0f, false);
		//PlaySoundAtEntity("SoundWind", "general_wind_whirl.snt", "AreaPlayPiano", 0.5f, false);
		PlaySoundAtEntity("SoundWind", "scare_wall_scratch_single", "AreaPlayPiano", 0.5f, false);
		
		SetEntityActive("chair_nice01_12",	false);
		SetEntityActive("chair_ghost", true);
		
		AddTimer("fallbook", 1.5f, "FallBook");
		return;
	}
	
	PlaySoundAtEntity("SoundPiano", "general_piano01.snt", "piano_1", 0.0f, false);
	//PlaySoundAtEntity("SoundWind", "general_wind_whirl.snt", "tome01_8", 0.0f, false);
	PlaySoundAtEntity("SoundWind", "03_wall_scratch.snt", "tome01_8", 0.5f, false);
	
	//SetLeverStuckState("piano_1", 0, false);
	//AddBodyImpulse("piano_1_BodyLid", 0,100, 0, "world");
		
	AddTimer("fallbook", 1.5f, "FallBook");
	
	AddTimer("fallbook1", 2.2f, "FallBook");
	
	AddTimer("fallbook2", 2.5f, "FallBook");
}
void CollideCloseLid(string &in asParent, string &in asChild, int alState)
{
	SetLeverStuckState("piano_1", 0, false);
	AddPropImpulse("piano_1", 0,0,10, "world");
	
	StopSound("SoundPiano", 1.0f);
	
	GiveSanityDamage(10, true);
	
	CreateParticleSystemAtEntity("PSdust", "ps_dust_piano.ps", "AreaPianoDust", false);
	
	AddTimer("liddust", 0.4f, "FallBook");
}

void FallBook(string &in asTimer)
{
	if(asTimer == "liddust"){
		PlaySoundAtEntity("LidClose", "level_wood_min_max01.snt", "piano_1", 0.0f, false);
		PlayEnemySoundAtEntity("notice.snt", "AreaDustScrape_6", "grunt");
		return;
	}
	else if(asTimer == "fallbook1"){
		CreateParticleSystemAtEntity("PSdustbook", "ps_dust_impact.ps", "tome01_8", false);
		StartScreenShake(0.005f, 0.5f, 0.5f, 0.5f);
		return;
	}
	else if(asTimer == "fallbook2"){
		GiveSanityDamage(10, true);
		return;
	}	
	
	StopSound("SoundWind", 2);
	
	AddPropForce("tome01_8", 0, 300, -700, "world");
}
//END PIANO MUSIC//
///////////////////


///////////////////////////
//BEGIN SECRET SHELF DOOR//
void InteractLibDoor(string &in asEntity)
{
	AddTimer("doormess", 0.5f, "TimerLockedDoorMess");
}
void TimerLockedDoorMess(string &in asTimer)
{
	SetMessage("Ch01Level03", "DoorLocked", 0);
	AddQuest("03LockedLibrary", "03LockedLibrary");
}

void EntityCallBreakWall(string &in asEntity, string &in type)
{
	SetEntityActive("PassageInteractArea", false);
	//SetEntityPlayerInteractCallback("mansionbase_secret_passage_1", "", true);
	
	GiveSanityBoostSmall();
	
	CompleteQuest("03LockedLibrary", "03LockedLibrary");
}

void CollideSecretBook(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1) {
		SetLocalVarInt("Var"+asParent, 1);
		
		AddTimer(asParent, (18.0f / GetDifficultyDirectFactor()), "PushBackBook");
		
		SetPropObjectStuckState(asParent, 1);
		
		PlaySoundAtEntity("Sound"+asParent, "gameplay_tick", asParent, 0.0f, false);
		
		StartScreenShake(0.001f, 0.5f, 0.5f, 0.5f);
		
		PlayGuiSound("16_lever_stuck", 0.3f);
		
		/*DEBUG
		 */
		AddDebugMessage("Book in area: "+asParent, true);
	} else {
		SetLocalVarInt("Var"+asParent, 0);
		
		RemoveTimer(asParent);
		
		PlaySoundAtEntity("Sound2"+asParent, "lock_door", asParent, 1.5f, false);
		PlayGuiSound("16_lever_stuck", 0.2f);
		
		StopSound("Sound"+asParent, 1.0f);
		
		/*DEBUG
		 */
		AddDebugMessage("Book out of area: "+asParent, true);
	}
	
	/*All books are pulled before time is out and the secret room is revealed.
	 */
	if(GetLocalVarInt("VarSecretBook_1") == 1 && GetLocalVarInt("VarSecretBook_2") == 1 && GetLocalVarInt("VarSecretBook_3") == 1) {
		
		FadeLightTo("PointLight_30", 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 3.0f);
		
		SetMoveObjectState("shelf_secret_door_1", 1);
		
		SetPropObjectStuckState("SecretBook_*", -1);
		
		SetEntityInteractionDisabled("SecretBook_*", true);
		SetEntityInteractionDisabled("shelf_secret_door_1", true);
		
		PlaySoundAtEntity("BooksDone", "lock_door", "Player", 0, false);
		
		CreateParticleSystemAtEntity("dust", "ps_dust_falling_door_quick", "AreaDoorParticle", false);
		
		for(int i=1;i<=3;i++){ RemoveTimer("SecretBook_"+i); StopSound("SoundSecretBook_"+i, 0.0f); }
		
		GiveSanityBoostSmall();
		
		PlayMusic("03_puzzle_secret.ogg", false, 0.7f, 0, 10, false);
		
		CompleteQuest("03Books", "03Books");
		
		SetEntityPlayerInteractCallback("shelf_secret_door_1", "", true);
		SetEntityActive("AreaSecretBook_1", false);
		SetEntityActive("AreaSecretBook_2", false);
		SetEntityActive("AreaSecretBook_3", false);
		
		/*DEBUG
		 */
		AddDebugMessage("All books in position, move shelf!", true);
	}

}
void PushBackBook(string &in asTimer)
{
	SetPropObjectStuckState(asTimer, -1);
	
	AddTimer("2"+asTimer, 0.25f, "PushBackBook02");
	
	/*DEBUG
	 */
	AddDebugMessage("Push back book: "+asTimer, true);
}
void PushBackBook02(string &in asTimer)
{
	if(asTimer == "2SecretBook_1") SetPropObjectStuckState("SecretBook_1", 0);
	else if(asTimer == "2SecretBook_2") SetPropObjectStuckState("SecretBook_2", 0);
	else SetPropObjectStuckState("SecretBook_3", 0);
}

/*Give quest after the visions about the books
 */
void VisionOverBooks()
{
	AddQuest("03Books", "03Books");
	
	SetEntityPlayerInteractCallback("shelf_secret_door_1", "InteractMoveShelf", true);
	
	AddTimer("enemys", 1.0f, "TimerPlayEnemy");
	
	//If the diary flashback is running, then need to set back some stuff when flashback is over.
	if(GetLocalVarInt("DiaryFlashbackActive")==1)
	{
		SetLocalVarInt("DiaryFlashbackActive",0);		
		
		FadeImageTrailTo(1.2f, 2);
		FadeSepiaColorTo(0.65f, 0.5f);
		FadePlayerFOVMulTo(2, 0.04f);
	}	
}
void TimerPlayEnemy(string &in asTimer)
{
	PlayEnemySoundAtEntity("giveup.snt", "AreaDustScrape_6", "grunt");
	
	if(GetToughModeOn() >= 2)
	{
		GiveSanityDamage(5.0f, false);
	}
	else
	if(GetToughModeOn() == 1)
	{
		GiveSanityDamage(4.0f, false);
	}
	else
	if(GetEasyModeOn() == 1)
	{
		GiveSanityDamage(2.0f, false);
	}
	else
	if(GetEasyModeOn() >= 2)
	{
		GiveSanityDamage(1.0f, false);
	}
	else
	{
		GiveSanityDamage(3.0f, false);
	}
}

void InteractMoveShelf(string &in asEntity)
{
	SetMessage("Ch01Level03", "MoveShelf", 0);
}

/*Find the key for the wine cellar
 */
void PickKey(string &in asEntity, string &in asType)
{	
	//GiveSanityBoostSmall();
	
	SetGlobalVarString(asEntity, asEntity);
	
	AddEntityCollideCallback("Player", "AreaActivateLastPiano", "CollideLastPiano", true, 1);
	
	AddTimer("TimerEGrunt", 0.2f, "TimerEGrunt");
}

void TimerEGrunt(string &in asTimer)
{
	int iMaxEventStep = 8;
	float fEventSpeed = 0.5f;
	string sEvent = asTimer;

	AddLocalVarInt(sEvent, 1);

	switch(GetLocalVarInt(sEvent)){
		case 1:
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
			PlayEnemySoundAtEntity("notice_long.snt", "AreaGrunt_1", "grunt");
			fEventSpeed = 0.6f;
		break;
		case 2:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
			PlayEnemySoundAtEntity("attack.snt", "AreaGrunt_1", "grunt");
			fEventSpeed = 0.3f;
		break;
		case 3:
			SetPlayerMoveSpeedMul(0.4f);
			SetPlayerRunSpeedMul(0.4f);
			
			SetEntityActive("mansion_1", false);
			SetEntityActive("mansion_8", true);
			
			StartScreenShake(0.01f, 0.3f, 0.2f, 0.5f);
			
			PlaySoundAtEntity("hitdoor", "break_wood", "AreaGrunt_1", 0.0f, false);
			GiveSanityDamage(10.0f, true);
			
			CreateParticleSystemAtEntity("breakdoor", "ps_break_wood.ps", "mansion_8", false);
			
			FadeImageTrailTo(2.0f, 2.0f);
		break;
		case 4:
			PlayMusic("15_event_prisoner", false, 1.0f, 1.0f, 10, false);
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerRunSpeedMul(0.5f);
			PlayGuiSound("react_scare", 0.7f);
			fEventSpeed = 2.0f;
		break;
		case 5:
			StopMusic(4.0f, 10);
			SetPlayerMoveSpeedMul(0.7f);
			SetPlayerRunSpeedMul(0.7f);
			PlayGuiSound("react_breath", 0.8f);
			fEventSpeed = 2.0f;
		break;
		case 6:
			PlayEnemySoundAtEntity("giveup.snt", "AreaGrunt_2", "grunt");
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
			PlayGuiSound("react_breath", 0.6f);
			fEventSpeed = 2.0f;
		break;
		case 7:
			SetPlayerMoveSpeedMul(0.9f);
			SetPlayerRunSpeedMul(0.9f);
			PlayGuiSound("react_breath", 0.4f);
			fEventSpeed = 1.0f;
		break;
		case 8:
			SetPlayerMoveSpeedMul(1.0f);
			SetPlayerRunSpeedMul(1.0f);
			PlayGuiSound("react_breath", 0.2f);
			FadeImageTrailTo(0.0f, 2.0f);
		break;
	}

	if(GetLocalVarInt(sEvent) <= iMaxEventStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
//END SECRET SHELF DOOR//
/////////////////////////


///////////////
//BEGIN CLOUD//
void CloudEffects(string &in asWhere, bool bLook)
{
	if(bLook) StartPlayerLookAt(asWhere, 0.75f, 0.75f, "");
	
	CreateParticleSystemAtEntity(asWhere, "ps_cloud_thing01.ps", asWhere, false);
	FadeSepiaColorTo(0.5f, 0.025f);
	FadeRadialBlurTo(0.1f, 0.025f);
	SetRadialBlurStartDist(0.2f);
	SetPlayerMoveSpeedMul(0.25f);
	SetPlayerRunSpeedMul(0);
	StartScreenShake(0.01f, 4, 2,2);
	
	AddTimer(asWhere, 0.05f, "TimerThing");
	AddTimer("react1", 0.25f, "TimerThing");
	AddTimer("thing1", 1.5f, "TimerThing");
	AddTimer("thing2", 3.0f, "TimerThing");
	AddTimer("thing3", 4.6f, "TimerThing");
	AddTimer("thing4", 6.0f, "TimerThing");
}
void CollideCloudThing(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaCloudActivate_2")
		CloudEffects("AreaCloudThing_2", true);
	else if(asChild == "AreaCloudActivate_3")
		CloudEffects("AreaDustScrape_3", false);
	else if(asChild == "AreaCloudActivate_4")
		CloudEffects("AreaDustScrape_8", false);
	else if(asChild == "AreaCloudActivate_5")
		CloudEffects("AreaCloudThing_5", true);
		
	/*DEBUG
	 */
	AddDebugMessage("Do cloud " + asChild, true);
}
void TimerThing(string &in asTimer)
{	
	PlaySoundAtEntity("clouds1", "03_cloud_swarm.snt", asTimer, 1, false);
	SetPlayerMoveSpeedMul(0.9f);
	SetPlayerRunSpeedMul(0.9f);
		
	if(asTimer == "thing1"){
		SetPlayerMoveSpeedMul(0.7f);
		SetPlayerRunSpeedMul(0.7f);
	}
	if(asTimer == "thing2"){
		SetPlayerMoveSpeedMul(0.6f);
		SetPlayerRunSpeedMul(0.6f);
		PlaySoundAtEntity(asTimer, "react_breath.snt", "Player", 0.75f, false);
		StopSound("clouds1", 3.5f);
	}
	if(asTimer == "thing3"){
		SetPlayerMoveSpeedMul(0.8f);
		SetPlayerRunSpeedMul(0.8f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
		StopPlayerLookAt();
	}
	if(asTimer == "thing4"){
		SetPlayerMoveSpeedMul(1);
		SetPlayerRunSpeedMul(1.0f);
		PlaySoundAtEntity(asTimer, "react_breath.snt", "Player", 1.25f, false);
	}
	
	if(asTimer == "react1"){
		GiveSanityDamage(10, false);
		PlaySoundAtEntity(asTimer, "react_scare.snt", "Player", 0.5f, false);
		SetPlayerMoveSpeedMul(0.8f);
		SetPlayerRunSpeedMul(0.8f);
	}
}
//END CLOUD//
/////////////


/////////////////////
//MISC MINOR EVENTS//
/*If player moves an urn from a table it will break and release a dust cloud
 */
void CollideJarLeaveArea(string &in asParent, string &in asChild, int alState)
{
	SetPropHealth(asParent, 0);
	
	PlaySoundAtEntity("ghost_released", "03_in_a_bottle", "Player", 0, false);
	
	GiveSanityDamage(10, true);
}

/*Play a last piano piece on the way out and activate a last cloud thing
 */
void CollideLastPiano(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("SoundPiano3", "general_piano03.snt", "piano_1", 0.0f, false);
	
	PlayEnemySoundAtEntity("giveup.snt", "AreaGrunt_4", "grunt");
	
	if(GetToughModeOn() >= 2)
	{
		GiveSanityDamage(5.0f, false);
	}
	else
	if(GetToughModeOn() == 1)
	{
		GiveSanityDamage(4.0f, false);
	}
	else
	if(GetEasyModeOn() == 1)
	{
		GiveSanityDamage(2.0f, false);
	}
	else
	if(GetEasyModeOn() >= 2)
	{
		GiveSanityDamage(1.0f, false);
	}
	else
	{
		GiveSanityDamage(3.0f, false);
	}
	
	/*DEBUG
	 */
	AddDebugMessage("Play last piano", true);
}

/*Dripping blood at hole in the ceiling
 */
void TimerBloodDrop(string &in asTimer)
{
	if(asTimer == "bloodsound"){
		PlaySoundAtEntity("bloddrop", "general_blood_drop", "AreaBloodDrop", 0, false);
		AddTimer("blooddrop", 0.1f, "TimerBloodDrop");
	}
	else{ 
		CreateParticleSystemAtEntity("PSblood", "ps_blood_drop.ps", "AreaBloodDrop_1", false);
		AddTimer("bloodsound", 2.9f, "TimerBloodDrop");
	}
}

/*Random ceiling particle and sound
 */
void TimerCrawl(string &in asTimer)
{
	int iCrawl = RandFloat(1, 8);	
	float fCrawl = RandFloat(0.5f,6.5f);
	
	CreateParticleSystemAtEntity("crawlPS"+iCrawl, "ps_dust_falling_small.ps", "AreaDustScrape_"+iCrawl, false);
	
	PlaySoundAtEntity("crawlSound"+iCrawl, "03_wall_scratch_single.snt", "AreaDustScrape_"+iCrawl, 1.0f, false);
	
	AddTimer("crawl", 3.5f+fCrawl, "TimerCrawl");
	
	/*DEBUG
	 */
	AddDebugMessage("Now crawling in: "+iCrawl+" Next crawl in: "+(5.5f+fCrawl), true);
}

/*Music when readin villlage note
 */
void PickVillageNote(string &in entity, string &in type)
{
	PlayMusic("03_paper_village.ogg", false, 0.7f, 0, 10, false);
}
/////////////////
/////////////////


/////////////////////////
//BEGIN THE BROKEN WALL//
/* void InteractBrokenWall(string &in asEntity)
{
	PlayGuiSound("impact_rock_low3.ogg", 1.0f);
	PlayGuiSound("15_rock_break", 0.7f);
	
	SetMessage("Ch01Level03", "BrokenWall", 0);
	
	//AddTimer(asEntity, 2.0f, "TimerBrokenWall");
}
//void TimerBrokenWall(string &in asTimer)
//{
//	SetEntityPlayerInteractCallback(asTimer, "InteractBrokenWall", true);
//}
 */
/*Give a hint on how to throw objects you hold
 */	
void CollideHint(string &in asParent, string &in asChild, int alState)
{
	GiveHint("ThrowHint", "Hints", "ThrowHint", 0);
	
	/*DEBUG
	 */
	AddDebugMessage("Collide!", true);
}


void PlayerInteractSecretPassage(string &in asEntity)
{
	AddLocalVarInt("PassageHitCount", 1);
	AddTimer("TimerDecreaseHitCount", 0.5f, "TimerDecreaseHitCount");	
	
	if(GetTimerTimeLeft("PassageBreakMessagePaused")==0)
	{
		PlayGuiSound("impact_rock_low3.ogg", 1.0f);
		PlayGuiSound("15_rock_break", 0.7f);
	
		SetMessage("Ch01Level03", "BrokenWall", 0);
		
		AddTimer("PassageBreakMessagePaused", 0.5f, "");
	}
	
	int lInteractedCount = GetLocalVarInt("PassageHitCount");
	
	int lDebrisArea = RandInt(1, 4);
	CreateParticleSystemAtEntity("PSPassageDebris"+lDebrisArea, "ps_dust_impact.ps", "PassageInteractDebris_"+lDebrisArea, false);
	
	AddDebugMessage("Adding debris PS to PassageInteractDebris_"+lDebrisArea, false);
	
	if(lInteractedCount==3)
	{
		SetPropHealth("mansionbase_secret_passage_1", 0);
	}
}

void TimerDecreaseHitCount(string &in asTimer)
{
	AddLocalVarInt("PassageHitCount", -1);
}

//END THE BROKEN WALL//
///////////////////////


////////////////////////////////
//BEGIN CAVEIN AT END OF LEVEL//
/*Make the corridor cave in behind the Player
*/
void CollideCaveIn(string &in asParent, string &in asChild, int alState)
{
	SetPropActiveAndFade("cave_in_cave_in_*", true, 1.0f);
	SetLampLit("hanging_lantern_ceiling_7", false, false);
	SetEntityActive("hanging_lantern_ceiling_7", false);
	
	CreateParticleSystemAtEntity("fogarea", "ps_area_fog_large", "AreaCaveIn", true);
	CreateParticleSystemAtEntity("fogarea2", "ps_area_fog_large", "AreaCaveIn2", true);
	CreateParticleSystemAtEntity("breakcave", "ps_break_mansionbase_wall", "AreaCaveIn", false);
	
	StartScreenShake(0.02f, 0.5f, 0.8f, 2.0f);

	PlaySoundAtEntity("rumble", "general_rock_rumble_no3d.snt", "Player", 0.5f, true);
	
	AddTimer("1", 1.0f, "TimerCaveIn");
	AddTimer("2", 0.7f, "TimerCaveIn");
	AddTimer("3", 3.0f, "TimerCaveIn");
	AddTimer("4", 5.0f, "TimerCaveIn");
	
	SetEntityActive("AreaCaveInQuest", true);
	SetEntityActive("AreaQuestDone", true);
	
	SetEntityActive("AreaLookGrunt_1", true);
	
	SetEntityActive("AreaGruntSound03", true);
	
	//Lock a door so force the player path + add some confusion.
	SetSwingDoorLocked("mansion_2", true, false);
	SetEntityPlayerInteractCallback("mansion_2", "Interactmansion_2", true);
	
	//Fade out some lights to make corridor darker.
	FadeLightTo("PointLight_4", 0,0,0,0, -1, 1);
	FadeLightTo("PointLight_2", 0,0,0,0, -1, 1);
	SetLightVisible("PointLight_32", false);
}

void Interactmansion_2(string &in asEntity)
{
	PlayGuiSound("locked_door", 0.7f);
	SetMessage("Ch02Level16", "InteractLargeDoor", 0);
	
	AddTimer(asEntity, 1.0f, "TimerGruntDoorBackon");
}
void TimerGruntDoorBackon(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "Interactmansion_2", true);
}

/*Event timer for the cavein
 */
void TimerCaveIn(string &in asTimer)
{
	if(asTimer == "1"){
		CreateParticleSystemAtEntity("cavein", "ps_break_cavein_local", "AreaCaveIn", false);
		PlaySoundAtEntity("caveins", "explosion_rock_large", "cave_in_cave_in_1", 0.0f, false);
	}
	else if(asTimer == "2"){
		PlayGuiSound("react_scare", 1.0f);
		GiveSanityDamage(10.0f, true);
		PlayMusic("11_event_tree", false, 1.0f, 0.0f, 10, false);
	}
	else if(asTimer == "3"){
		StopSound("rumble", 3.0f);
		StopMusic(2.0f, 10);
	}
	else if(asTimer == "4"){
		PlaySoundAtEntity("caveins", "15_rock_break", "cave_in_cave_in_1", 0.0f, false);
		PlayGuiSound("react_breath.snt", 1.0f);	
	}
}

/*If going to examine the cavein, give Quest
 */
void CollideCaveInQuest(string &in asParent, string &in asChild, int alState)
{
	AddQuest("03cavein", "03CaveIn");
}

/*When leaving the library, complete quest and activate some Grunt event areas
 */
void CollideQuestDone(string &in asParent, string &in asChild, int alState)
{
	CompleteQuest("03cavein", "03CaveIn");
	
	PlayEnemySoundAtEntity("notice_long.snt", "AreaGrunt_3", "grunt");
	
	if(GetToughModeOn() >= 2)
	{
		GiveSanityDamage(5.0f, false);
	}
	else
	if(GetToughModeOn() == 1)
	{
		GiveSanityDamage(4.0f, false);
	}
	else
	if(GetEasyModeOn() == 1)
	{
		GiveSanityDamage(2.0f, false);
	}
	else
	if(GetEasyModeOn() >= 2)
	{
		GiveSanityDamage(1.0f, false);
	}
	else
	{
		GiveSanityDamage(3.0f, false);
	}
	
	SetEntityActive("AreaActivateLiveGrunt_1", true);
	SetEntityActive("AreaActivateLiveGrunt_2", true);
}


//END CAVEIN AT END OF LEVEL//
//////////////////////////////


//////////////////////////////////////
//START A GRUNT WALKING IN THE LEVEL//
/*A grunt is shown going into another room when coming into the room, two different places but only 1 will be used
 */
void CollideActivateLiveGrunt(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaActivateLiveGrunt_1"){ 
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_5", 0, "");
		AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_grunt_1"), "AreaActivateLiveGrunt_3", "CollideDisableLiveGrunt", true, 1);
		SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_1"), true);
		SetEntityActive("AreaActivateLiveGrunt_2", false);
	} else{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_10", 0, "");
		AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_grunt_2"), "AreaActivateLiveGrunt_3", "CollideDisableLiveGrunt", true, 1);
		SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_2"), true);
		SetEntityActive("AreaActivateLiveGrunt_1", false);
	}
	
	SetPlayerRunSpeedMul(0.9f);
	SetPlayerMoveSpeedMul(0.9f);
	
	if(GetToughModeOn() <= 1) AddTimer("scare", 1.0f, "TimerGruntScare");
	AddTimer("breath", 3.0f, "TimerGruntScare");
}

/*Give sanity damage on grunt activation
 */
void TimerGruntScare(string &in asTimer)
{
	if(asTimer == "breath"){
		PlayGuiSound("react_breath", 0.6f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerMoveSpeedMul(1.0f);
		return;
	}
	
	GiveSanityDamage(10.0f, true);
	PlayGuiSound("react_scare", 0.7f);
	SetPlayerRunSpeedMul(0.8f);
	SetPlayerMoveSpeedMul(0.8f);
}

/*Remove the grunt as soon as it is in another room and out of sight
 */
void CollideDisableLiveGrunt(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(asParent, false);
}

/*If player goes to examine cavein from the other way around, a grunt appears behind him
 */
void CollideJumpGrunt(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1) SetEntityActive("AreaLookGrunt", true);
	else SetEntityActive("AreaLookGrunt", false);
}

/*To make sure that grunt is only activated when looking away
 */
void LookAtGrunt(string &in asEntity, int alState)
{
	if(GetEasyModeOn() <= 1)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_3"), "PathNodeArea_14", 2.0f, "");
		SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_3"), true);
		AddTimer("scare", 0.5f, "TimerGruntScare");
		AddTimer("breath", 2.5f, "TimerGruntScare");
		
		if(GetToughModeOn() >= 2)
		{
			SetEnemyIsHallucination(GetStringWithExtraModesSuffix("servant_grunt_3"), false);
			CheckPoint("CPGrunt", "PlayerStartArea_10", "CheckPointGrunt", "Hints", "HardModeDeath");
		}
	}
}

void CheckPointGrunt(string asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
}
//END A GRUNT WALKING IN THE LEVEL//
////////////////////////////////////


//////////////////////////////////////
//START GRUNT SOUNDS

void CollideGruntSound01(string &in asParent, string &in asChild, int alState)
{
	string sArea = "AreaDustScrape_3";
	PlayEnemySoundAtEntity("giveup.snt", sArea, "grunt");
	
	if(GetToughModeOn() >= 2)
	{
		GiveSanityDamage(5.0f, false);
	}
	else
	if(GetToughModeOn() == 1)
	{
		GiveSanityDamage(4.0f, false);
	}
	else
	if(GetEasyModeOn() == 1)
	{
		GiveSanityDamage(2.0f, false);
	}
	else
	if(GetEasyModeOn() >= 2)
	{
		GiveSanityDamage(1.0f, false);
	}
	else
	{
		GiveSanityDamage(3.0f, false);
	}
}

void CollideGruntSound02(string &in asParent, string &in asChild, int alState)
{
	string sArea = "AreaCaveIn2";
	PlayEnemySoundAtEntity("giveup.snt", sArea, "grunt");
	
	if(GetToughModeOn() >= 2)
	{
		GiveSanityDamage(5.0f, false);
	}
	else
	if(GetToughModeOn() == 1)
	{
		GiveSanityDamage(4.0f, false);
	}
	else
	if(GetEasyModeOn() == 1)
	{
		GiveSanityDamage(2.0f, false);
	}
	else
	if(GetEasyModeOn() >= 2)
	{
		GiveSanityDamage(1.0f, false);
	}
	else
	{
		GiveSanityDamage(3.0f, false);
	}
}

void CollideGruntSound03(string &in asParent, string &in asChild, int alState)
{
	string sArea = "AreaGruntSoundBehind";
	PlayEnemySoundAtEntity("giveup.snt", sArea, "grunt");
	
	if(GetToughModeOn() >= 2)
	{
		GiveSanityDamage(5.0f, false);
	}
	else
	if(GetToughModeOn() == 1)
	{
		GiveSanityDamage(4.0f, false);
	}
	else
	if(GetEasyModeOn() == 1)
	{
		GiveSanityDamage(2.0f, false);
	}
	else
	if(GetEasyModeOn() >= 2)
	{
		GiveSanityDamage(1.0f, false);
	}
	else
	{
		GiveSanityDamage(3.0f, false);
	}
}

void TimerIntroEnemy(string &in asTimer)
{
	string sArea = "AreaDustScrape_5";
	PlayEnemySoundAtEntity("giveup.snt", sArea, "grunt");
	
	if(GetToughModeOn() >= 2)
	{
		GiveSanityDamage(5.0f, false);
	}
	else
	if(GetToughModeOn() == 1)
	{
		GiveSanityDamage(4.0f, false);
	}
	else
	if(GetEasyModeOn() == 1)
	{
		GiveSanityDamage(2.0f, false);
	}
	else
	if(GetEasyModeOn() >= 2)
	{
		GiveSanityDamage(1.0f, false);
	}
	else
	{
		GiveSanityDamage(3.0f, false);
	}
}

//END GRUNT SOUNDS
//////////////////////////////////////


////////////////////////////
// Run first time starting map
void OnStart()
{
	SetMapDisplayNameEntry("Archives");
	
	//----COLLIDE CALLBACKS----//
	for(int i=1;i<=3;i++) AddEntityCollideCallback("SecretBook_"+i, "AreaSecretBook_"+i, "CollideSecretBook", false, 0);	//Pull books to reveal room
	AddEntityCollideCallback("Player", "AreaTriggerManyBook", "CollideBeginManyBook", true, 1);	//Makes the shelf bang and books fly
	AddEntityCollideCallback("Player", "AreaTriggerPiano", "CollideBeginPiano", true, 1);	//Some distant piano is playing and a book falls to the ground
	AddEntityCollideCallback("Player", "SlowArea_1", "CollideSlowArea", false, 0);	
	AddEntityCollideCallback("Player", "AreaSecondPiano", "CollideBeginPiano", true, 1);
	AddEntityCollideCallback("Player", "AreaClosePiano", "CollideCloseLid", true, 1);
	AddEntityCollideCallback("vase02_ghost_1", "AreaJar", "CollideJarLeaveArea", true, -1);
	AddEntityCollideCallback("Player", "AreaHalfToOrb", "CollideOrb", true, 1);
	AddEntityCollideCallback("Player", "AreaCloseToOrb", "CollideOrb", true, 1);
	AddEntityCollideCallback("chair_ghost", "mansionbase_secret_passage_1", "CollideHint", true, 1);			
	for(int i=1;i<=7;i++) AddEntityCollideCallback("rock_small_"+i, "mansionbase_secret_passage_1", "CollideHint", true, 1);
	for(int i=9;i<=12;i++) AddEntityCollideCallback("chair_nice01_"+i, "mansionbase_secret_passage_1", "CollideHint", true, 1);
	
	AddEntityCollideCallback("Player", "AreaCloudActivate_5", "CollideCaveIn", true, 1);
	AddEntityCollideCallback("Player", "AreaCaveInQuest", "CollideCaveInQuest", true, 1);
	AddEntityCollideCallback("Player", "AreaQuestDone", "CollideQuestDone", true, 1);
	
	AddEntityCollideCallback("Player", "AreaActivateLiveGrunt_1", "CollideActivateLiveGrunt", true, 1);
	AddEntityCollideCallback("Player", "AreaActivateLiveGrunt_2", "CollideActivateLiveGrunt", true, 1);
	
	AddEntityCollideCallback("Player", "AreaGruntSound01", "CollideGruntSound01", true, 1);
	AddEntityCollideCallback("Player", "AreaGruntSound02", "CollideGruntSound02", true, 1);
	AddEntityCollideCallback("Player", "AreaGruntSound03", "CollideGruntSound03", true, 1);
	
	AddEntityCollideCallback("Player", "AreaLookGrunt_1", "CollideJumpGrunt", false, 0);
	
	//----PLAYER INTERACTION----//
	//SetEntityPlayerInteractCallback("PassageInteractArea", "PlayerInteractSecretPassage", true);
	
	//NOT IN USE 
	//for(int i=2;i<=5;i++)  AddEntityCollideCallback("Player", "AreaCloudActivate_"+i, "CollideCloudThing", true, 1);
	//----INTRO----//
	//CloudEffects("AreaCloudThing_1", true);
	
	SetEntityCallbackFunc("note_paper01_2", "PickVillageNote");
	
	//SetSkyBoxActive(true);
	//SetSkyBoxColor(0.25, 0.30, 0.35, 1);
	
	//----ENTITY INIT----//
	SetPropHealth("display_3", 0);
	
	PlaySoundAtEntity("ambs1", "03_amb.snt", "AmbSounds", 4.0f, true);
	PlaySoundAtEntity("ambs2", "03_amb_library.snt", "AmbSounds", 4.0f, true);
	PlaySoundAtEntity("ambs3", "03_insects.snt", "AmbSounds", 4.0f, true);
	
	//----CONNECT CALLBACKS----//
	/*Secret hole in wall
	 */
	ConnectEntities("secret_painting",		//Name of connection
		"lever_small01", 	//Parent entity (Affects)
		"painting_large03_1",	//Child entity 	(Affected) 
		false,		//Invert the state sent
		1, 		//States used (0=both), checked before invertion.
		"");	//callback

	
	//----QUEST INIT----//
	SetNumberOfQuestsInMap(1);
	
	//----TIMER INIT----//
	AddTimer("crawl", 0.5f, "TimerCrawl");
	AddTimer("blooddrop", 1, "TimerBloodDrop");
	AddTimer("enemyS", 4.0f, "TimerIntroEnemy");
	
	//----VARIABLES----//
	SetLocalVarInt("VoiceResume", 0);
	SetGlobalVarInt("PlayerBeenInLevel03",1);
	
	//----DEBUG----//
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		
		//CollideCaveIn("", "", 1);	//to test cavein
		
		//AddLocalVarInt("diary", 2);	//Activate flashback on first diary pickup
		//AddTimer("TimerFlashBack", 0.1f, "TimerFlashBack");	//To use when tetsing with start loction _Flash
		//SetPlayerLampOil(15);	//To test always give oil during flashback
	}
}

////////////////////////////
// Run when entering map
void OnEnter()
{	
	//----PRELOADING----//
	PreloadSound("scare_thump_flash"); PreloadSound("03_creak"); PreloadSound("react_breath"); PreloadSound("03_rock_amb"); 
	PreloadSound("03_loop"); PreloadSound("03_orb_loop"); PreloadSound("03_orb_loop_loud"); PreloadSound("player_bodyfall"); 
	PreloadSound("03_orb"); PreloadSound("03_amb"); PreloadSound("03_insects"); PreloadSound("03_amb_library"); 
	PreloadSound("react_breath_slow"); PreloadSound("03_pound"); PreloadSound("react_pant"); PreloadSound("player_climb"); 
	PreloadSound("03_drag_dirt"); PreloadSound("03_lift_rock"); PreloadSound("03_crew_talk"); PreloadSound("03_waking_up"); 
	PreloadSound("03_rock_move"); PreloadSound("react_sigh"); PreloadSound("scare_scratch"); PreloadSound("break_wood"); 
	PreloadSound("scare_male_terrified"); PreloadSound("scare_thump_flash"); PreloadSound("general_piano02"); PreloadSound("general_wind_whirl"); 
    PreloadSound("scare_wall_scratch_single"); PreloadSound("general_piano01"); PreloadSound("gameplay_tick"); PreloadSound("lock_door"); 
	PreloadSound("03_cloud_swarm"); PreloadSound("03_in_a_bottle"); PreloadSound("general_piano03"); PreloadSound("general_blood_drop"); 
	PreloadSound("03_amb_idle.snt");
                                      
	PreloadParticleSystem("ps_break_wood"); PreloadParticleSystem("ps_dust_piano"); PreloadParticleSystem("ps_dust_impact");
	PreloadParticleSystem("ps_cloud_thing01"); PreloadParticleSystem("ps_blood_drop"); PreloadParticleSystem("ps_dust_falling_small");
	PreloadParticleSystem("ps_orb_on_player"); 
	      
	     
	//----AUDIO----//
	StopMusic(4.0f, 0);
	//PlayMusic("amb_soft_mood", true, 1, 0.1f, 0, true);
	//AutoSave();
	
	if(GetLocalVarInt("VarSecretBook_1") == 1 && GetLocalVarInt("VarSecretBook_2") == 1 && GetLocalVarInt("VarSecretBook_3") == 1)
	{
		SetEntityInteractionDisabled("SecretBook_1", true);
		SetEntityInteractionDisabled("SecretBook_2", true);
		SetEntityInteractionDisabled("SecretBook_3", true);
		SetEntityActive("AreaSecretBook_1", false);
		SetEntityActive("AreaSecretBook_2", false);
		SetEntityActive("AreaSecretBook_3", false);
	}
	
	if(QuestIsCompleted("03LockedLibrary"))
	{
		SetLightVisible("PointLight_32", false);
	}
	else
	{
		SetLightVisible("PointLight_32", true);
	}
	
	SetupCurrentMapBasedOnExtraModes();
	
	string sEnemyName = "";
	
	sEnemyName = "grunt";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	//////////////////////
	//Load Screen Setup
	SetupLoadScreen("LoadingText", "Ch01_Diary01_", 6, "game_loading_catacombs.jpg");
}