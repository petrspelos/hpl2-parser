
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "23_torture_transept";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8};
int[] gviEasierOilPotionsCodesArray = {1, 2};
int[] gviEasierHealthPotionsCodesArray = {1};
int[] gviEasierSanityPotionsCodesArray = {1};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3, 4};
int[] gviNormalOilPotionsCodesArray = {1};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {5, 6, 8};
int[] gviToughOilPotionsCodesArray = {0};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {8};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//CURRENT MAP SPECIFIC
string[] gvsDangerousLampsArray = {
	"candlestick_wall_11b", "candlestick_wall_12", "candlestick_wall_13", "candlestick_wall_14", "candlestick_floor_1", "candlestick_wall_1", 
	"candlestick_wall_6", "candlestick_wall_7", "candlestick_wall_8", "candlestick_wall_11", "candlestick_wall_9", "candlestick_wall_10"
};

float GetEntityPlayerDistance(string asEntity)
{
	float fPlayerPosX = GetPlayerPosX();
	float fPlayerPosY = GetPlayerPosY();
	float fPlayerPosZ = GetPlayerPosZ();
	float fEntityPosX = GetEntityPosX(asEntity);
	float fEntityPosY = GetEntityPosY(asEntity);
	float fEntityPosZ = GetEntityPosZ(asEntity);
	float fDistance = MathSqrt(MathPow((fEntityPosX - fPlayerPosX), 2.0f) + MathPow((fEntityPosY - fPlayerPosY), 2.0f) + MathPow((fEntityPosZ - fPlayerPosZ), 2.0f));
	return fDistance;
}

void OnLampStateChange(string asEntity, string asType)
{
	string[] vsDangerousEnemiesArray = {"enemy_1", "enemy_2", "enemy_3"};
	
	if(asType == "OnIgnite")
	{
		if(GetToughModeOn() >= 1)
		{
			for(int i=0; i<vsDangerousEnemiesArray.length(); i++)
			{
				string sEnemyName = GetStringWithExtraModesSuffix(vsDangerousEnemiesArray[i]);
				string sEnemyState = GetEnemyStateName(sEnemyName);
				
				if(sEnemyState != "Idle" && sEnemyState != "GoHome" && sEnemyState != "Dead" && sEnemyState != "NULL" && sEnemyState != "")
				{
					if((GetToughModeOn() == 1 && GetEntityPlayerDistance(sEnemyName) <= 20.0f) || (GetToughModeOn() >= 2))
					{
						AlertEnemyOfPlayerPresence(sEnemyName);
						AddDebugMessage("DEBUG: Enemy " + sEnemyName + " is now in alert state!", false);
						return;
					}
				}
			}
		}
		
		AddDebugMessage("DEBUG: Could not trigger enemy alert from enviroment lamp lit!", false);
	}
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

//------------------------------------------

///////////////////////////////////////////
// GET BLOOD
////////////////////////////////////////////

//------------------------------------------

void InteractBloodHole(string &in asEntity)
{
	SetMessage("Ch02Level23", "InteractBloodHole", -1);	
}

//------------------------------------------

//The player needs to have a string tied to the container.
void UseContainerOnBlood(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level23", "UseContainerOnBloodHole", -1);
	AddQuest("23NeedString", "23NeedString");	
}

void UseContainerOnHatch(string &in asItem, string &in asEntity)
{
	//Hatch is open
	if(GetLeverState(asEntity)==1)
	{
		UseContainerOnBlood(asItem, asEntity);
	}
	//Hatch is closed
	else
	{
		SetMessage("Ch02Level23", "UseContainerOnClosedHatch", -1);
	}
}

//Player already has blood in container but wants more or something
void UseBloodContainerOnBlood(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level23", "FilledContainerOnPool", -1);
}

//Hint for interacting on hatch
void InteractHatchDrainage(string &in asEntity)
{
	SetMessage("Ch02Level23", "SignGrate", -1);
}

//------------------------------------------

void UseContainerAndStringOnBlood(string &in asItem, string &in asEntity)
{
	SetPlayerCrouching(true);				//Make sure player sits down.
	StartPlayerLookAt("AreaBloodHole", 2, 4, "");		//Look at the hole
	
	RemoveItem("container_and_string");
	AddTimer("bloodevent1", 0.3, "TimerGetBloodEvent");
	
	SetEntityPlayerInteractCallback("AreaBloodHole", "", true);
	//SetEntityActive("AreaBloodHole", false);//No need for this any more
}

void UseContainerAndStringOnHatch(string &in asItem, string &in asEntity)
{
	//Hatch is open
	if(GetLeverState(asEntity)==1)
	{
		UseContainerAndStringOnBlood(asItem, asEntity);
	}
	//Hatch is closed
	else
	{
		SetMessage("Ch02Level23", "UseContainerOnClosedHatch", -1);
	}
}


void TimerGetBloodEvent(string &in asTimer)
{
	if(asTimer == "bloodevent1")
	{
		SetPropActiveAndFade("glass_container_string_1", true, 0.5);
		
		PlayGuiSound("26_put_blood.ogg", 0.8f);
		
		AddTimer("bloodevent2", 0.5, "TimerGetBloodEvent");
	}
	if(asTimer == "bloodevent2")
	{
		PlayGuiSound("26_fill_blood.ogg", 0.8f);
		
		AddTimer("bloodevent3", 1.5, "TimerGetBloodEvent");
	}
	if(asTimer == "bloodevent3")
	{
		PlayGuiSound("26_pick_blood.ogg", 0.8f);
		
		SetPropActiveAndFade("glass_container_string_1", false, 0.5);
		
		GiveItem("glass_container_blood", "Puzzle", "glass_container_blood", "glass_container_blood.tga", 0);		
		StopPlayerLookAt();
		
		//Increase ingredient counter!
		AddGlobalVarInt("IngredientCount",1);
		
		GiveSanityBoostSmall();
		PlayMusic("23_puzzle.ogg", false, 0.7f, 0.5f, 9, false);
		CompleteQuest("23NeedString", "23NeedString");
		
		//Disable the terror of this area.
		StopSound("AreaTerror_1terror", 2);
		RemoveTimer("AreaTerror_1terror");
		if(GetEasyModeOn() <= 0 && GetLocalVarString("ActiveEnemy") != "no_enemy")
			AlertEnemyOfPlayerPresence(GetLocalVarString("ActiveEnemy"));
	}
}

//------------------------------------------

///////////////////////////////////////////
// PICK UP ORB PIECE
////////////////////////////////////////////

//------------------------------------------

void PickUpOrbPiece(string &in asEntity, string &in asType)
{
	AddGlobalVarInt("TranseptOrbCount",1);
	
	AddDebugMessage("Transept OrbPiece count: "+GetGlobalVarInt("TranseptOrbCount"), false);
	
	if(asEntity == "OrbPiece_1")
	{
		if(GetLocalVarString("ActiveEnemy") == "no_enemy" && GetEasyModeOn() <= 1)
		{
			AddTimer("enemy_1", RandFloat(2.0f, 4.0f), "TimerActiveEnemy");
			SetSwingDoorClosed("castle_2", true, false);
		}
		else if(HasItem("glass_container_blood") == false && GetEasyModeOn() <= 0)
			SetEntityActive("AreaShowEnemy_1", true);
	}	
	else if(asEntity == "OrbPiece_2")
	{
		SetEntityActive("AreaCradleSoundEvent", true);
		
		if(GetLocalVarString("ActiveEnemy") == "no_enemy" && GetToughModeOn() >= 2)
		{
			SetSwingDoorDisableAutoClose("castle_4", true);
			SetSwingDoorClosed("castle_4", false, false);
			AddPropImpulse("castle_4", 3, 0, 0, "World");
			
			CheckPoint ("CPEnemy_2", "PlayerStartArea_4", "CPEnemyCallback", "", "");
			
			if(GetToughModeOn() <= 1)	PlayerReactCustom("pantsigheffect", 0.15f);
		
			SetLocalVarInt("EnemyNearStairs", 0);
			SetLocalVarString("ActiveEnemy", GetStringWithExtraModesSuffix("enemy_2"));
			
			SetEntityActive(GetStringWithExtraModesSuffix("enemy_2"), true);
			SetEnemyDisableTriggers(GetStringWithExtraModesSuffix("enemy_2"), false);
			TeleportEnemyToNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_21", true);
			ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("enemy_2"));
			
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_18", 2.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_164", 2.0f, "");
			if(GetGlobalVarInt("TranseptOrbCount") != 3 || GetEasyModeOn() >= 1)
			{
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_160", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_157", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
			}
			else
			{
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_87", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_31", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_33", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_35", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_37", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_210", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_41", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_44", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_48", GetEnemyIdleTime(4.0f), "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_44", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_40", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_37", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_34", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_31", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_87", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_164", 2.0f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_160", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_157", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
			}
		}
		else if(GetGlobalVarInt("TranseptOrbCount")!=3 && GetToughModeOn() >= 2)
			SetEntityActive("AreaShowEnemy_2", true);
	}
	else if(asEntity == "OrbPiece_3")
	{
		if(GetLocalVarString("ActiveEnemy") == "no_enemy" && GetEasyModeOn() <= 1)
		{
			AddTimer("enemy_3", RandFloat(1.0f, 2.0f), "TimerActiveEnemy");
			SetSwingDoorClosed("castle_3", true, false);
		}
		else if(GetGlobalVarInt("TranseptOrbCount")!=3 && GetEasyModeOn() <= 0)
			SetEntityActive("AreaShowEnemy_3", true);
	}
	
	//When all orbs are collecting, give player some extra sanity and nice music.	
	if(GetGlobalVarInt("TranseptOrbCount")==3)
	{
		if(GetToughModeOn() >= 1)
			AddEntityCollideCallback("Player", "AreaEnemyChase", "CollidePlayerAreaEnemyChase", true, 1);
		
		PlayMusic("02_puzzle.ogg", false, 0.7f, 0, 10, false);
		GiveSanityBoost();
		
		CompleteQuest("21OrbsLeftInTransept", "21OrbsLeftInTransept");
		
		if(GetEasyModeOn() >= 2)
		{
			SetEntityActive("AreaShowEnemy_1", true);	//SINCE IN EASIER MODE WE DON'T GET TO SEE A SINGLE MONSTER HERE ALL THIS TIME.
		}
	}
}

void CollidePlayerAreaEnemyChase(string &in asParent, string &in asChild,  int alState)
{
	if(GetLocalVarString("ActiveEnemy") != "no_enemy")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(2.5f, false);
		ShowEnemyPlayerPosition(GetLocalVarString("ActiveEnemy"));
		AddDebugMessage("Starting last chase sequence!", false);
		return;
	}
	else
	{
		AddDebugMessage("Last chase sequence has failed!", false);
		return;
	}
}

//------------------------------------------

///////////////////////////////////////////
// TERROR AREA
////////////////////////////////////////////

//------------------------------------------

void CollideTerrorArea(string &in asParent, string &in asChild, int alState)
{
	AddDebugMessage("Terror area: "+asChild+" State: "+alState, false);
	
	////////////////////////
	// Enter
	if(alState == 1)
	{
		PlaySoundAtEntity(asChild+"terror", "ui_torture.ent", asChild, 10, true);
		FadeImageTrailTo(1.0f, 0.5f);
		AddTimer(asChild+"terror", 2, "TimerTerrorDrain");
	}
	////////////////////////
	// Leave
	else
	{
		FadeImageTrailTo(0.0f, 0.5f);
		StopSound(asChild+"terror", 2);
		RemoveTimer(asChild+"terror");
	}
	
}

void TimerTerrorDrain(string & asTimer)
{
	if(GetPlayerSanity() < 35)
		GiveSanityDamage(0.05f*0.15f, false);
	else
		GiveSanityDamage(0.05f*0.5f, false);
		
	AddTimer(asTimer, 0.05f, "TimerTerrorDrain");
}

//------------------------------------------

///////////////////////////////////////////
// STRAPPADO EVENTS
////////////////////////////////////////////

//------------------------------------------

void CollideStrappadoShackles(string &in asParent, string &in asChild, int alState)
{
	string sSound = "";
	
	//Sound of stretch and pain
	if(asParent == "AreaStrappadoEvent_1")
	{
		sSound = "23_strap1";	
		PlayerReact(1.0f,0.4f,false);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.3f, 0.1f);
	}
	//More stretch, panting, the vicitim is now in air and kicks chair
	else if(asParent == "AreaStrappadoEvent_2")
	{
		sSound = "23_strap2";	
		SetPropActiveAndFade("stool_wood_2", false, 0.3f);
		SetPropActiveAndFade("stool_wood_4", true, 0.3f);
		PlayerReact(1.0f,0.6f,false);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.3f, 0.1f);
	}
	//Higher up, even more pain.
	else if(asParent == "AreaStrappadoEvent_3")
	{
		sSound = "23_strap3";	
		PlayerReact(1.0f,0.8f,true);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.3f, 0.1f);
	}
	
	AddTimer("stopradial", 1.0f, "TimerStopRadial");
	AddDebugMessage("Strappado area: "+asParent+" sound: "+sSound, false);
	PlaySoundAtEntity("strappado",sSound, asParent, 0, false);
}

void TimerStopRadial(string &in asTimer)
{
	FadeRadialBlurTo(0.0f, 0.05f);
}
//------------------------------------------


///////////////////////////////////////////
// SAW SOUND EVENTS
////////////////////////////////////////////

//------------------------------------------

void CollideSawSounds(string &in asParent, string &in asChild, int alState)
{
	string sLoopingSound = "";
	string sEventSound = "";
	float fFadeOutTime = 2.0f;
	
	//Low muffled cries + silent looping sawing starts
	if(asChild == "AreaSawSounds_1")
	{
		sEventSound = "23_saw_voice1";
		sLoopingSound = "23_saw1";	
	}
	//A little bit  muffled cries + a bit louder looping sawing starts
	if(asChild == "AreaSawSounds_2")
	{
		sEventSound = "23_saw_voice2";
		sLoopingSound = "23_saw2";	
		PlayerReact(1.0f,0.5f,false);		
	}
	//A louder (but still muffled) screams and intense sawing.
	if(asChild == "AreaSawSounds_3")
	{
		sEventSound = "23_saw_voice3";
		sLoopingSound = "23_saw3";
		PlayerReact(1.0f,0.8f,true);
	}
	//Just fade out sawing.
	if(asChild == "AreaSawSounds_4")
	{
		fFadeOutTime = 2.0;
	}
		
	//////////////////////////////////////
	//Stop current sound and play a new one
	StopSound("saw_script_loop",fFadeOutTime); 
	StopSound("saw_script_event",fFadeOutTime); 
	if(sLoopingSound != "")	PlaySoundAtEntity("saw_script_loop",sLoopingSound, "AreaSawSoundSource", 1, true);
	if(sEventSound != "")	PlaySoundAtEntity("saw_script_event",sEventSound, "AreaSawSoundSource", 0, false);
	
	AddDebugMessage("saw area: "+asChild+" loopsound: "+sLoopingSound + " event sound: "+sEventSound, false);
	
}

///////////////////////////////////////////
// CRADLE SOUND EVENTS
////////////////////////////////////////////

//------------------------------------------

void CollideCradleSoundEvent(string &in asParent, string &in asChild, int alState)
{
	//The captive (heard in visions) is still alive, pants silently and is dragged away.
	//PlaySoundAtEntity("sawvictim", "23_saw_victim_pant_and_drag", "AreaCradleSoundSource", 0, false);
	
	AddDebugMessage("Captive pants and is dragged off.", false);
}


///////////////////////////////////////////
// PICK UP TORTURE NOTE
////////////////////////////////////////////

//------------------------------------------

void PickUpTortureNote(string &in asEntity, string &in asType)
{
	PlayMusic("23_paper_alexander.ogg", false, 0.7f, 0.1f, 9, false);
}

//------------------------------------------

///////////////////////////////////////////
// INTERACT TORTURE MACHINE
////////////////////////////////////////////

//------------------------------------------

void InteractEmotionEffectSaw(string &in asArea)
{
	StartEffectEmotionFlash("Ch02Level23", "TortureText_Saw", "ui_insanity_touch.snt");
}

//------------------------------------------

void CradleFlashbackOver()
{
	SetEntityActive("AreaEmotionEffectCradle", true);	
	PlaySoundAtEntity("AreaEmotionEffectCradle", "23_pyramid", "AreaEmotionEffectCradle", 0.0f, false);
}

void InteractEmotionEffectCradle(string &in asArea)
{
	StartEffectEmotionFlash("Ch02Level23", "TortureText_Cradle", "ui_insanity_touch.snt");
}

//------------------------------------------

void InteractEmotionEffectStrappado(string &in asArea)
{
	StartEffectEmotionFlash("Ch02Level23", "TortureText_Strappado", "ui_insanity_touch.snt");
}

//------------------------------------------

//PLAYER REACT
void PlayerReact(float fTime, float fVolume, bool bSanity)
{
	SetLocalVarFloat("PlayerReactVolume", fVolume);
	
	if(bSanity) AddTimer("sanity", fTime, "TimerPlayerReact");
		
	AddTimer("scare", fTime, "TimerPlayerReact");
	AddTimer("breath", fTime+2.0f, "TimerPlayerReact");
	AddTimer("breathl", fTime+4.0f, "TimerPlayerReact");
}
void TimerPlayerReact(string &in asTimer)
{
	if(asTimer == "sanity")
		GiveSanityDamage(20.0f, true);
		
	if(asTimer == "scare")
		PlayGuiSound("react_"+asTimer, GetLocalVarFloat("PlayerReactVolume"));

	if(asTimer == "breath")
		PlayGuiSound("react_"+asTimer, GetLocalVarFloat("PlayerReactVolume")-0.1f);
		
	if(asTimer == "breathl")
		PlayGuiSound("react_"+asTimer, GetLocalVarFloat("PlayerReactVolume")-0.3f);
}


/////////////////////
//EVENT ON EXIT
void CollideAreaStartBreath(string &in asParent, string &in asChild, int alState)
{
	if(GetPlayerSanity() > 90) return;	//No event on sanity more than 90
	if(GetGlobalVarInt("TranseptOrbCount")!=3) return;
	if(GetLocalVarInt("BreathEvent") == 1) return;
	
	SetLocalVarInt("BreathEvent", 1);
	
	for(int i=1;i<=16;i++){
		AddTimer("AreaBreath_"+RandInt(0, 16), RandFloat(0.0f, i), "TimerBreath");
	}
	
	StartScreenShake(0.03f, 4.0f, 2.0f, 4.0f);
	SetRadialBlurStartDist(0.3f);
	
	PlayerReact(1.0f, 0.4f, false);
	
	PlaySoundAtEntity("creak", "00_creak.snt", "Player", 4.0f, false);
	PlaySoundAtEntity("creak", "23_warn.snt", "Player", 1.0f, false);
	
	AddTimer("startr", 1.0f, "TimerStopBreath");
	AddTimer("stopc", 10.0f, "TimerStopBreath");
	AddTimer("stopr", 10.0f, "TimerStopBreath");
	
	if(GetLocalVarString("ActiveEnemy") != "no_enemy")
	{
		if(GetToughModeOn() >= 2)
		{
			ShowEnemyPlayerPosition(GetLocalVarString("ActiveEnemy"));
		}
		else
		if(GetToughModeOn() >= 1)
		{
			AlertEnemyOfPlayerPresence(GetLocalVarString("ActiveEnemy"));
		}
		else
		if(GetEntityPlayerDistance(GetLocalVarString("ActiveEnemy")) <= 18.0f && GetEasyModeOn() <= 0)
		{
			AlertEnemyOfPlayerPresence(GetLocalVarString("ActiveEnemy"));
		}
	}
}
void TimerBreath(string &in asTimer)
{
	CreateParticleSystemAtEntity("ps"+asTimer, "ps_cave_monster_breath_up.ps", asTimer, false);
	PlaySoundAtEntity("s"+asTimer, "23_breath", asTimer, RandFloat(0.0f, 1.0f), false);
}
void TimerStopBreath(string &in asTimer)
{
	if(asTimer == "startr")
		FadeRadialBlurTo(0.1f, 0.01f);
	
	if(asTimer == "stopc")
		StopSound("creak", 8.0f);
		
	if(asTimer == "stopr")
		FadeRadialBlurTo(0.0f, 0.04f);
}

//START CUSTOM PLAYER REACTIONS FUNCTIONS
void PlayerReactCustom(string asType, float afTime)
{
	AddTimer(asType, afTime, "TimerPlayerReactCustom");
	if(asType == "scarehighdamage" || asType == "panthighdamage" || asType == "scaremaxdamage" || asType == "pantmaxdamage")
	{
		AddTimer("breathslow", afTime + 3.0f, "TimerPlayerReactCustom");
		AddTimer("breathslow", afTime + 6.0f, "TimerPlayerReactCustom");
	}
	else if(StringContains(asType, "breatheffect") == true)
	{
		AddTimer("breatheffect", afTime + 3.0f, "TimerPlayerReactCustom");
		AddTimer("breatheffect", afTime + 6.0f, "TimerPlayerReactCustom");
	}
	else if(StringContains(asType, "breathsloweffect") == true)
	{
		AddTimer("breathsloweffect", afTime + 3.0f, "TimerPlayerReactCustom");
		AddTimer("breathsloweffect", afTime + 6.0f, "TimerPlayerReactCustom");
	}
	else if(StringContains(asType, "sigheffect") == true)
	{
		AddTimer("sigheffect", afTime + 3.0f, "TimerPlayerReactCustom");
		AddTimer("sigheffect", afTime + 6.0f, "TimerPlayerReactCustom");
	}
}

void TimerPlayerReactCustom(string asTimer)
{
	if(asTimer == "pant")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), true);
	}
	else if(asTimer == "pantbreath")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), true);
		AddTimer("breath", 3.0f, "TimerPlayerReactCustom");
	}
	else if(asTimer == "pantbreathslow")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), true);
		AddTimer("breathslow", 3.0f, "TimerPlayerReactCustom");
	}
	else if(asTimer == "pantsigh")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), true);
		AddTimer("sigh", 3.0f, "TimerPlayerReactCustom");
	}
	else if(asTimer == "pantbreatheffect" || asTimer == "pantbreathsloweffect" || asTimer == "pantsigheffect")
	{
		PlayGuiSound("react_pant", 0.7f);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
		GiveSanityDamage(RandFloat(5.0f, 10.0f), false);
	}
	else if(asTimer == "scare")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), true);
	}
	else if(asTimer == "scarebreath")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), true);
		AddTimer("breath", 3.0f, "TimerPlayerReactCustom");
	}
	else if(asTimer == "scarebreathslow")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), true);
		AddTimer("breathslow", 3.0f, "TimerPlayerReactCustom");
	}
	else if(asTimer == "scaresigh")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), true);
		AddTimer("sigh", 3.0f, "TimerPlayerReact");
	}
	else if(asTimer == "scarebreatheffect" || asTimer == "scarebreathsloweffect" || asTimer == "scaresigheffect")
	{
		PlayGuiSound("react_scare", 0.7f);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
		GiveSanityDamage(RandFloat(5.0f, 10.0f), false);
	}
	else if(asTimer == "breath")
	{
		PlayGuiSound("react_breath", 0.5f);
		GiveSanityDamage(RandFloat(1.5f, 3.0f), false);
	}
	else if(asTimer == "breatheffect")
	{
		PlayGuiSound("react_breath", 0.5f);
		FadeSepiaColorTo(0.0f, 0.1f);
		FadeRadialBlurTo(0.0f, 0.1f);
	}
	else if(asTimer == "breathslow")
	{
		PlayGuiSound("react_breath_slow", 0.5f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), false);
	}
	else if(asTimer == "breathsloweffect")
	{
		PlayGuiSound("react_breath_slow", 0.5f);
		FadeSepiaColorTo(0.0f, 0.1f);
		FadeRadialBlurTo(0.0f, 0.1f);
	}
	else if(asTimer == "sigh")
	{
		PlayGuiSound("react_sigh", 0.5f);
		GiveSanityDamage(RandFloat(1.5f, 3.0f), false);
	}
	else if(asTimer == "sigheffect")
	{
		PlayGuiSound("react_sigh", 0.5f);
		FadeSepiaColorTo(0.0f, 0.1f);
		FadeRadialBlurTo(0.0f, 0.1f);
	}
}
//END CUSTOM PLAYER REACTIONS FUNCTIONS

void EnemyCallFunc(string &in asEntity, string &in asType)
{
	SetLocalVarString("ActiveEnemy", "no_enemy");
}

void CollideEnemyAreaCheck(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1)
	{
		SetLocalVarString("ActiveEnemy", asParent);
		return;
	}
	else if(alState == -1)
	{
		SetLocalVarString("ActiveEnemy", "no_enemy");
		return;
	}
}

void CollideEnemyAreaCheckStairs(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1)
	{
		SetLocalVarInt("EnemyNearStairs", 1);
		return;
	}
	else if(alState == -1)
	{
		SetLocalVarInt("EnemyNearStairs", 0);
		return;
	}
}

void TimerActiveEnemy(string &in asTimer)
{
	int alRand = RandInt(0, 3);
	if(GetToughModeOn() <= 1){
	if(alRand == 0)
		PlayerReactCustom("scarebreathsloweffect", 0.5f);
	else if(alRand == 1)
		PlayerReactCustom("scarebreathslow", 0.75f);
	else if(alRand == 2)
		PlayerReactCustom("pantbreathsloweffect", 0.5f);
	else if(alRand == 3)
		PlayerReactCustom("pantbreathslow", 0.75f);}
	SetLocalVarInt("EnemyNearStairs", 0);
	SetLocalVarString("ActiveEnemy", GetStringWithExtraModesSuffix(asTimer));
	
	SetEntityActive(GetStringWithExtraModesSuffix(asTimer), true);
	SetEnemyDisableTriggers(GetStringWithExtraModesSuffix(asTimer), false);
	ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix(asTimer));
	if(asTimer == "enemy_1")
	{
		CheckPoint ("CPEnemy_1", "PlayerStartArea_2", "CPEnemyCallback", "", "");
	
		TeleportEnemyToNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_87", true);
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_30", 2.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_32", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_34", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_37", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_40", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_41", GetEnemyIdleTime(3.0f), "");
		if(GetToughModeOn() >= 1)
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_48", 1.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_40", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_37", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_34", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_31", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_199", 2.0f, "");
		if(GetGlobalVarInt("TranseptOrbCount") != 3 || GetEasyModeOn() >= 1)
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
		else
		{
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_85", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_66", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_67", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_69", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_216", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_80", GetEnemyIdleTime(4.0f), "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_216", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_69", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_66", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_85", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_199", 2.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
		}
	}
	else if(asTimer == "enemy_3")
	{
		CheckPoint ("CPEnemy_3", "PlayerStartArea_3", "CPEnemyCallback", "", "");
	
		TeleportEnemyToNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_108", true);
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_109", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_85", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_66", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_68", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_70", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_216", 2.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_75", GetEnemyIdleTime(3.0f), "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_72", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_69", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_66", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_85", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_109", 2.0f, "");
		if(GetGlobalVarInt("TranseptOrbCount") != 3 || GetEasyModeOn() >= 1)
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
		else
		{
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_86", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_18", 1.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_4", 2.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_2", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_1", GetEnemyIdleTime(3.0f), "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_2", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_12", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_86", 1.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_109", 2.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix(asTimer), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
		}
	}
}

void CollidePlayerAreaEscape(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaUpstairs", true);
	if(GetLocalVarString("ActiveEnemy") != "no_enemy")
		SetEnemyDisableTriggers(GetLocalVarString("ActiveEnemy"), true);
	
	if(GetLocalVarInt("EnemyNearStairs") == 1)
	{
		SetEntityActive(GetLocalVarString("ActiveEnemy"), false);
		SetEntityActive(GetLocalVarString("ActiveEnemy"), true);
		TeleportEnemyToNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_191", true);
		ClearEnemyPatrolNodes(GetLocalVarString("ActiveEnemy"));
		int i = RandInt(0, 2);
		if(i == 0)
		{
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_85", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_66", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_69", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_216", GetEnemyIdleTime(4.0f), "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_69", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_66", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_85", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
		}
		else if(i == 1)
		{
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_86", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_8", GetEnemyIdleTime(6.0f), "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_86", 2.0f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_87", 3.0f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
		}
		else if(i == 2)
		{
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_177", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_87", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_31", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_32", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_34", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_37", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_40", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_52", GetEnemyIdleTime(4.0f), "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_40", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_37", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_34", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_31", 0.001f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_87", 1.0f, "");
			AddEnemyPatrolNode(GetLocalVarString("ActiveEnemy"), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
		}
	}
}

void CollidePlayerAreaJoin(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaUpstairs", true);
	if(GetLocalVarString("ActiveEnemy") != "no_enemy")
		SetEnemyDisableTriggers(GetLocalVarString("ActiveEnemy"), false);
}

void CollidePlayerAreaUpstairs(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(asChild, false);
	if((GetLocalVarString("ActiveEnemy") != "no_enemy" && GetGlobalVarInt("TranseptOrbCount") < 3 && GetToughModeOn() <= 0) || (GetLocalVarString("ActiveEnemy") != "no_enemy" && GetEasyModeOn() >= 1))
	{
		SetEnemyDisableTriggers(GetLocalVarString("ActiveEnemy"), false);
		SetEntityActive(GetLocalVarString("ActiveEnemy"), false);
		FadeEnemyToSmoke(GetLocalVarString("ActiveEnemy"), false);
		SetLocalVarString("ActiveEnemy", "no_enemy");
		
		int alRand = RandInt(0, 2);
		if(alRand == 0)
		{
			SetEntityActive("AreaShowEnemy_1", true);
			SetEntityActive("AreaShowEnemy_2", false);
			SetEntityActive("AreaShowEnemy_3", false);
		}
		else if(alRand == 1)
		{
			SetEntityActive("AreaShowEnemy_1", true);
			SetEntityActive("AreaShowEnemy_2", false);
			SetEntityActive("AreaShowEnemy_3", true);
		}
		else if(alRand == 2)
		{
			SetEntityActive("AreaShowEnemy_1", false);
			SetEntityActive("AreaShowEnemy_2", false);
			SetEntityActive("AreaShowEnemy_3", true);
		}
	}
	else if(HasItem("glass_container_blood") == false && GetEasyModeOn() <= 0)
	{
		SetEntityActive("AreaShowEnemy_1", true);
		SetEntityActive("AreaShowEnemy_2", false);
		SetEntityActive("AreaShowEnemy_3", false);
	}
}

void CollidePlayerAreaShowEnemy(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarString("ActiveEnemy") == "no_enemy" && GetGlobalVarInt("TranseptOrbCount") >= 1)
	{
		SetEntityActive(asChild, false);
		RemoveTimer("enemy_1");
		RemoveTimer("enemy_2");
		RemoveTimer("enemy_3");
		if(asChild == "AreaShowEnemy_1")
		{
			if(HasItem("glass_container_blood") == false)
			{
				AddTimer("enemy_1", RandFloat(2.0f, 4.0f), "TimerActiveEnemy");
				SetSwingDoorClosed("castle_2", true, false);
			}
		}
		else if(asChild == "AreaShowEnemy_2")
		{
			CheckPoint ("CPEnemy_2", "PlayerStartArea_4", "CPEnemyCallback", "", "");
			
			GiveSanityDamage(RandFloat(5.0f, 10.0f), false);
		
			SetLocalVarInt("EnemyNearStairs", 0);
			SetLocalVarString("ActiveEnemy", GetStringWithExtraModesSuffix("enemy_2"));
			
			SetEntityActive(GetStringWithExtraModesSuffix("enemy_2"), true);
			SetEnemyDisableTriggers(GetStringWithExtraModesSuffix("enemy_2"), false);
			TeleportEnemyToNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_4", true);
			ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("enemy_2"));
			
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_18", 2.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_164", 2.0f, "");
			if(GetGlobalVarInt("TranseptOrbCount") != 3 || GetEasyModeOn() >= 1)
			{
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_160", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_157", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
			}
			else
			{
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_87", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_31", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_33", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_35", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_37", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_210", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_41", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_44", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_48", GetEnemyIdleTime(4.0f), "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_44", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_40", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_37", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_34", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_31", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_87", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_164", 2.0f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_160", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_157", 0.001f, "");
				AddEnemyPatrolNode(GetStringWithExtraModesSuffix("enemy_2"), "PathNodeArea_134", GetEnemyIdleTime(4.0f), "");
			}
		}
		else if(asChild == "AreaShowEnemy_3")
		{
			AddTimer("enemy_3", RandFloat(1.0f, 2.0f), "TimerActiveEnemy");
			SetSwingDoorClosed("castle_3", true, false);
		}
	}
}

void ResetDoorIfBroken(string asDoor)
{
	if(GetPropHealth(asDoor) <= 0.0f)
	{
		ResetProp(asDoor);
	}
}

void CPEnemyCallback(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	
	PlayMusic("23_amb.ogg", true, 1.0f, 4.0f, 0, true);
	
	ResetDoorIfBroken("castle_2");
	ResetDoorIfBroken("prison_2");
	ResetDoorIfBroken("castle_3");
	ResetDoorIfBroken("prison_3");
	ResetDoorIfBroken("castle_4");
	ResetDoorIfBroken("prison_4");
	
	SetLocalVarInt("EnemyNearStairs", 0);
	SetLocalVarString("ActiveEnemy", "no_enemy");
	if(alCount == 0)
	{
		if(asName == "CPEnemy_1")
		{
			AddTimer("enemy_1", RandFloat(2.0f, 4.0f), "TimerActiveEnemy");
			SetSwingDoorClosed("castle_2", true, false);
			SetEntityActive("AreaShowEnemy_1", false);
		}
		else if(asName == "CPEnemy_2")
			SetEntityActive("AreaShowEnemy_2", true);
		else if(asName == "CPEnemy_3")
		{
			AddTimer("enemy_3", RandFloat(1.0f, 2.0f), "TimerActiveEnemy");
			SetSwingDoorClosed("castle_3", true, false);
			SetEntityActive("AreaShowEnemy_3", false);
		}
	}
	else
	{
		for(int i=1;i<=16;i++)
			AddTimer("AreaBreath_"+RandInt(0, 16), RandFloat(0.0f, i), "TimerBreath");
		
		StartScreenShake(0.03f, 4.0f, 2.0f, 4.0f);
		SetRadialBlurStartDist(0.3f);
		PlayerReact(1.0f, 0.4f, false);
		PlaySoundAtEntity("creak", "00_creak.snt", "Player", 4.0f, false);
		PlaySoundAtEntity("creak", "23_warn.snt", "Player", 1.0f, false);
		AddTimer("startr", 1.0f, "TimerStopBreath");
		AddTimer("stopc", 10.0f, "TimerStopBreath");
		AddTimer("stopr", 10.0f, "TimerStopBreath");
		
		if(GetGlobalVarInt("TranseptOrbCount") != 3)
		{
			int alRandom = RandInt(0, 2);
			if(alRandom == 0)
			{
				SetEntityActive("AreaShowEnemy_1", true);
				SetEntityActive("AreaShowEnemy_2", false);
				SetEntityActive("AreaShowEnemy_3", false);
			}
			else if(alRandom == 1)
			{
				SetEntityActive("AreaShowEnemy_1", true);
				SetEntityActive("AreaShowEnemy_2", false);
				SetEntityActive("AreaShowEnemy_3", true);
			}
			else if(alRandom == 2)
			{
				SetEntityActive("AreaShowEnemy_1", false);
				SetEntityActive("AreaShowEnemy_2", false);
				SetEntityActive("AreaShowEnemy_3", true);
			}
		}
		else if(HasItem("glass_container_blood") == false)
			SetEntityActive("AreaShowEnemy_1", true);
	}
}

////////////////////////////
// Run first time starting map
void OnStart()
{
	for(int i=0; i<gvsDangerousLampsArray.length(); i++)
	{
		SetEntityCallbackFunc(gvsDangerousLampsArray[i], "OnLampStateChange");
	}
	
	SetMapDisplayNameEntry("Transept");
	
	///////////////////////////
	// Item callbacks
	AddUseItemCallback("container_on_blood", "glass_container_1", "AreaBloodHole", "UseContainerOnBlood", false);
	AddUseItemCallback("container_on_blood", "glass_container_1", "hatch_drainage_2", "UseContainerOnHatch", false);
	
	AddUseItemCallback("container_n_string_on_blood","container_and_string", "AreaBloodHole", "UseContainerAndStringOnBlood", false);
	AddUseItemCallback("container_n_string_on_blood", "container_and_string", "hatch_drainage_2", "UseContainerAndStringOnHatch", false);
	
	AddUseItemCallback("contblood_on_blood1", "glass_container_blood", "AreaBloodHole", "UseBloodContainerOnBlood", false);
	AddUseItemCallback("contblood_on_blood2", "glass_container_blood", "hatch_drainage_2", "UseBloodContainerOnBlood", false);
	
	///////////////////////////
	// Collide Areas
	for(int i=1; i<=3; ++i)
		AddEntityCollideCallback("Player", "AreaTerror_"+i, "CollideTerrorArea", false, 0);
	
	for(int i=1; i<=4; ++i)
		AddEntityCollideCallback("Player", "AreaSawSounds_"+i, "CollideSawSounds",true, 1);
		
	AddEntityCollideCallback("AreaStrappadoEvent_*", "strappado_shackles_2", "CollideStrappadoShackles",true, 1);
	AddEntityCollideCallback("Player","AreaCradleSoundEvent", "CollideCradleSoundEvent", true, 1);
	
	AddEntityCollideCallback("Player", "AreaStartBreath", "CollideAreaStartBreath", false, 1);
	
	AddEntityCollideCallback("Player", "AreaEscapeEnemy", "CollidePlayerAreaEscape", false, 0);
	AddEntityCollideCallback("Player", "AreaJoinEnemy", "CollidePlayerAreaJoin", false, 1);
	AddEntityCollideCallback("Player", "AreaUpstairs", "CollidePlayerAreaUpstairs", false, 1);
	AddEntityCollideCallback("Player", "AreaShowEnemy_1", "CollidePlayerAreaShowEnemy", false, 1);
	AddEntityCollideCallback("Player", "AreaShowEnemy_2", "CollidePlayerAreaShowEnemy", false, 1);
	AddEntityCollideCallback("Player", "AreaShowEnemy_3", "CollidePlayerAreaShowEnemy", false, 1);
	
	//Interacttion
	SetEntityPlayerInteractCallback("hatch_drainage_2", "InteractHatchDrainage", true);
	
	///////////////////////////
	// Connections	
	InteractConnectPropWithRope("wheelrope", "crank_iron_2","RopeArea_1", true, 6,3,3, false, 0);
	
	///////////////////////////
	// Debug
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		
		if(HasItem("glass_container_1") == false) GiveItemFromFile("glass_container_1", "glass_container.ent");
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	PreloadSound("ui_torture"); PreloadSound("23_strap1"); PreloadSound("23_strap2"); PreloadSound("23_strap3");
	PreloadSound("23_saw_voice1"); PreloadSound("23_saw1"); PreloadSound("23_saw_voice2"); PreloadSound("23_saw2");
	PreloadSound("23_saw_voice3"); PreloadSound("23_saw3"); PreloadSound("23_pyramid"); PreloadSound("react_scare");
	PreloadSound("react_breath");
	
	PlayMusic("23_amb.ogg", true, 1.0f, 4.0f, 0, true);
	//AutoSave();
	
	SetLocalVarInt("EnemyNearStairs", 0);
	SetLocalVarString("ActiveEnemy", "no_enemy");
	
	CheckPoint ("CPFall", "PlayerStartArea_1", "CPEnemyCallback", "", "");
	
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("enemy_1"), "AreaCheckEnemy", "CollideEnemyAreaCheck", false, 0);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("enemy_1"), "AreaCheckEnemyStairs", "CollideEnemyAreaCheckStairs", false, 0);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("enemy_2"), "AreaCheckEnemy", "CollideEnemyAreaCheck", false, 0);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("enemy_2"), "AreaCheckEnemyStairs", "CollideEnemyAreaCheckStairs", false, 0);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("enemy_3"), "AreaCheckEnemy", "CollideEnemyAreaCheck", false, 0);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("enemy_3"), "AreaCheckEnemyStairs", "CollideEnemyAreaCheckStairs", false, 0);
	
	if(GetGlobalVarInt("TranseptOrbCount") >= 1 && GetGlobalVarInt("TranseptOrbCount") != 3 && GetEasyModeOn() <= 1)
	{
		int alRand = RandInt(0, 2);
		if(alRand == 0)
		{
			SetEntityActive("AreaShowEnemy_1", true);
			SetEntityActive("AreaShowEnemy_2", false);
			SetEntityActive("AreaShowEnemy_3", false);
		}
		else if(alRand == 1)
		{
			SetEntityActive("AreaShowEnemy_1", true);
			SetEntityActive("AreaShowEnemy_2", false);
			SetEntityActive("AreaShowEnemy_3", true);
		}
		else if(alRand == 2)
		{
			SetEntityActive("AreaShowEnemy_1", false);
			SetEntityActive("AreaShowEnemy_2", false);
			SetEntityActive("AreaShowEnemy_3", true);
		}
	}
	else if(HasItem("glass_container_blood") == false && GetEasyModeOn() <= 0)
	{
		SetEntityActive("AreaShowEnemy_1", true);
		SetEntityActive("AreaShowEnemy_2", false);
		SetEntityActive("AreaShowEnemy_3", false);
	}
	
	SetupCurrentMapBasedOnExtraModes();
	
	string sEnemyName = "";
	
	sEnemyName = "suitor";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	SetLocalVarInt("EnemyNearStairs", 0);
	SetLocalVarString("ActiveEnemy", "no_enemy");
}