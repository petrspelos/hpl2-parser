//////////////////////////////////////////////////////////////////////////////////////	
//OnStart
//////////////////////////////////////////////////////////////////////////////////////
void OnStart()
{
	PlayMusic("Track7.ogg", true, 2, 1, 1, true);
	AddUseItemCallback("", "ToFloodedRoom", "to_blood", "UseKeyOnDoor", true);
	AddEntityCollideCallback("Player", "DestroyLights", "Lights", true, 1);
	AddEntityCollideCallback("Player", "SlowlyOpenDoor", "Stare", true, 1);
	AddEntityCollideCallback("Player", "CertainDeath", "Wrong", true, 1);
	AddEntityCollideCallback("Player", "MessageOne", "Message", false, 1);
	AddEntityCollideCallback("Player", "MessageTwo", "OtherMessage", false, 1);
	AddEntityCollideCallback("Player", "Checkpoint", "Checkpoint_1", true, 1);
	AddEntityCollideCallback("TBT", "DestroyTBT", "BreakBox", true, 1);
	AddEntityCollideCallback("Player", "ChangeMusic", "SwitchSong", false, 1);
	AddEntityCollideCallback("Player", "ChangeMusic2", "SwitchSong2", false, 1);
	AddEntityCollideCallback("Player", "SetActive", "Buddeh", true, 1);
	AddEntityCollideCallback("Player", "ToSafety", "ToNextMap", true, 1);
	AddEntityCollideCallback("Player", "SetUpMem", "MemAdd", true, 1);
	AddEntityCollideCallback("Player", "OpenHallWithMonsta", "Unleash", true, 1);
	AddEntityCollideCallback("Player", "Message1", "DisplayMessage1", true, 1);
	SetEntityPlayerInteractCallback("ToFloodedRoom","ExplodeWall1", true);
	SetLightVisible("Flicker", false);
	SetLightVisible("StopFlashLight", false);
	SetLightVisible("DoorLight", false);
	SetEntityPlayerInteractCallback("ToLevel4Key", "SetChase", true);
}

////////////////////////////////////////////////////////////////////////////////////
//OnEnter
////////////////////////////////////////////////////////////////////////////////////

void OnEnter()
{
	AutoSave();
}

//////////////////////////////////////////////////////////////////////////////////////	
//Break Tiny Box Tim
//////////////////////////////////////////////////////////////////////////////////////

void BreakBox(string &in asParent, string &in asChild, int alState)
{
	SetPropHealth("TBT", -1000);
}

//////////////////////////////////////////////////////////////////////////////////////	
//Music
//////////////////////////////////////////////////////////////////////////////////////

void SwitchSong(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("Track_BloodRoom.ogg", true, 2, 1, 1, true);
}

void SwitchSong2(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("Track7.ogg", true, 2, 1, 1, true);
}

//////////////////////////////////////////////////////////////////////////////////////	
//Checkpoints
//////////////////////////////////////////////////////////////////////////////////////

void Checkpoint_1(string &in asParent, string &in asChild, int alState)
{
	CheckPoint ("", "Checkpoint_4", "Reset", "DeathHint", "Surroundings");
}

void Reset(string &in asName, int alCount)
	{
		  SetEnemyDisabled("CirclyThing", false);
		  SetEntityActive("CirclyThing", true);
	}

void Reset_2(string &in asName, int alCount)
	{
		  SetEnemyDisabled("Level3SE", false);
		  SetEntityActive("Level3SE", true);
	}

void Reset_3(string &in asName, int alCount)
	{
		  SetEnemyDisabled("Level3SE", false);
		  SetEntityActive("Level3SE", true);
	}	
	
void AltReset(string &in asName, int alCount)
{
	for(int i = 1; i <= 23; i++) SetEntityActive("rock_large01_push_"+i, false);
	SetEnemyDisabled("WrongSE", false);
	SetEntityActive("WrongSE", false);
	DestroyParticleSystem("rockfog");
}	

//////////////////////////////////////////////////////////////////////////////////////	
//Key Unlock
//////////////////////////////////////////////////////////////////////////////////////	
	
void UseKeyOnDoor(string &in asItem, string &in asEntity)
{
    SetSwingDoorLocked("to_blood", false, true);
    PlaySoundAtEntity("unlock_door", "unlock_door.snt", asEntity, 0, false);
    RemoveItem(asItem);	
	}

//////////////////////////////////////////////////////////////////////////////////////	
//Wall Explode
//////////////////////////////////////////////////////////////////////////////////////	

void ExplodeWall1(string &in item)
{
	SetEntityActive("RevealBloodRoom", false);
	PlaySoundAtEntity("explosion", "explosion_rock_large.snt", "RevealBloodRoom", 0, false);
	StartScreenShake( 0.1f, 3, 0.1, 0.1);
	SetLightVisible("DoorLight", false);
	}

//////////////////////////////////////////////////////////////////////////////////////	
//Lights
//////////////////////////////////////////////////////////////////////////////////////	
	
void Lights(string &in asParent, string &in asChild, int alState)
{
	SetLightVisible("Flicker", true);
	AddTimer("", 0.5, "Out");
	}
	
void Out(string &in asTimer)
{
	SetLightVisible("Flicker", false);
	SetLightVisible("Main", false);
	SetLampLit("BackUp", false, true);
	SetLampLit("Chandelier", false, true);
	PlaySoundAtEntity("light_out", "light_explode.snt", "Chandelier", 0, false);
	}

void StopFlash(string &in asEntity, int LeverState)
{
	if (GetLeverState("PullToStop") == 1)
	{
		SetLightVisible("StopFlashLight", true);
		SetLightVisible("Flash", false);
	}
}	

void Lights1(string &in asTimer)
{
	SetLampLit("LightUp_1", true, true);
	SetLampLit("LightUp_2", true, true);
}

void Lights2(string &in asTimer)
{
	SetLampLit("LightUp_3", true, true);
	SetLampLit("LightUp_4", true, true);
}

void Lights3(string &in asTimer)
{
	SetLampLit("LightUp_5", true, true);
	SetLampLit("LightUp_6", true, true);
}

void Lights4(string &in asTimer)
{
	SetLampLit("LightUp_7", true, true);
	SetLampLit("LightUp_8", true, true);
}

void Lights5(string &in asTimer)
{
	SetLampLit("LightUp_9", true, true);
	SetLampLit("LightUp_10", true, true);
}

void Lights6(string &in asTimer)
{
	SetLampLit("LightUp_11", true, true);
	SetLampLit("LightUp_12", true, true);
}

void Lights7(string &in asTimer)
{
	SetLampLit("LightUp_13", true, true);
	SetLampLit("LightUp_14", true, true);
}

void Lights8(string &in asTimer)
{
	SetLampLit("LightUp_15", true, true);
	SetLampLit("LightUp_16", true, true);
}

//////////////////////////////////////////////////////////////////////////////////////	
//Move Door
//////////////////////////////////////////////////////////////////////////////////////
	
void Stare(string &in asParent, string &in asChild, int alState)
{
	GiveSanityDamage(20, true);
	StartPlayerLookAt("MovingDoor", 1, 1, "BeforeStopLook");
	StopPlayerLookAt();
	SetSwingDoorClosed("MovingDoor", false, false);
    SetSwingDoorDisableAutoClose("MovingDoor", true);
	CreateParticleSystemAtEntity("doorwind", "ps_dust_whirl.ps", "AreaWind", false);
	AddTimer("", 5, "DestroyWind");
    PlaySoundAtEntity("creak", "joint_door_move_special.snt", "MovingDoor", 1, false);
	SetLightVisible("DoorLight", true);
    AddTimer("", 2, "TimerStopSound");
    AddTimer("MovingDoor", 0, "TimerMoveDoor");
}

void DestroyWind(string &in asTimer)
{
	DestroyParticleSystem("doorwind");
}

void TimerMoveDoor(string &in asTimer)
{
        if(GetLocalVarInt("VarDoor") == 10) return;
        AddLocalVarInt("VarDoor", 1);
 
        AddTimer(asTimer, 0.03, "TimerMoveDoor");
 
        AddPropForce(asTimer, -70, 0, 0, "world");
}
 
void TimerStopSound(string &in asTimer)
{
        StopSound("creak", 0.4);
}

void BeforeStopLook(string &in asCallback)
{
	AddTimer("notlooking", 5, "StopLook");
}

void StopLook(string &in asTimer)
{
	StopPlayerLookAt();
}


//////////////////////////////////////////////////////////////////////////////////////	
//Kaernk
//////////////////////////////////////////////////////////////////////////////////////

void Buddeh(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("CirclyThing", true);
	AddQuest("Creature", "Water");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_1", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_2", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_3", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_4", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_5", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_6", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_7", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_8", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_9", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_10", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_11", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_12", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_13", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_14", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_15", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_16", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_17", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_18", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_19", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_20", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_21", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_22", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_23", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_24", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_25", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_26", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_27", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_28", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_29", 0.001f, "");
	AddEnemyPatrolNode("CirclyThing", "Kaernk_30", 0.001f, "");
	}	

//////////////////////////////////////////////////////////////////////////////////////	
//Messages
//////////////////////////////////////////////////////////////////////////////////////
	
void DisplayMessage1(string &in asParent, string &in asChild, int alState)	
{
	SetMessage("Messages", "Choice1", 7);
	CheckPoint ("", "Checkpoint_7", "Reset_3", "DeathHint", "Run");
}

void Locked(string &in asEntity)
{
	if(GetSwingDoorLocked(asEntity) == true)
	{
		SetMessage("Messages", "Locked", 1);
	}
	
}

void Message(string &in asParent, string &in asChild, int alState)
{	
	SetMessage("Messages", "Level3p2_1", 3);
}

void OtherMessage(string &in asParent, string &in asChild, int alState)
{
	SetMessage("Messages", "Level3p2_2", 3);
}

//////////////////////////////////////////////////////////////////////////////////////	
//Before Chase
//////////////////////////////////////////////////////////////////////////////////////

void SetChase(string &in item)
	{
		SetEntityActive("CirclyThing", false);
		SetEntityActive("OpenHallWithMonsta", true);
		SetEntityActive("Level4", true);
		AddQuest("Note", "HeadBack");
}

//////////////////////////////////////////////////////////////////////////////////////	
//Unleash Monster
//////////////////////////////////////////////////////////////////////////////////////

void Unleash(string &in asParent, string &in asChild, int alState)	
{
	CompleteQuest("Note", "HeadBack");
	SetEntityActive("ImmaWall", false);
	SetEntityActive("MessageOne", false);
	SetEntityActive("MessageTwo", true);
	SetEntityActive("Level3SE", true);
	AddTimer("", 0.1, "Lights1");
	AddTimer("", 0.6, "Lights2");
	AddTimer("", 1.1, "Lights3");
	AddTimer("", 1.6, "Lights4");
	AddTimer("", 2.1, "Lights5");
	AddTimer("", 2.6, "Lights6");
	AddTimer("", 3.1, "Lights7");
	AddTimer("", 3.6, "Lights8");
	CheckPoint ("", "Checkpoint_7", "Reset_2", "DeathHint", "Run");
	AddEnemyPatrolNode("Level3SE", "MonsterPath_1", 0.001f, "");
	AddEnemyPatrolNode("Level3SE", "MonsterPath_2", 0.001f, "");
	AddEnemyPatrolNode("Level3SE", "MonsterPath_3", 0.001f, "");
	AddEnemyPatrolNode("Level3SE", "MonsterPath_4", 0.001f, "");
	AddEnemyPatrolNode("Level3SE", "MonsterPath_5", 0.001f, "");
	AddEnemyPatrolNode("Level3SE", "MonsterPath_6", 0.001f, "");
	AddEnemyPatrolNode("Level3SE", "MonsterPath_7", 0.001f, "");
	AddEnemyPatrolNode("Level3SE", "MonsterPath_8", 0.001f, "");
}

//////////////////////////////////////////////////////////////////////////////////////	
//Previous Map
//////////////////////////////////////////////////////////////////////////////////////

void ToNextMap(string &in asParent, string &in asChild, int alState)	
{
	ChangeMap("level_3", "PlayerStartArea_3", "", "");
}

//////////////////////////////////////////////////////////////////////////////////////	
//Lever
//////////////////////////////////////////////////////////////////////////////////////

void Freedom(string &in asEntity, int LeverState)
{
        if(GetLeverState("RevealExit") == 1)
		{
		SetLeverStuckState("RevealExit", 1, true);
		SetEntityActive("ClearTheWay", false);
		}
		}

//////////////////////////////////////////////////////////////////////////////////////	
//Wrong Choice
//////////////////////////////////////////////////////////////////////////////////////		

void Wrong(string &in asParent, string &in asChild, int alState)
{
	for(int i = 1; i <= 23; i++) SetEntityActive("rock_large01_push_"+i, true);
	CheckPoint("", "Checkpoint_7", "AltReset", "DeathHint", "Wrong");
	CreateParticleSystemAtEntity("rockfog", "ps_dust_push_15.ps", "AreaFog", true);
	SetEntityActive("WrongSE", true);
	ShowEnemyPlayerPosition("WrongSE");
}

//////////////////////////////////////////////////////////////////////////////////////	
//Mementos
//////////////////////////////////////////////////////////////////////////////////////

void MemAdd(string &in asParent, string &in asChild, int alState)
{
	AddEntityCollideCallback("Player", "Memento", "Memento1", true, 1);
}

void Memento1(string &in asParent, string &in asChild, int alState)
{
	AddQuest("Similar", "Rooms");
}

//////////////////////////////////////////////////////////////////////////
//OnLeave
//////////////////////////////////////////////////////////////////////////
void OnLeave()
{
int load = RandInt(0, 19);
if(load == 6) SetupLoadScreen("Loading", "LoadScreen1", 0,"loading_screen1.jpg");
if(load == 1) SetupLoadScreen("Loading", "LoadScreen2", 0, "loading_screen2.jpg");
if(load == 2) SetupLoadScreen("Loading", "LoadScreen3", 0, "loading_screen3.jpg");
if(load == 3) SetupLoadScreen("Loading", "LoadScreen4", 0,"loading_screen4.jpg");
if(load == 4) SetupLoadScreen("Loading", "LoadScreen5", 0,"loading_screen5.jpg");
if(load == 5) SetupLoadScreen("Loading", "LoadScreen6", 0,"loading_screen6.jpg");
if(load == 0) SetupLoadScreen("Loading", "LoadScreen7", 0,"loading_screen7.jpg");
if(load == 7) SetupLoadScreen("Loading", "LoadScreen8", 0,"loading_screen8.jpg");
if(load == 8) SetupLoadScreen("Loading", "LoadScreen9", 0,"loading_screen9.jpg");
if(load == 9) SetupLoadScreen("Loading", "LoadScreen10", 0,"loading_screen10.jpg");
if(load == 10) SetupLoadScreen("Loading", "LoadScreen11", 0,"loading_screen11.jpg");
if(load == 11) SetupLoadScreen("Loading", "LoadScreen12", 0,"loading_screen12.jpg");
if(load == 12) SetupLoadScreen("Loading", "LoadScreen13", 0,"loading_screen13.jpg");
if(load == 13) SetupLoadScreen("Loading", "LoadScreen14", 0,"loading_screen14.jpg");
if(load == 14) SetupLoadScreen("Loading", "LoadScreen15", 0,"loading_screen15.jpg");
if(load == 15) SetupLoadScreen("Loading", "LoadScreen16", 0,"loading_screen16.jpg");
if(load == 16) SetupLoadScreen("Loading", "LoadScreen17", 0,"loading_screen17.jpg");
if(load == 17) SetupLoadScreen("Loading", "LoadScreen18", 0,"loading_screen18.jpg");
if(load == 18) SetupLoadScreen("Loading", "LoadScreen19", 0,"loading_screen19.jpg");
if(load == 19) SetupLoadScreen("Loading", "LoadScreen20", 0,"loading_screen20.jpg");
CompleteQuest("Similar", "Rooms");
CompleteQuest("Creature", "Water");
}