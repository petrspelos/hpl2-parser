void OnEnter()
{
	if(ScriptDebugOn())
	{
		SetGlobalVarInt("FastSeekerAchievement", 1);
		SetGlobalVarInt("HealthAchievement", 1);
		SetGlobalVarInt("ItemsAchievement", 1);
		SetGlobalVarInt("NoDeathAchievement", 1);
		//SetGlobalVarInt("StatuesAchievement", 1);
		SetGlobalVarInt("WardrobeAchievement", 1);
		SetGlobalVarInt("EnemiesAchievement", 1);
		SetGlobalVarInt("PuzzleAchievement", 1);
		//SetGlobalVarInt("NoPuzzleAchievement", 1);
		SetGlobalVarInt("NoStatuesAchievement", 1);
		SetGlobalVarInt("SanityAchievement", 1);
		SetGlobalVarInt("SlimesAchievement", 1);
		SetGlobalVarInt("LightsAchievement", 1);
	}
	
	PreloadParticleSystem("ps_acid_web_dissolve.ps");
	PreloadParticleSystem("ps_dust_falling.ps");
	PreloadParticleSystem("ps_light_dust.ps");
	PreloadParticleSystem("ps_light_dust_large.ps");
	PreloadParticleSystem("ps_area_fog.ps");
	PreloadParticleSystem("ps_area_fog_large.ps");
	PreloadParticleSystem("ps_area_fog_small.ps");
	PreloadParticleSystem("ps_area_fog_sewer_long_warmup.ps");
	PreloadParticleSystem("ps_door_damage_wood.ps");
	PreloadParticleSystem("ps_break_wood.ps");
	
	PreloadSound("02_guardian_idle_rand.snt");
	PreloadSound("13_amb.snt");
	PreloadSound("15_sand_debris.snt");
	PreloadSound("15_amb.snt");
	PreloadSound("15_rock_amb.snt");
	PreloadSound("15_wall_crawl.snt");
	PreloadSound("critter_rat.snt");
	PreloadSound("02_insanity_whisper_loop.snt");
	PreloadSound("02_insanity_whisper_rand.snt");
	PreloadSound("close_gate.snt");
	PreloadSound("02_woosh.snt");
	PreloadSound("05_piano_memory.snt");
	
	PreloadSound("gameplay_acid_web.snt");
	PreloadSound("lock_door.snt");
	PreloadSound("locked_door.snt");
	PreloadSound("open_door.snt");
	PreloadSound("open_door_long.snt");
	PreloadSound("door_gate_bar_locked.snt");
	PreloadSound("door_mansion_close.snt");
	PreloadSound("door_mansion_open.snt");
	PreloadSound("close_door.snt");
	PreloadSound("close_door_long.snt");
	PreloadSound("unlock_door.snt");
	PreloadSound("react_breath.snt");
	PreloadSound("react_breath_slow.snt");
	PreloadSound("react_pant.snt");
	PreloadSound("react_scare.snt");
	PreloadSound("react_sigh.snt");
	PreloadSound("general_fire_burning.snt");
	PreloadSound("general_fire_burning_low.snt");
	PreloadSound("break_pottery.snt");
	PreloadSound("break_glass_bottle.snt");
	PreloadSound("break_glass_large.snt");
	PreloadSound("break_wood.snt");
	PreloadSound("break_wood_metal.snt");
	PreloadSound("guardian_activated.snt");
	PreloadSound("guardian_ontop.snt");
	PreloadSound("hit_wood.snt");
	PreloadSound("player_climb.snt");
	PreloadSound("player_crouch.snt");
	PreloadSound("player_jump.snt");
	PreloadSound("player_stand.snt");
	PreloadSound("roll_wood.snt");
	PreloadSound("slime_attack_normal_hit.snt");
	PreloadSound("slime_create.snt");
	PreloadSound("slime_loop.snt");
	PreloadSound("step_run_dirt.snt");
	PreloadSound("step_walk_dirt.snt");
	PreloadSound("step_sneak_dirt.snt");
	PreloadSound("step_run_fabric.snt");
	PreloadSound("step_walk_fabric.snt");
	PreloadSound("step_sneak_fabric.snt");
	PreloadSound("step_run_metal.snt");
	PreloadSound("step_walk_metal.snt");
	PreloadSound("step_sneak_metal.snt");
	PreloadSound("step_run_organic.snt");
	PreloadSound("step_walk_organic.snt");
	PreloadSound("step_sneak_organic.snt");
	PreloadSound("step_run_rock.snt");
	PreloadSound("step_walk_rock.snt");
	PreloadSound("step_sneak_rock.snt");
	PreloadSound("step_run_wood.snt");
	PreloadSound("step_run_wood_squeaky.snt");
	PreloadSound("step_walk_wood.snt");
	PreloadSound("step_walk_wood_squeaky.snt");
	PreloadSound("step_sneak_wood.snt");
	PreloadSound("step_sneak_wood_squeaky.snt");
	PreloadSound("flashback_flash.snt");
	PreloadSound("hurt_pant.snt");
	PreloadSound("sanity_damage.snt");
	PreloadSound("sanity_drain_high.snt");
	PreloadSound("sanity_drain_med.snt");
	PreloadSound("sanity_drain_low.snt");
	PreloadSound("sanity_heartbeat.snt");
	PreloadSound("sanity_pant.snt");
	PreloadSound("ui_add_quest.snt");
	PreloadSound("ui_lantern_off.snt");
	PreloadSound("ui_lantern_on.snt");
	PreloadSound("ui_sanity_gain.snt");
	PreloadSound("ui_terror_meter.snt");
	PreloadSound("enemy_hallucination_disappear.snt");

	SetMapDisplayNameEntry("Cave");
	
	CheckPoint ("OutOfMap", "PlayerStartArea_3", "CPOutOfMap", "DeathHints", "DoNotFall");
	
	for(int i=1; i<=47; i++) SetEntityInteractionDisabled("torch_static01_" + i, true);
	
	if(GetGlobalVarInt("PianoQuestFailed") == 0 && GetGlobalVarInt("PianoQuest") == 1)
	{
		SetEntityActive("potion_health_1", true);
		SetEntityActive("potion_oil_1", true);
		SetEntityActive("potion_sanity_1", true);
		SetEntityActive("note_letter_1", true);
		SetEntityActive("piano_1", true);
		SetLightVisible("PointLight_2", true);
		PlaySoundAtEntity("pianomemorysound", "02_insanity_whisper_loop.snt", "note_letter_1", 2.0f, true);
		
		SetMessage("Jack", "PianoQuestSuccess", 7.0f);
	}
	else 
	{
		if(GetGlobalVarInt("PianoQuestFailed") == 1) 
		{
			SetMessage("Jack", "PianoQuestFail", 7.0f);
			SetEntityActive("piano_1", false);
		}
	}
	if(GetGlobalVarInt("PianoQuest") == 1)
	{
		StartEffectFlash(1.5f, 1.0f, 2.0f);
		SetupLoadScreen("LoadingHints", "21To22", 0, "game_loading_well.jpg");
		SetEntityActive("piano_2", false);
		SetEntityActive("cavein_1", false);
		SetLightVisible("PianoLight_2", true);
	}
	else PlayMusic("amb_extra01.ogg", true, 1.0f, 0.1f, 0, false);
	
	if(GetGlobalVarInt("HealthAchievement") == 1)
		AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
	if(GetGlobalVarInt("FastSeekerAchievement") == 1)
		SetPlayerRunSpeedMul(1.175f);
	if(GetGlobalVarInt("WardrobeAchievement") == 1)
		SetPlayerJumpForceMul(1.175f);
	if(GetGlobalVarInt("LightsAchievement") == 1)
		SetLanternLitCallback("LanternOilForEver");	
}

void OnLeave()
{
	RemoveTimer("addhealth");
	RemoveTimer("checkhealth");
	if(GetGlobalVarInt("ItemsAchievement") == 1)
		if(GetPlayerLampOil() <= 20.0f)
			AddPlayerLampOil(20.0f);
}

void OnStart()
{
	AddEntityCollideCallback("Player", "AreaStartVision_1", "CollideAreaStartVision", true, 1);
	AddEntityCollideCallback("Player", "AreaFindThePiano", "CollideAreaFindThePiano", true, 1);

	SetMapDisplayNameEntry("Cave");
	
	SetLightVisible("PianoLight_1", false);
	SetLightVisible("PianoLight_2", false);
	SetLightVisible("PointLight_2", false);
	
	for(int k=1; k<=47; k++) AddEntityCollideCallback("Player", "AreaLitTorch_"+k, "CollideAreaLitTorch", true, 1);
	
	if(ScriptDebugOn())
	{
		if(HasItem("lantern_1") == false) GiveItemFromFile("lantern_1", "lantern.ent");
		if(HasItem("ceremony_knife_1") == false) GiveItemFromFile("ceremony_knife_1", "ceremony_knife.ent");
	}
}

void CPOutOfMap(string &in asName, int alCount)
{
	if(GetGlobalVarInt("ItemsAchievement") == 1)
		if(GetPlayerLampOil() <= 20.0f)
			AddPlayerLampOil(20.0f);
	if(GetGlobalVarInt("FastSeekerAchievement") == 1)
		SetPlayerRunSpeedMul(1.175f);
	if(GetGlobalVarInt("WardrobeAchievement") == 1)
		SetPlayerJumpForceMul(1.175f);
	if(GetGlobalVarInt("NoDeathAchievement") == 1)
		SetPlayerHealth(100.1f);
	if(GetGlobalVarInt("SanityAchievement") == 1)
		SetPlayerSanity(100.1f);
}

void TimerHealthAchievement(string &in asTimer)
{
	if(asTimer == "addhealth")
	{
		if(GetPlayerHealth() <= 98.0f)
		{
			AddPlayerHealth(2.0f);
			AddTimer("addhealth", 7.0f, "TimerHealthAchievement");
		}
		else
		{
			AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
		}
	}
	else if(asTimer == "checkhealth")
	{
		if(GetPlayerHealth() > 98.0f)
		{
			AddTimer("checkhealth", 10.0f, "TimerHealthAchievement");
		}
		else
		{
			AddTimer("addhealth", 7.0f, "TimerHealthAchievement");
		}
	}
	else if(asTimer == "pausehealth")
	{
		RemoveTimer("addhealth");
		RemoveTimer("checkhealth");
	}
}

void PullElevatorLever(string &in asEntity, int alState)
{
	if(alState == 1)
	{
		SetLeverStuckState(asEntity, alState, true);
		GiveSanityBoostSmall();
		SetEntityActive("safety_normal_vert_1", false);
		PlayGuiSound("door_safety_open.ogg", 0.5f);
		PlayMusic("02_puzzle", false, 0.8f, 0.0f, 10, false);
	}
}

void PickedUpNote(string &in asEntity)
{
	if(asEntity == "note_letter_1")
	{
		AddGlobalVarInt("MemoryNoteCount", 1);
		if(GetGlobalVarInt("MemoryNoteCount") == 1) AddQuest("MemoriesMission", "MemoriesMission");
		FadeLightTo("PointLight_2", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2);
		StopSound("pianomemorysound", 2.0f);
		
		AutoSave();
	}
}

void TouchSafetyDoor(string &in asEntity)
{
	if(asEntity == "safety_normal_vert_1")
	{
		AddTimer("slimesappear", 1.0f, "TimerMemoryEvents");
		AddTimer("lightsout", 4.0f, "TimerMemoryEvents");
		AddTimer("playmusic", 9.0f, "TimerMemoryEvents");
		PlaySoundAtEntity("locked_door", "close_gate", asEntity, 0, false);
		SetMessage("Jack", "42", 6.0f);
		for(int k=1; k<=47; k++) SetEntityActive("AreaLitTorch_" + k, false);
	}
}

void TimerMemoryEvents(string &in asTimer)
{
	if(asTimer == "slimesappear")
	{
		SetEntityActive("block_box_2", true);
		for(int e=1; e<35; e++)
		{
			SetPropActiveAndFade("slime_door_" + e, true, 2.0f);
			PlaySoundAtEntity("slime_door_sound_" + e, "slime_loop", "slime_door_" + e, 1.0f, true);
			AddUseItemCallback("KnifeStrongSlime_" + e, "ceremony_knife_1", "slime_door_" + e, "UsedKnifeOnSlime", false);
		}
		if(GetGlobalVarInt("SlimesAchievement") == 0)
			for(int r=1; r<=15; r++)
				SetEntityActive("SlimeDamageArea_" + r, true);
	}
	if(asTimer == "lightsout")
	{
		AddTimer("react_breath_slow", 0.5f, "TimerPlayerReactions");
		PlayGuiSound("scare_tingeling", 0.9f);
		StopMusic(1.0f, 0);
		for(int i=1; i<=47; i++)
		{
			StopSound("littorchsound_" + i, 1.0f);
			SetLampLit("torch_static01_" + i, false, true);
		}
	}
	if(asTimer == "playmusic")
	{
		AddTimer("scare", 1.8f, "TimerPlayerReactions");
		AddTimer("jack43", 3.0f, "TimerSaySomething");
		PlayMusic("05_piano_memory", true, 1.0f, 0, 10, false);
		PlaySoundAtEntity("memorywhispers", "02_insanity_whisper_rand", "piano_2", 0, true);
		SetEntityActive("piano_2", true);
		SetEntityActive("stool_wood_15", true);
		SetEntityActive("armour_rusty_complete_22", true);
		SetEntityActive("armour_rusty_complete_23", true);
		SetEntityActive("armour_rusty_complete_24", true);
		SetEntityActive("chandelier_nice_6", true);
		SetEntityActive("slime_pile_large_3", true);
		SetEntityActive("AreaStartVision_1", true);
		SetEntityActive("AreaFindThePiano", true);
		SetLightVisible("PianoLight_1", true);
	}
}

void UsedKnifeOnSlime(string &in asItem, string &in asEntity)
{
	SetMessage("Jack", "UseKnifeFail", 5.0f);
}

void TimerSaySomething(string &in asTimer)
{
	if(asTimer == "jack43") SetMessage("Jack", "43", 4.0f);
}

void CollideAreaFindThePiano(string &in asParent, string &in asChild, int alState)
{
	SetMessage("Jack", "FindThePiano", 5.0f);
}

void CollideAreaStartVision(string &in asParent, string &in asChild, int alState)
{
	AddTimer("", 0.6f, "TimerStopLook");
	AddTimer("piano", 0.7f, "TimerLoadHouse");
	SetPlayerActive(false);
	StartEffectFlash(0.0f, 1.8f, 0.3f);
	StartPlayerLookAt("piano_2", 2.0f, 2.0f, "");
	SetupLoadScreen("LoadingHints", "19To20", 0, "game_loading_brennenburg.jpg");
	StopMusic(0.7f, 10);
	StopMusic(0.1f, 0);
}

void TimerLoadHouse(string &in asTimer)
{
	if(asTimer == "piano") ChangeMap("05_house_dream.map", "PlayerStartArea_1", "flashback_flash", "react_sigh");
}

void CollideAreaLitTorch(string &in asParent, string &in asChild, int alState)
{
	AddGlobalVarInt("GlobalLightsCount", 1);
	for(int i=1; i<=47; i++)
	{
		if(asChild == "AreaLitTorch_" + i)
		{
			PlaySoundAtEntity("littorchsound_" + i, "02_woosh", "torch_static01_" + i, 2.0f, false);
			SetLampLit("torch_static01_" + i, true, true);
		}
	}
	if(GetGlobalVarInt("GlobalLightsCount") == 99) AddTimer("LightsAchievement", 1.0f, "TimerUnlockAchievement");
}

void TimerUnlockAchievement(string &in asTimer)
{
	AddQuest(asTimer, asTimer);
	PlayMusic("00_achievement_unlocked", false, 0.7f, 0.5f, 10, false);
	SetGlobalVarInt(asTimer, 1);
	SetMessage("Hints", asTimer, 10.0f);
	if(asTimer == "LightsAchievement")
	{
		SetLanternLitCallback("LanternOilForEver");
		SetPlayerLampOil(100.0f);
	}
}

void LanternOilForEver(bool abLit)
{
	if(abLit == true)
	{
		SetPlayerLampOil(100.0f);
		AddTimer("fulloil", 20.0f, "TimerFullOil");
	}
	else
	{
		RemoveTimer("fulloil");
		SetPlayerLampOil(100.0f);
	}
}

void TimerFullOil(string &in asTimer)
{
	SetPlayerLampOil(100.0f);
	AddTimer(asTimer, 20.0f, "TimerFullOil");
}

void UsedKeyOnDoor(string &in asItem, string &in asEntity)
{
	PlaySoundAtEntity("unlock_door", "unlock_door", asEntity, 0, false);
	SetSwingDoorLocked(asEntity, false, false);
	RemoveItem(asItem);
}

void TimerFadeScreen(string &in asTimer)
{
	if(asTimer == "fadein")
	{
		FadeIn(2.0f);
	}
	if(asTimer == "fadeout")
	{
		FadeOut(2.0f);
	}
	if(asTimer == "fadeinactiveplayer")
	{
		FadeIn(2.0f);
		SetPlayerActive(true);
	}
	if(asTimer == "fadeoutactiveplayer")
	{
		FadeOut(2.0f);
		SetPlayerActive(true);	
	}	
}

void TimerStopLook(string &in asTimer)
{
	if(asTimer == "resetspeedmul")
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		if(GetGlobalVarInt("FastSeekerAchievement") == 1)
			SetPlayerRunSpeedMul(1.175f);
		if(GetGlobalVarInt("WardrobeAchievement") == 1)
			SetPlayerJumpForceMul(1.175f);
	}
	if(asTimer == "activeplayer")
	{
		SetPlayerActive(true);
	}
	StopPlayerLookAt();
}

void TimerPlayerReactions(string &in asTimer)
{
	if(asTimer == "scareeffect")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(8.0f, false);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
	}
	else if(asTimer == "breatheffect")
	{
		PlayGuiSound("react_breath", 0.4f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "sigheffect")
	{
		PlayGuiSound("react_sigh", 0.4f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "panteffect")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(10.0f, false);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
	}
	else if(asTimer == "scare")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(8.0f, true);
	}
	else if(asTimer == "breath")
	{
		PlayGuiSound("react_breath", 0.5f);
		GiveSanityDamage(4.0f, false);
	}
	else if(asTimer == "sigh")
	{
		PlayGuiSound("react_sigh", 0.5f);
		GiveSanityDamage(2.0f, false);
	}
	else if(asTimer == "pant")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(10.0f, true);
	}
}