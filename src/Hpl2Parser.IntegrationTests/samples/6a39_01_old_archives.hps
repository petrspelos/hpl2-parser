
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "01_old_archives";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int[] gviEasierOilPotionsCodesArray = {1, 2, 3};
int[] gviEasierHealthPotionsCodesArray = {0};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3, 4, 5};
int[] gviNormalOilPotionsCodesArray = {2};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {4, 6};
int[] gviToughOilPotionsCodesArray = {3};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {3};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

/////////////////////////////////
//BEGIN OPENING DOORS WITH DUST//
/*Some dusts flows out and door bangs open 
 */
void CollideOpeningDustDoor(string &in asParent, string &in asChild, int alState)
{
	StopRandomLook();	//De-activate the spinning head
	
	CreateParticleSystemAtEntity("PSDoor_1", "ps_dust_paper_blow.ps", "AreaDoor_1", false);
	CreateParticleSystemAtEntity("PSDoor_2", "ps_dust_push.ps", "AreaDoor_1", false);
	
	PlaySoundAtEntity("SoundDoor_1", "scare_wind_reverse", "AreaDoor_1", 1.0f, false);
	PlaySoundAtEntity("creaking_door", "joint_door_move_special.snt", "Door_1", 1.0 / 2.5f, false);
	PlaySoundAtEntity("SoundBong", "scare_tingeling.snt", "Player", 0.0f, false);
	
	AddTimer("opendoor_1", 0.25f, "TimerOpenDoor01");
	AddTimer("lightsout", 1, "TimerOpenDoor01");
	AddTimer("stopeffect", 2, "TimerOpenDoor01");
	
	StartScreenShake(0.007f,2, 0.25f,1);
	
	FadePlayerFOVMulTo(1.5, 0.5f);
	
	/*For CollideBeginSwirl
	 */
	PlaySoundAtEntity("SoundFeet1", "01_tiny1", "AreaBeginSwirl", 15.0f, false);
	
	/*DEBUG
	 */
	AddDebugMessage("The door at "+asChild+" opens with dust", true);
}
void TimerOpenDoor01(string &in asTimer)
{
	if(asTimer == "stopeffect"){
		FadePlayerFOVMulTo(1, 1);
		PlaySoundAtEntity("breath", "react_breath.snt", "Player", 1.0 / 0.75f, false);
		AddTimer("lookloop", 1, "TimerRandomLook");	//Re-activate the spinning head
		return;
	}
	
	if(asTimer == "lightsout"){
		for(int i=1;i<=4;i++) SetLampLit("torch_static01_"+i, false, true);
		for(int i=1;i<=4;i++) FadeLightTo("LightOff_"+i, 0, 0, 0, 0, 0, 1.5f);
		PlaySoundAtEntity("breath2", "react_breath.snt", "Player", 1.0 / 1, false);
		return;
	}
	
	PlaySoundAtEntity("Wind", "general_wind_whirl", "Player", 2, false);
	PlaySoundAtEntity("scare", "react_scare.snt", "Player", 0.75f, false);

	StopSound("creaking_door", 1.0f);
	
	PlayMusic("01_amb_darkness.ogg", true, 1.0f, 0, 0, true);
	
	CreateParticleSystemAtEntity("PSDoor_3", "ps_dust_push.ps", "AreaDoor_2", false);
	CreateParticleSystemAtEntity("PSDoor_4", "ps_dust_push.ps", "AreaDoor_3", false);
	
	SetSwingDoorClosed("Door_1", false, false);
	SetSwingDoorDisableAutoClose("Door_1", true);
	
	AddTimer("Door_1", 0.01f, "TimerSwingDoor");
	
	GiveSanityDamage(10, true);
}
void TimerSwingDoor(string &in asTimer)
{
	if(GetLocalVarInt("SwingDoor") == 10){
		SetLocalVarInt("SwingDoor", 0);
		return;
	}
	
	if(asTimer == "Door_1") AddPropForce(asTimer, 160.0f, 0, 0, "World"); 
	else AddPropForce(asTimer, -60.0f, 0, 0, "World"); 
	
	AddLocalVarInt("SwingDoor", 1);
	
	AddTimer(asTimer, 0.03f, "TimerSwingDoor");
	
	AddDebugMessage("Swing: "+GetLocalVarInt("SwingDoor"), false);
}
//END OPENING DOORS WITH DUST//
///////////////////////////////


////////////////////////////
//START CLOSING DOOR SCARE//
/*Player in area in abandoned storage and door closes + scare event
 */
void CollideBeginSwirl(string &in asParent, string &in asChild, int alState)
{
	StopRandomLook();	//De-activate the spinning head
	
	//FadePlayerAspectMulTo(2, 0.05f);
	FadeImageTrailTo(1.7f,1.5f);
	
	//INCREASE THE INTENSITY AND VOLUME OF THE RUNNING FEET SOUND
	StartScreenShake(0.01f,1, 0.1f,0.5f);
	
	//if(!GetSwingDoorClosed("Door_1")) PlaySoundAtEntity("SoundCloseDoor_1", "scare_slam_door", "Door_1",0.0f, false);
	
	//SetSwingDoorLocked("Door_1", true, true);
	
	PlaySoundAtEntity("SoundFeet2", "01_tiny2", "AreaFeet_1", 3, false);
	//PlaySoundAtEntity("scare", "react_scare.snt", "Player", 0.5f, false);

	AddTimer("swirl", 0.5f, "TimerSwirlHorror");
}
void TimerSwirlHorror(string &in asTimer)
{
	AddLocalVarInt("VarSwirl", 1);	//What step to play in the event
	float fSpeedWhirl = 0.5f;	//The default time between steps in an event
	
	switch(GetLocalVarInt("VarSwirl")) {
		case 1:
			PlaySoundAtEntity("SoundFeet3", "01_tiny3", "AreaFeet_2", 3, false);
			//CreateParticleSystemAtEntity("PSSwirl", "ps_dust_ghost.ps", "Player", false);
			//PlaySoundAtEntity("SoundSwirl", "scare_whine_loop", "AreaBeginSwirl", 0.0f, false);
			PlaySoundAtEntity("SoundBong2", "scare_tingeling_rev2.snt", "Player", 0.0f, false);
			//PlaySoundAtEntity("breath2", "react_breath.snt", "Player", 0.3f, false);
			fSpeedWhirl = 3.0f;
		break;
		case 2:
			PlaySoundAtEntity("SoundFeet4", "01_tiny4", "AreaFeet_3", 1, false);
			//MovePlayerHeadPos(0, -0.5f, 0, 1.25f, 0.5f);
			//StartEffectFlash(0.15f, 0.05f, 0.15f);
			//PlaySoundAtEntity("SoundFlash1", "scare_thump_flash.snt", "Player", 0.0f, false);
			SetPropActiveAndFade("cockroach_*", true, 0.5f);
			//FadeLightTo("BoxLight_1",0.5f,0.25f,0,1,-1,0.01f);
		break;
		case 3:
			//FadeOut(0.75f);
			FadePlayerAspectMulTo(2, 0.05f);
			FadeImageTrailTo(1.7f,1.5f);
			PlaySoundAtEntity("scare", "react_scare.snt", "Player", 0.5f, false);
			PlayMusic("01_event_critters.ogg", false, 1, 0, 10, false);
			GiveSanityDamage(10, true);
			//FadeLightTo("BoxLight_1",0,0,0,0,-1,0.01f);
			//SetPropActiveAndFade("cockroach_*", false, 0.5f);
		break;
		case 4:
			//MovePlayerHeadPos(0, 0, 0, 1, 0.5f);
			//FadeIn(1);
			//FadeLightTo("BoxLight_1",0.75f,0.25f,0,1,-1,0.01f);
			//SetPropActiveAndFade("cockroach_*", true, 0.5f);
			fSpeedWhirl = 0.15f;
		break;
		case 5:
			PlaySoundAtEntity("scare", "react_scare.snt", "Player", 0.6f, false);
			//FadeLightTo("BoxLight_1",0,0,0,0,-1,0.01f);
			fSpeedWhirl = 2.5f;
		break;
		case 6:
			//FadeOut(0.8f);
			//MovePlayerHeadPos(0, -0.5f, 0, 1.0f, 0.5f);
			//StartEffectFlash(0.15f, 0.25f, 0.05f);
			//FadeLightTo("BoxLight_1",0.75f,0,0.15f,1,-1,0.01f);
			//PlaySoundAtEntity("SoundFlash1", "scare_thump_flash.snt", "Player", 0.0f, false);
		break;
		case 7:
			for(int i=1;i<=4;i++) StopSound("SoundFeet"+i, 2);
			//FadeIn(1);
			PlaySoundAtEntity("breath2", "react_breath.snt", "Player", 0.7f, false);
			//FadeLightTo("BoxLight_1",0,0,0,0,-1,0.01f);
			//StopSound("SoundSwirl", 1.5f);
			fSpeedWhirl = 1.0f;
		break;
		case 8:
			//MovePlayerHeadPos(0, 0, 0, 1, 0.5f);
			FadeImageTrailTo(1.6f,3.0f);
			FadePlayerAspectMulTo(2, 0.01f);
			FadeOut(20);
			StopMusic(10, 0);
			FadeGlobalSoundSpeed(0.4f, 10);
			FadeGlobalSoundVolume(0.1f, 10);
			StartScreenShake(0.02f,0.1f, 2,5);
			PlaySoundAtEntity("rumbleoo", "00_loop", "Player", 4.0, false);
			PlaySoundAtEntity("scare3", "react_sigh.snt", "Player", 0.8f, false);
			AddTimer("breath", 1, "TimerBreath");	
			SetPlayerRunSpeedMul(0);
			SetPlayerMoveSpeedMul(0.75f);
			fSpeedWhirl = 1.0f;
		break;
		case 9:
			SetPlayerMoveSpeedMul(0.5f);
			//MovePlayerHeadPos(0, -1.3, 0, 0.05f, 0.5f);
			//SetSwingDoorLocked("Door_1", false, true);
			PlaySoundAtEntity("faint", "00_faint", "Player", 8, false);
			fSpeedWhirl = 1.0f;
		break;
		case 10:
			SetPropActiveAndFade("cockroach_*", false, 1);
			PlaySoundAtEntity("scare3", "react_sigh.snt", "Player", 0.8f, false);
			SetPlayerMoveSpeedMul(0.75f);
			FadeIn(5);
			//MovePlayerHeadPos(0, 0, 0, 0.2f, 0.5f);
			FadeImageTrailTo(0,0.1f);
			FadePlayerAspectMulTo(1, 0.05f);
			FadeGlobalSoundSpeed(1, 5);
			FadeGlobalSoundVolume(1, 5);
			StopSound("rumbleoo", 5.0f);
			PlayMusic("01_amb_darkness.ogg", true, 1.0f, 0, 0, true);
			AddTimer("lookloop", 3, "TimerRandomLook");	
			RemoveTimer("breath");
			/* AddLocalVarInt("VarEventsDone", 1); //Makes sure the event to notice the player of a door opening is only played when no other main event occurs.
			if(GetLocalVarInt("VarEventsDone") == 3) DoDoorOpening(10); */
		break;
	}

	if(GetLocalVarInt("VarSwirl") < 10) AddTimer("swirl", fSpeedWhirl, "TimerSwirlHorror");
}
void TimerBreath(string &in asTimer)
{
	PlaySoundAtEntity("breath", "react_breath_no3d", "AreaDoor_1", 1, false);
	
	AddTimer("breath", 3, "TimerBreath");	
}
//END CLOSING DOOR SCARE//
//////////////////////////

/////////////////////
//BEGIN BEGIN GHOST//
/*In aban study, steps is seen and book thrown.
 */
void CollideBeginGhost(string &in asParent, string &in asChild, int alState)
{
	StopRandomLook();	//De-activate the spinning head
	PlaySoundAtEntity("SoundScratch_5", "scare_scratch", "AreaGhostWind", 2, false);
	PlaySoundAtEntity("whirly", "01_whirl.snt", "Player", 4, false);
	//PlayMusic("01_event_dust.ogg", false, 1, 3, 10, false);
	CreateParticleSystemAtEntity("PSGhostWind", "ps_dust_whirl_large.ps", "AreaGhostWind", false);
	AddTimer("ghost", 0.2f, "TimerGhost");
	RemoveTimer("wall_scrape");
}
int iLoopGhost = 1;	//If a step should loop, 1 as it is used for selecting what area to begin footsteps in
void TimerGhost(string &in asTimer)
{
	AddLocalVarInt("VarGhost", 1);	//What step to play in the event
	float fSpeedGhost = 0.5f;	//The default time between steps in an event

	switch(GetLocalVarInt("VarGhost")) {
		case 1:
			FadeOut(20);
			PlaySoundAtEntity("SoundScratch_2", "scare_scratch_intense", "AreaScratch_1", 4, false);
		break;
		case 2:
			GiveSanityDamage(10, false);
			//StartPlayerLookAt("AreaDustBoom_2", 0.5f, 0.5f, "");
			PlaySoundAtEntity("SoundFear2", "scare_male_terrified.snt", "AreaGhostStep_1", 0, false);
			PlaySoundAtEntity("breath2", "react_breath.snt", "Player", 0.6f, false);
			PlaySoundAtEntity("DustBoom1", "scare_wall_stomp.snt", "AreaDustBoom_1", 0.5f, false);
			AddPropForce("ghostbook_1", 50, 100, 50, "world");
			CreateParticleSystemAtEntity("PSDustBoom1", "ps_dust_impact_vert.ps", "AreaDustBoom_1", false);
			StartScreenShake(0.01f,0.1f, 0.5,0.9f);
		break;
		case 3:
			MovePlayerHeadPos(0, -1.3, 0, 0.1f, 0.5f);
			PlaySoundAtEntity("scare2", "react_scare.snt", "Player", 0.4f, false);
			FadePlayerAspectMulTo(2, 0.02f);
			FadeImageTrailTo(1.7f,1.1f);
		break;
		case 4:
			//StartPlayerLookAt("AreaDustBoom_3", 0.5f, 0.5f, "");
			PlaySoundAtEntity("DustBoom2", "scare_wall_stomp.snt", "AreaDustBoom_2", 0.25f, false);
			PlaySoundAtEntity("SoundFear3x", "scare_male_terrified.snt", "AreaGhostStep_1", 1, false);
			AddPropForce("ghostbook_2", 50, 100, 70, "world");
			AddPropForce("ghostbook_3", 50, 100, 60, "world");
			CreateParticleSystemAtEntity("PSDustBoom2", "ps_dust_impact_vert.ps", "AreaDustBoom_2", false);
			StartScreenShake(0.02f,0.1f, 0.5,0.9f);
			PlaySoundAtEntity("SoundScratch_3", "scare_scratch", "AreaScratch_2", 2, false);
		break;
		case 5:
			MovePlayerHeadPos(0, 0, 0, 0.1f, 0.5f);
			FadeIn(5);
			PlaySoundAtEntity("breath2", "react_breath.snt", "Player", 0.2f, false);
			FadeImageTrailTo(1.3f,1.1f);
			PlaySoundAtEntity("SoundGhostScream", "scare_ghost.snt", "AreaGhostStep_1", 0.0f, false);
		break;
		case 6:
			PlaySoundAtEntity("SoundFear4x", "scare_male_terrified5.snt", "AreaGhostStep_1", 1, false);
			PlaySoundAtEntity("breath4", "react_breath.snt", "Player", 0.3f, false);
			FadeImageTrailTo(1.6f,1.1f);
			fSpeedGhost = 1.5f;
		break;
		case 7:
			PlaySoundAtEntity("scare3", "react_scare.snt", "Player", 0.2f, false);
			PlaySoundAtEntity("DustBoom4", "scare_wall_stomp.snt", "AreaDustBoom_4", 0, false);
			CreateParticleSystemAtEntity("PSDustBoom4", "ps_dust_impact.ps", "AreaDustBoom_4", false);
			StartScreenShake(0.04f,0.1f, 0.5,0.9f);
			SetEntityInteractionDisabled("lantern", false);
			AddPropForce("lantern", 20, 220, 40, "world");
			StartPlayerLookAt("lantern", 2, 2, "");
			FadeOut(15);
			MovePlayerHeadPos(0, -1.3, 0, 0.05f, 0.5f);
			fSpeedGhost = 1.5f;
		break;
		case 8:
			//StartPlayerLookAt("AreaDustBoom_4", 0.5f, 0.5f, "");
			PlaySoundAtEntity("DustBoom3", "scare_wall_stomp.snt", "AreaDustBoom_3", 0.1f, false);
			CreateParticleSystemAtEntity("PSDustBoom3", "ps_dust_impact_vert.ps", "AreaDustBoom_3", false);
			AddPropForce("ghostbook_4", 30, 120, 70, "world");
			StartScreenShake(0.03f,0.1f, 0.5,0.9f);
		break;
		case 9:
			StopPlayerLookAt();
			StartScreenShake(0.02f,0.1f, 2,2);
			AddTimer("wall_scrape", RandFloat(3.0f,15.0f), "TimerWallScrape");	
			PlaySoundAtEntity("breath3", "react_breath.snt", "Player", 0.5f, false);
			for(int i=1;i<=5;i++) StopSound("SoundScratch_"+i, 4.0f);
			StopSound("whirly", 4.0f);
			FadePlayerAspectMulTo(1, 0.02f);
			FadeImageTrailTo(0.0f,1.1f);
			StopMusic(8, 10);
			fSpeedGhost = 1.5f;
		break;
		case 10:
			FadeIn(5);
			MovePlayerHeadPos(0, 0, 0, 0.1f, 0.5f);
			PlaySoundAtEntity("breath3", "react_breath.snt", "Player", 0.7f, false);
			/* AddLocalVarInt("VarEventsDone", 1); //Makes sure the event to notice the player of a door opening is only played when no other main event occurs.
			if(GetLocalVarInt("VarEventsDone") == 3) DoDoorOpening(6); */
		break;
	}
	
	if(GetLocalVarInt("VarGhost") < 10)  AddTimer("ghost", fSpeedGhost, "TimerGhost");
}
//END BEGIN GHOST//
///////////////////


//////////////////////////
//BEGIN RANDOM LOOK SPIN//
/*Player has a bit of a random head during the level
 */
bool bRoll = true;
void TimerRandomLook(string &in asTimer)
{
	int iLook = RandFloat(1,5);
	
	if(iLook > 4){
		SetPlayerRunSpeedMul(0.5);
		SetPlayerMoveSpeedMul(1);
		FadePlayerRollTo(0, 0.5f, 1); 
		FadePlayerFOVMulTo(1, 1);
		FadeImageTrailTo(0,1.5f);
		
		AddTimer("lookloop", RandFloat(6.0f,8.0f), "TimerRandomLook");
		return;
	}
	
	if(iLook == 1 or iLook == 3)
		PlaySoundAtEntity("sigh", "react_sigh.snt", "Player", 1.0 / 0.75f, false);
	
	FadePlayerFOVMulTo(RandFloat(0.8f,1.2f), RandFloat(0.06f,0.09f));
	
	SetPlayerMoveSpeedMul(RandFloat(0.75f,0.95f));
	SetPlayerRunSpeedMul(RandFloat(0.3f,0.5f));
	
	FadeImageTrailTo(RandFloat(0.4f,0.75f),RandFloat(0.75f,1.0f));
	
	bRoll= bRoll == false ? true : false;
	
	if(bRoll)
		FadePlayerRollTo(RandFloat(2,8), RandFloat(0.075f,0.35f), RandFloat(0.35f,0.85f)); 
	else
		FadePlayerRollTo(RandFloat(-2,-8), RandFloat(0.05f,0.25f), RandFloat(0.3f,0.75f)); 
		
	AddTimer("lookloop", RandFloat(3.0f,6.0f), "TimerRandomLook");
}
void TimerRandomLook02(string &in asTimer)
{
	int iLook = RandFloat(1,5);
	
	if(iLook > 4){
		SetPlayerRunSpeedMul(0.5);
		SetPlayerMoveSpeedMul(1);
		FadePlayerRollTo(0, 0.5f, 1); 
		FadePlayerFOVMulTo(1, 1);
		FadeImageTrailTo(0,1.5f);
		
		AddTimer("lookloop2", RandFloat(6.0f,8.0f), "TimerRandomLook02");
		return;
	}
	
	if(iLook == 1 or iLook == 3)
		PlaySoundAtEntity("sigh", "react_sigh.snt", "Player", 1.0 / 0.5f, false);
	
	FadePlayerFOVMulTo(RandFloat(0.8f,1.2f), RandFloat(0.06f,0.09f));
	
	SetPlayerMoveSpeedMul(RandFloat(0.85f,1.00f));
	SetPlayerRunSpeedMul(RandFloat(0.5f,0.7f));
	
	FadeImageTrailTo(RandFloat(0.1f,0.4f),RandFloat(0.85f,1.0f));
	
	bRoll= bRoll == false ? true : false;
	
	if(bRoll)
		FadePlayerRollTo(RandFloat(1,4), RandFloat(0.075f,0.15f), RandFloat(0.35f,0.6f)); 
	else
		FadePlayerRollTo(RandFloat(-1,-4), RandFloat(0.05f,0.1f), RandFloat(0.3f,0.5f)); 
		
	AddTimer("lookloop2", RandFloat(3.0f,6.0f), "TimerRandomLook02");
}
void StopRandomLook()
{
	RemoveTimer("lookloop");
	
	SetPlayerMoveSpeedMul(1);
	FadePlayerFOVMulTo(1, 0.5f);
	FadeImageTrailTo(0,1.0f);
	FadePlayerRollTo(0, 0.5f, 2); 
}
//END RANDOM LOOK SPING//
/////////////////////////

////////////////////////////
//BEGIN PICK LANTERN & OIL//
void PickLanterAndOil(string &in asEntity, string &in asType)
{
	//AddLocalVarInt("VarPicked", 2);	
	
	//if(GetLocalVarInt("VarPicked") == 2){
		if(GetLocalVarInt("DoCreakPartOfOpenDoor") == 1)
				DoDoorOpening(1);
			else 
				DoSimpleDoorOpening();	//No creak or music or swing open on door.
				
		/* AddLocalVarInt("VarEventsDone", 1);	//Makes sure the event to notice the player of a door opening is only played when no other main event occurs.
		
		if(GetLocalVarInt("VarEventsDone") == 3) {
			
		}	 */
	//}	
	
	if(asEntity == "lantern")
	{
		StopPlayerLookAt();
		if(GetEasyModeOn() >= 1)
			SetPlayerLampOil(75.0f);
		else if(GetToughModeOn() >= 1)
			SetPlayerLampOil(25.0f);
		else
			SetPlayerLampOil(50.0f);
	}
		
	/*DEBUG
	 */
	AddDebugMessage("Picked "+asEntity, true);
	
	SetupCurrentMapBasedOnExtraModes();
}
void DoSimpleDoorOpening()
{
	RemoveTimer("lookloop");
	AddTimer("lookloop2", 6, "TimerRandomLook02");
	//AddTimer("Door_3", 0.01f, "TimerSwingDoor");
	
	SetSwingDoorLocked("Door_3", false, false);
	//SetSwingDoorClosed("Door_3", false, false);
	//SetSwingDoorDisableAutoClose("Door_3", true);
	
	SetEntityPlayerInteractCallback("Door_3", "", true);
}
void DoDoorOpening(int iDelay)
{
	RemoveTimer("lookloop");
	AddTimer("lookloop2", 6, "TimerRandomLook02");
	AddTimer("delayeffect", iDelay, "TimerDelayEffect");
		
	SetSwingDoorLocked("Door_3", false, false);
	SetSwingDoorClosed("Door_3", false, false);
	SetSwingDoorDisableAutoClose("Door_3", true);
	
	PlayEnemySoundAtEntity("giveup.snt", "AreaGrunt", "grunt");
	
	SetEntityPlayerInteractCallback("Door_3", "", true);
}
void TimerDelayEffect(string &in asTimer)
{
	PlayMusic("10_puzzle01.ogg", false, 0.7f, 2, 0, false);
	
	PlayGuiSound("unlock_door.snt", 0.5f);
	
	PlaySoundAtEntity("SoundDoorCreak", "01_door.snt", "Door_3", 0.0f, false);
	StartScreenShake(0.01f, 1, 0.5f,1);
	
	AddTimer("Door_3", 0.01f, "TimerSwingDoor");
}
//END PICK LANTERN & OIL//
//////////////////////////


////////////////////////
//BEGIN COMPLETE TRAIL//
void CollideCompleteTrail(string &in asParent, string &in asChild, int alState)
{
	for(int i=1;i<=3;i++) SetPropActiveAndFade("cockroache_"+i, true, 0.5f);
	
	CompleteQuest("00Trail", "00Trail");
	
	PlayMusic("15_puzzle_hole.ogg", false, 1.0f, 0.5f, 5, false);
		
	RemoveTimer("lookloop2");
	
	StopRandomLook();
	
	StartPlayerLookAt("note_generic_1", 2.0f, 2.0f, "");
	
	AddTimer("stoplook", 3.0f, "TimerStopLook");
}
void TimerStopLook(string &in asTimer)
{
	StopPlayerLookAt();
}
//END COMPLETE TRAIL//
//////////////////////


///////////////////////
//BEGIN EFFECT TIMERS//
void TimerWallScrape(string &in asTimer)
{
	int iArea = RandFloat(1,6);
	
	PlaySoundAtEntity("wall_scrape"+iArea, "scare_wall_crawl_single.snt", "AreaWallScrape_"+iArea, 0.0f, false);
	
	AddTimer("wall_scrape", RandFloat(3.0f,15.0f), "TimerWallScrape");	
}
void TimerBeginWind(string &in asTimer)
{
	PlaySoundAtEntity("BeginWindSound", "general_wind_whirl.snt", "Player", 4.0f, false);
}
//END EFFECT TIMERS//
/////////////////////


///////////////////
//BEGIN LAST WIND//
void CollideLastWind(string &in asParent, string &in asChild, int alState)
{
	//if(GetLocalVarInt("VarPicked") != 2) return;
	
	CreateParticleSystemAtEntity("PSLastWind", "ps_dust_push.ps", "AreaWindLast", false);
	CreateParticleSystemAtEntity("PSLastWind2", "ps_dust_paper_blow.ps", "AreaWindLast", false);
	PlaySoundAtEntity("LastWindSound", "general_wind_whirl.snt", "AreaWindLast", 3.0f, false);
}
//END LAST WIND//
/////////////////


//////////////////////////
//BEGIN OPEN SECRET DOOR//
void PickNoteToSelf(string &in entity, string &in type)
{
	PlayMusic("01_paper_self.ogg", false, 0.7f, 0, 10, false);
	StopPlayerLookAt();
	//AddTimer("Hint", 0.5f, "TimerHint");	//On door exit instead
}
void TimerHint(string &in asTimer)
{
	GiveSanityBoostSmall();
	GiveHint("sanity", "Hints", "SanityAdd", 0);	
}
void CreateDust(string &in asConnectionName, string &in asMainEntity, string &in asConnectEntity, int alState)
{
	//for(int i=1;i<10;i++) AddPropForce("jara_"+i, 1.0f, 1.0f, 1.0f, "world");
	//for(int i=1;i<4;i++) AddPropForce("jbok_"+i, 1.0f, 1.0f, 1.0f, "world");
	
	if(GetLocalVarInt("DoSecretDoorEffects") == 1) return;
	
	CreateParticleSystemAtEntity("PSDoorDust", "ps_dust_falling_door.ps", "secret_door", false);
	
	AddTimer("sucess_music", 2, "TimerMusic");	
	
	AddTimer("Hint", 0.5f, "TimerHint");
	
	StartScreenShake(0.006f, 0.5f, 2.0f,2.0f);
	
	SetLocalVarInt("DoSecretDoorEffects", 1);
}
void TimerMusic(string &in asTimer)
{
	PlayMusic("01_puzzle_passage.ogg", false, 0.7f, 0, 10, false);
}
//END OPEN SECRET DOOR//
////////////////////////


/////////////////////
//BEGIN MISC THINGS//
void CollideHintLean(string &in asParent, string &in asChild, int alState)
{
	GiveHint("lean", "Hints", "LeanHint", 0);
}

void CollideTremble(string &in asParent, string &in asChild, int alState)
{
	/*Turn off rain for the level
	 */
	StopSound("amb_2", 0.0f); StopSound("amb_3", 0.0f); StopSound("amb_4", 0.0f); StopSound("amb_8", 0.0f);
	DestroyParticleSystem("ParticleSystem_41"); DestroyParticleSystem("ParticleSystem_40");
	
	/*All below + Timer is for shake events when entering the second last room
	 */
	PlaySoundAtEntity("rumble3", "general_rock_rumble_no3d", "Player", 15.0f, false);
	PlaySoundAtEntity("breath", "react_breath.snt", "Player", 2.0f, false);
	MovePlayerHeadPos(0.5f, -0.5f, 0.5f, 0.1f, 0.01f);
	
	StartScreenShake(0.03f, 1.0f, 4.0f,8.0f);

	for(int i=1;i<6;i++) CreateParticleSystemAtEntity("dust"+i, "ps_dust_falling_door", "AreaTrembleFall_"+i, false); 
	
	AddPropForce("chandelier_simple_short_1", -75.0f, 0, 75.0f, "world");
	AddPropForce("chandelier_simple_short_4", 75.0f, 0, -75.0f, "world");
	
	AddTimer("stoprumb", 6.0f, "TimerStopRumble");
	AddTimer("force1", 1.0f, "TimerStopRumble");
	AddTimer("force", 2.0f, "TimerStopRumble");
	AddTimer("force", 3.0f, "TimerStopRumble");
	AddTimer("force", 4.0f, "TimerStopRumble");
}
void TimerStopRumble(string &in asTimer)
{
	if(asTimer == "force" or asTimer == "force1"){
		if(asTimer == "force1") FadeImageTrailTo(1.0f, 6.0f);
		
		int i = i == 150 ? -150 : 150;
		
		AddPropForce("chandelier_simple_short_1", i, 0, -i, "world");
		AddPropForce("chandelier_simple_short_4", -i, 0, i, "world");
		
		if(i == -150) PlaySoundAtEntity("chain", "general_chain_rattle_single", "chandelier_simple_short_1", 0.5f, false);
		else PlaySoundAtEntity("chain", "general_chain_rattle_single", "chandelier_simple_short_4", 0.5f, false);
		
		AddDebugMessage("I is: "+i, false);
		
		return;
	}
	PlaySoundAtEntity("breath2", "react_breath.snt", "Player", 1.0f, false);
	MovePlayerHeadPos(0, 0, 0, 0.2f, 0.01f);
	FadeImageTrailTo(0.0f, 12.0f);
	StopSound("rumble3", 10.0f);
}
//END MISC THINGS//
///////////////////


//SEEN THE MAGIC OPENING DOOR
void CollideAreaCollideSeenDoor(string &in asParent, string &in asChild, int alState)
{
	SetLocalVarInt("DoCreakPartOfOpenDoor", 1);
}

//Locked door message
void InteractLockedDoor(string &in asEntity)
{
	SetMessage("Ch01Level03", "DoorLocked", 0);
	
	PlayGuiSound("locked_door.snt", 0.8f);
	
	AddTimer(asEntity, 1.0f, "TimerDoorMessageOnAgain");
}

void TimerDoorMessageOnAgain(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractLockedDoor", true);
}

////////////////////////////
// Run first time starting map
void OnStart()
{
	SetEntityInteractionDisabled("lantern", true);
	SetMapDisplayNameEntry("ArchivesOld");
	
	//----COLLIDE CALLBACKS----//
	AddEntityCollideCallback("Player", "AreaTriggerDoor_1", "CollideOpeningDustDoor", true, 1);	//Door that swings open 1st corridor
	AddEntityCollideCallback("Player", "AreaBeginSwirl", "CollideBeginSwirl", true, 1);			//Swril and horror in room behind swing door
	AddEntityCollideCallback("Player", "AreaTriggerGhost", "CollideBeginGhost", true, 1);		//The steps and throwing book
	AddEntityCollideCallback("Player", "AreaTriggerTrail", "CollideCompleteTrail", true, 1);		//Complete the follow trail quest
	AddEntityCollideCallback("Player", "AreaTriggerLastWind", "CollideLastWind", true, 1);	//A last wind puff at end of hall
	AddEntityCollideCallback("Player", "AreaHintLean", "CollideHintLean", true, 1);	//Enable a hint to help finding the lever part
	AddEntityCollideCallback("Player", "AreaCollideTremble", "CollideTremble", true, 1);
	AddEntityCollideCallback("Player", "AreaCollideSeenDoor", "CollideAreaCollideSeenDoor", true, 1);
	
	//----ENTITY INIT----//
	CreateParticleSystemAtEntity("BeginWindPS", "ps_dust_push.ps", "AreaBeginWind", false);
	
	//----ITEM CALLBACKS----//
	SetSwingDoorLocked("shelf_secret_door_joint_1", true, false);
	SetEntityInteractionDisabled("shelf_secret_door_joint_1", true);
	
	
	//----CONNECT CALLBACKS----//
	/*Secret hole in wall
	 */
		ConnectEntities("door_connection",		//Name of connection
		"secret_lever", 	//Parent entity (Affects)
		"secret_door",	//Child entity 	(Affected) 
		false,		//Invert the state sent
		1, 		//States used (0=both), checked before invertion.
		"CreateDust");	//callback	
		
		ConnectEntities("shelf_connection",		//Name of connection
		"secret_lever", 	//Parent entity (Affects)
		"secret_shelf",	//Child entity 	(Affected) 
		false,		//Invert the state sent
		1, 		//States used (0=both), checked before invertion.
		"");	//callback	
		
		//SetMoveObjectAngularOffsetArea("secret_shelf", "rotatearea");
	
	UnBlockHint("SanityAdd"); UnBlockHint("LanternNoItem"); UnBlockHint("LanternNoOil"); UnBlockHint("LeanHint");
	UnBlockHint("PushHint"); UnBlockHint("ThrowHint"); UnBlockHint("EntitySlide"); UnBlockHint("EntityLever"); 
	UnBlockHint("SanityHit");
	
	//----QUEST INIT----//
	
	SetNumberOfQuestsInMap(2);
	
	//----TIMER INIT----//
	AddTimer("lookloop", 0.1f, "TimerRandomLook");	//Re-activate the spinning head
	AddTimer("wall_scrape", 0.1f, "TimerWallScrape");	//Random scrapings in the walls
	AddTimer("BeginWindTimer", 0.75f, "TimerBeginWind");
	
	//----DEBUG----//
	if(ScriptDebugOn())
	{
		//GiveItemFromFile("lantern", "lantern.ent");
		//SetPlayerLampOil(0);	//Is normally set in level00
	}
}

////////////////////////////
// Run when entering map
void OnEnter()
{	
	//----PRELOADING----//
	PreloadSound("scare_wind_reverse"); PreloadSound("joint_door_move_special"); PreloadSound("scare_tingeling"); PreloadSound("01_tiny1"); 
	PreloadSound("react_breath"); PreloadSound("general_wind_whirl"); PreloadSound("react_scare"); PreloadSound("scare_slam_door"); 
	PreloadSound("01_tiny2"); PreloadSound("01_tiny3"); PreloadSound("scare_whine_loop"); PreloadSound("scare_tingeling_rev2"); 
	PreloadSound("01_tiny4"); PreloadSound("scare_thump_flash"); PreloadSound("00_loop"); PreloadSound("react_sigh"); 
	PreloadSound("00_faint"); PreloadSound("react_breath_no3d"); PreloadSound("scare_scratch"); PreloadSound("01_whirl"); 
	PreloadSound("scare_scratch_intense"); PreloadSound("scare_male_terrified"); PreloadSound("scare_wall_stomp"); PreloadSound("scare_ghost"); 
	PreloadSound("01_door"); PreloadSound("scare_wall_crawl_single"); PreloadSound("general_rock_rumble_no3d"); PreloadSound("01_idle");

	PreloadParticleSystem("ps_dust_paper_blow"); PreloadParticleSystem("ps_dust_push"); PreloadParticleSystem("ps_dust_ghost");
	PreloadParticleSystem("ps_dust_whirl_large"); PreloadParticleSystem("ps_dust_impact_vert"); PreloadParticleSystem("ps_dust_impact");
	PreloadParticleSystem("ps_dust_falling_door");
	
	ClearSavedMaps();
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
	
	string sEnemyName = "";
	
	sEnemyName = "grunt";
	PreloadEnemySound("giveup.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	
}