int swings2 = 0;

int LeverInt = 0;

void OnStart()
{  
	AutoSave();
	AddEntityCollideCallback("Player", "AreaCollide_1", "BruteBars", true, 1); // Brute behind the bars//
	AddEntityCollideCallback("Player", "AreaCollide_2", "BruteActivate", true, 1); // Activates Brute//
	AddUseItemCallback("", "cisternkey", "DoorKey", "usekey", true); // Player uses Cistern key//
	AddUseItemCallback("", "hammer", "AreaHammer", "HammerAnimation", true); ///Breaks Wall/////
	AddUseItemCallback("", "Lever", "Lever_Area", "UseLever_1", true); //Uses lever/////
	AddUseItemCallback("", "Lever", "Lever_Area_1", "UseLever_2", true); //Uses lever/////
	AddUseItemCallback("", "Lever", "Lever_Area_2", "UseLever_3", true); //Uses lever/////
	AddUseItemCallback("", "Lever_1", "Lever_Area", "UseLever_1", true); //Uses lever/////
	AddUseItemCallback("", "Lever_1", "Lever_Area_1", "UseLever_2", true); //Uses lever/////
	AddUseItemCallback("", "Lever_1", "Lever_Area_2", "UseLever_3", true); //Uses lever/////
	AddUseItemCallback("", "Lever_2", "Lever_Area", "UseLever_1", true); //Uses lever/////
	AddUseItemCallback("", "Lever_2", "Lever_Area_1", "UseLever_2", true); //Uses lever/////
	AddUseItemCallback("", "Lever_2", "Lever_Area_2", "UseLever_3", true); //Uses lever/////
	AddEntityCollideCallback("lever_1", "Lever_collide_area", "Lever_1_Use", true, 1); //Chnages the variable///
	AddEntityCollideCallback("lever_2", "Lever_collide_area_1", "Lever_2_Use", true, 1); //Chnages the variable///
	AddEntityCollideCallback("lever_3", "Lever_collide_area_2", "Lever_3_Use", true, 1); //Chnages the variable///
	AddEntityCollideCallback("lever_4", "Lever_collide_area_3", "Lever_4_Use", true, 1); //Chnages the variable///
	AddEntityCollideCallback("lever_5", "Lever_collide_area_4", "Lever_5_Use", true, 1); //Chnages the variable///
	AddEntityCollideCallback("lever_6", "Lever_collide_area_5", "Lever_6_Use", true, 1); //Chnages the variable///
	AddEntityCollideCallback("Player", "AreaCollide_3", "AddQuest", true, 1); // AddsLeverQuest//
	AddEntityCollideCallback("Player", "shadow_1", "shadow1", true, 1); // Shadow Voice 1
	AddEntityCollideCallback("Player", "shadow_2", "shadow2", true, 1); // Shadow Voice 2
	AddEntityCollideCallback("Player", "AreaMusic", "Music", true, 1); // Plays Music
	
	
}





void OnEnter()
{ 
	PlayMusic("ambT", true, 0.6, 0.1, 10, false);
	AddTimer("PlayerCough", 30, "TimerCough");
}




void OnLeave()
{ 
	SetupLoadScreen("LoadingText", "LoadScreen12", 0, "game_loading_rose.jpg");
}


///////////////////////////////////Brute////////////////////////////////

void BruteBars(string &in asParent, string &in asChild, int alState) 
{
	SetEntityActive("Brute_1", true);
}

void BruteActivate(string &in asParent, string &in asChild, int alState) 
{
	SetEntityActive("Brute_1", false);
	SetEntityActive("Brute_2", true);
	
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_1", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_2", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_3", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_4", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_5", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_6", 3, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_7", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_8", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_9", 2, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_10", 2, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_8", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_11", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_12", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_13", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_14", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_15", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_17", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_18", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_19", 1, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_20", 1, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_21", 1, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_22", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_23", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_24", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_25", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_26", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_27", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_28", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_29", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_30", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_62", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_63", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_64", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_65", 1, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_66", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_67", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_68", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_69", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_70", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_71", 3, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_72", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_73", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_74", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_75", 5, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_74", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_73", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_72", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_71", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_70", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_69", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_62", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_30", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_29", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_28", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_27", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_26", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_25", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_24", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_23", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_15", 0.001, "");
	AddEnemyPatrolNode("Brute_2", "PathNodeArea_2", 0.001, "");
	
	CheckPoint("Brute", "PlayerStartArea_2", "BruteRespawn", "", "");
}

void BruteRespawn(string &in asName, int alCount)
{
	SetEntityActive("Brute_2", true);
}  

/////////////////////////////Key Cistern////////////////////////////////

void usekey(string &in asItem, string &in asEntity)
{
	SetLevelDoorLocked("DoorKey", false);
	PlaySoundAtEntity("", "unlock_door.snt", asEntity, 0, false);
	SetMessage("Message", "CellarUnlock", 3);
	GiveSanityBoostSmall();
	RemoveItem(asItem);
}

////////////////////////Breakable wall//////////////////////////////////

void HammerAnimation(string &in asItem, string &in asEntity)
{
	SetEntityActive("Hammermove", true);
	
	swings2 = 1; // variable, inables the animation //
	
	StartPlayerLookAt("Hammermove", 2, 2, ""); // Player looks at the hammer//
	
	AddTimer("movehammer", 0.1, "TimerMoveHammer");
	AddTimer("hammersound", 0.27, "TimerMoveHammer");
	AddTimer("resethammer", 0.4, "TimerMoveHammer");
	AddTimer("repeat", 0.6, "TimerMoveHammer");
	
	PlaySoundAtEntity("", "impact_rock_high", "wall_breakable", 0, false);
	PlaySoundAtEntity("", "15_make_hammer", "Player", 0.25, false);
	PlaySoundAtEntity("", "impact_rock_med", "wall_breakable", 2, false);
}

void TimerMoveHammer(string &in asTimer)
{
	if(asTimer == "movehammer") SetMoveObjectState("Hammermove", 0.4); // moves hammer towards the entity//
	
	else if(asTimer == "hammersound") {
		StopPlayerLookAt();
		PlaySoundAtEntity("", "impact_rock_high.snt", "Player", 0, false);
		PlaySoundAtEntity("", "15_hammer", "Player", 0, false);
	}
	
	else if(asTimer == "resethammer") SetMoveObjectState("Hammermove", 0); // moves the hammer to its original position//
	
	if(swings2 < 3 && asTimer == "repeat") {
		AddTimer("movehammer", 0.01, "TimerMoveHammer");
		AddTimer("hammersound", 0.17, "TimerMoveHammer");
		AddTimer("resethammer", 0.3, "TimerMoveHammer");
		AddTimer("repeat", 0.5, "TimerMoveHammer");
		
		swings2 = swings2 + 1;
	}
	
	else if(swings2 == 3 && asTimer == "repeat") {
		AddTimer("movehammer", 0.2, "TimerMoveHammer");
		AddTimer("hammersound", 0.37, "TimerMoveHammer");
		AddTimer("resethammer", 0.5, "TimerMoveHammer");
		AddTimer("repeat", 0.8, "TimerMoveHammer");
		
		AddTimer("break", 0.42, "TimerMoveHammer");
		
		swings2 = swings2 + 1;
	}
	
	else if(swings2 == 4 && asTimer == "break") FinishAnimation();
	
	else if(swings2 == 4 && asTimer == "repeat") SetEntityActive("Hammermove", false);
		
	
}

void FinishAnimation()
{
	PlaySoundAtEntity("", "03_break_wall", "Player", 1, false);
	SetEntityActive("wall_breakable", false);
	SetEntityActive("wall_broken", true);
	GiveSanityBoostSmall();
}

//////////////////////////////Lever Puzzle//////////////////////////////

void UseLever_1(string &in asItem, string &in asEntity)
{
	SetEntityActive("lever_1", true);
	SetEntityActive("Lever_Area", false);
	RemoveItem(asItem);
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "Lever_Area", 0.05, false);
	
}

void UseLever_2(string &in asItem, string &in asEntity)
{
	SetEntityActive("lever_3", true);
	SetEntityActive("Lever_Area_1", false);
	RemoveItem(asItem);
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "Lever_Area_1", 0.05, false);
}

void UseLever_3(string &in asItem, string &in asEntity)
{
	SetEntityActive("lever_4", true);
	SetEntityActive("Lever_Area_2", false);
	RemoveItem(asItem);
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "Lever_Area_2", 0.05, false);
}

void Lever_1_Use(string &in asParent, string &in asChild, int alState) 
{
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "lever_1", 0.05, false);
	SetLeverStuckState("lever_1", 1, true);
	LeverInt = LeverInt + 1;
	
	AddTimer("LeversTimer", 0.1f, "TimerLevers");
	
}

void Lever_2_Use(string &in asParent, string &in asChild, int alState) 
{
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "lever_1", 0.05, false);
	SetLeverStuckState("lever_2", -1, true);
	LeverInt = LeverInt + 1;
	
	AddTimer("LeversTimer", 0.1f, "TimerLevers");
	
}

void Lever_3_Use(string &in asParent, string &in asChild, int alState) 
{
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "lever_1", 0.05, false);
	SetLeverStuckState("lever_3", -1, true);
	LeverInt = LeverInt + 1;
	
	AddTimer("LeversTimer", 0.1f, "TimerLevers");
	
}

void Lever_4_Use(string &in asParent, string &in asChild, int alState) 
{
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "lever_1", 0.05, false);
	SetLeverStuckState("lever_4", 1, true);
	LeverInt = LeverInt + 1;
	
	AddTimer("LeversTimer", 0.1f, "TimerLevers");
	
}

void Lever_5_Use(string &in asParent, string &in asChild, int alState) 
{
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "lever_1", 0.05, false);
	SetLeverStuckState("lever_5", -1, true);
	LeverInt = LeverInt + 1;
	
	AddTimer("LeversTimer", 0.1f, "TimerLevers");
	
}

void Lever_6_Use(string &in asParent, string &in asChild, int alState) 
{
	PlaySoundAtEntity("", "puzzle_place_jar.snt", "lever_1", 0.05, false);
	SetLeverStuckState("lever_6", 1, true);
	LeverInt = LeverInt + 1;
	
	AddTimer("LeversTimer", 0.1f, "TimerLevers");
	
}

void TimerLevers(string &in asTimer)
{
	if(asTimer == "LeversTimer")
		{
			if(LeverInt > 5) {
					SetEntityActive("LeverDoor_1", false);
					SetEntityActive("LeverDoor_2", true);
					PlaySoundAtEntity("", "door_bar_open", "Player", 0.05, false);
					CompleteQuest("TortureLevers", "TortureLevers");
				}
				
		}
	
}

void Quest(string &in asEntity, int LeverState)
{
	if(LeverState == 1) {
		SetMessage("Message", "TortureLever", 3);
		AddQuest("TortureGate", "TortureGate");
	}
}


void Lever(string &in asEntity, int LeverState)
{
	if(LeverState == 1) {
	
		SetMoveObjectState("castle_portcullis_1", 1);
		SetLeverStuckState("LeverDoor_2", 1, true);
		GiveSanityBoostSmall();
		CompleteQuest("TortureGate", "TortureGate");
		}
}

void AddQuest(string &in asParent, string &in asChild, int alState) 
{
	AddQuest("TortureLevers", "TortureLevers");
}

///////////////////////////////Cough////////////////////////////////////

void TimerCough(string &in asTimer)
{
		if(asTimer == "PlayerCough") {
	
		SetLocalVarInt("RandomInt", RandInt(1,4));
		
		GetLocalVarInt("RandomInt");
		
		}
		
		
		if(GetLocalVarInt("RandomInt") == 1) {
			PlaySoundAtEntity("", "player_cough", "Player", 0, false);
			AddTimer("PlayerCough", 16, "TimerCough");
		}
		
		else if(GetLocalVarInt("RandomInt") == 2) {
			PlaySoundAtEntity("", "player_cough", "Player", 0, false);
			AddTimer("PlayerCough", 35, "TimerCough");
		}
		
		
		else if(GetLocalVarInt("RandomInt") == 3) {
			PlaySoundAtEntity("", "player_cough", "Player", 0, false);
			AddTimer("PlayerCough", 23, "TimerCough");
		}
		
		else if(GetLocalVarInt("RandomInt") == 4) {
			PlaySoundAtEntity("", "player_cough", "Player", 0, false);
			AddTimer("PlayerCough", 25, "TimerCough");
		}
		

		
}

/////////////////////////////////End2/3/////////////////////////////////

void End23(string &in asEntity)
{
	AddGlobalVarInt("Ending2/3", +1);
}


void End23Special(string &in asEntity)
{
	AddGlobalVarInt("Ending2/3", +1);
	SetEntityActive("AreaMusic", true);
	SetEntityActive("block_box_1", false);
	
	
}

void Music(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("Dan_Brute_Special", true, 0.6, 0.1, 10, false);
}

///////////////////////////////Shadow///////////////////////////////////
void shadow1(string &in asParent, string &in asChild, int alState)
{
	AddEffectVoice("Shadow_7", "", "Dialogue", "Shadow_7", false, "Player", 0, 15);
}

void shadow2(string &in asParent, string &in asChild, int alState)
{
	AddEffectVoice("Shadow_8", "", "Dialogue", "Shadow_8", false, "Player", 0, 15);
}

/////////////////////////////////Messgaes///////////////////////////////

void messagelocked(string &in asEntity) {
	SetMessage("Message", "CellarLocked", 3);
}

