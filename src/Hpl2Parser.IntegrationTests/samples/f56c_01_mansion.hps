//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------START GLOBAL CODE-------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//

//START GLOBAL CONSTANTS
//EXTRAMODES CONSTANTS:
string gsFunnyEasySuffix = "_funny_weak";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnySuffix = "_funny";
string gsEasySuffix = "_weak";
string gsToughSuffix = "_tough";
//ENTRIES CONSTANTS:
string gsHintCat = "Hints";
string gsDeathHintCat = "DeathHints";
string gsEndCreditsCat = "EndingTexts";
string gsEndCreditsDefaultEntry = "MainCredits";
string gsEmotionFlashCat = "EmotionFlashbacks";
string gsInventoryCat = "Inventory";
string gsLoadScreenImgPrefix = "game_loading_";
string gsLoadScreenCat = "LoadingTexts";
//ENTITIES CONSTANTS:
string gsHealthPotionPrefix = "potion_health_";
string gsLargeOilPotionPrefix = "potion_oil_large_";
string gsLightPrefix = "Light_";
string gsOilPotionPrefix = "potion_oil_";
string gsPathNodeAreaPrefix = "PathNodeArea_";
string gsPlayerStartAreaPrefix = "PlayerStartArea_";
string gsSanityPotionPrefix = "potion_sanity_";
string gsTinderboxPrefix = "tinderbox_";
//SCRIPT ONLY CONSTANTS:
string gsSoundNameSuffix = "_snt";
string gsParticleNameSuffix = "_ps";
string gsLevelDoorLockedTextPrefix = "lockedtext_";
string gsEmotionFlashNameSuffix = "_emotionflashtext";
string gsHarmlessEnemyNameSuffix = "_harmless";
string gsEnemyPathNodeCodePrefix = "node_";
string gsTimerNameSuffix = "_timer";
//END GLOBAL CONSTANTS

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING DEFINED AS THE FIRST ARGUMENT, TO START THE SEARCH OF THE SUBSTRING.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else if(iMatchCount > 0)
			{
				iMatchCount = 0;
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

int GetSubStringIndex(string asString, string asSubString) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1.
{
	int iStringLength = asString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(asString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(asString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else if(iMatchCount > 0)
			{
				iMatchCount = 0;
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else if(iFirstMatchIndex == 0)
	{
		sUnchangedFirstMatchSection = "";
	}
	else
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetOriginalString(string asString) //RETURNS THE STRING WITHOUT THE SUFFIX "_suffix" OR THE PREFIX "prefix" OR "prefix_" + 1/2/3/4/5/6/7/8/9/+infinite/NULL.
{
	if(StringContains(asString, "prefix"))
	{
		int i = 5;
		int iTemp = 0;
		
		do
		{
			i = i + 1;
			iTemp = StringToInt(StringSub(asString, i, 1));
		}
		while(iTemp != 0);
		
		if(i == 6)
		{
			if(StringContains(asString, "prefix_"))
			{
				return GetStringWithoutSubString(asString, "prefix_");
			}
			else
			{
				return GetStringWithoutSubString(asString, "prefix");
			}
		}
		else
		{
			int iPrefixLength = (7 + (i - 6));
			return StringSub(asString, iPrefixLength, asString.length() - iPrefixLength);
		}
	}
	else if(StringContains(asString, "_suffix"))
	{
		return StringSub(asString, 0, GetSubStringIndex(asString, "_suffix"));
	}
	else
	{
		return asString;
	}
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}

string GetSubStringWithoutPrefix(string asString) //RETURNS THE STRING WITHOUT THE PREFIX WHICH HAS LENGTH DEFINED BY THE INTEGER RIGHT AFTER "prefix" AT THE END OF THE FULL ARGUMENT.
{
	if(StringContains(asString, "prefix"))
	{
		if(asString.length() <= 9)
		{
			return "";
		}
		else
		{
			int i = 5;
			int iTemp = 0;
			
			do
			{
				i = i + 1;
				iTemp = StringToInt(StringSub(asString, i, 1));
			}
			while(iTemp != 0);
			
			if(i == 6)
			{
				if(StringContains(asString, "prefix_"))
				{
					return GetStringWithoutSubString(asString, "prefix_");
				}
				else
				{
					return GetStringWithoutSubString(asString, "prefix");
				}
			}
			else
			{
				int iAmount = StringToInt(StringSub(asString, 6, i - 6));
				int iPrefixLength = (7 + (i - 6) + iAmount);
				return StringSub(asString, iPrefixLength, asString.length() - iPrefixLength);
			}
		}
	}
	else
	{
		return asString;
	}
}

string GetSubStringWithoutSuffix(string asString) //RETURNS THE STRING WITHOUT THE SUFFIX WHICH HAS LENGTH DEFINED BY THE INTEGER RIGHT AFTER "_suffix" AT THE END OF THE FULL ARGUMENT.
{
	if(StringContains(asString, "_suffix"))
	{
		int iIndex = GetSubStringIndex(asString, "_suffix");
		
		if(iIndex == asString.length() - 7)
		{
			return GetStringWithoutSubString(asString, "_suffix");
		}
		else
		{
			int iSuffixLength = 0;
			int iAmount = 0;
			iIndex = iIndex + 7;
			iSuffixLength = asString.length() - iIndex;
			iAmount = StringToInt(StringSub(asString, iIndex, iSuffixLength));
			iSuffixLength = iSuffixLength + 7 + iAmount;
			return StringSub(asString, 0, asString.length() - iSuffixLength);
		}
	}
	else
	{
		return asString;
	}
}

string GetObjectName(string asName) //RETURNS THE RELATED OBJECT NAME.
{
	if(StringContains(asName, "Area"))
		return GetSubStringWithoutSuffix(asName);
	else if(StringContains(asName, "head"))
		return "Head";
	else if(StringContains(asName, "saw"))
		return "Saw";
	else if(StringContains(asName, "tar"))
		return "Tar";
	else if(StringContains(asName, "knife"))
		return "Knife";
	else if(StringContains(asName, "epoxy_container"))
		return "EpoxyContainer";
	else if(StringContains(asName, "epoxy"))
		return "Epoxy";
	else if(StringContains(asName, "chemical"))
		return "Chemical";
	else if(StringContains(asName, "tube_and_needle"))
		return "TubeNeedle";
	else if(StringContains(asName, "tube"))
		return "Tube";	
	else if(StringContains(asName, "crowbar"))
		return "Crowbar";	
	else if(StringContains(asName, "meat"))
		return "Meat";	
	else if(StringContains(asName, "acid_container"))
		return "AcidContainer";
	else if(StringContains(asName, "container_blood"))
		return "ContainerBlood";	
	else if(StringContains(asName, "container_filled"))
		return "ContainerFull";	
	else if(StringContains(asName, "container_mix_done"))
		return "ContainerMixDone";	
	else if(StringContains(asName, "container_mix_notdone"))
		return "ContainerMixNotDone";	
	else if(StringContains(asName, "container_oil"))
		return "ContainerOil";	
	else if(StringContains(asName, "container_string_filled"))
		return "ContainerStringFull";	
	else if(StringContains(asName, "container_string"))
		return "ContainerString";
	else if(StringContains(asName, "container"))
		return "Container";
	else if(StringContains(asName, "guiding_rod"))
		return "Rod";	
	else if(StringContains(asName, "drill_part"))
		return "DrillPart";	
	else if(StringContains(asName, "drill"))
		return "Drill";		
	else if(StringContains(asName, "needle"))
		return "Needle";		
	else if(StringContains(asName, "orbpiece"))
		return "Orbpiece";		
	else if(StringContains(asName, "pipe"))
		return "Pipe";		
	else if(StringContains(asName, "gland"))
		return "Gland";		
	else if(StringContains(asName, "hammer_chipper"))
		return "HammerAndChipper";
	else if(StringContains(asName, "chipper"))
		return "Chipper";		
	else if(StringContains(asName, "hammer"))
		return "Hammer";		
	else if(StringContains(asName, "string_pile"))
		return "StringPile";		
	else if(StringContains(asName, "bucket_onrope_filled"))
		return "BucketOnropeFull";		
	else if(StringContains(asName, "bucket_filled"))
		return "BucketFull";		
	else if(StringContains(asName, "bucket"))
		return "Bucket";	
	else if(StringContains(asName, "coins"))
		return "Coins";
	else if(StringContains(asName, "key"))
		return "Key";
	else if(StringContains(asName, "lantern"))
		return "Lantern";
	else if(StringContains(asName, "potion"))
		return "Potion";
	else if(StringContains(asName, "tinderbox"))
		return "Tinderbox";
	else if(StringContains(asName, "diary_paper") || StringContains(asName, "note"))
		return "Note";
	else if(StringContains(asName, "shelf"))
		return "Shelf";
	else if(StringContains(asName, "door"))
		return "Door";
	else if(StringContains(asName, "grunt"))
		return "Grunt";
	else if(StringContains(asName, "brute"))
		return "Brute";
	else if(StringContains(asName, "waterlurker"))
		return "Waterlurker";
	else if(StringContains(asName, "suitor"))
		return "Suitor";
	else if(StringContains(asName, "enemy"))
		return "Enemy";
	else if(StringContains(asName, "bottle"))
		return "Bottle";
	else if(StringContains(asName, "wine"))
		return "Wine";
	else if(StringContains(asName, "alexander"))
		return "Alexander";
	else if(StringContains(asName, "prisoner"))
		return "Prisoner";
	else if(StringContains(asName, "shirt"))
		return "Shirt";
	else if(StringContains(asName, "barrel"))
		return "Barrel";
	else if(StringContains(asName, "vase"))
		return "Vase";
	else if(StringContains(asName, "wood_box"))
		return "WoodBox";
	else if(StringContains(asName, "broom"))
		return "Broom";
	else if(StringContains(asName, "chair"))
		return "Chair";
	else if(StringContains(asName, "bed"))
		return "Bed";
	else if(StringContains(asName, "cabinet"))
		return "Closet";
	else if(StringContains(asName, "piano"))
		return "Piano";
	else if(StringContains(asName, "stove"))
		return "Stove";
	else if(StringContains(asName, "table"))
		return "Table";
	else if(StringContains(asName, "book") || StringContains(asName, "tome"))
		return "Book";
	else if(StringContains(asName, "button"))
		return "Button";
	else if(StringContains(asName, "ladder"))
		return "Ladder";
	else if(StringContains(asName, "lever"))
		return "Lever";
	else if(StringContains(asName, "rock"))
		return "Rock";
	else if(StringContains(asName, "tongs"))
		return "Tongs";
	else if(StringContains(asName, "bonfire"))
		return "Bonfire";
	else if(StringContains(asName, "torch"))
		return "Torch";
	else if(StringContains(asName, "candle"))
		return "Candle";
	else if(StringContains(asName, "chandelier"))
		return "Chandelier";
	else if(StringContains(asName, "goblet"))
		return "Goblet";
	else if(StringContains(asName, "painting"))
		return "Painting";
	else if(StringContains(asName, "statue"))
		return "Statue";
	else if(StringContains(asName, "stencil"))
		return "Stencil";
	else if(StringContains(asName, "violin"))
		return "Violin";
	else if(StringContains(asName, "waxroll_record"))
		return "WaxrollRecord";
	else if(StringContains(asName, "bag"))
		return "Bag";
	else if(StringContains(asName, "bread"))
		return "Bread";
	else if(StringContains(asName, "pig"))
		return "Pig";
	else if(StringContains(asName, "carcass"))
		return "Carcass";
	else if(StringContains(asName, "apple"))
		return "Apple";
	else if(StringContains(asName, "corpse"))
		return "Corpse";
	else if(StringContains(asName, "tree"))
		return "Tree";
	else if(StringContains(asName, "orbpedestal"))
		return "OrbPedestal";
	else if(StringContains(asName, "orb"))
		return "Orb";
	else if(StringContains(asName, "slime"))
		return "Slime";
	else if(StringContains(asName, "basket"))
		return "Basket";
	else if(StringContains(asName, "storage_box_wood"))
		return "WoodBoxStorage";
	else
		return GetSubStringWithoutSuffix(asName);
}
//END STRING MANAGEMENT FUNCTIONS

//START TIMER FUNCTIONS
void SetTimerReady(string asTimer) //HELPER FUNCTION. IT'S ESSENTIAL TO MAKE THE AddTimer OVERLOADS FUNCTIONS WORK.
{
	string sInputB = GetLocalVarString(asTimer + "_InputB");
	string sInputC = GetLocalVarString(asTimer + "_InputC");
	string sInputD = GetLocalVarString(asTimer + "_InputD");
	string sInputE = GetLocalVarString(asTimer + "_InputE");
	string sInputF = GetLocalVarString(asTimer + "_InputF");
	
	if(sInputF.length() <= 0)
	{
		AddDebugMessage("ERROR: No function found related to timer " + asTimer, false);
	}
	else if(sInputE.length() > 0)
	{
		AddTimer(asTimer, "", "", "", "", 0.001f, "");
	}
	else if(sInputD.length() > 0)
	{
		AddTimer(asTimer, "", "", "", 0.001f, "");
	}
	else if(sInputC.length() > 0)
	{
		AddTimer(asTimer, "", "", 0.001f, "");
	}
	else if(sInputB.length() > 0)
	{
		AddTimer(asTimer, "", 0.001f, "");
	}
	else if(asTimer.length() > 0)
	{
		if(asTimer == "AutoSave")
			AutoSave();
		else if(asTimer == "ClearSavedMaps")
			ClearSavedMaps();
		else if(asTimer == "CreateDataCache")
			CreateDataCache();
		else if(asTimer == "DestroyDataCache")
			DestroyDataCache();
		else if(asTimer == "StopPlayerSpawnPS")
			StopPlayerSpawnPS();
		else if(asTimer == "StartRandomInsanityEvent")
			StartRandomInsanityEvent();
		else if(asTimer == "StopCurrentInsanityEvent")
			StopCurrentInsanityEvent();
		else if(asTimer == "ChangePlayerStateToNormal")
			ChangePlayerStateToNormal();
		else if(asTimer == "GiveSanityBoost")
			GiveSanityBoost();
		else if(asTimer == "GiveSanityBoostSmall")
			GiveSanityBoostSmall();
		else if(asTimer == "StopPlayerLookAt")
			StopPlayerLookAt();
		else if(asTimer == "DisableDeathStartSound")
			DisableDeathStartSound();
		else if(asTimer == "SetActiveEnemyDisabled")
			SetActiveEnemyDisabled();
		else if(asTimer == "SetupExtraModesGoodies")
			SetupExtraModesGoodies();
		else if(asTimer == "SetupExtraModes")
			SetupExtraModes();
		else if(asTimer == "OnStart")
			OnStart();
		else if(asTimer == "OnEnter")
			OnEnter();
		else if(asTimer == "OnLeave")
			OnLeave();
		else
			AddDebugMessage("ERROR: All the arguments for the timer " + asTimer + " are null or no function pattern recognized!", false);
	}
	else
	{
		AddDebugMessage("ERROR: A null timer has been passed to SetTimerReady function!", false);
	}
}

void AddTimer(string asInputA, string asInputB, string asInputC, string asInputD, string asInputE, float afTime, string asFunction) //OVERLOADS AddTimer FUNCTION TO HAVE 5 ARGUMENTS.
{
	if(StringContains(asInputA, gsTimerNameSuffix) == false)
	{
		string sVarName = asInputA + gsTimerNameSuffix;
		int i = 0;
		
		while(GetLocalVarInt(sVarName + i) == 1)
		{
			i = i + 1;
		}
		
		sVarName = sVarName + i;
		SetLocalVarInt(sVarName, 1);
		SetLocalVarString(sVarName + "_InputB", asInputB);
		SetLocalVarString(sVarName + "_InputC", asInputC);
		SetLocalVarString(sVarName + "_InputD", asInputD);
		SetLocalVarString(sVarName + "_InputE", asInputE);
		SetLocalVarString(sVarName + "_InputF", asFunction);
		AddTimer(sVarName, afTime, "SetTimerReady");
	}
	else
	{
		string sInputA = StringSub(asInputA, 0, GetSubStringIndex(asInputA, gsTimerNameSuffix));
		string sInputB = GetLocalVarString(asInputA + "_InputB");
		string sInputC = GetLocalVarString(asInputA + "_InputC");
		string sInputD = GetLocalVarString(asInputA + "_InputD");
		string sInputE = GetLocalVarString(asInputA + "_InputE");
		string sInputF = GetLocalVarString(asInputA + "_InputF");
		
		if(sInputF == "PlaySoundAtEntity")
			PlaySoundAtEntity(sInputA, sInputB, sInputC, StringToFloat(sInputD), StringToBool(sInputE));
		else if(sInputF == "StartCredits")
			StartCredits(sInputA, StringToBool(sInputB), sInputC, sInputD, StringToInt(sInputE));
		else if(sInputF == "CheckPoint")
			CheckPoint(sInputA, sInputB, sInputC, sInputD, sInputE);
		else if(sInputF == "MovePlayerHeadPos")
			MovePlayerHeadPos(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD), StringToFloat(sInputE));
		else if(sInputF == "GiveItem")
			GiveItem(sInputA, sInputB, sInputC, sInputD, StringToFloat(sInputE));
		else if(sInputF == "AddCombineCallback")
			AddCombineCallback(sInputA, sInputB, sInputC, sInputD, StringToBool(sInputE));
		else if(sInputF == "AddUseItemCallback")
			AddUseItemCallback(sInputA, sInputB, sInputC, sInputD, StringToBool(sInputE));
		else if(sInputF == "ReplaceEntity")
			ReplaceEntity(sInputA, sInputB, sInputC, sInputD, StringToBool(sInputE));
		else if(sInputF == "AddEntityCollideCallback")
			AddEntityCollideCallback(sInputA, sInputB, sInputC, StringToBool(sInputD), StringToInt(sInputE));
		else if(sInputF == "PlayPropAnimation")
			PlayPropAnimation(sInputA, sInputB, StringToFloat(sInputC), StringToBool(sInputD), sInputE);
		else if(sInputF == "AddPropForce")
			AddPropForce(sInputA, StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD), sInputE);
		else if(sInputF == "AddPropImpulse")
			AddPropImpulse(sInputA, StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD), sInputE);
		else if(sInputF == "AddBodyForce")
			AddBodyForce(sInputA, StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD), sInputE);
		else if(sInputF == "AddBodyImpulse")
			AddBodyImpulse(sInputA, StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD), sInputE);
		else
			AddDebugMessage("ERROR: No timer function pattern " + sInputF + " recognized!", false);
		
		SetLocalVarInt(asInputA, 0);
		SetLocalVarString(asInputA + "_InputB", "");
		SetLocalVarString(asInputA + "_InputC", "");
		SetLocalVarString(asInputA + "_InputD", "");
		SetLocalVarString(asInputA + "_InputE", "");
		SetLocalVarString(asInputA + "_InputF", "");
	}
}

void AddTimer(string asInputA, string asInputB, string asInputC, string asInputD, float afTime, string asFunction) //OVERLOADS AddTimer FUNCTION TO HAVE 4 ARGUMENTS.
{
	if(StringContains(asInputA, gsTimerNameSuffix) == false)
	{
		string sVarName = asInputA + gsTimerNameSuffix;
		int i = 0;
		
		while(GetLocalVarInt(sVarName + i) == 1)
		{
			i = i + 1;
		}
		
		sVarName = sVarName + i;
		SetLocalVarInt(sVarName, 1);
		SetLocalVarString(sVarName + "_InputB", asInputB);
		SetLocalVarString(sVarName + "_InputC", asInputC);
		SetLocalVarString(sVarName + "_InputD", asInputD);
		SetLocalVarString(sVarName + "_InputF", asFunction);
		AddTimer(sVarName, afTime, "SetTimerReady");
	}
	else
	{
		string sInputA = StringSub(asInputA, 0, GetSubStringIndex(asInputA, gsTimerNameSuffix));
		string sInputB = GetLocalVarString(asInputA + "_InputB");
		string sInputC = GetLocalVarString(asInputA + "_InputC");
		string sInputD = GetLocalVarString(asInputA + "_InputD");
		string sInputF = GetLocalVarString(asInputA + "_InputF");
		
		if(sInputF == "SetCombineCallback")
			SetCombineCallback(sInputA, sInputB, sInputC, StringToBool(sInputD));
		else if(sInputF == "SetEntitiesCollideCallback")
			SetEntitiesCollideCallback(sInputA, sInputB, sInputC, sInputD);
		else if(sInputF == "SetUseItemCallback")
			SetUseItemCallback(sInputA, sInputB, sInputC, StringToBool(sInputD));
		else if(sInputF == "SetLightState")
			SetLightState(sInputA, sInputB, StringToFloat(sInputC), StringToFloat(sInputD));
		else if(sInputF == "PlayParticleSystem")
			PlayParticleSystem(sInputA, sInputB, sInputC, StringToInt(sInputD));
		else if(sInputF == "PlaySound")
			PlaySound(sInputA, sInputB, sInputC, StringToInt(sInputD));
		else if(sInputF == "SetEntitiesActive")
			SetEntitiesActive(sInputA, StringToFloat(sInputB), StringToInt(sInputC), StringToInt(sInputD));
		else if(sInputF == "SetEntitiesAndEffectsInactive")
			SetEntitiesAndEffectsInactive(sInputA, sInputB, StringToInt(sInputC), StringToInt(sInputD));
		else if(sInputF == "SetEntitiesInactive")
			SetEntitiesInactive(sInputA, StringToFloat(sInputB), StringToInt(sInputC), StringToInt(sInputD));
		else if(sInputF == "SetEntityAndEffectsActive")
			SetEntityAndEffectsActive(sInputA, sInputB, sInputC, sInputD);
		else if(sInputF == "SetFogState")
			SetFogState(sInputA, StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD));
		else if(sInputF == "CreateParticleSystemAtEntity")
			CreateParticleSystemAtEntity(sInputA, sInputB, sInputC, StringToBool(sInputD));
		else if(sInputF == "ChangeMap")
			ChangeMap(sInputA, sInputB, sInputC, sInputD);
		else if(sInputF == "SetSkyBoxColor")
			SetSkyBoxColor(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD));
		else if(sInputF == "SetFogColor")
			SetFogColor(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD));
		else if(sInputF == "SetFogProperties")
			SetFogProperties(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC), StringToBool(sInputD));
		else if(sInputF == "SetupLoadScreen")
			SetupLoadScreen(sInputA, sInputB, StringToInt(sInputC), sInputD);
		else if(sInputF == "StartScreenShake")
			StartScreenShake(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD));
		else if(sInputF == "AddPlayerBodyForce")
			AddPlayerBodyForce(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC), StringToBool(sInputD));
		else if(sInputF == "GivePlayerDamage")
			GivePlayerDamage(StringToFloat(sInputA), sInputB, StringToBool(sInputC), StringToBool(sInputD));
		else if(sInputF == "StartPlayerLookAt")
			StartPlayerLookAt(sInputA, StringToFloat(sInputB), StringToFloat(sInputC), sInputD);
		else if(sInputF == "GiveHint")
			GiveHint(sInputA, sInputB, sInputC, StringToFloat(sInputD));
		else if(sInputF == "CreateEntityAtArea")
			CreateEntityAtArea(sInputA, sInputB, sInputC, StringToBool(sInputD));
		else if(sInputF == "PlaceEntityAtEntity")
			PlaceEntityAtEntity(sInputA, sInputB, sInputC, StringToBool(sInputD));
		else if(sInputF == "SetEntityPos")
			SetEntityPos(sInputA, StringToFloat(sInputB), StringToFloat(sInputC), StringToFloat(sInputD));
		else if(sInputF == "AddEnemyPatrolNode")
			AddEnemyPatrolNode(sInputA, sInputB, StringToFloat(sInputC), sInputD);
		else if(sInputF == "TeleportEnemyToEntity")
			TeleportEnemyToEntity(sInputA, sInputB, sInputC, StringToBool(sInputD));
		else
			AddDebugMessage("ERROR: No timer function pattern " + sInputF + " recognized!", false);
		
		SetLocalVarInt(asInputA, 0);
		SetLocalVarString(asInputA + "_InputB", "");
		SetLocalVarString(asInputA + "_InputC", "");
		SetLocalVarString(asInputA + "_InputD", "");
		SetLocalVarString(asInputA + "_InputE", "");
		SetLocalVarString(asInputA + "_InputF", "");
	}
}

void AddTimer(string asInputA, string asInputB, string asInputC, float afTime, string asFunction) //OVERLOADS AddTimer FUNCTION TO HAVE 3 ARGUMENTS.
{
	if(StringContains(asInputA, gsTimerNameSuffix) == false)
	{
		string sVarName = asInputA + gsTimerNameSuffix;
		int i = 0;
		
		while(GetLocalVarInt(sVarName + i) == 1)
		{
			i = i + 1;
		}
		
		sVarName = sVarName + i;
		SetLocalVarInt(sVarName, 1);
		SetLocalVarString(sVarName + "_InputB", asInputB);
		SetLocalVarString(sVarName + "_InputC", asInputC);
		SetLocalVarString(sVarName + "_InputF", asFunction);
		AddTimer(sVarName, afTime, "SetTimerReady");
	}
	else
	{
		string sInputA = StringSub(asInputA, 0, GetSubStringIndex(asInputA, gsTimerNameSuffix));
		string sInputB = GetLocalVarString(asInputA + "_InputB");
		string sInputC = GetLocalVarString(asInputA + "_InputC");
		string sInputF = GetLocalVarString(asInputA + "_InputF");
		
		if(sInputF == "PlayEndCredits")
			PlayEndCredits(sInputA, sInputB, StringToBool(sInputC));
		else if(sInputF == "PlayParticleSystem")
			PlayParticleSystem(sInputA, sInputB, sInputC);
		else if(sInputF == "PlaySound")
			PlaySound(sInputA, sInputB, sInputC);
		else if(sInputF == "SetCheckPoint")
			SetCheckPoint(sInputA, sInputB, sInputC);
		else if(sInputF == "SetCombineCallback")
			SetCombineCallback(sInputA, sInputB, StringToBool(sInputC));
		else if(sInputF == "SetEnemyPatrolNode")
			SetEnemyPatrolNode(sInputA, StringToInt(sInputB), StringToInt(sInputC));
		else if(sInputF == "SetEntitiesCollideCallback")
			SetEntitiesCollideCallback(sInputA, sInputB, sInputC);
		else if(sInputF == "SetEntityPlayerCollideCallback")
			SetEntityPlayerCollideCallback(sInputA, sInputB, sInputC);
		else if(sInputF == "SetEntityPlayerInteractCallback")
			SetEntityPlayerInteractCallback(sInputA, sInputB, StringToBool(sInputC));
		else if(sInputF == "SetUseItemCallback")
			SetUseItemCallback(sInputA, sInputB, StringToBool(sInputC));
		else if(sInputF == "SetLightState")
			SetLightState(sInputA, sInputB, StringToFloat(sInputC));
		else if(sInputF == "SetEntitiesActive")
			SetEntitiesActive(sInputA, StringToInt(sInputB), StringToInt(sInputC));
		else if(sInputF == "SetEntitiesInactive")
			SetEntitiesInactive(sInputA, StringToInt(sInputB), StringToInt(sInputC));
		else if(sInputF == "SetEntitiesInvisible")
			SetEntitiesInvisible(sInputA, StringToInt(sInputB), StringToInt(sInputC));
		else if(sInputF == "SetEntitiesVisible")
			SetEntitiesVisible(sInputA, StringToInt(sInputB), StringToInt(sInputC));
		else if(sInputF == "SetPlayerLookAt")
			SetPlayerLookAt(sInputA, sInputB, StringToFloat(sInputC));
		else if(sInputF == "SetMessage")
			SetMessage(sInputA, sInputB, StringToFloat(sInputC));
		else if(sInputF == "FadeInSound")
			FadeInSound(sInputA, StringToFloat(sInputB), StringToBool(sInputC));
		else if(sInputF == "StartEffectFlash")
			StartEffectFlash(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC));
		else if(sInputF == "StartEffectEmotionFlash")
			StartEffectEmotionFlash(sInputA, sInputB, sInputC);
		else if(sInputF == "FadePlayerRollTo")
			FadePlayerRollTo(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC));
		else if(sInputF == "SetPlayerPos")
			SetPlayerPos(StringToFloat(sInputA), StringToFloat(sInputB), StringToFloat(sInputC));
		else if(sInputF == "SetInventoryMessage")
			SetInventoryMessage(sInputA, sInputB, StringToFloat(sInputC));
		else if(sInputF == "SetEntityPlayerLookAtCallback")
			SetEntityPlayerLookAtCallback(sInputA, sInputB, StringToBool(sInputC));
		else if(sInputF == "SetPropEffectActive")
			SetPropEffectActive(sInputA, StringToBool(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetPropActiveAndFade")
			SetPropActiveAndFade(sInputA, StringToBool(sInputB), StringToFloat(sInputC));
		else if(sInputF == "SetLampLit")
			SetLampLit(sInputA, StringToBool(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetSwingDoorLocked")
			SetSwingDoorLocked(sInputA, StringToBool(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetSwingDoorClosed")
			SetSwingDoorClosed(sInputA, StringToBool(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetLevelDoorLockedText")
			SetLevelDoorLockedText(sInputA, sInputB, sInputC);
		else if(sInputF == "SetWheelStuckState")
			SetWheelStuckState(sInputA, StringToInt(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetLeverStuckState")
			SetLeverStuckState(sInputA, StringToInt(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetWheelAngle")
			SetWheelAngle(sInputA, StringToFloat(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetMultiSliderStuckState")
			SetMultiSliderStuckState(sInputA, StringToInt(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetButtonSwitchedOn")
			SetButtonSwitchedOn(sInputA, StringToBool(sInputB), StringToBool(sInputC));
		else if(sInputF == "SetNPCAwake")
			SetNPCAwake(sInputA, StringToBool(sInputB), StringToBool(sInputC));
		else if(sInputF == "TeleportEnemyToNode")
			TeleportEnemyToNode(sInputA, sInputB, StringToBool(sInputC));
		else
			AddDebugMessage("ERROR: No timer function pattern " + sInputF + " recognized!", false);
		
		SetLocalVarInt(asInputA, 0);
		SetLocalVarString(asInputA + "_InputB", "");
		SetLocalVarString(asInputA + "_InputC", "");
		SetLocalVarString(asInputA + "_InputD", "");
		SetLocalVarString(asInputA + "_InputE", "");
		SetLocalVarString(asInputA + "_InputF", "");
	}
}

void AddTimer(string asInputA, string asInputB, float afTime, string asFunction) //OVERLOADS AddTimer FUNCTION TO HAVE 2 ARGUMENTS.
{
	if(StringContains(asInputA, gsTimerNameSuffix) == false)
	{
		string sVarName = asInputA + gsTimerNameSuffix;
		int i = 0;
		
		while(GetLocalVarInt(sVarName + i) == 1)
		{
			i = i + 1;
		}
		
		sVarName = sVarName + i;
		SetLocalVarInt(sVarName, 1);
		SetLocalVarString(sVarName + "_InputB", asInputB);
		SetLocalVarString(sVarName + "_InputF", asFunction);
		AddTimer(sVarName, afTime, "SetTimerReady");
	}
	else
	{
		string sInputA = StringSub(asInputA, 0, GetSubStringIndex(asInputA, gsTimerNameSuffix));
		string sInputB = GetLocalVarString(asInputA + "_InputB");
		string sInputF = GetLocalVarString(asInputA + "_InputF");
		
		if(sInputF == "ChangeMap")
			ChangeMap(sInputA, StringToInt(sInputB));
		else if(sInputF == "PlayEndCredits")
			PlayEndCredits(sInputA, sInputB);
		else if(sInputF == "PlayMusic")
			PlayMusic(sInputA, sInputB);
		else if(sInputF == "PlayParticleSystem")
			PlayParticleSystem(sInputA, sInputB);
		else if(sInputF == "StopParticleSystem")
			StopParticleSystem(sInputA, sInputB);
		else if(sInputF == "PlaySound")
			PlaySound(sInputA, sInputB);
		else if(sInputF == "PlayGuiSound")
			PlayGuiSound(sInputA, StringToFloat(sInputB));
		else if(sInputF == "StopSound")
			StopSound(sInputA, sInputB);
		else if(sInputF == "SetCheckPoint")
			SetCheckPoint(sInputA, sInputB);
		else if(sInputF == "SetEnemyPatrolNode")
			SetEnemyPatrolNode(sInputA, StringToInt(sInputB));
		else if(sInputF == "SetEntitiesCollideCallback")
			SetEntitiesCollideCallback(sInputA, sInputB);
		else if(sInputF == "SetEntityPlayerCollideCallback")
			SetEntityPlayerCollideCallback(sInputA, sInputB);
		else if(sInputF == "SetEntityPlayerInteractCallback")
			SetEntityPlayerInteractCallback(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetEntityPlayerLookAtCallback")
			SetEntityPlayerLookAtCallback(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetLoadScreen")
			SetLoadScreen(sInputA, sInputB);
		else if(sInputF == "SetMessage")
			SetMessage(sInputA, sInputB);
		else if(sInputF == "SetLightState")
			SetLightState(sInputA, sInputB);
		else if(sInputF == "SetEntityActive")
			SetEntityActive(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetEntityAndEffectsInactive")
			SetEntityAndEffectsInactive(sInputA, sInputB);
		else if(sInputF == "SetEntityHealth")
			SetEntityHealth(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetEntityInactive")
			SetEntityInactive(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetEntityState")
			SetEntityState(sInputA, sInputB);
		else if(sInputF == "SetDoorState")
			SetDoorState(sInputA, sInputB);
		else if(sInputF == "SetQuestState")
			SetQuestState(sInputA, sInputB);
		else if(sInputF == "SetEnemyState")
			SetEnemyState(sInputA, sInputB);
		else if(sInputF == "SetPlayerLookAt")
			SetPlayerLookAt(sInputA, sInputB);
		else if(sInputF == "SetPlayerRollTo")
			SetPlayerRollTo(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetGlobalSoundSpeed")
			SetGlobalSoundSpeed(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetGlobalSoundVolume")
			SetGlobalSoundVolume(sInputA, StringToFloat(sInputB));
		else if(sInputF == "AddLocalVarInt")
			AddLocalVarInt(sInputA, StringToInt(sInputB));
		else if(sInputF == "SetLocalVarInt")
			SetLocalVarInt(sInputA, StringToInt(sInputB));
		else if(sInputF == "AddGlobalVarInt")
			AddGlobalVarInt(sInputA, StringToInt(sInputB));
		else if(sInputF == "SetGlobalVarInt")
			SetGlobalVarInt(sInputA, StringToInt(sInputB));
		else if(sInputF == "AddLocalVarFloat")
			AddLocalVarFloat(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetLocalVarFloat")
			SetLocalVarFloat(sInputA, StringToFloat(sInputB));
		else if(sInputF == "AddGlobalVarFloat")
			AddGlobalVarFloat(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetGlobalVarFloat")
			SetGlobalVarFloat(sInputA, StringToFloat(sInputB));
		else if(sInputF == "AddLocalVarString")
			AddLocalVarString(sInputA, sInputB);
		else if(sInputF == "SetLocalVarString")
			SetLocalVarString(sInputA, sInputB);
		else if(sInputF == "AddGlobalVarString")
			AddGlobalVarString(sInputA, sInputB);
		else if(sInputF == "SetGlobalVarString")
			SetGlobalVarString(sInputA, sInputB);
		else if(sInputF == "StopMusic")
			StopMusic(StringToFloat(sInputA), StringToInt(sInputB));
		else if(sInputF == "FadeGlobalSoundVolume")
			FadeGlobalSoundVolume(StringToFloat(sInputA), StringToFloat(sInputB));
		else if(sInputF == "FadeGlobalSoundSpeed")
			FadeGlobalSoundSpeed(StringToFloat(sInputA), StringToFloat(sInputB));
		else if(sInputF == "SetLightVisible")
			SetLightVisible(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetLightFlickerActive")
			SetLightFlickerActive(sInputA, StringToBool(sInputB));
		else if(sInputF == "FadeImageTrailTo")
			FadeImageTrailTo(StringToFloat(sInputA), StringToFloat(sInputB));
		else if(sInputF == "FadeSepiaColorTo")
			FadeSepiaColorTo(StringToFloat(sInputA), StringToFloat(sInputB));
		else if(sInputF == "FadeRadialBlurTo")
			FadeRadialBlurTo(StringToFloat(sInputA), StringToFloat(sInputB));
		else if(sInputF == "SetInsanitySetEnabled")
			SetInsanitySetEnabled(sInputA, StringToBool(sInputB));
		else if(sInputF == "GiveSanityDamage")
			GiveSanityDamage(StringToFloat(sInputA), StringToBool(sInputB));
		else if(sInputF == "FadePlayerFOVMulTo")
			FadePlayerFOVMulTo(StringToFloat(sInputA), StringToFloat(sInputB));
		else if(sInputF == "FadePlayerAspectMulTo")
			FadePlayerAspectMulTo(StringToFloat(sInputA), StringToFloat(sInputB));
		else if(sInputF == "SetLanternActive")
			SetLanternActive(StringToBool(sInputA), StringToBool(sInputB));
		else if(sInputF == "SetDeathHint")
			SetDeathHint(sInputA, sInputB);
		else if(sInputF == "AddNote")
			AddNote(sInputA, sInputB);
		else if(sInputF == "AddDiary")
			AddDiary(sInputA, sInputB);
		else if(sInputF == "AddQuest")
			AddQuest(sInputA, sInputB);
		else if(sInputF == "CompleteQuest")
			CompleteQuest(sInputA, sInputB);
		else if(sInputF == "GiveItemFromFile")
			GiveItemFromFile(sInputA, sInputB);
		else if(sInputF == "SetEntityVisible")
			SetEntityVisible(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetEntityCustomFocusCrossHair")
			SetEntityCustomFocusCrossHair(sInputA, sInputB);
		else if(sInputF == "SetEntityCallbackFunc")
			SetEntityCallbackFunc(sInputA, sInputB);
		else if(sInputF == "SetEntityConnectStateChangeCallback" || sInputF == "SetEntityConnectionStateChangeCallback")
			SetEntityConnectStateChangeCallback(sInputA, sInputB);
		else if(sInputF == "SetEntityInteractionDisabled")
			SetEntityInteractionDisabled(sInputA, StringToBool(sInputB));
		else if(sInputF == "RemoveEntityCollideCallback")
			RemoveEntityCollideCallback(sInputA, sInputB);
		else if(sInputF == "SetBodyMass")
			SetBodyMass(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetPropStaticPhysics")
			SetPropStaticPhysics(sInputA, StringToBool(sInputB));
		else if(sInputF == "RemoveAttachedPropFromProp")
			RemoveAttachedPropFromProp(sInputA, sInputB);
		else if(sInputF == "SetPropHealth")
			SetPropHealth(sInputA, StringToFloat(sInputB));
		else if(sInputF == "AddPropHealth")
			AddPropHealth(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetSwingDoorDisableAutoClose")
			SetSwingDoorDisableAutoClose(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetLevelDoorLocked")
			SetLevelDoorLocked(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetLevelDoorLockedSound")
			SetLevelDoorLockedSound(sInputA, sInputB);
		else if(sInputF == "SetMoveObjectState")
			SetMoveObjectState(sInputA, StringToFloat(sInputB));
		else if(sInputF == "SetPropObjectStuckState")
			SetPropObjectStuckState(sInputA, StringToInt(sInputB));
		else if(sInputF == "SetWheelInteractionDisablesStuck")
			SetWheelInteractionDisablesStuck(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetLeverInteractionDisablesStuck")
			SetLeverInteractionDisablesStuck(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetMultiSliderCallback")
			SetMultiSliderCallback(sInputA, sInputB);
		else if(sInputF == "AttachPropToStickyArea")
			AttachPropToStickyArea(sInputA, sInputB);
		else if(sInputF == "AttachBodyToStickyArea")
			AttachBodyToStickyArea(sInputA, sInputB);
		else if(sInputF == "SetNPCFollowPlayer")
			SetNPCFollowPlayer(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetEnemyDisabled")
			SetEnemyDisabled(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetEnemyIsHallucination")
			SetEnemyIsHallucination(sInputA, StringToBool(sInputB));
		else if(sInputF == "FadeEnemyToSmoke")
			FadeEnemyToSmoke(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetEnemyDisableTriggers")
			SetEnemyDisableTriggers(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetEnemySanityDecreaseActive")
			SetEnemySanityDecreaseActive(sInputA, StringToBool(sInputB));
		else if(sInputF == "ChangeManPigPose")
			ChangeManPigPose(sInputA, sInputB);
		else if(sInputF == "SetTeslaPigFadeDisabled")
			SetTeslaPigFadeDisabled(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetTeslaPigSoundDisabled")
			SetTeslaPigSoundDisabled(sInputA, StringToBool(sInputB));
		else if(sInputF == "SetTeslaPigEasyEscapeDisabled")
			SetTeslaPigEasyEscapeDisabled(sInputA, StringToBool(sInputB));
		else if(sInputF == "ProgLog")
			ProgLog(sInputA, sInputB);
		else if(sInputF == "AddDebugMessage")
			AddDebugMessage(sInputA, StringToBool(sInputB));
		else
			AddDebugMessage("ERROR: No timer function pattern " + sInputF + " recognized!", false);
		
		SetLocalVarInt(asInputA, 0);
		SetLocalVarString(asInputA + "_InputB", "");
		SetLocalVarString(asInputA + "_InputC", "");
		SetLocalVarString(asInputA + "_InputD", "");
		SetLocalVarString(asInputA + "_InputE", "");
		SetLocalVarString(asInputA + "_InputF", "");
	}
}

void AddTimer(float afTime, string asFunction) //OVERLOADS AddTimer FUNCTION TO HAVE NO ARGUMENT.
{
	AddTimer(asFunction, afTime, "SetTimerReady");
}
//END TIMER FUNCTIONS

//START PLAYER STATE FUNCTIONS
void SetPlayerHealth(string asType) //CHANGES PLAYER HEALTH VALUE. POSSIBLE ARGUMENTS PATTERNS: damage, boost, lethal, shake, effect, min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	float fHealth = GetPlayerHealth();
	float fAmount = 0.0f;
	
	if(StringContains(asType, "min"))
	{
		fAmount = 1.0f;
	}
	else if(StringContains(asType, "verysmall"))
	{
		fAmount = RandFloat(2.5f, 5.0f);
	}
	else if(StringContains(asType, "medsmall"))
	{
		fAmount = RandFloat(10.0f, 20.0f);
	}
	else if(StringContains(asType, "small"))
	{
		fAmount = RandFloat(5.0f, 10.0f);
	}
	else if(StringContains(asType, "medbig"))
	{
		fAmount = RandFloat(40.0f, 55.0f);
	}
	else if(StringContains(asType, "med"))
	{
		fAmount = 30.0f;
	}
	else if(StringContains(asType, "verybig"))
	{
		fAmount = RandFloat(75.0f, 100.0f);
	}
	else if(StringContains(asType, "big"))
	{
		fAmount = RandFloat(55.0f, 75.0f);
	}
	else if(StringContains(asType, "max"))
	{
		fAmount = 100.0f;
	}
	else
	{
		fAmount = 1.0f;
	}
	
	bool bShake = false;
	bool bLethal = false;
	
	if(StringContains(asType, "shake") || StringContains(asType, "effect"))
	{
		bShake = true;
	}
	
	if(StringContains(asType, "lethal"))
	{
		bLethal = true;
	}
	
	if(StringContains(asType, "damage"))
	{
		if(StringContains(asType, "grunt"))
		{
			GivePlayerDamage(fAmount, "Claws", bShake, bLethal);
		}
		else if(StringContains(asType, "brute"))
		{
			GivePlayerDamage(fAmount, "Slash", bShake, bLethal);
		}
		else if(StringContains(asType, "blood"))
		{
			GivePlayerDamage(fAmount, "BloodSplat", bShake, bLethal);
		}
		else
		{
			GivePlayerDamage(fAmount, "", bShake, bLethal);
		}
	}
	else if(StringContains(asType, "boost"))
	{
		if((fHealth + fAmount) <= 100)
		{
			AddPlayerHealth(fAmount);
		}
		else
		{
			SetPlayerHealth(100.0f);
		}
	}
	else
	{
		SetPlayerHealth(100.0f);
	}
}

void SetPlayerSanity(string asType) //CHANGES PLAYER SANITY VALUE. POSSIBLE ARGUMENTS PATTERNS: damage, boost, lethal, effect, min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	float fSanity = GetPlayerSanity();
	float fAmount = 0.0f;
	
	if(StringContains(asType, "min"))
	{
		fAmount = 1.0f;
	}
	else if(StringContains(asType, "verysmall"))
	{
		fAmount = RandFloat(2.5f, 5.0f);
	}
	else if(StringContains(asType, "medsmall"))
	{
		fAmount = RandFloat(10.0f, 20.0f);
	}
	else if(StringContains(asType, "small"))
	{
		fAmount = RandFloat(5.0f, 10.0f);
	}
	else if(StringContains(asType, "medbig"))
	{
		fAmount = RandFloat(40.0f, 55.0f);
	}
	else if(StringContains(asType, "med"))
	{
		fAmount = 30.0f;
	}
	else if(StringContains(asType, "verybig"))
	{
		fAmount = RandFloat(75.0f, 100.0f);
	}
	else if(StringContains(asType, "big"))
	{
		fAmount = RandFloat(55.0f, 75.0f);
	}
	else if(StringContains(asType, "max"))
	{
		fAmount = 100.0f;
	}
	else
	{
		fAmount = 1.0f;
	}
	
	bool bUseEffects = false;
	bool bLethal = false;
	
	if(StringContains(asType, "effect"))
	{
		bUseEffects = true;
	}
	
	if(StringContains(asType, "lethal"))
	{
		bLethal = true;
	}
	
	if(StringContains(asType, "damage"))
	{
		if(bLethal || fSanity - fAmount >= 5)
		{
			GiveSanityDamage(fAmount, bUseEffects);
		}
		else
		{
			GiveSanityDamage(fSanity - (fSanity - 5), bUseEffects);
		}
	}
	else if(StringContains(asType, "boost"))
	{
		if(fSanity <= 15)
		{
			fAmount = fAmount + fAmount;
			
			if(fAmount > 80)
			{
				fAmount = 80.0f;
			}
			
			if(bUseEffects)
			{
				AddPlayerSanity(fAmount);
			}
			else
			{
				SetPlayerSanity(fSanity + fAmount);
			}
		}
		else if(fSanity <= 30)
		{
			fAmount = fAmount + (fAmount / 2);
			
			if(fAmount > 70)
			{
				fAmount = 70.0f;
			}
			
			if(bUseEffects)
			{
				AddPlayerSanity(fAmount);
			}
			else
			{
				SetPlayerSanity(fSanity + fAmount);
			}
		}
		else if((fSanity + fAmount) <= 100)
		{
			if(bUseEffects)
			{
				AddPlayerSanity(fAmount);
			}
			else
			{
				SetPlayerSanity(fSanity + fAmount);
			}
		}
		else if(fSanity >= 100)
		{
			if(bUseEffects)
			{
				SetPlayerSanity(75.0f);
				AddPlayerSanity(fAmount);
				AddTimer("100.0f", 0.001f, "SetPlayerSanity");
			}
			else
			{
				SetPlayerSanity(100.0f);
			}
		}
		else if(bUseEffects)
		{
			AddPlayerSanity(fAmount);
			AddTimer("100.0f", 0.001f, "SetPlayerSanity");
		}
		else
		{
			SetPlayerSanity(100.0f);
		}
	}
	else
	{
		SetPlayerSanity(100.0f);
	}
}

void SetPlayerState(string asType)	//CHANGES PLAYER STATE VALUE. POSSIBLE ARGUMENTS PATTERNS: activeoff, activeon, drop, crosshairoff, crosshairon, inventoryoff, inventoryon, maxhealth, medhealth, lowhealth, maxsanity, medsanity, lowsanity, crouchoff, crouchon, crouch, stand, jumpverybig, jumpbig, jumpnormal, jumpoff, jumpon, falldamageoff, falldamageon, darknessoff, darknesson, sanitydrainoff, sanitydrainon, force-x, force-y, force-z, forcex, forcey, forcez, impulse-x, impulse-y, impulse-z, impulsex, impulsey, impulsez, min, verysmall, small, medsmall, med, medbig, big, verybig, max, runoff, speednormal, speedquick, speedslow, speedveryquick, speedveryslow.
{
	float fX = 0.0f;
	float fY = 0.0f;
	float fZ = 0.0f;
	float fAmount = 0.0f;
	
	if(StringContains(asType, "min"))
	{
		fAmount = 2000.0f;
	}
	else if(StringContains(asType, "verysmall"))
	{
		fAmount = 9000.0f;
	}
	else if(StringContains(asType, "medsmall"))
	{
		fAmount = 18000.0f;
	}
	else if(StringContains(asType, "small"))
	{
		fAmount = 15000.0f;
	}
	else if(StringContains(asType, "medbig"))
	{
		fAmount = 24000.0f;
	}
	else if(StringContains(asType, "med"))
	{
		fAmount = 21000.0f;
	}
	else if(StringContains(asType, "verybig"))
	{
		fAmount = 33000.0f;
	}
	else if(StringContains(asType, "big"))
	{
		fAmount = 27000.0f;
	}
	else if(StringContains(asType, "max"))
	{
		fAmount = 40000.0f;
	}
	else
	{
		fAmount = 5000.0f;
	}
	
	if(StringContains(asType, "speedveryquick"))
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		
		if(StringContains(asType, "runoff") == false)
		{
			SetPlayerRunSpeedMul(1.35f);
		}
	}
	else if(StringContains(asType, "speedquick"))
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		
		if(StringContains(asType, "runoff") == false)
		{
			SetPlayerRunSpeedMul(1.175f);
		}
	}
	else if(StringContains(asType, "speednormal"))
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		
		if(StringContains(asType, "runoff") == false)
		{
			if(GetGlobalVarInt("FastSeekerAchievement") == 1)
				SetPlayerRunSpeedMul(1.175f);
			else
				SetPlayerRunSpeedMul(1.0f);
		}
	}
	else if(StringContains(asType, "speedslow"))
	{
		SetPlayerMoveSpeedMul(0.5f);
		SetPlayerLookSpeedMul(0.75f);
		
		if(StringContains(asType, "runoff") == false)
		{
			SetPlayerRunSpeedMul(0.5f);
		}
	}
	else if(StringContains(asType, "speedveryslow"))
	{
		SetPlayerMoveSpeedMul(0.1f);
		SetPlayerLookSpeedMul(0.5f);
		
		if(StringContains(asType, "runoff") == false)
		{
			SetPlayerRunSpeedMul(0.1f);
		}
	}
	
	if(StringContains(asType, "runoff"))
	{
		SetPlayerRunSpeedMul(0.0f);
	}
	
	if(StringContains(asType, "force") || StringContains(asType, "impulse"))
	{
		if(StringContains(asType, "-x"))
		{
			fX = -fAmount;
		}
		else if(StringContains(asType, "x"))
		{
			fX = fAmount;
		}
		
		if(StringContains(asType, "-y"))
		{
			fY = -fAmount;
		}
		else if(StringContains(asType, "y"))
		{
			fY = fAmount;
		}
		
		if(StringContains(asType, "-z"))
		{
			fZ = -fAmount;
		}
		else if(StringContains(asType, "z"))
		{
			fZ = fAmount;
		}
		
		AddPlayerBodyForce(fX, fY, fZ, true);
	}
	
	if(StringContains(asType, "sanitydrainon"))
	{
		SetSanityDrainDisabled(false);
	}
	else if(StringContains(asType, "sanitydrainoff"))
	{
		SetSanityDrainDisabled(true);
	}
	
	if(StringContains(asType, "darknesson"))
	{
		SetInDarknessEffectsActive(true);
	}
	else if(StringContains(asType, "darknessoff"))
	{
		SetInDarknessEffectsActive(false);
	}
	
	if(StringContains(asType, "falldamageon"))
	{
		SetPlayerFallDamageDisabled(false);
	}
	else if(StringContains(asType, "falldamageoff"))
	{
		SetPlayerFallDamageDisabled(true);
	}
	
	if(StringContains(asType, "jumpverybig"))
	{
		SetPlayerJumpForceMul(1.35f);
	}
	else if(StringContains(asType, "jumpbig"))
	{
		SetPlayerJumpForceMul(1.175f);
	}
	else if(StringContains(asType, "jumpnormal"))
	{
		SetPlayerJumpForceMul(1.0f);
	}
	else if(StringContains(asType, "jumpon"))
	{
		SetPlayerJumpDisabled(false);
	}
	else if(StringContains(asType, "jumpoff"))
	{
		SetPlayerJumpDisabled(true);
	}
	
	if(StringContains(asType, "crouchon"))
	{
		SetPlayerCrouchDisabled(false);
	}
	else if(StringContains(asType, "crouchoff"))
	{
		SetPlayerCrouchDisabled(true);
	}
	else if(StringContains(asType, "crouch"))
	{
		SetPlayerCrouching(true);
	}
	else if(StringContains(asType, "stand"))
	{
		SetPlayerCrouching(false);
	}
	
	if(StringContains(asType, "maxhealth"))
	{
		SetPlayerHealth(100.0f);
	}
	else if(StringContains(asType, "medhealth"))
	{
		SetPlayerHealth(50.0f);
	}
	else if(StringContains(asType, "lowhealth"))
	{
		SetPlayerHealth(1.0f);
	}
	
	if(StringContains(asType, "maxsanity"))
	{
		SetPlayerSanity(100.0f);
	}
	else if(StringContains(asType, "medsanity"))
	{
		SetPlayerSanity(50.0f);
	}
	else if(StringContains(asType, "lowsanity"))
	{
		SetPlayerSanity(1.0f);
	}
	
	if(StringContains(asType, "crosshairon"))
	{
		ShowPlayerCrossHairIcons(true);
	}
	else if(StringContains(asType, "crosshairoff"))
	{
		ShowPlayerCrossHairIcons(false);
	}
	
	if(StringContains(asType, "inventoryon"))
	{
		SetInventoryDisabled(false);
	}
	else if(StringContains(asType, "inventoryoff"))
	{
		ExitInventory();
		SetInventoryDisabled(true);
	}
	
	if(StringContains(asType, "drop"))
	{
		ChangePlayerStateToNormal();
	}

	if(StringContains(asType, "activeon"))
	{
		SetPlayerActive(true);
		ShowPlayerCrossHairIcons(true);
		SetInventoryDisabled(false);
	}
	else if(StringContains(asType, "activeoff"))
	{
		SetPlayerActive(false);
		ShowPlayerCrossHairIcons(false);
		ExitInventory();
		SetInventoryDisabled(true);
	}
}

void TeleportPlayer(int aiPlayerStartPosCode) //HELPER FUNCTION.
{
	TeleportPlayer(gsPlayerStartAreaPrefix + aiPlayerStartPosCode);
}
//END PLAYER STATE FUNCTIONS

//START OVERLOAD FUNCTIONS
void ChangeMap(string asMap, int aiPlayerStartPosCode) //OVERLOADS A BASE FUNCTION.
{
	ChangeMap(asMap, gsPlayerStartAreaPrefix + aiPlayerStartPosCode, "", "");
}

bool GetEntityPlayerCollide(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	return GetEntitiesCollide("Player", GetOriginalString(asEntity));
}

void SetHint(string asEntry) //OVERLOADS A BASE FUNCTION.
{
	GiveHint(asEntry, gsHintCat, asEntry, 0.0f);
}

void GiveItem(string asItem, string asEntry, string asImage) //OVERLOADS A BASE FUNCTION.
{
	string sItemName = GetOriginalString(asItem);
	string sImageSuffix = "";
	string sImage = "";
	
	if(StringContains(asImage, ".tga") == false)
	{
		sImageSuffix = ".tga";
	}
	
	sImage = asImage + sImageSuffix;
	
	if(HasItem(sItemName) == false)
	{
		GiveItem(sItemName, "Puzzle", asEntry, sImage, 1);
	}
	else
	{
		AddDebugMessage("ERROR: Could not give item " + sItemName + "! There's already an item with the same name inside the inventory!", false);
		return;
	}
}

void GiveItem(string asItem, string asEntry) //OVERLOADS A BASE FUNCTION.
{
	string sItemName = GetOriginalString(asItem);
	
	if(HasItem(sItemName) == false)
	{
		GiveItem(sItemName, "Puzzle", asEntry, sItemName + ".tga", 1);
	}
	else
	{
		AddDebugMessage("ERROR: Could not give item " + sItemName + "! There's already an item with the same name inside the inventory!", false);
		return;
	}
}

void GiveItem(string asItem) //OVERLOADS A BASE FUNCTION.
{
	string sItemName = GetOriginalString(asItem);
	
	if(HasItem(sItemName) == false)
	{
		GiveItem(sItemName, "Puzzle", "", sItemName + ".tga", 1);
	}
	else
	{
		AddDebugMessage("ERROR: Could not give item " + sItemName + "! There's already an item with the same name inside the inventory!", false);
		return;
	}
}

void GiveItemFromFile(string asItem) //OVERLOADS A BASE FUNCTION.
{
	string sItemName = "";
	
	if(StringContains(asItem, ".ent"))
	{
		sItemName = GetStringWithoutSubString(asItem, ".ent");
	}
	else
	{
		sItemName = asItem;
	}
	
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItemName + "_" + i));
	
	GiveItemFromFile(sItemName + "_" + i, sItemName + ".ent");
}

void PlayEndCredits(string asEntry, string asMusic, bool abLoop) //OVERLOADS A BASE FUNCTION.
{
	FadeGlobalSoundVolume(0.0f, 0.0f);
	StartCredits(asMusic, abLoop, gsEndCreditsCat, asEntry, 3);
}

void PlayEndCredits(string asEntry, string asMusic) //OVERLOADS A BASE FUNCTION.
{
	FadeGlobalSoundVolume(0.0f, 0.0f);
	StartCredits(asMusic, false, gsEndCreditsCat, asEntry, 3);
}

void PlayEndCredits(string asMusic) //OVERLOADS A BASE FUNCTION.
{
	FadeGlobalSoundVolume(0.0f, 0.0f);
	StartCredits(asMusic, false, gsEndCreditsCat, gsEndCreditsDefaultEntry, 3);
}

void RemoveCombineCallback(string asItemA, string asItemB) //OVERLOADS A BASE FUNCTION.
{
	RemoveCombineCallback(GetOriginalString(asItemA) + "_" + GetOriginalString(asItemB));
}

void RemoveEntityConnectStateChangeCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityConnectionStateChangeCallback(GetOriginalString(asEntity), "");
}

void RemoveEntityPlayerCollideCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	RemoveEntityCollideCallback("Player", GetOriginalString(asEntity));
}

void RemoveEntityPlayerInteractCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityPlayerInteractCallback(GetOriginalString(asEntity), "", false);
}

void RemoveEntityPlayerLookAtCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityPlayerLookAtCallback(GetOriginalString(asEntity), "", false);
}

void RemoveEntityStateChangeCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityCallbackFunc(GetOriginalString(asEntity), "");
}

void RemoveEntitiesCollideCallback(string asEntityA, string asEntityB) //OVERLOADS A BASE FUNCTION.
{
	RemoveEntityCollideCallback(GetOriginalString(asEntityA), GetOriginalString(asEntityB));
}

void RemoveUseItemCallback(string asItem, string asEntity) //OVERLOADS A BASE FUNCTION.
{
	RemoveUseItemCallback(GetOriginalString(asItem) + "_" + GetOriginalString(asEntity));
}

void SetCombineCallback(string asItemA, string asItemB, string asFunction, bool abAutoRemove) //OVERLOADS A BASE FUNCTION.
{
	if(asItemA == asItemB || asItemA.length() == 0 || asItemB.length() == 0)
	{
		AddDebugMessage("ERROR: Could not create a combine callback between " + asItemA + " and " + asItemB + "!", false);
		return;
	}
	
	string sItemAName = GetOriginalString(asItemA);
	string sItemBName = GetOriginalString(asItemB);
	AddCombineCallback(sItemAName + "_" + sItemBName, sItemAName, sItemBName, asFunction, abAutoRemove);
}

void SetCombineCallback(string asItemA, string asItemB, bool abAutoRemove) //OVERLOADS A BASE FUNCTION.
{
	if(asItemA == asItemB || asItemA.length() == 0 || asItemB.length() == 0)
	{
		AddDebugMessage("ERROR: Could not create a combine callback between " + asItemA + " and " + asItemB + "!", false);
		return;
	}
	
	string sItemAName = GetOriginalString(asItemA);
	string sItemBName = GetOriginalString(asItemB);
	AddCombineCallback(sItemAName + "_" + sItemBName, sItemAName, sItemBName, "Combine" + GetObjectName(sItemAName) + "And" + GetObjectName(sItemBName), abAutoRemove);
}

void SetDeathHint(string asEntry) //OVERLOADS A BASE FUNCTION.
{
	if(asEntry == "Default")
	{
		SetDeathHint("Hints", "DefaultDeath");
	}
	else
	{
		SetDeathHint(gsDeathHintCat, asEntry);
	}
}

void SetDeathHint(string[] avsEntriesArray) //OVERLOADS A BASE FUNCTION.
{
	int iRand = RandInt(0, avsEntriesArray.length() - 1);
	
	if(avsEntriesArray[iRand] == "Default")
	{
		SetDeathHint("Hints", "DefaultDeath");
	}
	else
	{
		SetDeathHint(gsDeathHintCat, avsEntriesArray[iRand]);
	}
}

void SetDebugMessage(string asMessage) //OVERLOADS A BASE FUNCTION.
{
	AddDebugMessage(asMessage, false);
}

void SetEntitiesCollideCallback(string asParent, string asChild, string asFunction, string asType) //OVERLOADS A BASE FUNCTION.
{
	int iEnter = 0;
	bool bRemove = false;
	
	if(StringContains(asType, "enter"))
	{
		iEnter = 1;
	}
	
	if(StringContains(asType, "remove"))
	{
		bRemove = true;
	}
	
	AddEntityCollideCallback(GetOriginalString(asParent), GetOriginalString(asChild), asFunction, bRemove, iEnter);
}

void SetEntitiesCollideCallback(string asParent, string asChild, string asFunction) //OVERLOADS A BASE FUNCTION.
{
	AddEntityCollideCallback(GetOriginalString(asParent), GetOriginalString(asChild), asFunction, false, 0);
}

void SetEntitiesCollideCallback(string asParent, string asChild) //OVERLOADS A BASE FUNCTION.
{
	AddEntityCollideCallback(GetOriginalString(asParent), GetOriginalString(asChild), "Collide" + GetObjectName(asParent) + "And" + GetObjectName(asChild), false, 0);
}

void SetEntityConnectStateChangeCallback(string asEntity, string asFunction) //OVERLOADS A BASE FUNCTION.
{
	SetEntityConnectionStateChangeCallback(GetOriginalString(asEntity), asFunction);
}

void SetEntityConnectStateChangeCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityConnectionStateChangeCallback(GetOriginalString(asEntity), "ConnectStateChangeOf" + GetObjectName(asEntity));
}

void SetEntityPlayerCollideCallback(string asEntity, string asFunction, string asType) //OVERLOADS A BASE FUNCTION.
{
	int iEnter = 0;
	bool bRemove = false;
	
	if(StringContains(asType, "enter"))
	{
		iEnter = 1;
	}
	
	if(StringContains(asType, "remove"))
	{
		bRemove = true;
	}
	
	AddEntityCollideCallback("Player", GetOriginalString(asEntity), asFunction, bRemove, iEnter);
}

void SetEntityPlayerCollideCallback(string asEntity, string asFunction) //OVERLOADS A BASE FUNCTION.
{
	AddEntityCollideCallback("Player", GetOriginalString(asEntity), asFunction, false, 0);
}

void SetEntityPlayerCollideCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	AddEntityCollideCallback("Player", GetOriginalString(asEntity), "CollidePlayerAnd" + GetObjectName(asEntity), false, 0);
}

void SetEntityPlayerInteractCallback(string asEntity, bool abAutoRemove) //OVERLOADS A BASE FUNCTION.
{
	SetEntityPlayerInteractCallback(GetOriginalString(asEntity), "PlayerInteractWith" + GetObjectName(asEntity), abAutoRemove);
}

void SetEntityPlayerInteractDisablesStuck(string asEntity) //OVERLOADS A BASE FUNCTION. ALLOWS THE PLAYER TO MAKE THE ENTITY UNSTUCK WHEN INTERACTED WITH. THE ENTITY MUST BE A WHEEL OR A LEVER TO WORK PROPERLY!
{
	string sEntityName = GetOriginalString(asEntity);
	SetLeverInteractionDisablesStuck(sEntityName, true);
	SetWheelInteractionDisablesStuck(sEntityName, true);
}

void SetEntityPlayerInteractOff(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityInteractionDisabled(GetOriginalString(asEntity), true);
}

void SetEntityPlayerInteractOn(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityInteractionDisabled(GetOriginalString(asEntity), false);
}

void SetEntityPlayerLookAtCallback(string asEntity, bool abAutoRemove) //OVERLOADS A BASE FUNCTION.
{
	SetEntityPlayerLookAtCallback(GetOriginalString(asEntity), "PlayerLookAt" + GetObjectName(asEntity), abAutoRemove);
}

void SetEntityPlayerLookAtCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityPlayerLookAtCallback(GetOriginalString(asEntity), "PlayerLookAt" + GetObjectName(asEntity), false);
}

void SetEntityStateChangeCallback(string asEntity) //OVERLOADS A BASE FUNCTION.
{
	SetEntityCallbackFunc(GetOriginalString(asEntity), "StateChangeOf" + GetObjectName(asEntity));
}

void SetInventoryMessage(string asEntry) //OVERLOADS A BASE FUNCTION.
{
	SetInventoryMessage(gsInventoryCat, asEntry, 0);
}

void SetLoadScreen(string asEntry, string asImage) //OVERLOADS A BASE FUNCTION.
{
	if(StringContains(asImage, ".jpg"))
	{
		SetupLoadScreen(gsLoadScreenCat, asEntry, 0, gsLoadScreenImgPrefix + asImage);
	}
	else
	{
		SetupLoadScreen(gsLoadScreenCat, asEntry, 0, gsLoadScreenImgPrefix + asImage + ".jpg");
	}
}

void SetMessage(string asCategory, string asEntry) //OVERLOADS A BASE FUNCTION.
{
	SetMessage(asCategory, asEntry, 0);
}

void SetMessage(string asEntry, float afTime) //OVERLOADS A BASE FUNCTION.
{
	SetMessage(gsHintCat, asEntry, afTime);
}

void SetMessage(string asEntry) //OVERLOADS A BASE FUNCTION.
{
	SetMessage(gsHintCat, asEntry, 0);
}

void SetUseItemCallback(string asItem, string asEntity, string asFunction, bool abAutoRemove) //OVERLOADS A BASE FUNCTION.
{
	AddUseItemCallback(GetOriginalString(asItem) + "_" + GetOriginalString(asEntity), GetOriginalString(asItem), GetOriginalString(asEntity), asFunction, abAutoRemove);
}

void SetUseItemCallback(string asItem, string asEntity, bool abAutoRemove) //OVERLOADS A BASE FUNCTION.
{
	AddUseItemCallback(GetOriginalString(asItem) + "_" + GetOriginalString(asEntity), GetOriginalString(asItem), GetOriginalString(asEntity), "Use" + GetObjectName(asItem) + "On" + GetObjectName(asEntity), abAutoRemove);
}
//END OVERLOAD FUNCTIONS

//START CHECKPOINT FUNCTIONS
void SetCheckPoint(string asEntry, string asFunction, string asPlayerStartPosName) //SETS A CHECKPOINT.
{
	int iPlayerStartPosCode = StringToInt(GetStringWithoutSubString(asPlayerStartPosName, gsPlayerStartAreaPrefix));
	
	if(iPlayerStartPosCode == 0)
	{
		AddDebugMessage("ERROR: " + asPlayerStartPosName + " is not named properly to set a new CheckPoint!", false);
		return;
	}
	
	if(asEntry == "Default" || asEntry == "CPDefault")
	{
		CheckPoint("CPDefault" + "_" + iPlayerStartPosCode, gsPlayerStartAreaPrefix + iPlayerStartPosCode, asFunction, "Hints", "DefaultDeath");
	}
	else if(StringContains(asEntry, "CP"))
	{
		CheckPoint(asEntry + "_" + iPlayerStartPosCode, gsPlayerStartAreaPrefix + iPlayerStartPosCode, asFunction, gsDeathHintCat, asEntry);
	}
	else
	{
		CheckPoint("CP" + asEntry + "_" + iPlayerStartPosCode, gsPlayerStartAreaPrefix + iPlayerStartPosCode, asFunction, gsDeathHintCat, asEntry);
	}
}

void SetCheckPoint(string asEntry, string asFunction, int aiPlayerStartPosCode) //SETS A CHECKPOINT.
{
	if(asEntry == "Default" || asEntry == "CPDefault")
	{
		CheckPoint("CPDefault" + "_" + aiPlayerStartPosCode, gsPlayerStartAreaPrefix + aiPlayerStartPosCode, asFunction, "Hints", "DefaultDeath");
	}
	else if(StringContains(asEntry, "CP"))
	{
		CheckPoint(asEntry + "_" + aiPlayerStartPosCode, gsPlayerStartAreaPrefix + aiPlayerStartPosCode, asFunction, gsDeathHintCat, asEntry);
	}
	else
	{
		CheckPoint("CP" + asEntry + "_" + aiPlayerStartPosCode, gsPlayerStartAreaPrefix + aiPlayerStartPosCode, asFunction, gsDeathHintCat, asEntry);
	}
}

void SetCheckPoint(string asEntry, string asPlayerStartPosName) //SETS A CHECKPOINT.
{
	int iPlayerStartPosCode = StringToInt(GetStringWithoutSubString(asPlayerStartPosName, gsPlayerStartAreaPrefix));
	
	if(iPlayerStartPosCode == 0)
	{
		AddDebugMessage("ERROR: " + asPlayerStartPosName + " is not named properly to set a new CheckPoint!", false);
		return;
	}
	
	if(asEntry == "Default" || asEntry == "CPDefault")
	{
		CheckPoint("CPDefault" + "_" + iPlayerStartPosCode, gsPlayerStartAreaPrefix + iPlayerStartPosCode, "CPDefault", "Hints", "DefaultDeath");
	}
	else if(StringContains(asEntry, "CP"))
	{
		CheckPoint(asEntry + "_" + iPlayerStartPosCode, gsPlayerStartAreaPrefix + iPlayerStartPosCode, asEntry, gsDeathHintCat, asEntry);
	}
	else
	{
		CheckPoint("CP" + asEntry + "_" + iPlayerStartPosCode, gsPlayerStartAreaPrefix + iPlayerStartPosCode, "CP" + asEntry, gsDeathHintCat, asEntry);
	}
}

void SetCheckPoint(string asEntry, int aiPlayerStartPosCode) //SETS A CHECKPOINT.
{
	if(asEntry == "Default" || asEntry == "CPDefault")
	{
		CheckPoint("CPDefault" + "_" + aiPlayerStartPosCode, gsPlayerStartAreaPrefix + aiPlayerStartPosCode, "CPDefault", "Hints", "DefaultDeath");
	}
	else if(StringContains(asEntry, "CP"))
	{
		CheckPoint(asEntry + "_" + aiPlayerStartPosCode, gsPlayerStartAreaPrefix + aiPlayerStartPosCode, asEntry, gsDeathHintCat, asEntry);
	}
	else
	{
		CheckPoint("CP" + asEntry + "_" + aiPlayerStartPosCode, gsPlayerStartAreaPrefix + aiPlayerStartPosCode, "CP" + asEntry, gsDeathHintCat, asEntry);
	}
}

void SetCheckPoint(string asPlayerStartPosName) //SETS A CHECKPOINT.
{
	int iPlayerStartPosNameDim = asPlayerStartPosName.length();
	int iPlayerStartPosPrefixDim = gsPlayerStartAreaPrefix.length();
	
	if(iPlayerStartPosNameDim <= iPlayerStartPosPrefixDim || StringContains(asPlayerStartPosName, gsPlayerStartAreaPrefix) == false)
	{
		AddDebugMessage("ERROR: " + asPlayerStartPosName + " is not valid for creating a new check point!", false);
		return;
	}
	
	int iPlayerStartPosCode = StringToInt(StringSub(asPlayerStartPosName, iPlayerStartPosPrefixDim, iPlayerStartPosNameDim - iPlayerStartPosPrefixDim));
	CheckPoint("CPDefault" + "_" + iPlayerStartPosCode, gsPlayerStartAreaPrefix + iPlayerStartPosCode, "CPDefault", "Hints", "DefaultDeath");
}

void SetCheckPoint(int aiPlayerStartPosCode) //SETS A CHECKPOINT.
{
	CheckPoint("CPDefault" + "_" + aiPlayerStartPosCode, gsPlayerStartAreaPrefix + aiPlayerStartPosCode, "CPDefault", "Hints", "DefaultDeath");
}
//END CHECKPOINT FUNCTIONS

//START FOG STATE FUNCTIONS
void SetFogState(string asType, float afStart, float afEnd, float afFalloffExp) //CHANGES THE STATE OF THE GLOBAL FOG. POSSIBLE ARGUMENTS PATTERNS: on, off, culling, skybox.
{
	float[] vfColorCodesArray = {0.0f, 0.0f, 0.0f, 1.0f};
	vfColorCodesArray = GetColorCodesArray(asType);
	bool bCulling = StringContains(asType, "culling");
	bool bColor = GetStringContainsColorPattern(asType);
	bool bSkyBox = StringContains(asType, "skybox");
	bool bOn = StringContains(asType, "on");
	
	if(bColor)
	{
		SetFogColor(vfColorCodesArray[0], vfColorCodesArray[1], vfColorCodesArray[2], vfColorCodesArray[3]);
		
		if(bSkyBox)
		{
			SetSkyBoxColor(vfColorCodesArray[0], vfColorCodesArray[1], vfColorCodesArray[2], vfColorCodesArray[3]);
		}
	}
	
	if((afStart + afEnd + afFalloffExp) > 0)
	{
		SetFogProperties(afStart, afEnd, afFalloffExp, bCulling);
	}
	
	if(bSkyBox)
	{
		SetSkyBoxActive(bOn);
	}
	
	SetFogActive(bOn);
}

void SetFogState(string asType) //HELPER FUNCTION.
{
	SetFogState(asType, 0.0f, 0.0f, 0.0f);
}
//END FOG STATE FUNCTIONS

//START GLOBAL SOUND FUNCTIONS
void SetGlobalSoundSpeed(string asType, float afTime) //CHANGES THE SPEED OF THE GLOBAL SOUND, BIGGER SPEED MEANS CHIPMUNK MODE, LOWER SPEED MEANS FAT MODE. POSSIBLE ARGUMENTS PATTERNS: min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	float fAmount = 0.1f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 0;
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
	}
	else
	{
		iMultiplier = 10;
	}
	
	fAmount = fAmount * iMultiplier;
	
	FadeGlobalSoundSpeed(fAmount, afTime);
}

void SetGlobalSoundSpeed(string asType) //CHANGES THE SPEED OF THE GLOBAL SOUND, BIGGER SPEED MEANS CHIPMUNK MODE, LOWER SPEED MEANS FAT MODE. POSSIBLE ARGUMENTS PATTERNS: min, verysmall, small, medsmall, med, medbig, big, verybig, max, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	float fAmount = 0.1f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 0;
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
	}
	else
	{
		iMultiplier = 10;
	}
	
	fAmount = fAmount * iMultiplier;
	
	float fSpeed = 0.125f;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	FadeGlobalSoundSpeed(fAmount, fSpeed);
}

void SetGlobalSoundVolume(string asType, float afTime) //CHANGES THE VOLUME OF THE GLOBAL SOUND. POSSIBLE ARGUMENTS PATTERNS: min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	float fAmount = 0.1f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 0;
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
	}
	else
	{
		iMultiplier = 10;
	}
	
	fAmount = fAmount * iMultiplier;
	
	FadeGlobalSoundVolume(fAmount, afTime);
}

void SetGlobalSoundVolume(string asType) //CHANGES THE VOLUME OF THE GLOBAL SOUND. POSSIBLE ARGUMENTS PATTERNS: min, verysmall, small, medsmall, med, medbig, big, verybig, max, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	float fAmount = 0.1f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 0;
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
	}
	else
	{
		iMultiplier = 10;
	}
	
	fAmount = fAmount * iMultiplier;
	
	float fSpeed = 0.125f;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	FadeGlobalSoundVolume(fAmount, fSpeed);
}
//END GLOBAL SOUND FUNCTIONS

//START LIGHT STATE FUNCTIONS
float[] GetColorCodesArray(string asType) //RETURNS A FLOATING POINTS ARRAY CONTAINING THE RGBA CODES RELATED TO THE ARGUMENT WHICH INDICATES THE DESIRED COLOR.
{
	float[] vfColorCodesArray = {0.0f, 0.0f, 0.0f, 1.0f};
	
	if(StringContains(asType, "white"))
	{
		vfColorCodesArray[0] = 1.0f;
		vfColorCodesArray[1] = 1.0f;
		vfColorCodesArray[2] = 1.0f;
	}
	else if(StringContains(asType, "grey"))
	{
		vfColorCodesArray[0] = 0.5f;
		vfColorCodesArray[1] = 0.5f;
		vfColorCodesArray[2] = 0.5f;
	}
	else if(StringContains(asType, "red"))
	{
		vfColorCodesArray[0] = 1.0f;
		vfColorCodesArray[1] = 0.0f;
		vfColorCodesArray[2] = 0.0f;
	}
	else if(StringContains(asType, "green"))
	{
		vfColorCodesArray[0] = 0.0f;
		vfColorCodesArray[1] = 1.0f;
		vfColorCodesArray[2] = 0.0f;
	}
	else if(StringContains(asType, "outsideblue"))
	{
		vfColorCodesArray[0] = 0.7f;
		vfColorCodesArray[1] = 0.77f;
		vfColorCodesArray[2] = 0.77f;
	}
	else if(StringContains(asType, "blue"))
	{
		vfColorCodesArray[0] = 0.0f;
		vfColorCodesArray[1] = 0.0f;
		vfColorCodesArray[2] = 1.0f;
	}
	else if(StringContains(asType, "yellow"))
	{
		vfColorCodesArray[0] = 1.0f;
		vfColorCodesArray[1] = 1.0f;
		vfColorCodesArray[2] = 0.0f;
	}
	else if(StringContains(asType, "cyan"))
	{
		vfColorCodesArray[0] = 0.0f;
		vfColorCodesArray[1] = 1.0f;
		vfColorCodesArray[2] = 1.0f;
	}
	else if(StringContains(asType, "magenta"))
	{
		vfColorCodesArray[0] = 1.0f;
		vfColorCodesArray[1] = 0.0f;
		vfColorCodesArray[2] = 1.0f;
	}
	else if(StringContains(asType, "torchfiremystic"))
	{
		vfColorCodesArray[0] = 0.2f;
		vfColorCodesArray[1] = 0.8f;
		vfColorCodesArray[2] = 0.88f;
	}
	else if(StringContains(asType, "torchfire"))
	{
		vfColorCodesArray[0] = 0.8f;
		vfColorCodesArray[1] = 0.6f;
		vfColorCodesArray[2] = 0.4f;
	}
	else if(StringContains(asType, "candleorange"))
	{
		vfColorCodesArray[0] = 0.75f;
		vfColorCodesArray[1] = 0.5f;
		vfColorCodesArray[2] = 0.25f;
	}
	else if(StringContains(asType, "candle"))
	{
		vfColorCodesArray[0] = 0.85f;
		vfColorCodesArray[1] = 0.75f;
		vfColorCodesArray[2] = 0.4f;
	}
	else if(StringContains(asType, "hanginglantern"))
	{
		vfColorCodesArray[0] = 1.0f;
		vfColorCodesArray[1] = 0.7f;
		vfColorCodesArray[2] = 0.45f;
	}
	else
	{
		vfColorCodesArray[0] = 0.0f;
		vfColorCodesArray[1] = 0.0f;
		vfColorCodesArray[2] = 0.0f;
		vfColorCodesArray[3] = 0.0f;
	}
	
	if(StringContains(asType, "dark"))
	{
		vfColorCodesArray[0] = vfColorCodesArray[0] * 0.5f;
		vfColorCodesArray[1] = vfColorCodesArray[1] * 0.5f;
		vfColorCodesArray[2] = vfColorCodesArray[2] * 0.5f;
		vfColorCodesArray[3] = vfColorCodesArray[3] * 0.5f;
	}
	
	return vfColorCodesArray;
}

bool GetStringContainsColorPattern(string asString) //RETURNS TRUE IF THE STRING CONTAINS A COLOR PATTERN, THIS FUNCTION HAS DEPENDENCY ON float[] GetColorCodesArray(string asType).
{
	float[] vfColorCodesArray = {0.0f, 0.0f, 0.0f, 1.0f};
	vfColorCodesArray = GetColorCodesArray(asString);
	
	if((vfColorCodesArray[0] + vfColorCodesArray[1] + vfColorCodesArray[2] + vfColorCodesArray[3]) == 0)
	{
		return false;
	}
	else
	{
		return true;
	}
}

void SetLightInvisible(string asLight) //MAKES A LIGHT INVISIBLE.
{
	SetLightVisible(asLight, false);
}

void SetLightState(string asLight, string asType, float afRadius, float afTime) //CHANGE THE STATE OF A LIGHT OR A LAMP. POSSIBLE ARGUMENTS PATTERNS: lamp, offquick, off, onquick, on, flicker.
{
	string sLightName = GetOriginalString(asLight);
	float[] vfColorCodesArray = {0.0f, 0.0f, 0.0f, 1.0f};
	vfColorCodesArray = GetColorCodesArray(asType);
	bool bFlicker = false;
	
	if(StringContains(asType, "lamp"))
	{
		if(StringContains(asType, "onquick"))
		{
			SetLampLit(sLightName, true, false);
		}
		else if(StringContains(asType, "on"))
		{
			SetLampLit(sLightName, true, true);
		}
		else if(StringContains(asType, "offquick"))
		{
			SetLampLit(sLightName, false, false);
		}
		else if(StringContains(asType, "off"))
		{
			SetLampLit(sLightName, false, true);
		}
	}
	else
	{
		if(StringContains(asType, "onquick"))
		{
			SetLightVisible(sLightName, true);
			bFlicker = true;
		}
		else if(StringContains(asType, "on"))
		{
			SetLightVisible(sLightName, true);
			bFlicker = true;
			
			if(GetStringContainsColorPattern(asType))
			{
				FadeLightTo(sLightName, vfColorCodesArray[0], vfColorCodesArray[1], vfColorCodesArray[2], vfColorCodesArray[3], afRadius, afTime);
			}
			else
			{
				FadeLightTo(sLightName, 1.0f, 1.0f, 1.0f, 1.0f, afRadius, afTime);
			}
		}
		else if(StringContains(asType, "offquick"))
		{
			SetLightVisible(sLightName, false);
			bFlicker = false;
		}
		else if(StringContains(asType, "off"))
		{
			bFlicker = false;
			FadeLightTo(sLightName, 0.0f, 0.0f, 0.0f, 0.0f, afRadius, afTime);
		}
		else if(GetStringContainsColorPattern(asType))
		{
			FadeLightTo(sLightName, vfColorCodesArray[0], vfColorCodesArray[1], vfColorCodesArray[2], vfColorCodesArray[3], afRadius, afTime);
		}
		
		if(StringContains(asType, "flicker"))
		{
			SetLightFlickerActive(sLightName, bFlicker);
		}
	}
}

void SetLightState(string asLight, string asType, float afTime) //CHANGE THE STATE OF A LIGHT OR A LAMP. POSSIBLE ARGUMENTS PATTERNS: lamp, offquick, off, onquick, on.
{
	SetLightState(asLight, asType, -1, afTime);
}

void SetLightState(string asLight, string asType) //CHANGE THE STATE OF A LIGHT OR A LAMP. POSSIBLE ARGUMENTS PATTERNS: lamp, offquick, off, onquick, on.
{
	SetLightState(asLight, asType, -1, 2.0f);
}

void SetLightVisible(string asLight) //MAKES A LIGHT VISIBLE.
{
	SetLightVisible(asLight, true);
}
//END LIGHT STATE FUNCTIONS

//START PARTICLE SYSTEM FUNCTIONS
void PlayParticleSystem(string asParticle, string asEntity, string asType, int aiSuffixCode) //PLAYS A PARTICLE SYSTEM TO AN ENTITY. POSSIBLE ARGUMENTS PATTERNS: save.
{
	string sEntityName = GetOriginalString(asEntity);
	string sParticleName = sEntityName + gsParticleNameSuffix + aiSuffixCode;
	float[] vfColorCodesArray = {0.0f, 0.0f, 0.0f, 1.0f};
	vfColorCodesArray = GetColorCodesArray(asType);
	bool bSave = false;
	
	if(StringContains(asType, "save"))
	{
		bSave = true;
	}
	
	if(GetStringContainsColorPattern(asType))
	{
		CreateParticleSystemAtEntityExt(sParticleName, asParticle, sEntityName, bSave, vfColorCodesArray[0], vfColorCodesArray[1], vfColorCodesArray[2], vfColorCodesArray[3], true, 0.0f, 0.0f, 50.0f, 60.0f);
	}
	else
	{
		CreateParticleSystemAtEntity(sParticleName, asParticle, sEntityName, bSave);
	}
}

void PlayParticleSystem(string asParticle, string asEntity, string asType) //PLAYS A PARTICLE SYSTEM TO AN ENTITY. POSSIBLE ARGUMENTS PATTERNS: save.
{
	string sEntityName = GetOriginalString(asEntity);
	string sParticleName = sEntityName + gsParticleNameSuffix;
	float[] vfColorCodesArray = {0.0f, 0.0f, 0.0f, 1.0f};
	vfColorCodesArray = GetColorCodesArray(asType);
	bool bSave = false;
	
	if(StringContains(asType, "save"))
	{
		bSave = true;
	}
	
	if(GetStringContainsColorPattern(asType))
	{
		CreateParticleSystemAtEntityExt(sParticleName, asParticle, sEntityName, bSave, vfColorCodesArray[0], vfColorCodesArray[1], vfColorCodesArray[2], vfColorCodesArray[3], true, 0.0f, 0.0f, 50.0f, 60.0f);
	}
	else
	{
		CreateParticleSystemAtEntity(sParticleName, asParticle, sEntityName, bSave);
	}
}

void PlayParticleSystem(string asParticle, string asEntity) //PLAYS A PARTICLE SYSTEM TO AN ENTITY.
{
	CreateParticleSystemAtEntity(GetOriginalString(asEntity) + gsParticleNameSuffix, asParticle, GetOriginalString(asEntity), false);
}

void PlayParticleSystem(string asParticle) //PLAYS A PARTICLE SYSTEM TO THE PLAYER.
{
	CreateParticleSystemAtEntity("Player" + gsParticleNameSuffix, asParticle, "Player", false);
}

void PreloadParticleSystems(string[] avsPSArray) //PRELOADS SOME PARTICLE SYSTEMS.
{
	for(int i=0; i<avsPSArray.length(); i++)
	{
		PreloadParticleSystem(avsPSArray[i]);
	}
}

void StopParticleSystem(string asParticleName, string asType) //STOPS A PARTICLE SYSTEM. POSSIBLE ARGUMENTS PATTERNS: suffix, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	string sSuffix = "";
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(StringContains(asType, "suffix"))
	{
		sSuffix = gsParticleNameSuffix;
	}
	
	if(fSpeed > 0)
	{
		AddTimer(asParticleName + sSuffix, fSpeed, "DestroyParticleSystem");
	}
	else
	{
		DestroyParticleSystem(asParticleName + sSuffix);
	}
}

void StopParticleSystem(string asParticleName) //STOPS A PARTICLE SYSTEM.
{
	DestroyParticleSystem(asParticleName);
}
//END PARTICLE SYSTEM FUNCTIONS

//START SOUND FUNCTIONS
void PlaySound(string asSound, string asEntity, string asType, int aiSuffixCode) //PLAYS A SOUND TO AN ENTITY. POSSIBLE ARGUMENTS PATTERNS: save, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	string sEntityName = GetOriginalString(asEntity);
	string sSoundName = sEntityName + gsSoundNameSuffix + aiSuffixCode;
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	bool bSave = false;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(StringContains(asType, "save"))
	{
		bSave = true;
	}
	
	PlaySoundAtEntity(sSoundName, asSound, sEntityName, fSpeed, bSave);
}

void PlaySound(string asSound, string asEntity, string asType) //PLAYS A SOUND TO AN ENTITY. POSSIBLE ARGUMENTS PATTERNS: save, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	string sEntityName = GetOriginalString(asEntity);
	string sSoundName = sEntityName + gsSoundNameSuffix;
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	bool bSave = false;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(StringContains(asType, "save"))
	{
		bSave = true;
	}
	
	PlaySoundAtEntity(sSoundName, asSound, sEntityName, fSpeed, bSave);
}

void PlaySound(string asSound, string asEntity) //PLAYS A SOUND TO AN ENTITY.
{
	PlaySoundAtEntity(GetOriginalString(asEntity) + gsSoundNameSuffix, asSound, GetOriginalString(asEntity), 0.0f, false);
}

void PlaySound(string asSound) //PLAYS A SOUND.
{
	PlayGuiSound(asSound, 1.0f);
}

void PreloadSounds(string[] avsSNTArray) //PRELOADS SOME SOUNDS.
{
	for(int i=0; i<avsSNTArray.length(); i++)
	{
		PreloadSound(avsSNTArray[i]);
	}
}

void StopSound(string asSoundName, string asType) //STOPS A SOUND. POSSIBLE ARGUMENTS PATTERNS: suffix, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	string sSuffix = "";
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(StringContains(asType, "suffix"))
	{
		sSuffix = gsSoundNameSuffix;
	}
	
	StopSound(asSoundName + sSuffix, fSpeed);
}

void StopSound(string asSoundName) //STOPS A SOUND.
{
	StopSound(asSoundName, 0.0f);
}
//END SOUND FUNCTIONS

//START MUSIC FUNCTIONS
void PlayMusic(string asMusic, string asType) //PLAYS A MUSIC. POSSIBLE ARGUMENTS PATTERNS: event, loop, save, min, verysmall, small, medsmall, med, medbig, big, verybig, max, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	float fAmount = 0.1f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 0;
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
	}
	else
	{
		iMultiplier = 8;
	}
	
	fAmount = fAmount * iMultiplier;
	float fSpeed = 0.125f;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	int iType = 0;
	bool bLoop = false;
	bool bSave = false;
	
	if(StringContains(asType, "event"))
	{
		iType = 10;
	}
	else
	{
		iType = 0;
	}
	
	if(StringContains(asType, "loop"))
	{
		bLoop = true;
	}
	else
	{
		bLoop = false;
	}
	
	if(StringContains(asType, "save"))
	{
		bSave = true;
	}
	else
	{
		bSave = false;
	}
	
	PlayMusic(asMusic, bLoop, fAmount, fSpeed, iType, bSave);
}

void PlayMusic(string asMusic) //PLAYS A MUSIC.
{
	PlayMusic(asMusic, false, 0.8f, 0.0f, 10, false);
}

void StopMusic(string asType, float afTime) //STOPS A MUSIC. POSSIBLE ARGUMENTS PATTERNS: event.
{
	if(StringContains(asType, "event"))
	{
		StopMusic(afTime, 10);
	}
	else
	{
		StopMusic(afTime, 0);
	}
}

void StopMusic(string asType) //STOPS A MUSIC. POSSIBLE ARGUMENTS PATTERNS: event, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(StringContains(asType, "event"))
	{
		StopMusic(fSpeed, 10);
	}
	else
	{
		StopMusic(fSpeed, 0);
	}
}
//END MUSIC FUNCTIONS

//START ENTITY STATE FUNCTIONS
float GetEntityHealth(string asEntity) //RETURNS THE FLOAT HEALTH VALUE OF AN ENTITY.
{
	return GetPropHealth(GetOriginalString(asEntity));
}

bool GetEntityIsBroken(string asEntity) //RETURNS TRUE IF THE ENTITY IS BROKEN, FALSE OTHERWISE.
{
	if(GetPropHealth(GetOriginalString(asEntity)) <= 0)
	{
		return true;
	}
	else
	{
		return false;
	}
}

void SetEntitiesActive(string asEntityPrefix, float afTime, int aiMinSuffix, int aiMaxSuffix) //ENABLES, USING THE EFFECTS, MORE THAN ONE ENTITY.
{
	if(GetEntityExists(asEntityPrefix + aiMinSuffix) == false)
	{
		AddDebugMessage("ERROR: Entity with prefix " + asEntityPrefix + " and suffix " + aiMinSuffix + " does not exist!", false);
		return;
	}
	
	for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
	{
		SetPropActiveAndFade(asEntityPrefix + i, true, afTime);
	}
}

void SetEntitiesActive(string asEntityPrefix, int aiMinSuffix, int aiMaxSuffix) //ENABLES MORE THAN ONE ENTITY.
{
	if(GetEntityExists(asEntityPrefix + aiMinSuffix) == false)
	{
		AddDebugMessage("ERROR: Entity with prefix " + asEntityPrefix + " and suffix " + aiMinSuffix + " does not exist!", false);
		return;
	}
	
	for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
	{
		SetEntityActive(asEntityPrefix + i, true);
	}
}

void SetEntitiesAndEffectsActive(string asEntityPrefix, string asParticleSystem, string asSound, string asType, int aiMinSuffix, int aiMaxSuffix) //ENABLES THE ENTITIES, CREATES A PARTICLE SYSTEMS ON THEM, PLAYS A SOUND ON THEM, ACTIVATES A LIGHT ON THEM.
{
	if(GetEntityExists(asEntityPrefix + aiMinSuffix) == false)
	{
		AddDebugMessage("ERROR: Entity with prefix " + asEntityPrefix + " and suffix " + aiMinSuffix + " does not exist!", false);
		return;
	}
	
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(fSpeed > 0)
	{
		for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
		{
			SetPropActiveAndFade(asEntityPrefix + i, true, fSpeed);
		}
	}
	else
	{
		for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
		{
			SetEntityActive(asEntityPrefix + i, true);
		}
	}
	
	if(asParticleSystem.length() > 0)
	{
		for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
		{
			PlayParticleSystem(asParticleSystem, asEntityPrefix + i, asType);
		}
	}
	
	if(asSound.length() > 0)
	{
		for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
		{
			PlaySound(asSound, asEntityPrefix + i, asType);
		}
	}
	
	if(GetStringContainsColorPattern(asType))
	{
		for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
		{
			SetLightState(gsLightPrefix + asEntityPrefix + i, "on_" + asType);
		}
	}
}

void SetEntitiesAndEffectsInactive(string asEntityPrefix, string asType, int aiMinSuffix, int aiMaxSuffix) //NOT ONLY DISABLES THE ENTITIES BUT ALSO REMOVES ANY SOUNDS OR PARTICLE SYSTEMS OR LIGHTS ON THEM.
{
	if(GetEntityExists(asEntityPrefix + aiMinSuffix) == false)
	{
		AddDebugMessage("ERROR: Entity with prefix " + asEntityPrefix + " and suffix " + aiMinSuffix + " does not exist!", false);
		return;
	}
	
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
	{
		DestroyParticleSystem(asEntityPrefix + i + gsParticleNameSuffix);
		StopSound(asEntityPrefix + i + gsSoundNameSuffix, fSpeed);
		SetLightState(gsLightPrefix + asEntityPrefix + i, "off", fSpeed);
	}
	
	if(fSpeed > 0)
	{
		for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
		{
			SetPropActiveAndFade(asEntityPrefix + i, false, fSpeed);
		}
	}
	else
	{
		for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
		{
			SetEntityActive(asEntityPrefix + i, false);
		}
	}
}

void SetEntitiesInactive(string asEntityPrefix, float afTime, int aiMinSuffix, int aiMaxSuffix) //DISABLES, USING THE EFFECTS, MORE THAN ONE ENTITY.
{
	if(GetEntityExists(asEntityPrefix + aiMinSuffix) == false)
	{
		AddDebugMessage("ERROR: Entity with prefix " + asEntityPrefix + " and suffix " + aiMinSuffix + " does not exist!", false);
		return;
	}
	
	for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
	{
		SetPropActiveAndFade(asEntityPrefix + i, false, afTime);
	}
}

void SetEntitiesInactive(string asEntityPrefix, int aiMinSuffix, int aiMaxSuffix) //DISABLES MORE THAN ONE ENTITY.
{
	if(GetEntityExists(asEntityPrefix + aiMinSuffix) == false)
	{
		AddDebugMessage("ERROR: Entity with prefix " + asEntityPrefix + " and suffix " + aiMinSuffix + " does not exist!", false);
		return;
	}
	
	for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
	{
		SetEntityActive(asEntityPrefix + i, false);
	}
}

void SetEntitiesInvisible(string asEntityPrefix, int aiMinSuffix, int aiMaxSuffix) //MAKES INVISIBLE MORE THAN ONE ENTITY.
{
	if(GetEntityExists(asEntityPrefix + aiMinSuffix) == false)
	{
		AddDebugMessage("ERROR: Entity with prefix " + asEntityPrefix + " and suffix " + aiMinSuffix + " does not exist!", false);
		return;
	}
	
	for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
	{
		SetEntityVisible(asEntityPrefix + i, false);
	}
}

void SetEntitiesVisible(string asEntityPrefix, int aiMinSuffix, int aiMaxSuffix) //MAKES VISIBLE MORE THAN ONE ENTITY.
{
	if(GetEntityExists(asEntityPrefix + aiMinSuffix) == false)
	{
		AddDebugMessage("ERROR: Entity with prefix " + asEntityPrefix + " and suffix " + aiMinSuffix + " does not exist!", false);
		return;
	}
	
	for(int i=aiMinSuffix; i<=aiMaxSuffix; i++)
	{
		SetEntityVisible(asEntityPrefix + i, true);
	}
}

void SetEntityActive(string asEntity, float afTime) //ENABLES, USING THE EFFECTS, ONE ENTITY.
{
	SetPropActiveAndFade(GetOriginalString(asEntity), true, afTime);
}

void SetEntityActive(string asEntity) //ENABLES ONE ENTITY.
{
	SetEntityActive(GetOriginalString(asEntity), true);
}

void SetEntityAndEffectsActive(string asEntity, string asParticleSystem, string asSound, string asType) //ENABLES THE ENTITY, CREATES A PARTICLE SYSTEMS ON IT, PLAYS A SOUND ON IT, ACTIVATES A LIGHT ON IT.
{
	string sEntityName = GetOriginalString(asEntity);
	
	if(GetEntityExists(sEntityName) == false)
	{
		AddDebugMessage("ERROR: Entity " + sEntityName + " does not exist!", false);
		return;
	}
	
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(fSpeed > 0)
	{
		SetPropActiveAndFade(sEntityName, true, fSpeed);
	}
	else
	{
		SetEntityActive(sEntityName, true);
	}
	
	if(asParticleSystem.length() > 0)
	{
		PlayParticleSystem(asParticleSystem, sEntityName, asType);
	}
	
	if(asSound.length() > 0)
	{
		PlaySound(asSound, sEntityName, asType);
	}
	
	if(GetStringContainsColorPattern(asType))
	{
		SetLightState(gsLightPrefix + sEntityName, "on_" + asType);
	}
}

void SetEntityAndEffectsInactive(string asEntity, string asType) //NOT ONLY DISABLES THE ENTITY BUT ALSO REMOVES ANY SOUNDS OR PARTICLE SYSTEMS OR LIGHTS ON IT.
{
	string sEntityName = GetOriginalString(asEntity);
	
	if(GetEntityExists(sEntityName) == false)
	{
		AddDebugMessage("ERROR: Entity " + sEntityName + " does not exist!", false);
		return;
	}
	
	float fSpeed = 0.125f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	DestroyParticleSystem(sEntityName + gsParticleNameSuffix);
	StopSound(sEntityName + gsSoundNameSuffix, fSpeed);
	SetLightState(gsLightPrefix + sEntityName, "off", fSpeed);
	
	if(fSpeed > 0)
	{
		SetPropActiveAndFade(sEntityName, false, fSpeed);
	}
	else
	{
		SetEntityActive(sEntityName, false);
	}
}

void SetEntityHealth(string asEntity, float afAmount) //SET THE FLOAT HEALTH VALUE OF AN ENTITY.
{
	SetPropHealth(GetOriginalString(asEntity), afAmount);
}

void SetEntityInactive(string asEntity, float afTime) //DISABLES, USING THE EFFECTS, ONE ENTITY.
{
	SetPropActiveAndFade(GetOriginalString(asEntity), false, afTime);
}

void SetEntityInactive(string asEntity) //ENABLES ONE ENTITY.
{
	SetEntityActive(GetOriginalString(asEntity), false);
}

void SetEntityInvisible(string asEntity) //MAKES INVISIBLE ONE ENTITY.
{
	SetEntityVisible(GetOriginalString(asEntity), false);
}

void SetEntityState(string asEntity, string asType) //CHANGES THE ENTITY STATE. POSSIBLE ARGUMENTS PATTERNS: reset, broken, health, staticoff, staticon, interactoff, interacton, focusgrab, crosshairgrab, focuspush, crosshairpush, focusmove, crosshairmove, focusignite, crosshairignite, focuslamp, crosshairlamp, focuspick, crosshairpick, focusitem, crosshairitem, focuslevel, crosshairlevel, focusdoor, crosshairdoor, focusladder, crosshairladder, focusdefault, crosshairdefault, visibleoff, visibleon, psoff, particleoff, sntoff, soundoff, off, on, force-x, force-y, force-z, forcex, forcey, forcez, impulse-x, impulse-y, impulse-z, impulsex, impulsey, impulsez, min, verysmall, small, medsmall, med, medbig, big, verybig, max, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	string sEntityName = GetOriginalString(asEntity);
	float fAmount = 0.1f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 0;
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fAmount = fAmount * iMultiplier;
	float fSpeed = 0.25f;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(StringContains(asType, "focus") || StringContains(asType, "crosshair"))
	{
		if(StringContains(asType, "grab"))
		{
			SetEntityCustomFocusCrossHair(sEntityName, "Grab");
		}
		else if(StringContains(asType, "push") || StringContains(asType, "move"))
		{
			SetEntityCustomFocusCrossHair(sEntityName, "Push");
		}
		else if(StringContains(asType, "ignite") || StringContains(asType, "lamp"))
		{
			SetEntityCustomFocusCrossHair(sEntityName, "Ignite");
		}
		else if(StringContains(asType, "pick") || StringContains(asType, "item"))
		{
			SetEntityCustomFocusCrossHair(sEntityName, "Pick");
		}
		else if(StringContains(asType, "level") || StringContains(asType, "door"))
		{
			SetEntityCustomFocusCrossHair(sEntityName, "LevelDoor");
		}
		else if(StringContains(asType, "ladder"))
		{
			SetEntityCustomFocusCrossHair(sEntityName, "Ladder");
		}
		else
		{
			SetEntityCustomFocusCrossHair(sEntityName, "Default");
		}
	}
	else if(StringContains(asType, "reset"))
	{
		ResetProp(sEntityName);
	}
	else if(StringContains(asType, "broken"))
	{
		SetPropHealth(sEntityName, 0.0f);
	}
	else if(StringContains(asType, "health"))
	{
		SetPropHealth(sEntityName, fAmount);
	}
	else if(StringContains(asType, "staticoff"))
	{
		SetPropStaticPhysics(sEntityName, false);
	}
	else if(StringContains(asType, "staticon"))
	{
		SetPropStaticPhysics(sEntityName, true);
	}
	else if(StringContains(asType, "interactoff"))
	{
		SetEntityInteractionDisabled(sEntityName, true);
	}
	else if(StringContains(asType, "interacton"))
	{
		SetEntityInteractionDisabled(sEntityName, false);
	}
	else if(StringContains(asType, "visibleoff"))
	{
		SetEntityVisible(sEntityName, false);
	}
	else if(StringContains(asType, "visibleon"))
	{
		SetEntityVisible(sEntityName, true);
	}
	else if(StringContains(asType, "psoff") || StringContains(asType, "particleoff"))
	{
		DestroyParticleSystem(sEntityName + gsParticleNameSuffix);
	}
	else if(StringContains(asType, "sntoff") || StringContains(asType, "soundoff"))
	{
		StopSound(sEntityName + gsSoundNameSuffix, fSpeed);
	}
	else if(StringContains(asType, "ltoff") || StringContains(asType, "lightoff"))
	{
		SetLightState(gsLightPrefix + sEntityName, "off", fSpeed);
	}
	else if(StringContains(asType, "off"))
	{
		if(fSpeed != 0)
		{
			SetPropActiveAndFade(sEntityName, false, fSpeed);
		}
		else
		{
			SetEntityActive(sEntityName, false);
		}
	}
	else if(StringContains(asType, "on"))
	{
		if(fSpeed != 0)
		{
			SetPropActiveAndFade(sEntityName, true, fSpeed);
		}
		else
		{
			SetEntityActive(sEntityName, true);
		}
	}
	
	float fX = 0.0f;
	float fY = 0.0f;
	float fZ = 0.0f;
	bool bForce = StringContains(asType, "force");
	bool bImpulse = StringContains(asType, "impulse");
	
	if(bForce || bImpulse)
	{
		if(fAmount == 0)
		{
			fAmount = 0.5f;
		}
		
		if(bForce)
		{
			fAmount = fAmount * 300.0f;
		}
		else if(bImpulse)
		{
			fAmount = fAmount * 20.0f;
		}
		
		if(StringContains(asType, "-x"))
		{
			fX = -fAmount;
		}
		else if(StringContains(asType, "x"))
		{
			fX = fAmount;
		}
		
		if(StringContains(asType, "-y"))
		{
			fY = -fAmount;
		}
		else if(StringContains(asType, "y"))
		{
			fY = fAmount;
		}
		
		if(StringContains(asType, "-z"))
		{
			fZ = -fAmount;
		}
		else if(StringContains(asType, "z"))
		{
			fZ = fAmount;
		}
		
		if(bForce)
		{
			AddPropForce(sEntityName, fX, fY, fZ, "World");
		}
		else if(bImpulse)
		{
			AddPropImpulse(sEntityName, fX, fY, fZ, "World");
		}
	}
}

void SetEntityUnstuck(string asEntity) //MAKES ANY KIND OF ENTITY UNSTUCK.
{
	string sEntityName = GetOriginalString(asEntity);
	SetPropObjectStuckState(sEntityName, 0);
	SetLeverStuckState(sEntityName, 0, true);
	SetWheelStuckState(sEntityName, 0, true);
}

void SetEntityVisible(string asEntity) //MAKES VISIBLE ONE ENTITY.
{
	SetEntityVisible(GetOriginalString(asEntity), true);
}
//END ENTITY STATE FUNCTIONS

//START DOOR STATE FUNCTIONS
string GetDoorState(string asEntity) //RETURNS THE STATE OF A DOOR. POSSIBLE RETURN PATTERNS: lock, unlock, close, open, broken.
{
	string sEntityName = GetOriginalString(asEntity);
	string sDoorState = "";
	
	if(GetSwingDoorLocked(sEntityName))
	{
		sDoorState = "lock";
	}
	else
	{
		sDoorState = "unlock";
	}
	
	if(GetSwingDoorClosed(sEntityName))
	{
		sDoorState = sDoorState + "_close";
	}
	else
	{
		sDoorState = sDoorState + "_open";
	}
	
	if(GetPropHealth(sEntityName) <= 0)
	{
		sDoorState = sDoorState + "_broken";
	}
	
	return sDoorState;
}

void SetDoorState(string asEntity, string asType) //CHANGES THE STATE OF A DOOR. POSSIBLE ARGUMENTS PATTERNS: level, explode, broken, lock, unlock, close, open, silent, force-x, force-y, force-z, forcex, forcey, forcez, impulse-x, impulse-y, impulse-z, impulsex, impulsey, impulsez.
{
	string sEntityName = GetOriginalString(asEntity);
	string sClosedSoundPrefix = "01";
	string sLockedSoundPrefix = "unlock";
	string sDoorSoundSuffix = "_door.snt";
	float fAmount = 0.1f;
	int iMultiplier = 0;
	bool bOpen = true;
	bool bClosed = false;
	bool bLocked = false;
	bool bSilent = false;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 0;
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fAmount = fAmount * iMultiplier;
	
	if(StringContains(asType, "close"))
	{
		bOpen = false;
		bClosed = true;
		sClosedSoundPrefix = "scare_slam";
	}
	
	if(StringContains(asType, "unlock"))
	{
		bLocked = false;
		sLockedSoundPrefix = "unlock";
	}
	else if(StringContains(asType, "lock"))
	{
		bLocked = true;
		sLockedSoundPrefix = "lock";
	}
	
	if(StringContains(asType, "silent"))
	{
		bSilent = true;
	}
	
	if(StringContains(asType, "level"))
	{
		SetLevelDoorLocked(sEntityName, bLocked);
		SetLevelDoorLockedSound(sEntityName, "locked_door.snt");
		
		if(bSilent == false)
		{
			PlaySoundAtEntity(sEntityName + gsSoundNameSuffix, sLockedSoundPrefix + sDoorSoundSuffix, sEntityName, 0.0f, false);
		}
		
		if(StringContains(asType, gsLevelDoorLockedTextPrefix))
		{
			int iIndex = GetSubStringIndex(asType, gsLevelDoorLockedTextPrefix) + gsLevelDoorLockedTextPrefix.length();
			SetLevelDoorLockedText(sEntityName, gsHintCat, StringSub(asType, iIndex, asType.length() - iIndex));
		}
		else
		{
			SetLevelDoorLockedText(sEntityName, "LevelDoors", "LockedForever");
		}
	}
	else if(StringContains(asType, "explode") || StringContains(asType, "broken"))
	{
		if(GetPropHealth(sEntityName) <= 0)
		{
			ResetProp(sEntityName);
		}
		
		SetPropHealth(sEntityName, 0);
		StartScreenShake(0.025f, 0.75f, 0.5f, 1.0f);
	}
	else
	{
		if(StringContains(asType, "close") || StringContains(asType, "open"))
		{
			SetSwingDoorClosed(sEntityName, bClosed, false);
			SetSwingDoorDisableAutoClose(sEntityName, bOpen);
			
			if(bSilent == false)
			{
				PlaySoundAtEntity(sEntityName + gsSoundNameSuffix, sClosedSoundPrefix + sDoorSoundSuffix, sEntityName, 0.0f, false);
			}
		}
		
		if(StringContains(asType, "lock"))
		{
			SetSwingDoorLocked(sEntityName, bLocked, false);
			
			if(bSilent == false)
			{
				PlaySoundAtEntity(sEntityName + gsSoundNameSuffix, sLockedSoundPrefix + sDoorSoundSuffix, sEntityName, 0.0f, false);
			}
		}
	}
	
	float fX = 0.0f;
	float fY = 0.0f;
	float fZ = 0.0f;
	bool bForce = StringContains(asType, "force");
	bool bImpulse = StringContains(asType, "impulse");
	
	if(bForce || bImpulse)
	{
		if(fAmount == 0)
		{
			fAmount = 0.5f;
		}
		
		if(bForce)
		{
			fAmount = fAmount * 300.0f;
		}
		else if(bImpulse)
		{
			fAmount = fAmount * 20.0f;
		}
		
		if(StringContains(asType, "-x"))
		{
			fX = -fAmount;
		}
		else if(StringContains(asType, "x"))
		{
			fX = fAmount;
		}
		
		if(StringContains(asType, "-y"))
		{
			fY = -fAmount;
		}
		else if(StringContains(asType, "y"))
		{
			fY = fAmount;
		}
		
		if(StringContains(asType, "-z"))
		{
			fZ = -fAmount;
		}
		else if(StringContains(asType, "z"))
		{
			fZ = fAmount;
		}
		
		if(bForce)
		{
			AddPropForce(sEntityName, fX, fY, fZ, "World");
		}
		else if(bImpulse)
		{
			AddPropImpulse(sEntityName, fX, fY, fZ, "World");
		}
	}
}
//END DOOR STATE FUNCTIONS

//START LANTERN STATE FUNCTIONS
void TimerCheckLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerCheckLanternOil");
	
	if(asTimer == "oilspeed_slow")
	{
		if(GetPlayerLampOil() < 99)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else if(asTimer == "oilspeed_quick")
	{
		if(GetPlayerLampOil() > 1)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else if(asTimer == "oilspeed_off")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeed_slow", 2.0f, "TimerCheckLanternOil");
	}
	else
	{
		RemoveTimer("oilspeed_slow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeed_quick", 2.0f, "TimerCheckLanternOil");
	}
	else
	{
		RemoveTimer("oilspeed_quick");
	}
}

void LanternLitOilSpeedOff(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT MAKES PLAYER LANTERN OIL CONSUMPTION NULL.
{
	SetPlayerLampOil(100.0f);
	
	if(abLit)
	{
		AddTimer("oilspeed_off", 2.0f, "TimerCheckLanternOil");
	}
	else
	{
		RemoveTimer("oilspeed_off");
	}
}

void RemoveLanternLitCallback() //LANTERNLITCALLBACK SET TO DEFAULT (NOTHING HAPPENS WHEN THE PLAYER IS USING THE LANTERN).
{
	SetLanternLitCallback("");
	RemoveTimer("oilspeed_slow");
	RemoveTimer("oilspeed_quick");
	RemoveTimer("oilspeed_off");
}

void SetLanternState(string asType) //CHANGES THE STATE OF THE LANTERN. POSSIBLE ARGUMENTS PATTERNS: oilspeed_off, oilspeed_on, oilspeed_quick, oilspeed_slow, enabled, disabled, remove, on, off, silent.
{
	bool bActive = GetLanternActive();
	bool bPlaySound = true;
	bool bOn = false;
	
	if(StringContains(asType, "oilspeed_slow"))
	{
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		return;
	}
	else if(StringContains(asType, "oilspeed_quick"))
	{
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		return;
	}
	else if(StringContains(asType, "oilspeed_on"))
	{
		RemoveLanternLitCallback();
		return;
	}
	else if(StringContains(asType, "oilspeed_off"))
	{
		SetLanternLitCallback("LanternLitOilSpeedOff");
		SetPlayerLampOil(100.0f);
		return;
	}
	
	if(StringContains(asType, "silent"))
	{
		bool bPlaySound = false;
	}
	
	if(StringContains(asType, "on"))
	{
		if(bActive == false)
		{
			SetLanternActive(true, bPlaySound);
		}
	}
	else if(StringContains(asType, "off"))
	{
		if(bActive)
		{
			SetLanternActive(false, bPlaySound);
		}
	}
	
	if(StringContains(asType, "enabled"))
	{
		SetLanternDisabled(false);
	}
	else if(StringContains(asType, "disabled"))
	{
		SetLanternDisabled(true);
		SetLanternActive(false, bPlaySound);
	}
	else if(StringContains(asType, "remove"))
	{
		SetLanternDisabled(true);
		RemoveItem("lantern");
		RemoveItem("lantern_1");
		
		if(bActive)
		{
			SetLanternActive(false, bPlaySound);
		}
	}
}
//END LANTERN STATE FUNCTIONS

//START QUEST STATE FUNCTIONS
int GetQuestState(string asEntry) //RETURNS THE STATE OF A QUEST AS AN INTEGER.
{
	if(QuestIsCompleted(asEntry))
	{
		return 2;
	}
	else if(QuestIsAdded(asEntry))
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

void SetQuestAdded(string asEntry) //ADDS A QUEST.
{
	if(QuestIsAdded(asEntry) == false && QuestIsCompleted(asEntry) == false) 
	{
		AddQuest(asEntry, asEntry);
	}
}

void SetQuestCompleted(string asEntry) //SET A QUEST AS COMPLETED.
{
	CompleteQuest(asEntry, asEntry);
}

void SetQuestState(string asEntry, string asType) //CHANGES THE STATE OF A QUEST. POSSIBLE ARGUMENTS PATTERNS: add, complete, min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	string sUseEffects = "_";
	
	if(StringContains(asType, "add"))
	{
		if(QuestIsAdded(asEntry) == false && QuestIsCompleted(asEntry) == false) 
		{
			AddQuest(asEntry, asEntry);
		}
	}
	else if(StringContains(asType, "complete"))
	{
		CompleteQuest(asEntry, asEntry);
	}
	
	if(StringContains(asType, "effect"))
	{
		sUseEffects = "_effect";
	}
	
	if(StringContains(asType, "min"))
	{
		SetPlayerSanity("boost_min" + sUseEffects);
	}
	else if(StringContains(asType, "verysmall"))
	{
		SetPlayerSanity("boost_verysmall" + sUseEffects);
	}
	else if(StringContains(asType, "medsmall"))
	{
		SetPlayerSanity("boost_medsmall" + sUseEffects);
	}
	else if(StringContains(asType, "small"))
	{
		SetPlayerSanity("boost_small" + sUseEffects);
	}
	else if(StringContains(asType, "medbig"))
	{
		SetPlayerSanity("boost_medbig" + sUseEffects);
	}
	else if(StringContains(asType, "med"))
	{
		SetPlayerSanity("boost_med" + sUseEffects);
	}
	else if(StringContains(asType, "verybig"))
	{
		SetPlayerSanity("boost_verybig" + sUseEffects);
	}
	else if(StringContains(asType, "big"))
	{
		SetPlayerSanity("boost_big" + sUseEffects);
	}
	else if(StringContains(asType, "max"))
	{
		SetPlayerSanity("boost_max" + sUseEffects);
	}
}
//END QUEST STATE FUNCTIONS

//START PLAYER LOOK AT FUNCTIONS
void StopPlayerLookAt(string asType) //WHEN CALLED THE PLAYER STOPS LOOKING AT AN ENTITY. POSSIBLE ARGUMENTS PATTERNS: speed, active.
{
	StopPlayerLookAt();
	
	if(StringContains(asType, "speed"))
	{
		SetPlayerState("speednormal");
	}
	else if(StringContains(asType, "active"))
	{
		SetPlayerState("activeon");
	}
}

void SetPlayerLookAt(string asEntity, string asType, float afTime) //WHEN CALLED THE PLAYER WILL START LOOKING AT THE ENTITY DEFINED AS THE FIRST ARGUMENT. POSSIBLE ARGUMENTS PATTERNS: activeoff, activeon, playerspeednormal, playerspeedquick, playerspeedslow, playerspeedveryquick, playerspeedveryslow, min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	float fAmount = 0.0f;
	
	if(StringContains(asType, "min"))
	{
		fAmount = 0.01f;
	}
	else if(StringContains(asType, "verysmall"))
	{
		fAmount = RandFloat(0.25f, 0.5f);
	}
	else if(StringContains(asType, "medsmall"))
	{
		fAmount = RandFloat(1.25f, 1.5f);
	}
	else if(StringContains(asType, "small"))
	{
		fAmount = RandFloat(0.75f, 1.0f);
	}
	else if(StringContains(asType, "medbig"))
	{
		fAmount = RandFloat(2.25f, 2.5f);
	}
	else if(StringContains(asType, "med"))
	{
		fAmount = RandFloat(1.75f, 2.0f);
	}
	else if(StringContains(asType, "verybig"))
	{
		fAmount = RandFloat(3.25f, 3.5f);
	}
	else if(StringContains(asType, "big"))
	{
		fAmount = RandFloat(2.75f, 3.0f);
	}
	else if(StringContains(asType, "max"))
	{
		fAmount = 4.0f;
	}
	else
	{
		fAmount = 1.5f;
	}
	
	if(StringContains(asType, "playerspeedveryslow"))
	{
		SetPlayerState("speedveryslow");
	}
	else if(StringContains(asType, "playerspeedslow"))
	{
		SetPlayerState("speedslow");
	}
	else if(StringContains(asType, "playerspeednormal"))
	{
		SetPlayerState("speednormal");
	}
	else if(StringContains(asType, "playerspeedveryquick"))
	{
		SetPlayerState("speedveryquick");
	}
	else if(StringContains(asType, "playerspeedquick"))
	{
		SetPlayerState("speedquick");
	}
	else if(StringContains(asType, "activeoff"))
	{
		SetPlayerState("activeoff_drop");
	}
	else if(StringContains(asType, "activeon"))
	{
		SetPlayerState("activeon");
	}
	
	StartPlayerLookAt(GetOriginalString(asEntity), fAmount, fAmount + 0.25f, "");

	if(afTime > 0)
	{
		AddTimer(asType, afTime, "StopPlayerLookAt");
	}
}

void SetPlayerLookAt(string asEntity, string asType) //WHEN CALLED THE PLAYER WILL START LOOKING AT THE ENTITY DEFINED AS THE FIRST ARGUMENT. POSSIBLE ARGUMENTS PATTERNS: activeoff, activeon, playerspeednormal, playerspeedquick, playerspeedslow, playerspeedveryquick, playerspeedveryslow, min, verysmall, small, medsmall, med, medbig, big, verybig, max, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	float fAmount = 0.0f;
	
	if(StringContains(asType, "min"))
	{
		fAmount = 0.01f;
	}
	else if(StringContains(asType, "verysmall"))
	{
		fAmount = RandFloat(0.25f, 0.5f);
	}
	else if(StringContains(asType, "medsmall"))
	{
		fAmount = RandFloat(1.25f, 1.5f);
	}
	else if(StringContains(asType, "small"))
	{
		fAmount = RandFloat(0.75f, 1.0f);
	}
	else if(StringContains(asType, "medbig"))
	{
		fAmount = RandFloat(2.25f, 2.5f);
	}
	else if(StringContains(asType, "med"))
	{
		fAmount = RandFloat(1.75f, 2.0f);
	}
	else if(StringContains(asType, "verybig"))
	{
		fAmount = RandFloat(3.25f, 3.5f);
	}
	else if(StringContains(asType, "big"))
	{
		fAmount = RandFloat(2.75f, 3.0f);
	}
	else if(StringContains(asType, "max"))
	{
		fAmount = 4.0f;
	}
	else
	{
		fAmount = 1.5f;
	}
	
	if(StringContains(asType, "playerspeedveryslow"))
	{
		SetPlayerState("speedveryslow");
	}
	else if(StringContains(asType, "playerspeedslow"))
	{
		SetPlayerState("speedslow");
	}
	else if(StringContains(asType, "playerspeednormal"))
	{
		SetPlayerState("speednormal");
	}
	else if(StringContains(asType, "playerspeedveryquick"))
	{
		SetPlayerState("speedveryquick");
	}
	else if(StringContains(asType, "playerspeedquick"))
	{
		SetPlayerState("speedquick");
	}
	else if(StringContains(asType, "activeoff"))
	{
		SetPlayerState("activeoff_drop");
	}
	else if(StringContains(asType, "activeon"))
	{
		SetPlayerState("activeon");
	}
	
	StartPlayerLookAt(GetOriginalString(asEntity), fAmount, fAmount + 0.25f, "");
	float fSpeed = 0.25f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asType, "veryquick"))
	{
		if(StringContains(asType, "playerspeedveryquick"))
		{
			iMultiplier = 0;
		}
		else
		{
			iMultiplier = 2;
		}
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
	}
	else if(StringContains(asType, "quick"))
	{
		if(StringContains(asType, "playerspeedquick"))
		{
			iMultiplier = 0;
		}
		else
		{
			iMultiplier = 8;
		}
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		if(StringContains(asType, "playerspeedveryslow"))
		{
			iMultiplier = 0;
		}
		else
		{
			iMultiplier = 78;
		}
	}
	else if(StringContains(asType, "slow"))
	{
		if(StringContains(asType, "playerspeedslow"))
		{
			iMultiplier = 0;
		}
		else
		{
			iMultiplier = 72;
		}
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
	}
	else
	{
		iMultiplier = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	
	if(fSpeed > 0)
	{
		AddTimer(asType, fSpeed, "StopPlayerLookAt");
	}
}

void SetPlayerLookAt(string asEntity) //WHEN CALLED THE PLAYER WILL START LOOKING AT THE ENTITY DEFINED AS THE ARGUMENT.
{
	StartPlayerLookAt(GetOriginalString(asEntity), 1.0f, 1.25f, "");
}
//END PLAYER LOOK AT FUNCTIONS

//START PLAYER ROLL TO FUNCTIONS
void StopPlayerRollTo(string asType) //WHEN CALLED THE PLAYER CAMERA WILL ROLL TO THE LEFT OR TO THE RIGHT UNTIL THE CAMERA BECOMES NORMAL AGAIN. POSSIBLE ARGUMENTS PATTERNS: active, off, fall, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	float fSpeed = 0.0f;
	
	if(StringContains(asType, "sloth"))
	{
		fSpeed = RandFloat(2.5f, 5.0f);
	}
	else if(StringContains(asType, "veryslow"))
	{
		fSpeed = RandFloat(10.0f, 20.0f);
	}
	else if(StringContains(asType, "midslow"))
	{
		fSpeed = RandFloat(37.5f, 42.5f);
	}
	else if(StringContains(asType, "slow"))
	{
		fSpeed = RandFloat(25.0f, 30.0f);
	}
	else if(StringContains(asType, "midquick"))
	{
		fSpeed = RandFloat(47.5f, 52.5f);
	}
	else if(StringContains(asType, "mid"))
	{
		fSpeed = RandFloat(45.0f, 50.0f);
	}
	else if(StringContains(asType, "veryquick"))
	{
		fSpeed = RandFloat(60.0f, 65.0f);
	}
	else if(StringContains(asType, "quick"))
	{
		fSpeed = RandFloat(50.0f, 55.0f);
	}
	else if(StringContains(asType, "bolt"))
	{
		fSpeed = RandFloat(70.0f, 75.0f);
	}
	else
	{
		fSpeed = 1.0f;
	}
	
	if(StringContains(asType, "fall"))
	{
		StopSound("ear_ring" + gsSoundNameSuffix, 3.0f);
		SetPlayerCrouching(false);
		SetPlayerCrouchDisabled(false);
		SetPlayerState("speedslow");
		AddTimer("speednormal", RandFloat(1.75f, 2.25f), "SetPlayerState");
	}
	
	if(StringContains(asType, "active"))
	{
		SetPlayerState("activeon");
	}
	
	FadePlayerRollTo(0.0f, fSpeed, fSpeed + 1.25f);
}

void SetPlayerRollTo(string asType, float afTime) //WHEN CALLED THE PLAYER CAMERA WILL START ROLLING TO THE LEFT OR TO THE RIGHT. POSSIBLE ARGUMENTS PATTERNS: active, off, fall, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt, min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	float fAmount = 0.0f;
	
	if(StringContains(asType, "min"))
	{
		fAmount = 1.0f;
	}
	else if(StringContains(asType, "verysmall"))
	{
		fAmount = RandFloat(5.0f, 10.0f);
	}
	else if(StringContains(asType, "medsmall"))
	{
		fAmount = RandFloat(20.0f, 25.0f);
	}
	else if(StringContains(asType, "small"))
	{
		fAmount = RandFloat(10.0f, 20.0f);
	}
	else if(StringContains(asType, "medbig"))
	{
		fAmount = RandFloat(45.0f, 75.0f);
	}
	else if(StringContains(asType, "med"))
	{
		fAmount = RandFloat(30.0f, 60.0f);
	}
	else if(StringContains(asType, "verybig"))
	{
		fAmount = RandFloat(100.0f, 150.0f);
	}
	else if(StringContains(asType, "big"))
	{
		fAmount = RandFloat(60.0f, 90.0f);
	}
	else if(StringContains(asType, "max"))
	{
		fAmount = 360.0f;
	}
	else
	{
		fAmount = 45.0f;
	}
	
	float fSpeed = 0.0f;
	
	if(StringContains(asType, "sloth"))
	{
		fSpeed = RandFloat(2.5f, 5.0f);
	}
	else if(StringContains(asType, "veryslow"))
	{
		fSpeed = RandFloat(10.0f, 20.0f);
	}
	else if(StringContains(asType, "midslow"))
	{
		fSpeed = RandFloat(37.5f, 42.5f);
	}
	else if(StringContains(asType, "slow"))
	{
		fSpeed = RandFloat(25.0f, 30.0f);
	}
	else if(StringContains(asType, "midquick"))
	{
		fSpeed = RandFloat(47.5f, 52.5f);
	}
	else if(StringContains(asType, "mid"))
	{
		fSpeed = RandFloat(45.0f, 50.0f);
	}
	else if(StringContains(asType, "veryquick"))
	{
		fSpeed = RandFloat(60.0f, 65.0f);
	}
	else if(StringContains(asType, "quick"))
	{
		fSpeed = RandFloat(50.0f, 55.0f);
	}
	else if(StringContains(asType, "bolt"))
	{
		fSpeed = RandFloat(70.0f, 75.0f);
	}
	else
	{
		fSpeed = 1.0f;
	}
	
	if(RandInt(0, 1) == 0)
	{
		FadePlayerRollTo(fAmount, fSpeed, fSpeed + 1.25f);
	}
	else
	{
		FadePlayerRollTo(-fAmount, fSpeed, fSpeed + 1.25f);
	}
	
	if(StringContains(asType, "fall"))
	{
		PlayGuiSound("player_bodyfall.snt", 0.9f);
		PlayGuiSound("step_sneak_rock_rev.snt", 0.8f);
		PlaySoundAtEntity("ear_ring" + gsSoundNameSuffix, "insanity_ear_ring.snt", "Player", 0.5f, false);
		SetPlayerCrouching(true);
		SetPlayerCrouchDisabled(true);
		SetPlayerState("speedveryslow_drop");
	}
	
	if(StringContains(asType, "active"))
	{
		SetPlayerState("activeoff_drop");
	}
	
	if(afTime > 0)
	{
		AddTimer(asType, afTime, "StopPlayerRollTo");
	}
}

void SetPlayerRollTo(string asType) //WHEN CALLED THE PLAYER CAMERA WILL START ROLLING TO THE LEFT OR TO THE RIGHT. POSSIBLE ARGUMENTS PATTERNS: active, off, fall, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt, min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	float fAmount = 0.0f;
	
	if(StringContains(asType, "min"))
	{
		fAmount = 1.0f;
	}
	else if(StringContains(asType, "verysmall"))
	{
		fAmount = RandFloat(5.0f, 10.0f);
	}
	else if(StringContains(asType, "medsmall"))
	{
		fAmount = RandFloat(20.0f, 25.0f);
	}
	else if(StringContains(asType, "small"))
	{
		fAmount = RandFloat(10.0f, 20.0f);
	}
	else if(StringContains(asType, "medbig"))
	{
		fAmount = RandFloat(45.0f, 75.0f);
	}
	else if(StringContains(asType, "med"))
	{
		fAmount = RandFloat(30.0f, 60.0f);
	}
	else if(StringContains(asType, "verybig"))
	{
		fAmount = RandFloat(100.0f, 150.0f);
	}
	else if(StringContains(asType, "big"))
	{
		fAmount = RandFloat(60.0f, 90.0f);
	}
	else if(StringContains(asType, "max"))
	{
		fAmount = 360.0f;
	}
	else
	{
		fAmount = 45.0f;
	}
	
	float fSpeed = 0.0f;
	
	if(StringContains(asType, "sloth"))
	{
		fSpeed = RandFloat(2.5f, 5.0f);
	}
	else if(StringContains(asType, "veryslow"))
	{
		fSpeed = RandFloat(10.0f, 20.0f);
	}
	else if(StringContains(asType, "midslow"))
	{
		fSpeed = RandFloat(37.5f, 42.5f);
	}
	else if(StringContains(asType, "slow"))
	{
		fSpeed = RandFloat(25.0f, 30.0f);
	}
	else if(StringContains(asType, "midquick"))
	{
		fSpeed = RandFloat(47.5f, 52.5f);
	}
	else if(StringContains(asType, "mid"))
	{
		fSpeed = RandFloat(45.0f, 50.0f);
	}
	else if(StringContains(asType, "veryquick"))
	{
		fSpeed = RandFloat(60.0f, 65.0f);
	}
	else if(StringContains(asType, "quick"))
	{
		fSpeed = RandFloat(50.0f, 55.0f);
	}
	else if(StringContains(asType, "bolt"))
	{
		fSpeed = RandFloat(70.0f, 75.0f);
	}
	else
	{
		fSpeed = 1.0f;
	}
	
	if(RandInt(0, 1) == 0)
	{
		FadePlayerRollTo(fAmount, fSpeed, fSpeed + 1.25f);
	}
	else
	{
		FadePlayerRollTo(-fAmount, fSpeed, fSpeed + 1.25f);
	}
	
	if(StringContains(asType, "fall"))
	{
		PlayGuiSound("player_bodyfall.snt", 0.9f);
		PlayGuiSound("step_sneak_rock_rev.snt", 0.8f);
		PlaySoundAtEntity("ear_ring" + gsSoundNameSuffix, "insanity_ear_ring.snt", "Player", 0.5f, false);
		SetPlayerCrouching(true);
		SetPlayerCrouchDisabled(true);
		SetPlayerState("speedveryslow_drop");
	}
	
	if(StringContains(asType, "active"))
	{
		SetPlayerState("activeoff_drop");
	}
}
//END PLAYER ROLL TO FUNCTIONS

//START PLAYER REACTIONS FUNCTIONS
void SetPlayerReact(string asType, float afTime) //HELPER FUNCTION.
{
	AddTimer(asType, afTime, "SetPlayerReact");
}

void SetPlayerReact(string asType) //MAKES THE PLAYER GET SCARED. POSSIBLE ARGUMENTS PATTERNS: scare, pant, breath, breathslow, sigh, effect, min, verysmall, small, medsmall, med, medbig, big, verybig, max, 1.
{
	string sTypeA = "";
	string sTypeB = "";
	string sUseEffects = "_effect";
	int iTypeLength = 0;
	
	if(StringContains(asType, "pant") || StringContains(asType, "scare"))
	{
		if(StringContains(asType, "pant"))
		{
			sTypeA = "pant";
		}
		else
		{
			sTypeA = "scare";
		}
		
		iTypeLength = sTypeA.length() - 10;
		PlayGuiSound("react_" + sTypeA + ".snt", RandFloat(0.8f, 1.0f));
		float fTime = RandFloat(2.5f, 5.0f);
		
		if(StringContains(asType, "breath") || StringContains(asType, "sigh"))
		{
			if(StringContains(asType, "breathslow"))
			{
				sTypeB = "breathslow";
			}
			else if(StringContains(asType, "breath"))
			{
				sTypeB = "breath";
			}
			else
			{
				sTypeB = "sigh";
			}
		}
		
		if(StringContains(asType, "effect"))
		{
			FadeSepiaColorTo(0.5f, 0.025f);
			SetRadialBlurStartDist(0.2f);
			FadeRadialBlurTo(0.1f, 0.025f);
			sUseEffects = "_";
			
			if(sTypeB.length() > 0)
			{
				AddTimer(sTypeB + "_effect", fTime, "SetPlayerReact");
				AddTimer(sTypeB + "_effect" + 1, fTime + RandFloat(2.0f, 3.0f), "SetPlayerReact");
			}
		}
		else if(sTypeB.length() > 0)
		{
			AddTimer(sTypeB, fTime, "SetPlayerReact");
			AddTimer(sTypeB + 1, fTime + RandFloat(2.0f, 3.0f), "SetPlayerReact");
		}
	}
	else if(StringContains(asType, "breath") || StringContains(asType, "sigh"))
	{
		sUseEffects = "_";
		float fAmount = 0.0f;
		
		if(StringContains(asType, "1"))
		{
			fAmount = RandFloat(0.3f, 0.4f);
		}
		else
		{
			fAmount = RandFloat(0.65f, 0.85f);
		}
		
		if(StringContains(asType, "breathslow"))
		{
			PlayGuiSound("react_breath_slow.snt", fAmount);
		}
		else if(StringContains(asType, "breath"))
		{
			PlayGuiSound("react_breath.snt", fAmount);
		}
		else
		{
			PlayGuiSound("react_sigh.snt", fAmount);
		}
		
		if(StringContains(asType, "effect"))
		{
			FadeSepiaColorTo(0.0f, 0.1f);
			FadeRadialBlurTo(0.0f, 0.1f);
		}
	}
	
	if(StringContains(asType, "min"))
	{
		SetPlayerSanity("damage_min_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "verysmall"))
	{
		SetPlayerSanity("damage_verysmall_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "medsmall"))
	{
		SetPlayerSanity("damage_medsmall_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "small"))
	{
		SetPlayerSanity("damage_small_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "medbig"))
	{
		SetPlayerSanity("damage_medbig_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "med"))
	{
		SetPlayerSanity("damage_med_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "verybig"))
	{
		SetPlayerSanity("damage_verybig_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "big"))
	{
		SetPlayerSanity("damage_big_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "max"))
	{
		SetPlayerSanity("damage_max_lethal" + sUseEffects);
	}
	else if(StringContains(asType, "pant") || StringContains(asType, "scare"))
	{
		if(StringContains(asType, "effect"))
		{
			GiveSanityDamage(10.0f, false);
		}
		else
		{
			GiveSanityDamage(10.0f, true);
		}
	}
	else if(StringContains(asType, "breath") || StringContains(asType, "sigh"))
	{
		GiveSanityDamage(1.0f, false);
	}
}
//END PLAYER REACTIONS FUNCTIONS

//START SCREEN EFFECTS FUNCTIONS
void SetScreenEffect(string asType, float afTime) //PLAYS AN EFFECT ON THE SCREEN. POSSIBLE ARGUMENTS PATTERNS: activeoff, activeon, fadein, fadeout, zoomin, zoomout, zoomnormal, shake, white, blur, sepia, trail, allnormal, whitetoblack, flashbackoff, flashbackon, min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	string sProfile = "";
	float fAmount = 0.1f;
	float fAmountAlt = 0.01f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 1;
		sProfile = "min";
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
		sProfile = "verysmall";
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
		sProfile = "medsmall";
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
		sProfile = "small";
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
		sProfile = "medbig";
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
		sProfile = "med";
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
		sProfile = "verybig";
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
		sProfile = "big";
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
		sProfile = "max";
	}
	else
	{
		iMultiplier = 8;
		sProfile = "normal";
	}
	
	fAmount = fAmount * iMultiplier;
	fAmountAlt = fAmountAlt * iMultiplier;
	
	if(StringContains(asType, "shake"))
	{
		if(afTime != 0)
		{
			StartScreenShake(fAmountAlt, afTime, 0.5f, afTime);
		}
		else
		{
			AddTimer("shake_" + sProfile, 0.001f, "TimerScreenShakeLoop");
		}	
	}
	else if(StringContains(asType, "flashbackon"))
	{
		PlayGuiSound("flashback_flash.snt", 0.8f);
		StartEffectFlash(0.75f, 1.0f, 0.5f);
		FadeImageTrailTo(0.3f, 0.3f);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.1f, 1.0f);
		FadeSepiaColorTo(0.5f, 0.25f);
	}
	else if(StringContains(asType, "flashbackoff"))
	{
		StartEffectFlash(0.5f, 1.0f, 0.75f);
		FadeImageTrailTo(0.0f, 2.0f);
		FadeSepiaColorTo(0.0f, 2.0f);
		FadeRadialBlurTo(0.0f, 2.0f);
	}
	else if(StringContains(asType, "whitetoblack"))
	{
		PlayGuiSound("scare_wall_stomp.snt", 1.0f);
		StartScreenShake(0.075f, 4.5f, 0.055f, 0.5f);
		StartEffectFlash(0.2f, 0.1f, 0.3f);
		FadeOut(0.3f);
		FadePlayerFOVMulTo(0.5f, 0.5f);
		SetRadialBlurStartDist(0.1f);
		FadeRadialBlurTo(1.0f, 0.5f);
	}
	else if(StringContains(asType, "allnormal"))
	{
		FadeImageTrailTo(0.0f, afTime);
		FadeSepiaColorTo(0.0f, afTime);
		FadeRadialBlurTo(0.0f, afTime);
		FadePlayerFOVMulTo(1.0f, afTime);
		FadePlayerAspectMulTo(1.0f, afTime);
	}
	else if(StringContains(asType, "trail"))
	{
		FadeImageTrailTo(fAmount, afTime);
	}
	else if(StringContains(asType, "sepia"))
	{
		FadeSepiaColorTo(fAmount, afTime);
	}
	else if(StringContains(asType, "blur"))
	{
		if(fAmount != 0)
		{
			SetRadialBlurStartDist(fAmount / 2);
		}
		
		FadeRadialBlurTo(fAmount, afTime);
	}
	else if(StringContains(asType, gsEmotionFlashNameSuffix))
	{
		if(asType.length() > gsEmotionFlashNameSuffix.length())
		{
			StartEffectEmotionFlash(gsEmotionFlashCat, GetStringWithoutSubString(asType, gsEmotionFlashNameSuffix), "");
		}
		else
		{
			AddDebugMessage("ERROR! " + asType + " not valid for an emotion flashback text!", false);
		}
		
		return;
	}
	else if(StringContains(asType, "white"))
	{
		StartEffectFlash(afTime, fAmount, afTime + 0.5f);
	}
	else if(StringContains(asType, "zoomin"))
	{
		FadePlayerFOVMulTo(1.0f - fAmount, afTime);
		FadePlayerAspectMulTo(1.0f - fAmount, afTime);
	}
	else if(StringContains(asType, "zoomout"))
	{
		FadePlayerFOVMulTo(1.0f + fAmount, afTime);
		FadePlayerAspectMulTo(1.0f + fAmount, afTime);
	}
	else if(StringContains(asType, "zoomnormal"))
	{
		FadePlayerFOVMulTo(1.0f, afTime);
		FadePlayerAspectMulTo(1.0f, afTime);
	}
	else if(StringContains(asType, "fadein"))
	{
		FadeIn(afTime);
	}
	else if(StringContains(asType, "fadeout"))
	{
		FadeOut(afTime);
	}
	
	if(StringContains(asType, "crosshairon"))
	{
		ShowPlayerCrossHairIcons(true);
	}
	else if(StringContains(asType, "crosshairoff"))
	{
		ShowPlayerCrossHairIcons(false);
	}
	
	if(StringContains(asType, "activeon"))
	{
		SetPlayerState("activeon");
	}
	else if(StringContains(asType, "activeoff"))
	{
		SetPlayerState("activeoff");
	}
}

void SetScreenEffect(string asType) //PLAYS AN EFFECT ON THE SCREEN. POSSIBLE ARGUMENTS PATTERNS: activeoff, activeon, fadein, fadeout, zoomin, zoomout, zoomnormal, shake, white, blur, sepia, trail, allnormal, whitetoblack, flashbackoff, flashbackon, min, verysmall, small, medsmall, med, medbig, big, verybig, max, sloth, veryslow, slow, midslow, mid, midquick, quick, veryquick, bolt.
{
	string sProfile = "";
	float fAmount = 0.1f;
	float fAmountAlt = 0.01f;
	int iMultiplier = 0;
	
	if(StringContains(asType, "min"))
	{
		iMultiplier = 1;
		sProfile = "min";
	}
	else if(StringContains(asType, "verysmall"))
	{
		iMultiplier = 2;
		sProfile = "verysmall";
	}
	else if(StringContains(asType, "medsmall"))
	{
		iMultiplier = 4;
		sProfile = "medsmall";
	}
	else if(StringContains(asType, "small"))
	{
		iMultiplier = 3;
		sProfile = "small";
	}
	else if(StringContains(asType, "medbig"))
	{
		iMultiplier = 6;
		sProfile = "medbig";
	}
	else if(StringContains(asType, "med"))
	{
		iMultiplier = 5;
		sProfile = "med";
	}
	else if(StringContains(asType, "verybig"))
	{
		iMultiplier = 8;
		sProfile = "verybig";
	}
	else if(StringContains(asType, "big"))
	{
		iMultiplier = 7;
		sProfile = "big";
	}
	else if(StringContains(asType, "max"))
	{
		iMultiplier = 10;
		sProfile = "max";
	}
	else
	{
		iMultiplier = 8;
		sProfile = "normal";
	}
	
	fAmount = fAmount * iMultiplier;
	fAmountAlt = fAmountAlt * iMultiplier;
	float fSpeed = 0.125f;
	float fSpeedReverse = 0.125f;
	int iMultiplierReverse = 0;
	
	if(StringContains(asType, "bolt"))
	{
		iMultiplier = 1;
		iMultiplierReverse = 80;
	}
	else if(StringContains(asType, "veryquick"))
	{
		iMultiplier = 2;
		iMultiplierReverse = 78;
	}
	else if(StringContains(asType, "midquick"))
	{
		iMultiplier = 24;
		iMultiplierReverse = 56;
	}
	else if(StringContains(asType, "quick"))
	{
		iMultiplier = 8;
		iMultiplierReverse = 72;
	}
	else if(StringContains(asType, "midslow"))
	{
		iMultiplier = 56;
		iMultiplierReverse = 24;
	}
	else if(StringContains(asType, "mid"))
	{
		iMultiplier = 40;
		iMultiplierReverse = 40;
	}
	else if(StringContains(asType, "veryslow"))
	{
		iMultiplier = 78;
		iMultiplierReverse = 2;
	}
	else if(StringContains(asType, "slow"))
	{
		iMultiplier = 72;
		iMultiplierReverse = 8;
	}
	else if(StringContains(asType, "sloth"))
	{
		iMultiplier = 80;
		iMultiplierReverse = 1;
	}
	else
	{
		iMultiplier = 0;
		iMultiplierReverse = 0;
	}
	
	fSpeed = fSpeed * iMultiplier;
	fSpeedReverse = fSpeedReverse * iMultiplierReverse;
	
	if(StringContains(asType, "shake"))
	{
		if(fSpeed != 0)
		{
			StartScreenShake(fAmountAlt, fSpeed, 0.5f, fSpeed);
		}
		else
		{
			AddTimer("shake_" + sProfile, 0.001f, "TimerScreenShakeLoop");
		}	
	}
	else if(StringContains(asType, "flashbackon"))
	{
		PlayGuiSound("flashback_flash.snt", 0.8f);
		StartEffectFlash(0.75f, 1.0f, 0.5f);
		FadeImageTrailTo(0.3f, 0.3f);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.1f, 1.0f);
		FadeSepiaColorTo(0.5f, 0.25f);
	}
	else if(StringContains(asType, "flashbackoff"))
	{
		StartEffectFlash(0.5f, 1.0f, 0.75f);
		FadeImageTrailTo(0.0f, 2.0f);
		FadeSepiaColorTo(0.0f, 2.0f);
		FadeRadialBlurTo(0.0f, 2.0f);
	}
	else if(StringContains(asType, "whitetoblack"))
	{
		PlayGuiSound("scare_wall_stomp.snt", 1.0f);
		StartScreenShake(0.075f, 4.5f, 0.055f, 0.5f);
		StartEffectFlash(0.2f, 0.1f, 0.3f);
		FadeOut(0.3f);
		FadePlayerFOVMulTo(0.5f, 0.5f);
		SetRadialBlurStartDist(0.1f);
		FadeRadialBlurTo(1.0f, 0.5f);
	}
	else if(StringContains(asType, "allnormal"))
	{
		FadeImageTrailTo(0.0f, fSpeed);
		FadeSepiaColorTo(0.0f, fSpeed);
		FadeRadialBlurTo(0.0f, fSpeed);
		FadePlayerFOVMulTo(1.0f, fSpeedReverse);
		FadePlayerAspectMulTo(1.0f, fSpeedReverse);
	}
	else if(StringContains(asType, "trail"))
	{
		FadeImageTrailTo(fAmount, fSpeed);
	}
	else if(StringContains(asType, "sepia"))
	{
		FadeSepiaColorTo(fAmount, fSpeed);
	}
	else if(StringContains(asType, "blur"))
	{
		if(fAmount != 0)
		{
			SetRadialBlurStartDist(fAmount / 2);
		}
		
		FadeRadialBlurTo(fAmount, fSpeed);
	}
	else if(StringContains(asType, gsEmotionFlashNameSuffix))
	{
		if(asType.length() > gsEmotionFlashNameSuffix.length())
		{
			StartEffectEmotionFlash(gsEmotionFlashCat, GetStringWithoutSubString(asType, gsEmotionFlashNameSuffix), "");
		}
		else
		{
			AddDebugMessage("ERROR! " + asType + " not valid for an emotion flashback text!", false);
		}
		
		return;
	}
	else if(StringContains(asType, "white"))
	{
		StartEffectFlash(fSpeed, fAmount, fSpeed + 0.5f);
	}
	else if(StringContains(asType, "zoomin"))
	{
		FadePlayerFOVMulTo(1.0f - fAmount, fSpeedReverse);
		FadePlayerAspectMulTo(1.0f - fAmount, fSpeedReverse);
	}
	else if(StringContains(asType, "zoomout"))
	{
		FadePlayerFOVMulTo(1.0f + fAmount, fSpeedReverse);
		FadePlayerAspectMulTo(1.0f + fAmount, fSpeedReverse);
	}
	else if(StringContains(asType, "zoomnormal"))
	{
		FadePlayerFOVMulTo(1.0f, fSpeedReverse);
		FadePlayerAspectMulTo(1.0f, fSpeedReverse);
	}
	else if(StringContains(asType, "fadein"))
	{
		FadeIn(fSpeed);
	}
	else if(StringContains(asType, "fadeout"))
	{
		FadeOut(fSpeed);
	}
	
	if(StringContains(asType, "crosshairon"))
	{
		ShowPlayerCrossHairIcons(true);
	}
	else if(StringContains(asType, "crosshairoff"))
	{
		ShowPlayerCrossHairIcons(false);
	}
	
	if(StringContains(asType, "activeon"))
	{
		SetPlayerState("activeon");
	}
	else if(StringContains(asType, "activeoff"))
	{
		SetPlayerState("activeoff");
	}
}

void TimerScreenShakeLoop(string asTimer) //USED AS A TIMER TO PLAY A LOOPING SCREEN SHAKE EFFECT. POSSIBLE ARGUMENTS PATTERNS: min, verysmall, small, medsmall, med, medbig, big, verybig, max.
{
	float fAmount = 0.01f;
	int iMultiplier = 0;
	
	if(StringContains(asTimer, "min"))
	{
		iMultiplier = 1;
	}
	else if(StringContains(asTimer, "verysmall"))
	{
		iMultiplier = 2;
	}
	else if(StringContains(asTimer, "medsmall"))
	{
		iMultiplier = 4;
	}
	else if(StringContains(asTimer, "small"))
	{
		iMultiplier = 3;
	}
	else if(StringContains(asTimer, "medbig"))
	{
		iMultiplier = 6;
	}
	else if(StringContains(asTimer, "med"))
	{
		iMultiplier = 5;
	}
	else if(StringContains(asTimer, "verybig"))
	{
		iMultiplier = 8;
	}
	else if(StringContains(asTimer, "big"))
	{
		iMultiplier = 7;
	}
	else if(StringContains(asTimer, "max"))
	{
		iMultiplier = 10;
	}
	else
	{
		iMultiplier = 8;
	}
	
	fAmount = fAmount * iMultiplier;
	StartScreenShake(fAmount, 1.0f, 0.5f, 1.0f);
	AddTimer(asTimer, 1.0f, "TimerScreenShakeLoop");
}
//END SCREEN EFFECTS FUNCTIONS

//START DISTANCES FUNCTIONS
float GetEntitiesDistance(string asEntityA, string asEntityB) //RETURNS A FLOATING POINT WHICH REPRESENTS THE EUCLIDEAN DISTANCE BETWEEN TWO ENTITIES.
{
	string sEntityAName = GetOriginalString(asEntityA);
	string sEntityBName = GetOriginalString(asEntityB);
	
	if(GetEntityExists(sEntityAName) == false || GetEntityExists(sEntityBName) == false)
	{
		AddDebugMessage("ERROR: Could not find " + sEntityAName + " and " + sEntityBName + " when trying to get their distance!", false);
		return -1.0f;
	}
	
	float fEntityAPosX = GetEntityPosX(sEntityAName);
	float fEntityAPosY = GetEntityPosY(sEntityAName);
	float fEntityAPosZ = GetEntityPosZ(sEntityAName);
	float fEntityBPosX = GetEntityPosX(sEntityBName);
	float fEntityBPosY = GetEntityPosY(sEntityBName);
	float fEntityBPosZ = GetEntityPosZ(sEntityBName);
	float fDistance = MathSqrt(MathPow((fEntityBPosX - fEntityAPosX), 2.0f) + MathPow((fEntityBPosY - fEntityAPosY), 2.0f) + MathPow((fEntityBPosZ - fEntityAPosZ), 2.0f));
	//AddDebugMessage("WARNING: Current distance between " + sEntityAName + " and " + sEntityBName + " = " + fDistance, false);
	return fDistance;
}

float GetEntityPlayerDistance(string asEntity) //RETURNS A FLOATING POINT WHICH REPRESENTS THE EUCLIDEAN DISTANCE BETWEEN THE PLAYER AND THE ENTITY.
{
	string sEntityName = GetOriginalString(asEntity);
	
	if(GetEntityExists(sEntityName) == false)
	{
		AddDebugMessage("ERROR: Could not find " + sEntityName + " when trying to get the distance between the entity and the player!", false);
		return -1.0f;
	}
	
	float fPlayerPosX = GetPlayerPosX();
	float fPlayerPosY = GetPlayerPosY();
	float fPlayerPosZ = GetPlayerPosZ();
	float fEntityPosX = GetEntityPosX(sEntityName);
	float fEntityPosY = GetEntityPosY(sEntityName);
	float fEntityPosZ = GetEntityPosZ(sEntityName);
	float fDistance = MathSqrt(MathPow((fEntityPosX - fPlayerPosX), 2.0f) + MathPow((fEntityPosY - fPlayerPosY), 2.0f) + MathPow((fEntityPosZ - fPlayerPosZ), 2.0f));
	//AddDebugMessage("WARNING: Current distance between Player and " + sEntityName + " = " + fDistance, false);
	return fDistance;
}
//END DISTANCES FUNCTIONS

//START ENEMY STATE FUNCTIONS
int GetEnemyState(string asEnemy) //RETURNS THE STATE OF AN ENEMY AS AN INTEGER.
{
	string sEnemyName = GetOriginalString(asEnemy);
	string sEnemyStateName = GetEnemyStateName(sEnemyName);
	
	if(StringContains(sEnemyStateName, "Hunt") || StringContains(sEnemyStateName, "Alert") || StringContains(sEnemyStateName, "Attack"))
	{
		return 5;
	}
	else if(sEnemyStateName == "Hurt")
	{
		return 4;
	}
	else if(sEnemyStateName == "BreakDoor")
	{
		return 3;
	}
	else if(sEnemyStateName == "Search" || sEnemyStateName == "Investigate")
	{
		return 2;
	}
	else if(sEnemyStateName == "Wait" || sEnemyStateName == "Patrol")
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

bool GetActiveEnemyIsAround() //RETURNS TRUE IF THE ACTIVE ENEMY IS STILL AROUND THE MAP.
{
	if(GetGlobalVarString("ActiveEnemyName") != "")
	{
		return true;
	}
	else
	{
		return false;
	}
}

bool GetActiveEnemyIsNear(int aiMinDistance, int aiMaxDistance) //RETURNS TRUE IF THE ACTIVE ENEMY IS STILL IN RANGE, THE RANGE IS DETERMINATED BY THE TWO ARGUMENTS BUT ALSO BY THE STATE NAME OF THE ACTIVE ENEMY.
{
	string sCurrentActiveEnemy = GetGlobalVarString("ActiveEnemyName");
	float fDistance = GetEntityPlayerDistance(sCurrentActiveEnemy);
	int iEnemyState = GetEnemyState(sCurrentActiveEnemy);
	
	if((aiMaxDistance < aiMinDistance) || (aiMaxDistance < 0) || (aiMinDistance < 0))
	{
		AddDebugMessage("ERROR: Function GetActiveEnemyIsNear did not work! Max distance and min distance are not set properly!", false);
		return false;
	}
	
	if((sCurrentActiveEnemy == "") || (iEnemyState == 5 && fDistance >= aiMaxDistance) || (iEnemyState <= 4 && fDistance >= aiMinDistance))
	{
		return false;
	}
	else
	{
		return true;
	}
}

string GetActiveEnemyName() //RETURNS THE NAME OF THE ACTIVE ENEMY.
{
	return GetGlobalVarString("ActiveEnemyName");
}

void SetActiveEnemyName(string asEnemy) //SETS THE NAME OF THE ACTIVE ENEMY.
{
	SetGlobalVarString("ActiveEnemyName", asEnemy);
}

void SetEnemyPatrolNode(string asEnemy, int aiPatrolNodeCode, int aiMultiplier) //ADDS AN ENEMY PATROL NODE.
{
	float fMinEnemyIdleTime = 0.0f;
	
	if(aiMultiplier <= 0)
	{
		AddEnemyPatrolNode(GetOriginalString(asEnemy), gsPathNodeAreaPrefix + aiPatrolNodeCode, 0.001f, "");
	}
	else
	{
		fMinEnemyIdleTime = GetGlobalVarFloat("MinEnemyIdleTime") * aiMultiplier;
		AddEnemyPatrolNode(GetOriginalString(asEnemy), gsPathNodeAreaPrefix + aiPatrolNodeCode, RandFloat(fMinEnemyIdleTime, fMinEnemyIdleTime + fMinEnemyIdleTime), "");
	}
} 

void SetEnemyPatrolNode(string asEnemy, int aiPatrolNodeCode) //ADDS AN ENEMY PATROL NODE.
{
	AddEnemyPatrolNode(GetOriginalString(asEnemy), gsPathNodeAreaPrefix + aiPatrolNodeCode, RandFloat(GetGlobalVarFloat("MinEnemyIdleTime"), GetGlobalVarFloat("MinEnemyIdleTime") + 2), "");
}

void SetEnemyPatrolNodes(string asEnemy, string[] avsPatrolNodeCodesArray, int aiMultiplier) //ADDS SOME ENEMY PATROL NODES.
{
	float fMinEnemyIdleTime = 0.0f;
	ClearEnemyPatrolNodes(GetOriginalString(asEnemy));
	
	if(aiMultiplier <= 0)
	{
		fMinEnemyIdleTime = 0.001f;
	}
	else
	{
		fMinEnemyIdleTime = GetGlobalVarFloat("MinEnemyIdleTime") * aiMultiplier;
	}
	
	for(int i=0; i<avsPatrolNodeCodesArray.length(); i++)
	{
		if(StringContains(avsPatrolNodeCodesArray[i], "_idle"))
		{
			AddEnemyPatrolNode(GetOriginalString(asEnemy), gsPathNodeAreaPrefix + StringSub(avsPatrolNodeCodesArray[i], 0, avsPatrolNodeCodesArray[i].length() - 5), RandFloat(fMinEnemyIdleTime, fMinEnemyIdleTime + fMinEnemyIdleTime), "");
		}
		else
		{
			AddEnemyPatrolNode(GetOriginalString(asEnemy), gsPathNodeAreaPrefix + avsPatrolNodeCodesArray[i], 0.001f, "");
		}
	}
}

void SetEnemyPatrolNodes(string asEnemy, string[] avsPatrolNodeCodesArray) //ADDS SOME ENEMY PATROL NODES.
{
	ClearEnemyPatrolNodes(GetOriginalString(asEnemy));
	
	for(int i=0; i<avsPatrolNodeCodesArray.length(); i++)
	{
		if(StringContains(avsPatrolNodeCodesArray[i], "_idle"))
		{
			AddEnemyPatrolNode(GetOriginalString(asEnemy), gsPathNodeAreaPrefix + StringSub(avsPatrolNodeCodesArray[i], 0, avsPatrolNodeCodesArray[i].length() - 5), RandFloat(GetGlobalVarFloat("MinEnemyIdleTime"), GetGlobalVarFloat("MinEnemyIdleTime") + 2), "");
		}
		else
		{
			AddEnemyPatrolNode(GetOriginalString(asEnemy), gsPathNodeAreaPrefix + avsPatrolNodeCodesArray[i], 0.001f, "");
		}
	}
}

void SetEnemyState(string asEnemy, string asType) //CHANGES THE ENEMY STATE. POSSIBLE ARGUMENTS PATTERNS: poof, silent, fakeoff, fakeon, friendoff, friendon, sanitydrainoff, sanitydrainon, chase, alert, reset, enabled, disabled.
{
	string sEnemyName = GetOriginalString(asEnemy);
	string sActiveEnemyName = GetActiveEnemyName();
	int iLength = asType.length();
	int iUnharmful = GetLocalVarInt(sEnemyName + gsHarmlessEnemyNameSuffix);
	bool bPlaySound = true;
	
	if(StringContains(asType, "silent"))
	{
		bPlaySound = false;
	}
	
	if(StringContains(asType, "poof"))
	{
		if(sActiveEnemyName == sEnemyName)
		{
			SetActiveEnemyName("");
		}
		
		SetEntityActive(sEnemyName, false);
		FadeEnemyToSmoke(sEnemyName, bPlaySound);
	}
	
	if(StringContains(asType, "fakeon"))
	{
		if(sActiveEnemyName == sEnemyName)
		{
			SetActiveEnemyName("");
		}
		
		SetLocalVarInt(sEnemyName + gsHarmlessEnemyNameSuffix, 1);
		SetEnemyIsHallucination(sEnemyName, true);
	}
	else if(StringContains(asType, "fakeoff"))
	{
		SetLocalVarInt(sEnemyName + gsHarmlessEnemyNameSuffix, 0);
		SetEnemyIsHallucination(sEnemyName, false);
	}
	
	if(StringContains(asType, "friendon"))
	{
		if(sActiveEnemyName == sEnemyName)
		{
			SetActiveEnemyName("");
		}
		
		SetLocalVarInt(sEnemyName + gsHarmlessEnemyNameSuffix, 1);
		SetEnemyDisableTriggers(sEnemyName, true);
	}
	else if(StringContains(asType, "friendoff"))
	{
		SetLocalVarInt(sEnemyName + gsHarmlessEnemyNameSuffix, 0);
		SetEnemyDisableTriggers(sEnemyName, false);
	}
	
	if(StringContains(asType, "sanitydrainon"))
	{
		SetEnemySanityDecreaseActive(sEnemyName, true);
	}
	else if(StringContains(asType, "sanitydrainoff"))
	{
		SetEnemySanityDecreaseActive(sEnemyName, false);
	}
	
	if(StringContains(asType, "chase"))
	{
		ShowEnemyPlayerPosition(sEnemyName);
	}
	else if(StringContains(asType, "alert"))
	{
		AlertEnemyOfPlayerPresence(sEnemyName);
	}
	
	if(StringContains(asType, "reset"))
	{
		if(iUnharmful == 0)
		{
			SetActiveEnemyName(sEnemyName);
		}
		
		ClearEnemyPatrolNodes(sEnemyName);
		SetEntityActive(sEnemyName, false);
		SetEntityActive(sEnemyName, true);
	}
	else if(StringContains(asType, "enabled"))
	{
		if(iUnharmful == 0)
		{
			SetActiveEnemyName(sEnemyName);
		}
		
		ClearEnemyPatrolNodes(sEnemyName);
		SetEntityActive(sEnemyName, true);
	}
	else if(StringContains(asType, "disabled"))
	{
		if(sActiveEnemyName == sEnemyName)
		{
			SetActiveEnemyName("");
		}
		
		SetEntityActive(sEnemyName, false);
	}
	
	if(StringContains(asType, gsEnemyPathNodeCodePrefix))
	{
		int iIndex = GetSubStringIndex(asType, gsEnemyPathNodeCodePrefix) + gsEnemyPathNodeCodePrefix.length();
		TeleportEnemyToNode(sEnemyName, gsPathNodeAreaPrefix + StringSub(asType, iIndex, asType.length() - iIndex), true);
	}
}

void SetActiveEnemyDisabled(string asType) //DISABLES THE CURRENT ACTIVE ENEMY. POSSIBLE ARGUMENTS PATTERNS: poof, silent.
{
	string sEnemyName = GetGlobalVarString("ActiveEnemyName");
	
	if(sEnemyName != "")
	{
		if(StringContains(asType, "silent"))
		{
			SetEnemyState(sEnemyName, "poof_silent");
		}
		else if(StringContains(asType, "poof"))
		{
			SetEnemyState(sEnemyName, "poof");
		}
		else
		{
			SetEnemyState(sEnemyName, "disabled");
		}
		
		SetGlobalVarString("ActiveEnemyName", "");
		AddDebugMessage("Active enemy " + sEnemyName + " has been disabled.", false);
	}
	else
	{
		AddDebugMessage("WARNING: Tried to disable the active enemy but there aren't any around!", false);
	}
}

void SetActiveEnemyDisabled() //HELPER FUNCTION.
{
	SetActiveEnemyDisabled("disabled");
}
//END ENEMY STATE FUNCTIONS

//START EXTRAMODES FUNCTIONS
bool GetEasyModeOn() //RETURNS TRUE IF THE EASY MODE IS ENABLED.
{
	if(GetGlobalVarInt("EasyModeOn") == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES AS A STRING. POSSIBLE RETURNS VALUES: "", gsFunnySuffix, gsEasySuffix, gsFunnyEasySuffix, gsToughSuffix, gsFunnyToughSuffix.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 4);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		break;
		case 2:
			return gsEasySuffix;
		break;
		case 3:
			return gsFunnyEasySuffix;
		break;
		case 4:
			return gsToughSuffix;
		break;
		case 5:
			return gsFunnyToughSuffix;
		break;
		default:
			return "";
		break;
	}

	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	if(GetGlobalVarInt("FunnyModeOn") == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

string GetFunnyModeString(string asString) //RETURNS A MODIFIED VERSION OF THE STRING WHEN FUNNY MODE IS ACTIVE, THE MOD IS BASED ON SOME PRE-SET DEFAULT PATTERNS.
{
	if(GetGlobalVarInt("FunnyModeOn") == 1)
	{
		if(StringContains(asString, "grunt"))
		{
			return GetStringWithReplacedSubString(asString, "grunt", "longo");
		}
		else if(StringContains(asString, "brute"))
		{
			return GetStringWithReplacedSubString(asString, "brute", "chiu");
		}
		else if(StringContains(asString, "suitor"))
		{
			return GetStringWithReplacedSubString(asString, "suitor", "meli");
		}
		else if(StringContains(asString, "waterlurker"))
		{
			return GetStringWithReplacedSubString(asString, "waterlurker", "malato");
		}
		else if(StringContains(asString, "water_lurker"))
		{
			return GetStringWithReplacedSubString(asString, "water_lurker", "malato");
		}
		else
		{
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return GetOriginalString(asString) + GetExtraModesSuffix();
}

bool GetToughModeOn() //RETURNS TRUE IF THE TOUGH MODE IS ENABLED.
{
	if(GetGlobalVarInt("ToughModeOn") == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

void SetupExtraModesGoodies() //SET GOODIES ACTIVE BASED ON EXTRAMODES AND ALSO BASED ON GLOBAL GOODIES ARRAYS.
{	
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 4);
	
	if(iChecker == 2 || iChecker == 3)
	{
		if(gviEasyTinderboxesCodesArray[0] != 0 && GetEntityExists(gsTinderboxPrefix + gviEasyTinderboxesCodesArray[0]))
		{
			for(int i=0; i<gviEasyTinderboxesCodesArray.length(); i++)
			{
				SetEntityActive(gsTinderboxPrefix + gviEasyTinderboxesCodesArray[i], true);
			}
		}
		
		if(gviEasyOilPotionsCodesArray[0] != 0 && GetEntityExists(gsOilPotionPrefix + gviEasyOilPotionsCodesArray[0]))
		{
			for(int i=0; i<gviEasyOilPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsOilPotionPrefix + gviEasyOilPotionsCodesArray[i], true);
			}
		}
		
		if(gviEasyHealthPotionsCodesArray[0] != 0 && GetEntityExists(gsHealthPotionPrefix + gviEasyHealthPotionsCodesArray[0]))
		{
			for(int i=0; i<gviEasyHealthPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsHealthPotionPrefix + gviEasyHealthPotionsCodesArray[i], true);
			}
		}
		
		if(gviEasySanityPotionsCodesArray[0] != 0 && GetEntityExists(gsSanityPotionPrefix + gviEasySanityPotionsCodesArray[0]))
		{
			for(int i=0; i<gviEasySanityPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsSanityPotionPrefix + gviEasySanityPotionsCodesArray[i], true);
			}
		}
		
		if(gviEasyLargeOilPotionsCodesArray[0] != 0 && GetEntityExists(gsLargeOilPotionPrefix + gviEasyLargeOilPotionsCodesArray[0]))
		{
			for(int i=0; i<gviEasyLargeOilPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsLargeOilPotionPrefix + gviEasyLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	else if(iChecker <= 1)
	{
		if(gviNormalTinderboxesCodesArray[0] != 0 && GetEntityExists(gsTinderboxPrefix + gviNormalTinderboxesCodesArray[0]))
		{
			for(int i=0; i<gviNormalTinderboxesCodesArray.length(); i++)
			{
				SetEntityActive(gsTinderboxPrefix + gviNormalTinderboxesCodesArray[i], true);
			}
		}
		
		if(gviNormalOilPotionsCodesArray[0] != 0 && GetEntityExists(gsOilPotionPrefix + gviNormalOilPotionsCodesArray[0]))
		{
			for(int i=0; i<gviNormalOilPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsOilPotionPrefix + gviNormalOilPotionsCodesArray[i], true);
			}
		}
		
		if(gviNormalHealthPotionsCodesArray[0] != 0 && GetEntityExists(gsHealthPotionPrefix + gviNormalHealthPotionsCodesArray[0]))
		{
			for(int i=0; i<gviNormalHealthPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsHealthPotionPrefix + gviNormalHealthPotionsCodesArray[i], true);
			}
		}
		
		if(gviNormalSanityPotionsCodesArray[0] != 0 && GetEntityExists(gsSanityPotionPrefix + gviNormalSanityPotionsCodesArray[0]))
		{
			for(int i=0; i<gviNormalSanityPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsSanityPotionPrefix + gviNormalSanityPotionsCodesArray[i], true);
			}
		}
		
		if(gviNormalLargeOilPotionsCodesArray[0] != 0 && GetEntityExists(gsLargeOilPotionPrefix + gviNormalLargeOilPotionsCodesArray[0]))
		{
			for(int i=0; i<gviNormalLargeOilPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsLargeOilPotionPrefix + gviNormalLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	else
	{
		if(gviToughTinderboxesCodesArray[0] != 0 && GetEntityExists(gsTinderboxPrefix + gviToughTinderboxesCodesArray[0]))
		{
			for(int i=0; i<gviToughTinderboxesCodesArray.length(); i++)
			{
				SetEntityActive(gsTinderboxPrefix + gviToughTinderboxesCodesArray[i], true);
			}
		}
		
		if(gviToughOilPotionsCodesArray[0] != 0 && GetEntityExists(gsOilPotionPrefix + gviToughOilPotionsCodesArray[0]))
		{
			for(int i=0; i<gviToughOilPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsOilPotionPrefix + gviToughOilPotionsCodesArray[i], true);
			}
		}
		
		if(gviToughHealthPotionsCodesArray[0] != 0 && GetEntityExists(gsHealthPotionPrefix + gviToughHealthPotionsCodesArray[0]))
		{
			for(int i=0; i<gviToughHealthPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsHealthPotionPrefix + gviToughHealthPotionsCodesArray[i], true);
			}
		}
		
		if(gviToughSanityPotionsCodesArray[0] != 0 && GetEntityExists(gsSanityPotionPrefix + gviToughSanityPotionsCodesArray[0]))
		{
			for(int i=0; i<gviToughSanityPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsSanityPotionPrefix + gviToughSanityPotionsCodesArray[i], true);
			}
		}
		
		if(gviToughLargeOilPotionsCodesArray[0] != 0 && GetEntityExists(gsLargeOilPotionPrefix + gviToughLargeOilPotionsCodesArray[0]))
		{
			for(int i=0; i<gviToughLargeOilPotionsCodesArray.length(); i++)
			{
				SetEntityActive(gsLargeOilPotionPrefix + gviToughLargeOilPotionsCodesArray[i], true);
			}
		}
	}
}

void SetupExtraModes() //PREPARES ALL LEVEL RELATED VARIABLES BASED ON EXTRAMODES, SUCH AS LANTERN OIL SPEED AND GOODIES.
{
	float fDifficultyDirectFactor = 1.0f;
	float fDifficultyInverseFactor = 1.0f;
	
	if(GetGlobalVarInt("EasyModeOn") == 1)
	{
		fDifficultyDirectFactor = fDifficultyDirectFactor * 0.5f;
		fDifficultyInverseFactor = fDifficultyInverseFactor * 1.5;
		SetLanternState("oilspeed_slow");
	}
	else if(GetGlobalVarInt("ToughModeOn") == 1)
	{
		fDifficultyDirectFactor = fDifficultyDirectFactor * 1.5f;
		fDifficultyInverseFactor = fDifficultyInverseFactor * 0.5;
		SetLanternState("oilspeed_quick");
	}
	else
	{
		SetLanternState("oilspeed_on");
	}
	
	SetGlobalVarFloat("DifficultyDirectFactor", fDifficultyDirectFactor);
	SetGlobalVarFloat("DifficultyInverseFactor", fDifficultyInverseFactor);
	SetGlobalVarFloat("MinEnemyIdleTime", 2 * fDifficultyDirectFactor);
	SetupExtraModesGoodies();
}
//END EXTRAMODES FUNCTIONS

//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//--------------------END GLOBAL CODE--------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//

//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//------------------START VARIABLE CODE------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//

//START GLOBAL VARIABLES
//EASY DIFFICULTY GOODIES ARRAYS:
int[] gviEasyTinderboxesCodesArray = {1, 2, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74};
int[] gviEasyOilPotionsCodesArray = {1, 26, 27, 28, 29, 30, 31, 32, 33, 34};
int[] gviEasyHealthPotionsCodesArray = {9};
int[] gviEasySanityPotionsCodesArray = {9};
int[] gviEasyLargeOilPotionsCodesArray = {0};
//NORMAL DIFFICULTY GOODIES ARRAYS:
int[] gviNormalTinderboxesCodesArray = {1, 2, 39, 41, 42, 45, 46, 47, 50, 52, 53, 54, 55, 57, 58, 61, 62, 66, 67, 69};
int[] gviNormalOilPotionsCodesArray = {1, 27, 29, 30, 32, 34};
int[] gviNormalHealthPotionsCodesArray = {9};
int[] gviNormalSanityPotionsCodesArray = {9};
int[] gviNormalLargeOilPotionsCodesArray = {0};
//TOUGH DIFFICULTY GOODIES ARRAYS:
int[] gviToughTinderboxesCodesArray = {39, 43, 47, 48, 52, 59, 71, 72};
int[] gviToughOilPotionsCodesArray = {26, 31, 33};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};
//FULL GAME SAVE VARIABLES:
//GlobalVarString("ActiveEnemyName");
//GlobalVarFloat("DifficultyDirectFactor");
//GlobalVarFloat("DifficultyInverseFactor");
//GlobalVarFloat("MinEnemyIdleTime");
//GlobalVarInt("EasyModeOn");
//GlobalVarInt("FunnyModeOn");
//GlobalVarInt("ToughModeOn");
//END GLOBAL VARIABLES

//START CURRENT MAP RELATED FUNCTIONS
void PlayerInteractWithNote(string asEntity)
{
	if(asEntity == "note_attic")
	{
		SetQuestState("AtticCandles", "add");
		SetEntityInactive("nail_note_attic", 4.0f);
		for(int i=1; i<=12; i++)
		{
			SetEntityActive("Area_candle_" + i);
		}
	}
	else if(asEntity == "wooden_bucket_1")
		SetLightVisible("Light_wooden_bucket_1", false);
}

void PlayerInteractWithKey(string asEntity)
{
	SetDebugMessage("Picked up key " + StringSub(asEntity, 4, asEntity.length() - 4));
	SetLightState("PointLight_" + asEntity, "off");
	if(asEntity == "key_basement")
	{
		SetLocalVarInt("KeyBasement_var", 1);
		SetEntityPlayerCollideCallback("AreaWakeUpGhost", "CollidePlayerAndAreaWakeUpGhost", "enter_remove");
	}
	else if(asEntity == "key_attic")
	{
		SetPlayerSanity("boost_small_effect");
		AddLocalVarInt("LabItems_var", 1);
		SetQuestCompleted("FindLabKeyAndDagger");
		if(GetLocalVarInt("LabItems_var") == 2)
		{
			ScaryLabEvent();
		}
		else
		{
			SetQuestAdded("FindLabDagger");
		}
	}
	else if(asEntity == "key_cell")
	{
		SetPlayerSanity("boost_medsmall");
		PlaySoundAtEntity("help", "15_help.snt", "corpse_male_arm_1", 0.0f, false);
		AddTimer("scare_small", 0.35f, "SetPlayerReact");
		PlayMusic("12_puzzle_epoxy.ogg", "event_medbig_mid");
		ActivateRandomShowEnemyArea("", 0);
	}
	else if(asEntity == "key_dungeon")
	{
		StopPlayerLookAt();
		CompletePuzzle("DungeonKitchenKey");
	}
	else if(asEntity == "key_throneroom")
	{
		SetEntityPlayerCollideCallback("AreaDropBoxOnWater", "CollidePlayerAndAreaDropBoxOnWater", "enter_remove");
		SetDebugMessage("Added a new spicy scary drop barrels event!");
	}
}

void ScaryLabEvent()
{
	SetQuestCompleted("FindLabKeyAndDagger");
	SetQuestCompleted("FindLabDagger");
	SetQuestCompleted("FindLabKey");
	SetActiveEnemyDisabled("poof");
	SetEntityInactive("AreaScaryEvent_5");
	PlayMusic("22_event_trapped.ogg", "event_loop_big_midquick");
	SetEntityPlayerCollideCallback("AreaInsideIronMaiden");
	SetEntitiesCollideCallback("iron_maiden_1_rightDoor", "AreaIronMaidenDoors", "CollideIronMaidenDoorsAndArea");
	SetEntitiesCollideCallback("iron_maiden_1_leftDoor", "AreaIronMaidenDoors", "CollideIronMaidenDoorsAndArea");
	SetEntityInactive("AreaPrison_1_ShowEnemy_4");
	RemoveEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_4");
	SetSwingDoorClosed("iron_maiden_1", true, false);
	SetLocalVarInt("IronMaidenIsClosed_var", 2);
	SetEntityActive("slime_2");
	SetUseItemCallback("ceremony_knife_1", "slime_2", "UseKnifeOnSlime", false);
	SetEntityActive("AreaIronMaidenGhost_2");
	PlaySound("slime_loop.snt", "slime_2", "save");
	AddTimer("HideInsideTheIronMaiden", 2.0f, "SetMessage");
	
	string sDoorName = "swing_door_27";
	SetPlayerLookAt(sDoorName, "big_playerspeedveryslow", 2.0f);
	ResetProp(sDoorName);
	RemoveEntityPlayerInteractCallback(sDoorName);
	SetDoorState(sDoorName, "close_lock_silent");
	SetLocalVarInt(sDoorName + "_var", 1);
	SetEntityInactive("Area_" + sDoorName);
	
	AddTimer(sDoorName + "_bangtimer", 1.0f, "TimerBangOnDoor");
	SetEntityPlayerCollideCallback("AreaLookAtIronMaiden", "CollidePlayerAndAreaHint", "enter_remove");
}

void CollidePlayerAndAreaHint(string asParent, string asChild, int aiState)
{
	if(asChild == "AreaLookAtIronMaiden")
	{
		SetMessage("HideInsideTheIronMaidenAgain");
		SetPlayerLookAt("iron_maiden_1", "", 1.0f);
	}
}

void TimerBangOnDoor(string asTimer)
{
	string sName = GetStringWithoutSubString(asTimer, "_bangtimer");
	
	if(sName == "swing_door_27")
	{
		if(RandInt(0, 1) == 0)
			PlaySound("ghost_idle.snt", sName);
		else
			PlaySound("ghost_alert.snt", sName);
		
		PlayParticleSystem("ps_hit_wood.ps", sName);
		PlayGuiSound("lurker_hit_wood.snt", 1.0f);
		SetDoorState(sName, "force-x_max");
		SetScreenEffect("shake_small_veryquick");
		
		AddTimer(asTimer, RandFloat(2.0f, 4.0f), "TimerBangOnDoor");
	}
	else
	{
		if(RandInt(0, 1) == 0)
			PlaySound(GetFunnyModeString("grunt/notice_long.snt"), sName);
		
		AddTimer("ps_hit_wood.ps", sName, 0.2f, "PlayParticleSystem");
		AddTimer("ps_dust_impact_vert.ps", sName, 0.2f, "PlayParticleSystem");
		AddTimer("ps_ghost_release.ps", sName, 0.2f, "PlayParticleSystem");
		AddTimer("lurker_hit_wood.snt", 0.2f, "PlaySound");
		AddTimer("break_wood.snt", 0.2f, "PlaySound");
		SetScreenEffect("shake_small_veryquick");
	}
}

//////////////////////////////
//BEGIN BANG AND PAIN SOUNDS//
void CollideBangDoor(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("bangs", "05_event_door_bang", "swing_door_46", 1, false);
	PlaySoundAtEntity("whineaa", "scare_whine_loop", "Player", 0.5f, false);
	
	FadeSepiaColorTo(0.75f, 0.3f);
	FadeImageTrailTo(1.5, 0.5);
	
	AddTimer("bang1", 0.6f, "TimerBangDoor");
	AddTimer("bang2", 1.6f, "TimerBangDoor");
	AddTimer("bang3", 2.5f, "TimerBangDoor");
	AddTimer("bang4", 3.0f, "TimerBangDoor");
}
void TimerBangDoor(string &in asTimer)
{	
	if(asTimer == "bang1"){ 
		AddPropImpulse("swing_door_46", 0, 0, 5, "World");
		PlaySoundAtEntity("scare", "react_scare", "Player", 0.25f, false);
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "swing_door_46", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
		GiveSanityDamage(10, true);
	}
	else if(asTimer == "bang2") { 
		AddPropImpulse("swing_door_46", 0, 0, 5, "World");
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "swing_door_46", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
	}
	else if(asTimer == "bang3") { 
		AddPropImpulse("swing_door_46", 0, 0, 5, "World");
		PlaySoundAtEntity("scare", "react_breath", "Player", 0.5f, false);
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "swing_door_46", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
	}
	else {
		FadeSepiaColorTo(0, 0.3f);
		FadeImageTrailTo(0, 0.1);
		StopSound("whineaa", 4);
	}
}
//END BANG AND PAIN SOUNDS//
////////////////////////////

void CollidePlayerAndAreaWakeUpGhost(string asParent, string asChild, int aiState)
{
	SetPlayerLookAt("chem_scale_1", "medbig_activeoff", 1.5f);
	PlaySound("03_in_a_bottle.snt", "vase02_2");
	PlayGuiSound("player_react_guardian1.snt", 0.9f);
	PlayGuiSound("21_scream10.ogg", 1.0f);
	SetEntityInactive("vase02_2");
	SetEntityActive("vase02_ghost");
	AddTimer("vase02_ghost", 1.25f, "TimerGhostWakeUp");
	PlayMusic("01_event_dust.ogg", "event_midslow");
	//SetLocalVarString("GhostPatrolRoom_var", "Library"); //OLD GHOST
	//SetupGhostPatrol("enabled"); //OLD GHOST
}

void TimerGhostWakeUp(string asTimer)
{
	SetPropHealth(asTimer, 0);
	SetPlayerSanity(69.0f);
	SetPlayerReact("pant_breathslow_small");
	SetMessage("GhostDiscovered");
	PlayGuiSound("player_react_guardian1.snt", 0.7f);
	
	string sEnemyName = "ghost_music" + 4 + GetExtraModesSuffix();
	SetEnemyState(sEnemyName, "fakeoff");
	SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "209");
	SetEntityState(sEnemyName, "visibleoff");
	SetEnemyPatrolNode(sEnemyName, 117);
	SetEnemyPatrolNode(sEnemyName, 120, 0);
	SetEnemyPatrolNode(sEnemyName, 138);
	SetEnemyPatrolNode(sEnemyName, 120, 0);
	SetEnemyPatrolNode(sEnemyName, 114, 0);
	SetEnemyPatrolNode(sEnemyName, 70);
	if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
}

void PlayerInteractWithJackHead(string asEntity)
{
	RemoveEntityPlayerInteractCallback(asEntity);
	AddTimer(asEntity, "PlayerInteractWithJackHead", "false", 1.0f, "SetEntityPlayerInteractCallback");
	
	if(GetGlobalVarInt("JackIsDead_var") == 0)
	{
		GiveSanityDamage(1.0f, false);
		
		if(GetPlayerSanity() <= 30)
		{
			SetMessage("TouchJackHeadDefaultLow");
		}
		else if(GetPlayerSanity() <= 60)
		{
			SetMessage("TouchJackHeadDefaultMed");
		}
		else
		{
			SetMessage("TouchJackHeadDefaultHigh");
		}
	}
	else if(GetGlobalVarInt("JackIsDead_var") == 1)
	{
		GiveSanityDamage(0.5f, false);
		SetMessage("TouchJackHeadBlood");
	}
	else
	{
		GiveSanityDamage(0.25f, false);
		SetMessage("TouchJackHeadCopper");
	}
}

void CollidePlayerAndAreaInsideIronMaiden(string asParent, string asChild, int aiState)
{
	SetLocalVarInt("PlayerInsideIronMaiden_var", aiState);
	SetDebugMessage("Player And Iron Maiden = " + GetLocalVarInt("PlayerInsideIronMaiden_var"));
}

void CollideIronMaidenDoorsAndArea(string asParent, string asChild, int aiState)
{
	if(aiState == 1)
	{
		AddLocalVarInt("IronMaidenIsClosed_var", 1);
	}
	else
	{
		AddLocalVarInt("IronMaidenIsClosed_var", -1);
	}
	SetDebugMessage("Iron Maiden Doors = " + GetLocalVarInt("IronMaidenIsClosed_var"));
}

void PlayerLookAtIronMaiden(string asEntity, int aiState)
{
	if(GetLocalVarInt("PlayerInsideIronMaiden_var") == 1 && GetLocalVarInt("IronMaidenIsClosed_var") == 2)
	{
		if(GetLocalVarInt("MaidenEvent") == 1) return;
		SetLocalVarInt("MaidenEvent", 1);
		SetDebugMessage("Starting Iron Maiden Event!");
		RemoveTimer("swing_door_27_bangtimer");
		SetActiveEnemyDisabled();
		if(GetPlayerSanity() >= 75)
			SetPlayerSanity(60.0f);
		else if(GetPlayerSanity() < 30)
			SetPlayerSanity(30.0f);
		
		RemoveEntityPlayerLookAtCallback(asEntity);
		RemoveEntityPlayerCollideCallback("AreaInsideIronMaiden");
		RemoveEntityPlayerCollideCallback("AreaLookAtIronMaiden");
		SetSwingDoorClosed("iron_maiden_1", true, true);
		SetDoorState("iron_maiden_1", "lock_forcez");
		StopMusic("event_bolt");
		SetPlayerState("speedveryslow");
		GivePlayerDamage(25.0f, "Slash", false, false);
		PlayGuiSound("attack_claw_hit02.ogg", 0.8f);
		AddTimer("12_event_blood.ogg", "event", 0.25f, "PlayMusic");
		AddTimer("pant_breathsloweffect_verysmall", 0.5f, "SetPlayerReact");
		
		AddTimer("swing_door_27", "explode", 4.0f, "SetDoorState");
		AddTimer("pant_breathslow_verysmall", 4.65f, "SetPlayerReact");
		AddTimer("sanity_flick.snt", 6.0f, "PlaySound");
		AddTimer("ghost_walk.snt", 6.0f, "PlaySound");
		AddTimer("scare_walk_ghost.snt", 6.0f, "PlaySound");
		AddTimer("sanity_flick.snt", 8.0f, "PlaySound");
		AddTimer("ghost_walk.snt", 8.0f, "PlaySound");
		AddTimer("scare_walk_ghost.snt", 8.0f, "PlaySound");
		AddTimer("sanity_flick.snt", 9.0f, "PlaySound");
		AddTimer("ghost_walk.snt", 9.0f, "PlaySound");
		AddTimer("scare_walk_ghost.snt", 9.0f, "PlaySound");
		AddTimer("sanity_flick.snt", 10.0f, "PlaySound");
		AddTimer("ghost_walk.snt", 10.0f, "PlaySound");
		AddTimer("scare_walk_ghost.snt", 10.0f, "PlaySound");
		
		AddTimer("ghost_attack.snt", 11.2f, "PlaySound");
		AddTimer("break_glass_large.snt", 11.45f, "PlaySound");
		AddTimer("damage_verysmall_brute", 11.45f, "SetPlayerHealth");
		AddTimer("activeoff", 11.5f, "SetPlayerState");
		AddTimer("fall_big_midslow", 11.5f, "SetPlayerRollTo");
		AddTimer("remove", 11.5f, "SetLanternState");
		AddTimer("fadeout_quick", 11.5f, "SetScreenEffect");
		AddTimer("min_quick", 11.5f, "SetGlobalSoundSpeed");
		AddTimer("min_quick", 11.5f, "SetGlobalSoundVolume");
		AddTimer("event_slow", 13.0f, "StopMusic");
		AddTimer("15_drag_body.snt", 13.0f, "PlaySound");
		
		AddTimer(gsPlayerStartAreaPrefix + 13, 20.5f, "TeleportPlayer");
		
		AddTimer("15_event_elevator.ogg", "event_mid", 21.0f, "PlayMusic");
		AddTimer("fadein_mid", 22.0f, "SetScreenEffect");
		AddTimer("max_mid", 22.0f, "SetGlobalSoundSpeed");
		AddTimer("max_mid", 22.0f, "SetGlobalSoundVolume");
		AddTimer("blur_verysmall_veryquick", 22.1f, "SetScreenEffect");
		AddTimer("react_pant.snt", 22.5f, "PlaySound");
		AddTimer("breathslow_verysmall", 25.0f, "SetPlayerReact");
		AddTimer("fall_big_quick", 28.0f, "StopPlayerRollTo");
		AddTimer("activeon", 28.0f, "SetPlayerState");
		AddTimer("speedslow", 28.1f, "SetPlayerState");
		AddTimer("jumpon", 30.0f, "SetPlayerState");
		AddTimer("WakeUpCell", 30.0f, "SetMessage");
		AddTimer("boost_verysmall", 32.0f, "SetPlayerHealth");
		AddTimer("boost_small", 33.5f, "SetPlayerSanity");
		AddTimer("allnormal_sloth", 34.5f, "SetScreenEffect");
		AddTimer("speednormal", 38.5f, "SetPlayerState");
	}
	else
		return;
}

void ManagePlayerSanity(string asType) //SETUP EVENTS BASED ON PLAYER SANITY
{
	float fSanity = GetPlayerSanity();
	int iChapter = GetLocalVarInt("OrbPiecesCollected_var");
	
	if(fSanity <= 15)
	{
		SetLocalVarFloat("InsaneSoundsCooldown_var", 120.0f);
	}
	else if(fSanity <= 30)
	{
		SetLocalVarFloat("InsaneSoundsCooldown_var", 150.0f);
		
		if(GetLocalVarInt("InsaneObjects_var") < iChapter)
		{
			AddLocalVarInt("InsaneObjects_var", 1);
		}
	}
	else if(fSanity <= 50)
	{
		SetLocalVarFloat("InsaneSoundsCooldown_var", 165.0f);
	}
	else if(fSanity < 75)
	{
		SetLocalVarFloat("InsaneSoundsCooldown_var", 180.0f);
	}
	else
	{
		SetLocalVarFloat("InsaneSoundsCooldown_var", 0.0f);
	}
	
	if(asType == "insaneobjects")
	{
		if(iChapter == 0)
		{
			SetDebugMessage("Chapter0 Insanity Objects Setup...");
		}
		else if(iChapter == 1)
		{
			/*SetEntitiesActive("statue_insane_", 2.0f, 1, 30);
			SetEntitiesActive("stuffed_dog_", 2.0f, 1, 8);
			SetEntitiesActive("grunt_body_part3_", 2.0f, 1, 5);
			SetEntitiesActive("armour_insane_", 2.0f, 1, 25);*/
			
			for(int i=1; i<=30; i++) SetEntityPlayerLookAtCallback("statue_insane_" + i, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int i=1; i<=30; i++) SetEntityVisible("statue_insane_" + i, false);
			for(int j=1; j<=8; j++)	SetEntityPlayerLookAtCallback("stuffed_dog_" + j, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int j=1; j<=8; j++)	SetEntityVisible("stuffed_dog_" + j, false);
			for(int j=1; j<=8; j++)	SetEntityPlayerCollideCallback("stuffed_dog_" + j, "CollidePlayerAndInsaneObject", "enter_remove");
			for(int k=1; k<=5; k++)	SetEntityPlayerLookAtCallback("grunt_body_part3_" + k, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int k=1; k<=5; k++)	SetEntityVisible("grunt_body_part3_" + k, false);
			for(int k=1; k<=5; k++)	SetEntityPlayerCollideCallback("grunt_body_part3_" + k, "CollidePlayerAndInsaneObject", "enter_remove");
			for(int z=1; z<=25; z++)	SetEntityPlayerCollideCallback("armour_insane_" + z, "CollidePlayerAndInsaneObject", "enter_remove");
			//if(fSanity > 30)	for(int z=1; z<=25; z++)	SetEntityVisible("armour_insane_" + z, false);
			
			SetDebugMessage("Chapter1 Insanity Objects Setup...");
		}
		else if(iChapter == 2)
		{
			/*SetEntitiesActive("human_skull_", 2.0f, 1, 15);
			SetEntitiesActive("corpse_male_", 2.0f, 1, 16);
			SetEntitiesActive("cross_jesus_", 2.0f, 1, 5);*/
			
			for(int i=1; i<=15; i++) SetEntityPlayerLookAtCallback("human_skull_" + i, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int i=1; i<=15; i++) SetEntityVisible("human_skull_" + i, false);
			for(int j=1; j<=16; j++)	SetEntityPlayerLookAtCallback("corpse_male_" + j, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int j=1; j<=16; j++)	SetEntityVisible("corpse_male_" + j, false);
			for(int j=1; j<=16; j++)	SetEntityPlayerCollideCallback("corpse_male_" + j, "CollidePlayerAndInsaneObject", "enter_remove");
			for(int k=1; k<=5; k++)	SetEntityPlayerLookAtCallback("cross_jesus_" + k, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int k=1; k<=5; k++)	SetEntityVisible("cross_jesus_" + k, false);
			for(int k=1; k<=5; k++)	SetEntityPlayerCollideCallback("cross_jesus_" + k, "CollidePlayerAndInsaneObject", "enter_remove");
			
			SetDebugMessage("Chapter2 Insanity Objects Setup...");
		}
		else if(iChapter == 3)
		{
			//SetEntitiesActive("corpse_pile1_object_", 2.0f, 1, 5);
			
			for(int i=1; i<=5; i++) SetEntityPlayerLookAtCallback("corpse_pile1_object_" + i, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int i=1; i<=5; i++) SetEntityVisible("corpse_pile1_object_" + i, false);
			for(int i=1; i<=5; i++) SetEntityPlayerCollideCallback("corpse_pile1_object_" + i, "CollidePlayerAndInsaneObject", "enter_remove");
			
			SetDebugMessage("Chapter3 Insanity Objects Setup...");
		}
		else if(iChapter == 4)
		{
			//SetEntitiesActive("rat_corpse_pile_", 2.0f, 1, 20);
			//SetEntitiesActive("hanging_prisoner_", 2.0f, 1, 54);
			
			for(int i=1; i<=20; i++) SetEntityPlayerLookAtCallback("rat_corpse_pile_" + i, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int i=1; i<=20; i++) SetEntityVisible("rat_corpse_pile_" + i, false);
			for(int i=1; i<=20; i++) SetEntityPlayerCollideCallback("rat_corpse_pile_" + i, "CollidePlayerAndInsaneObject", "enter_remove");
			for(int j=1; j<=54; j++)	SetEntityPlayerLookAtCallback("hanging_prisoner_" + j, "PlayerLookAtInsaneObject", false);
			//if(fSanity > 30)	for(int j=1; j<=54; j++)	SetEntityVisible("hanging_prisoner_" + j, false);
			
			SetDebugMessage("Chapter4 Insanity Objects Setup...");
		}
	}
	else if(asType == "insanesounds")
	{
		if(iChapter <= 1) //Too soon for random insane sounds! Chill...
			return;
		
		if(GetLocalVarFloat("InsaneSoundsCooldown_var") != 0)
		{
			int iRand = RandInt(0, iChapter + 4);
			
			switch(iRand)
			{
				case 1:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("scare_steps_big" + RandInt(1, 5) + ".ogg", 0.9f);
					else
						PlayGuiSound("scare_wood_creak_walk" + RandInt(1, 4) + ".ogg", 0.8f);
				break;
				case 2:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("scare_animal_squeal" + RandInt(1, 5) + ".ogg", 0.9f);
					else
						PlayGuiSound("scare_pigeon" + RandInt(1, 3) + ".ogg", 0.8f);
				break;
				case 3:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("15_man_whimp" + RandInt(1, 5) + ".ogg", 0.7f);
					else
						PlayGuiSound("15_man02_whimp" + RandInt(1, 5) + ".ogg", 0.7f);
				break;
				case 4:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("12_girl_cry_0" + RandInt(1, 7) + ".ogg", 0.7f);
					else
						PlayGuiSound("scare_male_terrified" + RandInt(1, 5) + ".ogg", 0.7f);
				break;
				case 5:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("21_scream" + RandInt(1, 12) + ".ogg", 0.5f);
					else
						PlayGuiSound("23_strap" + RandInt(1, 3) + ".ogg", 0.7f);
				break;
				case 6:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("15_bang_fall.ogg", 0.5f);
					else
						PlayGuiSound("15_the_big_scream" + RandInt(1, 3) + ".ogg", 0.7f);
				break;
				case 7:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("27_wind" + RandInt(1, 5) + ".ogg", 0.5f);
					else
						PlayGuiSound("21_meat0" + RandInt(1, 5) + ".ogg", 0.7f);
				break;
				case 8:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("01_tiny" + RandInt(1, 4) + ".ogg", 0.5f);
					else
						PlayGuiSound("04_hole_squeal.ogg", 0.7f);
				break;
				case 9:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("18_water_drip" + RandInt(1, 6) + ".ogg", 0.5f);
					else
						PlayGuiSound("19_breath" + RandInt(1, 4) + ".ogg", 0.7f);
				break;
				case 10:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("ptest/enemy/suitor/amb_idle_scratch.snt", 1.2f);
					else
						PlayGuiSound("ptest/enemy/suitor/amb_idle_whimp.snt", 1.2f);
				break;
				default:
					if(RandInt(0, 1) == 1)
						PlayGuiSound("guardian_idle" + RandInt(1, 6) + ".ogg", 0.6f);
					else
						PlayGuiSound("sanity_flick" + RandInt(1, 5) + ".ogg", 0.9f);
				break;
			}
			
			AddTimer("insanesounds", GetLocalVarFloat("InsaneSoundsCooldown_var"), "ManagePlayerSanity");
			GiveSanityDamage(0.2f, false);
			SetDebugMessage("Playing insane sound...");
			
			if(fSanity < 50)
			{
				if(GetLocalVarInt("InsanePhonograph_1_var") == 0)
				{
					SetLocalVarInt("InsanePhonograph_1_var", 1);
					
					if(iRand >= 5)
						iRand = 4;
					else if(iRand == 0)
						iRand = 1;
					
					SetEntityPlayerInteractCallback("phonograph_1", "PlayerInteractWithRandomInsaneObject", true);
					
					PlaySound("01_phonograph" + iRand, "phonograph_1", "save");
					
					SetDebugMessage("Started random insane event: InsanePhonograph_1");
					return;
				}
				
				if(GetLocalVarInt("InsanePiano_var") == 0)
				{
					SetLocalVarInt("InsanePiano_var", 1);
					
					if(iRand >= 5)
						iRand = 4;
					else if(iRand == 0)
						iRand = 1;
					
					SetEntityPlayerCollideCallback("AreaInsanePiano", "CollidePlayerAndAreaRandomInsaneObject", "enter_remove");
					
					SetLeverStuckState("piano_1", 1, false);
					AddBodyImpulse("piano_1_BodyLid", 0, 100, 0, "world");
					PlaySound("01_piano" + iRand, "piano_1", "save");
					
					SetDebugMessage("Started random insane event: InsanePiano");
					return;
				}
				
				if(GetLocalVarInt("InsaneDoor_1_var") == 0)
				{
					SetLocalVarInt("InsaneDoor_1_var", 1);
					
					PlaySound("01_door_knocking.snt", "swing_door_8");
					AddTimer("swing_door_8", 12.0f, "TimerInsaneKnockSound");
					SetEntityPlayerInteractCallback("swing_door_8", "PlayerInteractWithRandomInsaneObject", true);
					
					SetDebugMessage("Started random insane event: InsaneDoor_1");
					return;
				}
				
				if(GetLocalVarInt("InsaneClock_1_var") == 0)
				{
					SetLocalVarInt("InsaneClock_1_var", 1);
					
					StopSound("AreaClockGrandfather_1_snt");
					PlaySound("01_clock_grandfather_insane.snt", "AreaClockGrandfather_1", "save_midquick");
					SetEntityPlayerInteractCallback("AreaClockGrandfather_1", "PlayerInteractWithRandomInsaneObject", true);
					
					SetDebugMessage("Started random insane event: InsaneClock_1");
					return;
				}
				
				if(GetLocalVarInt("InsanePhonograph_2_var") == 0)
				{
					SetLocalVarInt("InsanePhonograph_2_var", 1);
					
					if(iRand >= 5)
						iRand = 4;
					else if(iRand == 0)
						iRand = 1;
					
					SetEntityPlayerInteractCallback("phonograph_2", "PlayerInteractWithRandomInsaneObject", true);
					
					PlaySound("01_phonograph" + iRand, "phonograph_2", "save");
					
					SetDebugMessage("Started random insane event: InsanePhonograph_2");
					return;
				}
				
				if(GetLocalVarInt("InsaneClock_2_var") == 0)
				{
					SetLocalVarInt("InsaneClock_2_var", 1);
					
					StopSound("AreaClockGrandfather_2_snt");
					PlaySound("01_clock_grandfather_insane.snt", "AreaClockGrandfather_2", "save_midquick");
					SetEntityPlayerInteractCallback("AreaClockGrandfather_2", "PlayerInteractWithRandomInsaneObject", true);
					
					SetDebugMessage("Started random insane event: InsaneClock_2");
					return;
				}
				
				if(GetLocalVarInt("InsaneDoor_2_var") == 0)
				{
					SetLocalVarInt("InsaneDoor_2_var", 1);
					
					PlaySound("01_door_knocking.snt", "swing_door_35");
					AddTimer("swing_door_35", 12.0f, "TimerInsaneKnockSound");
					SetEntityPlayerInteractCallback("swing_door_35", "PlayerInteractWithRandomInsaneObject", true);
					
					SetDebugMessage("Started random insane event: InsaneDoor_2");
					return;
				}
			}
		}
		else
		{
			AddTimer("insanesounds", 90.0f, "ManagePlayerSanity");
			SetDebugMessage("No insane sound this time...");
		}
	}
}

void TimerInsaneKnockSound(string asTimer)
{
	PlaySound("01_door_knocking.snt", asTimer);
	AddTimer(asTimer, 12.0f, "TimerInsaneKnockSound");
}

void PlayerInteractWithOrbPiece(string asEntity)
{
	AddLocalVarInt("OrbPiecesCollected_var", 1);
	SetLightState("PointLight_" + asEntity, "off");
	SetLightState("SpotLight_" + asEntity, "off");
	SetPlayerSanity("boost_verysmall");
	StopSound(asEntity + gsSoundNameSuffix, "quick");
	
	if(GetLocalVarInt("OrbPiecesCollected_var") == 1)
	{
		ManagePlayerSanity("insaneobjects");
		SetInsanitySetEnabled("Ch01", true);
		SetLocalVarFloat("GlobalFogStart_var", 4.0f);
		SetLocalVarFloat("GlobalFogEnd_var", 40.0f);
		SetLocalVarFloat("GlobalFogExp_var", 1.0f);
		SetLocalVarInt("GlobalFogOn_var", 1);
		SetFogState("on_skybox_culling", GetLocalVarFloat("GlobalFogStart_var"), GetLocalVarFloat("GlobalFogEnd_var"), GetLocalVarFloat("GlobalFogExp_var"));
	}
	else if(GetLocalVarInt("OrbPiecesCollected_var") == 2)
	{
		ManagePlayerSanity("insaneobjects");
		ManagePlayerSanity("insanesounds"); //SETUP RANDOM INSANE SOUNDS
		SetInsanitySetEnabled("Ch02", true);
		SetLocalVarFloat("GlobalFogStart_var", 4.0f);
		SetLocalVarFloat("GlobalFogEnd_var", 40.0f);
		SetLocalVarFloat("GlobalFogExp_var", 0.75f);
		SetLocalVarInt("GlobalFogOn_var", 1);
		SetFogState("on_skybox_culling", GetLocalVarFloat("GlobalFogStart_var"), GetLocalVarFloat("GlobalFogEnd_var"), GetLocalVarFloat("GlobalFogExp_var"));
	}
	else if(GetLocalVarInt("OrbPiecesCollected_var") == 3)
	{
		AddGlobalVarInt("GhostChaseMusic_var", 1);
		ManagePlayerSanity("insaneobjects");
		SetInsanitySetEnabled("Ch03", true);
		SetLocalVarFloat("GlobalFogStart_var", 3.0f);
		SetLocalVarFloat("GlobalFogEnd_var", 30.0f);
		SetLocalVarFloat("GlobalFogExp_var", 0.75f);
		SetLocalVarInt("GlobalFogOn_var", 1);
		SetFogState("on_skybox_culling", GetLocalVarFloat("GlobalFogStart_var"), GetLocalVarFloat("GlobalFogEnd_var"), GetLocalVarFloat("GlobalFogExp_var"));
	}
	else if(GetLocalVarInt("OrbPiecesCollected_var") == 4)
	{
		ManagePlayerSanity("insaneobjects");
		SetLocalVarFloat("GlobalFogStart_var", 0.0f);
		SetLocalVarFloat("GlobalFogEnd_var", 20.0f);
		SetLocalVarFloat("GlobalFogExp_var", 0.5f);
		SetLocalVarInt("GlobalFogOn_var", 1);
		SetFogState("on_skybox_culling", GetLocalVarFloat("GlobalFogStart_var"), GetLocalVarFloat("GlobalFogEnd_var"), GetLocalVarFloat("GlobalFogExp_var"));
	}
	else if(GetLocalVarInt("OrbPiecesCollected_var") == 5)
	{
		AddGlobalVarInt("GhostChaseMusic_var", 1);
		ActivateRandomShowEnemyArea("", 0);
		SetLocalVarFloat("GlobalFogStart_var", 0.0f);
		SetLocalVarFloat("GlobalFogEnd_var", 20.0f);
		SetLocalVarFloat("GlobalFogExp_var", 0.25f);
		SetLocalVarInt("GlobalFogOn_var", 1);
		SetFogState("on_skybox_culling", GetLocalVarFloat("GlobalFogStart_var"), GetLocalVarFloat("GlobalFogEnd_var"), GetLocalVarFloat("GlobalFogExp_var"));
		if(GetPlayerLampOil() <= 25)
			SetPlayerLampOil(50.0f);
	}
	else
	{
		SetQuestCompleted("Collect6Orb");
		SetQuestAdded("Combine6Orb");
		SetPlayerSanity("boost_max_effect");
		PlayMusic("27_puzzle_passage.ogg", "event");
		SetEntityPlayerCollideCallback("AreaBruteFromOffice", "CollidePlayerAndAreaForceEnemySpawn", "enter_remove");
		if(GetPlayerLampOil() <= 25)
			SetPlayerLampOil(30.0f);
		
		ActivateRandomShowEnemyArea("AreaEntranceHall", 5);
		ActivateRandomShowEnemyArea("AreaDiningHall", 5);
		ActivateRandomShowEnemyArea("AreaLibrary_2", 3);
		ActivateRandomShowEnemyArea("AreaCells_1", 6);
		ActivateRandomShowEnemyArea("AreaPrison_1", 5);
		ActivateRandomShowEnemyArea("AreaPrison_3", 4);
	}
	
	if(asEntity == "orbpiece_blue_1")
	{
		ActivateRandomShowEnemyArea("AreaCells_1", 6);
		
		PlayMusic("02_puzzle.ogg", "event_verybig_veryquick");
		SetPlayerReact("sigh_verysmall");
		SetScreenEffect("fadeout_midslow");
		SetGlobalSoundSpeed("min_midslow");
		SetGlobalSoundVolume("min_midslow");
		SetPlayerState("speedslow");
		AddTimer("speedveryslow", 5.0f, "SetPlayerState");
		AddTimer("activeoff", 6.5f, "SetPlayerState");
		AddTimer("fadein_bolt", 7.0f, "SetScreenEffect");
		AddTimer("max_bolt", 7.0f, "SetGlobalSoundSpeed");
		AddTimer("max_bolt", 7.0f, "SetGlobalSoundVolume");
		AddTimer("speednormal", 7.0f, "SetPlayerState");
		AddTimer(gsPlayerStartAreaPrefix + 10, 7.0f, "TeleportPlayer");
		AddTimer("01_teleport.snt", 7.0f, "PlaySound");
		AddTimer("pant_verysmall", 7.1f, "SetPlayerReact");
		AddTimer("activeon", 8.0f, "SetPlayerState");
		AddTimer("YouGotMe", 10.0f, "WomanTalk");
		AddTimer("15_player_burn.snt", 10.6f, "PlaySound");
		AddTimer("AreaAngelEyes", "big_playerspeedveryslow", "2.0f", 10.6f, "SetPlayerLookAt");
		SetPlayerReact("scare_breath_effect_small", 11.0f);
		
		for(int i=32; i<=37; i++)
		{
			AddTimer("angel_statue_" + i, 8.2f, "SetEntityActive");
		}
	}
	else if(asEntity == "orbpiece_magenta_1")
	{
		ActivateRandomShowEnemyArea("AreaPrison_3", 4);
	}
	else if(asEntity == "orbpiece_green_1")
	{
		ActivateRandomShowEnemyArea("AreaEntranceHall", 5);
	}
}

void CollidePlayerAndAreaForceEnemySpawn(string asParent, string asChild, int aiState)
{
	if(asChild == "AreaBruteFromOffice")
	{
		SetLocalVarInt("LastBruteEvent_var", 1);
		SetPlayerReact("scare_sigh_effect");
		PlayGuiSound("ghost_humming.snt", 1.5f);
		PlayGuiSound("ghost_idle.snt", 1.0f);
		PlayMusic("04_event_hole.ogg", "event_midquick");
		CollidePlayerAndAreaRandScaryEvent("Player", "AreaFadeOutEvent", 1);
		SetActiveEnemyDisabled("poofsilent");
		string sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
		SetEnemyState(sEnemyName, "fakeoff");
		SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "259");
		SetEnemyState(sEnemyName, "alert");
		SetEntityInvisible(sEnemyName);
		SetEnemyPatrolNode(sEnemyName, 259, 2);
		SetEnemyPatrolNode(sEnemyName, 253, 2);
		SetEnemyPatrolNode(sEnemyName, 309, 1);
		SetEnemyPatrolNode(sEnemyName, 241, 1);
		SetEnemyPatrolNode(sEnemyName, 259, 1);
		SetEnemyPatrolNode(sEnemyName, 253, 1);
		SetEnemyPatrolNode(sEnemyName, 241, 0);
		SetEnemyPatrolNode(sEnemyName, 71, 2);
		SetEnemyPatrolNode(sEnemyName, 78, 1);
		if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
	}
}

void WomanTalk(string asEntry)
{
	SetMessage("Woman", asEntry, 0);
	
	if(asEntry == "YouGotMe")
	{
		SetEntityAndEffectsActive("AreaAngelEyes", "ps_torch_fire_calm.ps", "22_fire.snt", "save_midquick_torchfire");
		SetUseItemCallback("fresh_meat_1", "AreaAngelFire", "UseMeatOnFire", true);
		SetUseItemCallback("wooden_bucket_filled_1", "AreaAngelFire", "UseFilledBucketOnBonfire", false);
	}
}

void PlayerInteractWithSlime(string asEntity)
{
	PlayGuiSound("impact_organic_low.snt", 1.5f);
	if(GetGlobalVarInt("StatuesAchievement") == 0)
	{
		SetPlayerHealth("damage_verysmall_shake");
		SetScreenEffect("shake_verysmall_bolt");
		PlayGuiSound("slime_attack_normal_hit.snt", 0.7f);
		PlayParticleSystem("ps_slime_attack_normal.ps", asEntity);
	}
	if(asEntity == "slime_wheel")
	{
		SetMessage("TouchedSlimeWheel");
	}
	else if(asEntity == "slime_1")
	{
		SetMessage("TouchedSlime");
	}
}

void PlayerInteractWithWheel(string asEntity)
{
	SetLightState(gsLightPrefix + asEntity, "off");
	PlayWheelCutscene();
	AddTimer(asEntity, 1.05f, "TimerWheelSound");
}

void PlayerInteractWithCrowbar(string asEntity)
{
	SetMessage("PickUpCrowbar");
	SetLightState("PointLight_" + asEntity, "off");
	ActivateRandomShowEnemyArea("AreaCells_1", 6);
}

void PlayerInteractWithString(string asEntity)
{
	AddLocalVarInt("BathroomExplored_var", 1);
	if(GetLocalVarInt("BathroomExplored_var") == 2)
	{
		SetEntityPlayerInteractCallback("swing_door_16", "PlayerInteractWithDoor", true);
		ResetProp("swing_door_16");
	}
	SetHint("StringTutorial");
	SetLightState("PointLight_" + asEntity, "off");
	
	if(GetActiveEnemyIsNear(8, 18) == false)
	{
		SetActiveEnemyDisabled("off");
		SetEntityPlayerLookAtCallback("AreaCellEvent");
		ResetProp("swing_door_29");
	}
	else
		SetEnemyState(GetActiveEnemyName(), "alert");
}

void PlayerLookAtAreaCellEvent(string asEntity, int aiState)
{
	if(aiState == -1)
	{
		RemoveEntityPlayerLookAtCallback(asEntity);
		SetEntityInactive(asEntity);
		SetPlayerLookAt("swing_door_29", "verybig", 1.0f);
		SetPlayerReact("pant_breathslow_effect_small");
		PlayMusic("03_event_books.ogg", "event_max_bolt");
		SetActiveEnemyDisabled("off");
		string sEnemyName = "brute" + GetExtraModesSuffix();
		SetEnemyState(sEnemyName, "fakeon");
		SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "433");
		SetEnemyPatrolNode(sEnemyName, 438);
		SetActiveEnemyName("");
		AddTimer(sEnemyName, 2.0f, "ShowEnemyPlayerPosition");
		AddTimer(sEnemyName, 7.0f, "ShowEnemyPlayerPosition");
		AddTimer(sEnemyName, "fakeoff", 11.0f, "SetEnemyState");
		AddTimer(sEnemyName, "poof", 11.1f, "SetEnemyState");
		if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
	}
}

void PlayerInteractWithTar(string asEntity)
{
	SetQuestState("Bull", "complete");
	//PlayMusic("15_puzzle_hole.ogg", "event_verybig_veryquick");
	AddPlayerSanity(20.0f);
	AddTimer("BrazenBullScream01", 1.0f, "TimedBrazenBullScream");
	ActivateRandomShowEnemyArea("AreaPrison_1", 5);
}

void TimedBrazenBullScream(string &in asTimer)
{
	float fNextScreamTime = 0.5f;
	int lIdx = GetLocalVarInt("BrazenBullScreamCount");
	
	string sScreamSound = "";
	bool bAddNewTimer = true;
	
	if(lIdx==0)
	{
		sScreamSound = "24_bang.snt";
		
		SetLeverStuckState("brazen_bull_1", -1, true);//Slam the hatch shut
		AddBodyImpulse("brazen_bull_1_hatch",0,-1,-2, "World");

		PlaySoundAtEntity("brazen_bull_1", "24_hatch_imp.snt", "brazen_bull_1", 0.0f, false);
		
		SetPlayerReact("scare_breath_small", 0.5f);
		
		SetEntityActive("AreaInsanityEffect_3", true);
		
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.1f, 0.5f);
		
		GiveSanityDamage(20.0f, true);
	}
	else if(lIdx==1)
	{
		sScreamSound = "24_burn.snt";
		
		AddTimer("24_burn2", 1.0f, "TimerBurnMore");
		AddTimer("24_burn3", 2.0f, "TimerBurnMore");
		AddTimer("stopradial_trigger_enemy", 5.0f, "TimerBurnMore");
		fNextScreamTime = 2.5f;
	}
	else if(lIdx==2)
	{
		sScreamSound = "24_bull.snt";

		bAddNewTimer = false;	
	}
	
	//Add index var
	AddLocalVarInt("BrazenBullScreamCount",1);
	
	//Play sound
	if(sScreamSound != "")
		PlaySoundAtEntity("BrazenScream", sScreamSound, "brazen_bull_1", 0, false);
	
	AddDebugMessage("Brazen bull scream "+lIdx+" screamsound: '"+sScreamSound+"'", false);
	
	//Run event again
	if(bAddNewTimer)
		AddTimer("BrazenBullScream01", fNextScreamTime, "TimedBrazenBullScream");
}

void TimerBurnMore(string &in asTimer)
{
	if(asTimer == "stopradial_trigger_enemy"){
		FadeRadialBlurTo(0.0f, 0.1f);}
	
	PlaySoundAtEntity(asTimer, asTimer, "brazen_bull_1", 0, false);
}

void PlayerInteractWithNeedle(string asEntity)
{
	SetHint("NeedleTutorial");
	SetLightState("PointLight_" + asEntity, "off");
}

void PlayerInteractWithKnife(string asEntity)
{
	SetHint("DaggerTutorial");
	SetLightState("PointLight_" + asEntity, "off");
	SetPlayerSanity("boost_small_effect");
	AddLocalVarInt("LabItems_var", 1);
	SetQuestCompleted("FindLabKeyAndDagger");
	if(GetLocalVarInt("LabItems_var") == 2)
	{
		ScaryLabEvent();
	}
	else
	{
		SetQuestAdded("FindLabKey");
	}
}

void PlayerInteractWithHammer(string asEntity)
{
	AddLocalVarInt("HammerAndChipperTaken", 1);
	if(asEntity == "hammer")
	{
		SetDebugMessage("Picked up Hammer!");
	}
	else
	{
		SetDebugMessage("Picked up Chipper!");
	}
	SetPlayerSanity("boost_verysmall");
	if(GetLocalVarInt("CurrentPlayerRoomMaxSpawns_var") > 0)
	{
		int iAreaCode = RandInt(1, GetLocalVarInt("CurrentPlayerRoomMaxSpawns_var"));
		
		SetEntityActive(GetLocalVarString("CurrentPlayerRoom_var") + "_ShowEnemy_" + iAreaCode);
		SetDebugMessage("Activated random Area: " + GetLocalVarString("CurrentPlayerRoom_var") + "_ShowEnemy_" + iAreaCode);
	}
	
	if(GetLocalVarInt("HammerAndChipperTaken") >= 2)
	{
		CombineHammerAndChipper("hammer", "chipper");
	}
}

void ActivateRandomShowEnemyArea(string asRoomArea, int aiMaxSpawns)
{
	string sRoomArea = GetLocalVarString("CurrentPlayerRoom_var");
	int iMaxSpawns = GetLocalVarInt("CurrentPlayerRoomMaxSpawns_var");
	
	if(asRoomArea.length() > 1)
		sRoomArea = asRoomArea;
	
	if(aiMaxSpawns > 1)
		iMaxSpawns = aiMaxSpawns;
	
	if(iMaxSpawns > 1)
	{
		int iAreaCode = RandInt(1, iMaxSpawns);
		SetEntityActive(sRoomArea + "_ShowEnemy_" + iAreaCode);
		SetDebugMessage("Activated random Area: " + sRoomArea + "_ShowEnemy_" + iAreaCode);
	}
	else
	{
		SetDebugMessage("ERROR: Could not activate a random show enemy area with arguments " + sRoomArea + " and " + iMaxSpawns);
		return;
	}
}

void PlayerInteractWithShelf(string asEntity)
{
	SetMessage("AttachedShelf");
	SetQuestState("AttachedShelf", "add");
	PlayGuiSound("impact_wood_heavy_low.snt", 0.7f);
	CreateParticleSystemAtEntity(asEntity + "_ps", "ps_hit_wood.ps", asEntity, false);
}

void PlayerInteractWithRocks(string asEntity)
{
	SetMessage("Rocks");
	SetQuestState("Rocks", "add");
	PlayGuiSound("impact_rock_low3.ogg", 1.0f);
	PlayGuiSound("15_rock_break.snt", 0.7f);
	CreateParticleSystemAtEntity(asEntity + "_ps", "ps_dust_impact.ps", asEntity, false);
}

void PlayerInteractWithBull(string asEntity)
{
	SetMessage("Bull");
	SetQuestState("Bull", "add");
	PlayGuiSound("15_player_burn.snt", 1.0f);
	SetPlayerHealth("damage_verysmall_blood_shake");
}

void PlayerInteractWithStuckObject(string asEntity)
{
	SetMessage("StuckKey");
	if(asEntity == "AreaStuckKey")
	{
		SetQuestState("StuckKey", "add");
		PlayGuiSound("impact_rock_low.snt", 4.0f);
	}
	else
	{
		SetQuestState("StuckStatuette", "add");
		PlayGuiSound("impact_metal_low.snt", 2.0f);
	}
}

void PlayerInteractWithAreaDoor(string asEntity)
{
	string sDoorName = StringSub(asEntity, 5, asEntity.length() - 5);
	SetPlayerLookAt(sDoorName, "verysmall", 1.0f);
	SetMessage("Hints", "DoorUnlocked", 0);
	RemoveEntityPlayerInteractCallback(sDoorName);
	SetDoorState(sDoorName, "unlock");
	SetLocalVarInt(sDoorName + "_var", 1);
	if(sDoorName == "swing_door_30")
	{
		SetDoorState("swing_door_26", "unlock_silent");
		SetLocalVarInt("swing_door_26_var", 1);
		RemoveEntityPlayerInteractCallback("swing_door_26");
		SetEntityActive("AreaScaryEvent_12");
		//SetEntityActive("AreaScaryEvent_13");
		
		if(GetActiveEnemyIsNear(8, 18) == false)
		{
			ResetProp(asEntity);
			SetPlayerReact("scare_breath_small", 1.0f);
			PlaySound(GetFunnyModeString("grunt/notice_long.snt"));
			SetActiveEnemyDisabled();
			string sEnemyName = "grunt" + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "406");
			SetEnemyState(sEnemyName, "alert");
			SetEnemyPatrolNode(sEnemyName, 391, 2);
			SetEnemyPatrolNode(sEnemyName, 194, 1);
			SetEnemyPatrolNode(sEnemyName, 9, 2);
			SetEnemyPatrolNode(sEnemyName, 78, 1);
			
			if(GetToughModeOn())
				AddTimer(sEnemyName, "chase", 5.75f, "SetEnemyState");
			else if(GetEasyModeOn() == false)
				AddTimer(sEnemyName, "chase", 7.0f, "SetEnemyState");
			
			if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
		}
		else
			SetEnemyState(GetActiveEnemyName(), "alert");
	}
	SetPlayerSanity("boost_small_effect");
}

void PlayerInteractWithTortureTable(string asEntity)
{
	SetPlayerSanity("damage_min_lethal");
	float fSanity = GetPlayerSanity();
	if(fSanity >= 75)
		SetMessage("TouchSuitorMachineHigh");
	else if(fSanity >= 40)
		SetMessage("TouchSuitorMachineMed");
	else
		SetMessage("TouchSuitorMachineLow");
}

void PlayerInteractWithPainting(string asEntity)
{
	string sPaintingName = StringSub(asEntity, 0, asEntity.length() - 5);
	if(asEntity == "Area_painting_room")
	{
		SetMessage("AttachedPainting");
		SetQuestState("AttachedPainting", "add");
		PlayGuiSound("switch_min_max02.snt", 0.7f);
		return;
	}
	else if(asEntity == "painting_creepy_6_coll")
	{
		SetEntityInactive(asEntity);
		SetEntityInactive(asEntity + "_1", 2.0f);
		SetEntityInactive(asEntity + "_2", 2.0f);
		SetEntityActive(sPaintingName);
		SetEntityActive(sPaintingName + "_1");
		SetEntityActive(sPaintingName + "_2");
	}
	else if(asEntity == "painting_creepy_1_coll")
	{
		//SPIDER ATTACKS THE PLAYER!
		AddTimer("damage_min_blood_shake", 0.15f, "SetPlayerHealth");
		PlayParticleSystem("blood.ps", "spider_1");
		PlaySound("spider_attack.snt");
		
		SetEntityInactive(asEntity, 2.0f);
		SetEntityActive(sPaintingName);
	}
	else if(asEntity == "painting_creepy_1")
	{
		SetPlayerState("activeoff_inventory");
		PlayGuiSound("switch_min_max02.snt", 0.8f);
		SetMessage("PaintingCreepy_1");
		SetEntityPlayerInteractOff(asEntity);
		AddTimer(asEntity, 1.0f, "SetEntityPlayerInteractOn");
		AddTimer("activeon_inventory", 1.0f, "SetPlayerState");
		return;
	}
	else if(asEntity == "painting_creepy_2")
	{
		SetPlayerState("activeoff_inventory");
		PlayGuiSound("switch_min_max02.snt", 0.8f);
		SetMessage("PaintingCreepy_2");
		SetEntityPlayerInteractOff(asEntity);
		AddTimer(asEntity, 1.0f, "SetEntityPlayerInteractOn");
		AddTimer("activeon_inventory", 1.0f, "SetPlayerState");
		return;
	}
	else if(asEntity == "painting_creepy_3")
	{
		SetPlayerState("activeoff_inventory");
		PlayGuiSound("switch_min_max02.snt", 0.8f);
		SetMessage("PaintingCreepy_3");
		SetEntityPlayerInteractOff(asEntity);
		AddTimer(asEntity, 1.0f, "SetEntityPlayerInteractOn");
		AddTimer("activeon_inventory", 1.0f, "SetPlayerState");
		return;
	}
	else if(asEntity == "painting_creepy_4")
	{
		SetPlayerState("activeoff_inventory");
		PlayGuiSound("switch_min_max02.snt", 0.8f);
		SetMessage("PaintingCreepy_4");
		SetEntityPlayerInteractOff(asEntity);
		AddTimer(asEntity, 1.0f, "SetEntityPlayerInteractOn");
		AddTimer("activeon_inventory", 1.0f, "SetPlayerState");
		return;
	}
	else if(asEntity == "painting_creepy_5")
	{
		SetPlayerState("activeoff_inventory");
		PlayGuiSound("switch_min_max02.snt", 0.8f);
		SetMessage("PaintingCreepy_5");
		SetEntityPlayerInteractOff(asEntity);
		AddTimer(asEntity, 1.0f, "SetEntityPlayerInteractOn");
		AddTimer("activeon_inventory", 1.0f, "SetPlayerState");
		return;
	}
	else if(asEntity == "painting_creepy_6")
	{
		SetPlayerState("activeoff_inventory");
		PlayGuiSound("switch_min_max02.snt", 0.8f);
		SetMessage("PaintingCreepy_6");
		SetEntityPlayerInteractOff(asEntity);
		AddTimer(asEntity, 1.0f, "SetEntityPlayerInteractOn");
		AddTimer("activeon_inventory", 1.0f, "SetPlayerState");
		return;
	}
	else
	{
		SetEntityInactive(asEntity, 2.0f);
		SetEntityActive(sPaintingName);
	}
	
	SetEntityActive(sPaintingName + "_curtain_open");
	SetEntityInactive(sPaintingName + "_curtain_closed");
	SetPlayerLookAt(asEntity, "verysmall", 1.0f);
	
	GiveSanityDamage(0.1f, true);
	PlayGuiSound("03_in_a_bottle.snt", 0.8f);
	PlayGuiSound("quest_added.snt", 0.6f);
	
	AddLocalVarInt("PaintingsCollected_var", 1);
	SetMessage("PaintingsCollected_" + GetLocalVarInt("PaintingsCollected_var"));
	if(GetLocalVarInt("PaintingsCollected_var") == 6)
		SetAchievementUnlocked("FastSeekerAchievement");
}

void PlayerInteractWithCoins(string asEntity)
{
	if(StringContains(asEntity, "AreaBagsOfMoney"))
	{
		SetMessage("CoinsCollected_" + GetLocalVarInt("CoinsCollected_var"));
		PlayGuiSound("impact_generic_soft_low.snt", 1.0f);
		return;
	}
	SetHint("CoinsTutorial");
	AddLocalVarInt("CoinsCollected_var", 1);
	int iAmount = GetLocalVarInt("CoinsCollected_var");
	if(iAmount == 1)
	{
		SetEntityActive("AreaBagsOfMoney");
	}
	else if(iAmount >= 2)
	{
		SetQuestCompleted("CoinsCollected_" + (iAmount - 1));
	}
	SetQuestAdded("CoinsCollected_" + iAmount);
	SetDebugMessage("Bag of coins collected! Total number of bags collected: " + iAmount);
	SetEntityActive("coins_small_static_" + iAmount);
	SetEntityPlayerInteractOff("coins_small_static_" + iAmount);
}

void CollidePlayerAndAreaDropBoxOnWater(string asParent, string asChild, int aiState)
{
	SetEntityActive("barrel01_18");
	SetEntityActive("barrel01_19");
	SetPlayerReact("breath_verysmall", 0.8f);
	SetPlayerReact("breath_verysmall", 3.0f);
}

void PlayerInteractWithLockedChest(string asEntity)
{
	SetMessage("Ch01Level07", "LevelDoorLocked");
}

void PlayerInteractWithChest(string asEntity)
{
	//How to max luckpoints: +2 TreasureChest, +1 EasyMode, +6 SixBagsOfCoinsCollected, +1 RandomPoint
	//Goodies chances on treasure chests: Tinderbox 40% chance, Oil 30% chance, PotionHealth 10% chance, PotionSanity 10% chance, BigOil 10% chance
	//Goodies chances on regular chests: Tinderbox 50% chance, Oil 30% chance, PotionHealth 10% chance, PotionSanity 10% chance, BigOil 0% chance
	int iLuck = RandInt(0, GetLocalVarInt("CoinsCollected_var") + 1);
	int iChestCode = StringToInt(StringSub(asEntity, asEntity.length() - 1, 1));
	string[] vContainedItemsArray = {"itemname0", "itemname1", "itemname2", "itemname3", "itemname4", "itemname5", "itemname6", "itemname7", "itemname8", "itemname9"};
	
	if(GetEasyModeOn() == true)
	{
		iLuck = iLuck + 1;
	}
	else if(GetToughModeOn() == true && iLuck > 0)
	{
		iLuck = iLuck - 1;
	}
	
	if(StringContains(asEntity, "treasure_chest"))
	{
		iLuck = iLuck + 2;
		if(iChestCode == 1)
		{
			vContainedItemsArray[0] = "tinderbox_3";
			vContainedItemsArray[1] = "tinderbox_4";
			vContainedItemsArray[2] = "tinderbox_5";
			vContainedItemsArray[3] = "tinderbox_6";
			vContainedItemsArray[4] = "potion_oil_2";
			vContainedItemsArray[5] = "potion_oil_3";
			vContainedItemsArray[6] = "potion_oil_4";
			vContainedItemsArray[7] = "potion_health_1";
			vContainedItemsArray[8] = "potion_sanity_1";
			vContainedItemsArray[9] = "potion_oil_large_1";
		}
		else if(iChestCode == 2)
		{
			vContainedItemsArray[0] = "tinderbox_7";
			vContainedItemsArray[1] = "tinderbox_8";
			vContainedItemsArray[2] = "tinderbox_9";
			vContainedItemsArray[3] = "tinderbox_10";
			vContainedItemsArray[4] = "potion_oil_5";
			vContainedItemsArray[5] = "potion_oil_6";
			vContainedItemsArray[6] = "potion_oil_7";
			vContainedItemsArray[7] = "potion_health_2";
			vContainedItemsArray[8] = "potion_sanity_2";
			vContainedItemsArray[9] = "potion_oil_large_2";
		}
		else if(iChestCode == 3)
		{
			vContainedItemsArray[0] = "tinderbox_11";
			vContainedItemsArray[1] = "tinderbox_12";
			vContainedItemsArray[2] = "tinderbox_13";
			vContainedItemsArray[3] = "tinderbox_14";
			vContainedItemsArray[4] = "potion_oil_8";
			vContainedItemsArray[5] = "potion_oil_9";
			vContainedItemsArray[6] = "potion_oil_10";
			vContainedItemsArray[7] = "potion_health_3";
			vContainedItemsArray[8] = "potion_sanity_3";
			vContainedItemsArray[9] = "potion_oil_large_3";
		}
		else if(iChestCode == 4)
		{
			vContainedItemsArray[0] = "tinderbox_15";
			vContainedItemsArray[1] = "tinderbox_16";
			vContainedItemsArray[2] = "tinderbox_17";
			vContainedItemsArray[3] = "tinderbox_18";
			vContainedItemsArray[4] = "potion_oil_11";
			vContainedItemsArray[5] = "potion_oil_12";
			vContainedItemsArray[6] = "potion_oil_13";
			vContainedItemsArray[7] = "potion_health_4";
			vContainedItemsArray[8] = "potion_sanity_4";
			vContainedItemsArray[9] = "potion_oil_large_4";
		}
	}
	else
	{
		if(iChestCode == 1)
		{
			vContainedItemsArray[0] = "tinderbox_19";
			vContainedItemsArray[1] = "tinderbox_20";
			vContainedItemsArray[2] = "tinderbox_21";
			vContainedItemsArray[3] = "tinderbox_22";
			vContainedItemsArray[4] = "potion_oil_14";
			vContainedItemsArray[5] = "potion_oil_15";
			vContainedItemsArray[6] = "potion_oil_16";
			vContainedItemsArray[7] = "potion_health_5";
			vContainedItemsArray[8] = "potion_sanity_5";
			vContainedItemsArray[9] = "tinderbox_23";
		}
		else if(iChestCode == 2)
		{
			vContainedItemsArray[0] = "tinderbox_24";
			vContainedItemsArray[1] = "tinderbox_25";
			vContainedItemsArray[2] = "tinderbox_26";
			vContainedItemsArray[3] = "tinderbox_27";
			vContainedItemsArray[4] = "potion_oil_17";
			vContainedItemsArray[5] = "potion_oil_18";
			vContainedItemsArray[6] = "potion_oil_19";
			vContainedItemsArray[7] = "potion_health_6";
			vContainedItemsArray[8] = "potion_sanity_6";
			vContainedItemsArray[9] = "tinderbox_28";
		}
		else if(iChestCode == 3)
		{
			vContainedItemsArray[0] = "tinderbox_29";
			vContainedItemsArray[1] = "tinderbox_30";
			vContainedItemsArray[2] = "tinderbox_31";
			vContainedItemsArray[3] = "tinderbox_32";
			vContainedItemsArray[4] = "potion_oil_20";
			vContainedItemsArray[5] = "potion_oil_21";
			vContainedItemsArray[6] = "potion_oil_22";
			vContainedItemsArray[7] = "potion_health_7";
			vContainedItemsArray[8] = "potion_sanity_7";
			vContainedItemsArray[9] = "tinderbox_33";
		}
		else if(iChestCode == 4)
		{
			vContainedItemsArray[0] = "tinderbox_34";
			vContainedItemsArray[1] = "tinderbox_35";
			vContainedItemsArray[2] = "tinderbox_36";
			vContainedItemsArray[3] = "tinderbox_37";
			vContainedItemsArray[4] = "potion_oil_23";
			vContainedItemsArray[5] = "potion_oil_24";
			vContainedItemsArray[6] = "potion_oil_25";
			vContainedItemsArray[7] = "potion_health_8";
			vContainedItemsArray[8] = "potion_sanity_8";
			vContainedItemsArray[9] = "tinderbox_38";
		}
	}
	
	if(iLuck > vContainedItemsArray.length())
	{
		SetDebugMessage("You are too lucky! Lucky went out of bounds!");
		iLuck = vContainedItemsArray.length();
	}
	else if(iLuck < 0)
	{
		iLuck = 0;
	}
	
	SetDebugMessage("Your current luck points: " + iLuck + ". It means that you'll find " + iLuck + " items inside the treasure chest");
	int iRand = 0;
	for(int i=1; i<=iLuck; i++)
	{
		do
		{
			iRand = RandInt(0, vContainedItemsArray.length() - 1);
		}
		while(GetLocalVarInt(vContainedItemsArray[iRand] + "_var") == 1);
		
		SetLocalVarInt(vContainedItemsArray[iRand] + "_var", 1);
		SetEntityActive(vContainedItemsArray[iRand], 1.0f);
	}
}

void CollidePlayerAndAreaDiscoverMachine(string asParent, string asChild, int aiState)
{
	AddTimer("scare_sigh_min", 0.9f, "SetPlayerReact");
	SetPlayerLookAt("swing_door_25", "small_playerspeedslow", 1.5f);
	AddPropForce("swing_door_25", 800.0f, 0.0f, 800.0f, "World");
	PlaySound("01_door.snt", "swing_door_25");
	SetScreenEffect("shake_verysmall_veryquick");
}

void PlayerInteractWithStatuette(string asEntity)
{
	SetLightState("PointLight_" + asEntity, "off_flicker");
	StopPlayerLookAt();
	if(asEntity == "statue_room_1")
	{
		SetDebugMessage("Picked up Golden Statuette!");
		
		if(GetActiveEnemyIsNear(4, 8) == false)
		{
			SetPlayerReact("scare_breath_small");
			PlayMusic("01_event_eerie_stinger03.ogg", "event_max_bolt");
			PlayGuiSound("21_scream11.ogg", 1.25f);
			SetEntityInactive("statue_noHead_1", 0.25f);
			SetEntityActive("statue_Head_1", 0.25f);
			SetPlayerLookAt("statue_Head_1", "playerspeedveryslow_max", 0.5f);
			SetScreenEffect("zoomin_bolt_med");
			AddTimer("zoomnormal_midquick", 0.5f, "SetScreenEffect");
			AddTimer("drop", 0.5f, "SetPlayerState");
		}
	}
	else if(asEntity == "statue_room_2")
	{
		SetEntityPlayerCollideCallback("AreaActivateWaterLurker", "CollidePlayerAndAreaActivateWaterLurker", "enter_remove");
		
		SetDebugMessage("Picked up Silver Statuette!");
	}
	else if(asEntity == "cross_small_jesus")
	{
		SetDebugMessage("Picked up Cross Small Jesus!");
	}
}

void CollidePlayerAndAreaActivateWaterLurker(string asParent, string asChild, int aiState)
{
	SetActiveEnemyDisabled("off");
	SetPlayerReact("scare_breath_small", 0.5f);
	SetEntityActive(GetStringWithExtraModesSuffix("waterlurker"));
}

void PlayerInteractWithAreaCandle(string asEntity)
{
	string sCandleCode = "";
	AddLocalVarInt("CandlesInteractions_var", 1);
	if(GetLocalVarInt("CandlesInteractions_var") == 1)
	{
		SetMessage("CandlesDiscovered");
	}
	else if(GetLocalVarInt("CandlesInteractions_var")%10 == 0)
	{
		SetDebugMessage("Too many attempts! Candles reset!");
		PlayGuiSound("01_teleport.snt", 1.0f);
		//PlayGuiSound("00_laugh.snt", 1.0f);
		TeleportPlayer(gsPlayerStartAreaPrefix + 11);
		SetLanternState("off");
		SetPlayerReact("scare_small");
		for(int i=1; i<=12; i++)
		{
			SetLocalVarInt("Candle_" + i + "_var", 1);
		}
		int[] vAllCandlesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
		TurnCandles(vAllCandlesArray, false);
		return;
	}
	
	if(asEntity.length() == 14)
		sCandleCode = StringSub(asEntity, asEntity.length() - 2, 2);
	else
		sCandleCode = StringSub(asEntity, asEntity.length() - 1, 1);
	
	int iCandleCode = StringToInt(sCandleCode);
	int[] vCloseCandlesArray = {0, 0, 0};
	
	if(GetLocalVarInt("CandlePuzzleType_var") == 0)
	{
		vCloseCandlesArray[0] = iCandleCode - 2;
		vCloseCandlesArray[1] = iCandleCode;
		vCloseCandlesArray[2] = iCandleCode + 2;
	}
	else if(GetLocalVarInt("CandlePuzzleType_var") == 1)
	{
		if(iCandleCode == 1 || iCandleCode == 4 || iCandleCode == 5)
		{
			vCloseCandlesArray[0] = 1;
			vCloseCandlesArray[1] = 4;
			vCloseCandlesArray[2] = 5;
		}
		else if(iCandleCode == 2 || iCandleCode == 3 || iCandleCode == 6)
		{
			vCloseCandlesArray[0] = 2;
			vCloseCandlesArray[1] = 3;
			vCloseCandlesArray[2] = 6;
		}
		else if(iCandleCode == 8 || iCandleCode == 9 || iCandleCode == 12)
		{
			vCloseCandlesArray[0] = 8;
			vCloseCandlesArray[1] = 9;
			vCloseCandlesArray[2] = 12;
		}
		else if(iCandleCode == 7 || iCandleCode == 10 || iCandleCode == 11)
		{
			vCloseCandlesArray[0] = 7;
			vCloseCandlesArray[1] = 10;
			vCloseCandlesArray[2] = 11;
		}
	}
	else if(GetLocalVarInt("CandlePuzzleType_var") == 2)
	{
		if((iCandleCode%2) == 0)
		{
			vCloseCandlesArray[0] = iCandleCode - 1;
			vCloseCandlesArray[1] = iCandleCode + 1;
			vCloseCandlesArray[2] = iCandleCode + 2;
		}
		else
		{
			vCloseCandlesArray[0] = iCandleCode - 2;
			vCloseCandlesArray[1] = iCandleCode - 1;
			vCloseCandlesArray[2] = iCandleCode + 1;
		}
	}
	
	TurnCandles(vCloseCandlesArray, true);
	SetEntityInactive(asEntity);
	AddTimer(asEntity, 1.0f, "SetEntityActive");
}

void PlayerInteractWithAreaFire(string asEntity)
{
	PlayGuiSound("15_player_burn.snt", 0.8f);
	GivePlayerDamage(10.0f, "BloodSplat", false, false);
	
	if(asEntity == "AreaFire")
	{
		SetMessage("DiningHallFire");
		SetQuestState("DiningHallFire", "add");
	}
	else
	{
		SetMessage("CopperFire");
		SetQuestAdded("CopperFire");
		SetEntityInactive(asEntity);
	}
}

void PlayerInteractWithButton(string asEntity)
{
	SetEntityActive(asEntity, false);
	SetEntityActive(asEntity + "_1", true);
	if(GetQuestState("DiningHallButtons") == 0)
	{
		SetMessage("DiningHallButtons");
		SetQuestState("DiningHallButtons", "add");
		SetEntityPlayerInteractOn("Goblet1v");
		SetEntityPlayerInteractOn("Goblet2v");
		SetEntityPlayerInteractOn("Goblet3v");
		SetEntityPlayerInteractOn("Goblet4v");
		SetEntityPlayerInteractOn("Goblet5v");
		SetEntityPlayerInteractOn("Goblet6v");
		SetEntityPlayerInteractOn("Goblet7v");
		SetLightVisible("Goblet1Light", true);
		SetLightVisible("Goblet2Light", true);
		SetLightVisible("Goblet3Light", true);
		SetLightVisible("Goblet4Light", true);
		SetLightVisible("Goblet5Light", true);
		SetLightVisible("Goblet6Light", true);
		SetLightVisible("Goblet7Light", true);
		SetEntityActive("Goblet7v");
		SetEntityActive("AreaDiscoverGoblets");
	}
	SetEntityInteractionDisabled("Button1", true);
	SetEntityInteractionDisabled("Button2", true);
	SetEntityInteractionDisabled("Button3", true);
	SetEntityInteractionDisabled("Button4", true);
	SetEntityInteractionDisabled("Button5", true);
	SetEntityInteractionDisabled("Button6", true);
	PlayGuiSound("joint_break_metal.snt", 0.8f);
	AddLocalVarInt(asEntity + "Var", 1);
	if(GetLocalVarInt(asEntity + "Var") == 1) FadeLightTo(asEntity + "Light", 0.0f, 1.0f, 1.0f, 0.1f, -1, 0.0f); //Cyan
	else if(GetLocalVarInt(asEntity + "Var") == 2) FadeLightTo(asEntity + "Light", 1.0f, 0.0f, 1.0f, 0.1f, -1, 0.0f); //Magenta
	else if(GetLocalVarInt(asEntity + "Var") == 3) FadeLightTo(asEntity + "Light", 1.0f, 0.0f, 0.0f, 0.1f, -1, 0.0f); //Red
	else if(GetLocalVarInt(asEntity + "Var") == 4) FadeLightTo(asEntity + "Light", 0.0f, 1.0f, 0.0f, 0.1f, -1, 0.0f); //Green
	else if(GetLocalVarInt(asEntity + "Var") == 5) FadeLightTo(asEntity + "Light", 0.0f, 0.0f, 1.0f, 0.1f, -1, 0.0f); //Blue
	else if(GetLocalVarInt(asEntity + "Var") == 6) FadeLightTo(asEntity + "Light", 1.0f, 1.0f, 0.0f, 0.1f, -1, 0.0f); //Yellow
	else if(GetLocalVarInt(asEntity + "Var") == 7)
	{
		FadeLightTo(asEntity + "Light", 0.0f, 1.0f, 1.0f, 0.1f, -1, 0.0f);
		SetLocalVarInt(asEntity + "Var", 1);
	}

	AddTimer(asEntity, 0.55f, "TimerCheckButtons");
}

void PlayerInteractWithPiano(string asEntity)
{
	if(GetActiveEnemyIsAround())
		SetEnemyState(GetActiveEnemyName(), "alert");
	
	GiveSanityDamage(0.5f, false);
	SetEntityActive(asEntity, false);
	AddTimer(asEntity, 2.0f, "SetEntityActive");
	if(asEntity == "AreaPianoKey1") PlayGuiSound("01_piano_key1.ogg", 0.8f);
	else if(asEntity == "AreaPianoKey2") PlayGuiSound("01_piano_key2.ogg", 0.8f);
	else if(asEntity == "AreaPianoKey3") PlayGuiSound("01_piano_key3.ogg", 0.8f);
	else if(asEntity == "AreaPianoKey4") PlayGuiSound("01_piano_key4.ogg", 0.8f);
	else if(asEntity == "AreaPianoKey5") PlayGuiSound("01_piano_key5.ogg", 0.8f);
	else if(asEntity == "AreaPianoKey6") PlayGuiSound("01_piano_key6.ogg", 0.8f);
	
	int iCode = StringToInt(GetStringWithoutSubString(asEntity, "AreaPianoKey"));
	int iSequence = GetLocalVarInt("PianoMelody_var");
	
	if(iSequence == 0)
	{
		if(iCode == 6)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 1)
	{
		if(iCode == 2)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 2)
	{
		if(iCode == 5)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 3)
	{
		if(iCode == 6)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 4)
	{
		if(iCode == 2)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 5)
	{
		if(iCode == 3)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 6)
	{
		if(iCode == 4)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 7)
	{
		if(iCode == 3)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 8)
	{
		if(iCode == 2)
		{
			AddLocalVarInt("PianoMelody_var", 1);
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
	else if(iSequence == 9)
	{
		if(iCode == 1)
		{
			//AddLocalVarInt("PianoMelody_var", 1);
			PlaySound("gameplay_tick_long_dist.snt", "work_desk_door_worn_2");
			AddTimer("work_desk_door_worn_2" + gsSoundNameSuffix, 2.5f, "StopSound");
			AddTimer("unlock_door.snt", 2.5f, "PlaySound");
			SetPlayerLookAt("work_desk_door_worn_2", "activeoff", 2.5f);
			SetPlayerSanity("boost_big");
			AddTimer("boost_max_effect", 2.5f, "SetPlayerSanity");
			SetDoorState("work_desk_door_worn_2", "unlock_silent");
			SetEntityPlayerInteractOn("fresh_meat_1");
			PlayMusic("01_puzzle_piano.ogg", "event");
			
			SetEntitiesInactive("AreaPianoKey", 1, 6);
			RemoveTimer("AreaPianoKey1");
			RemoveTimer("AreaPianoKey2");
			RemoveTimer("AreaPianoKey3");
			RemoveTimer("AreaPianoKey4");
			RemoveTimer("AreaPianoKey5");
			RemoveTimer("AreaPianoKey6");
		}
		else
		{
			SetLocalVarInt("PianoMelody_var", 0);
			return;
		}
	}
}

void StopGobletAnimation(string asGoblet)
{
	if(StringContains(asGoblet, "7v"))
	{
		SetLocalVarInt("GobletAnimationVar", 0);
		StopSound(asGoblet + gsSoundNameSuffix, "veryquick");
		RemoveTimer(asGoblet);
		RemoveTimer(asGoblet + 1);
		RemoveTimer(asGoblet + 2);
		RemoveTimer(asGoblet + 3);
		RemoveTimer(asGoblet + 4);
		RemoveTimer(asGoblet + 5);
		RemoveTimer(asGoblet + 6);
		RemoveTimer(asGoblet + 7);
		RemoveTimer(asGoblet + 8);
		TimerResetGoblet("nointeract");
		SetEntitiesInactive(asGoblet, 1, 8);
		SetEntityActive(asGoblet);
		AddTimer("Goblet*", 1.25f, "SetEntityPlayerInteractOn");
	}
}

void PlayerInteractWithGoblet(string asEntity)
{
	if(StringContains(asEntity, "Goblet7v") && asEntity.length() > 8)
	{
		StopGobletAnimation("Goblet7v");
		return;
	}
	
	SetPlayerLookAt(asEntity, "big_playerspeedveryslow", 0);
	SetPlayerState("jumpoff");
	StopMusic(0.28f, 1);
	StopMusic(0.29f, 0);
	SetEntityInteractionDisabled("Goblet*", true);
	if(asEntity == "Goblet1v") PlayGuiSound("01_goblet6.ogg", 0.8f);
	else if(asEntity == "Goblet2v") PlayGuiSound("01_goblet5.ogg", 0.8f);
	else if(asEntity == "Goblet3v") PlayGuiSound("01_goblet2.ogg", 0.8f);
	else if(asEntity == "Goblet4v") PlayGuiSound("01_goblet3.ogg", 0.8f);
	else if(asEntity == "Goblet5v") PlayGuiSound("01_goblet4.ogg", 0.8f);
	else if(asEntity == "Goblet6v") PlayGuiSound("01_goblet1.ogg", 0.8f);
	else if(asEntity == "Goblet7v")
	{
		PlaySound("01_goblet_full.snt", asEntity, "save");
		AddLocalVarInt("GobletsInteractions_var", 1);
		SetQuestAdded("DiningHallGoblets1");
		AddTimer("Goblet7v1", 0.5f, "SetEntityPlayerInteractOn");
		AddTimer("Goblet7v2", 0.5f, "SetEntityPlayerInteractOn");
		AddTimer("Goblet7v3", 0.5f, "SetEntityPlayerInteractOn");
		AddTimer("Goblet7v4", 0.5f, "SetEntityPlayerInteractOn");
		AddTimer("Goblet7v5", 0.5f, "SetEntityPlayerInteractOn");
		AddTimer("Goblet7v6", 0.5f, "SetEntityPlayerInteractOn");
		AddTimer("Goblet7v7", 0.5f, "SetEntityPlayerInteractOn");
		AddTimer("Goblet7v8", 0.5f, "SetEntityPlayerInteractOn");
	}
	if(StringContains(asEntity, "7") == true) AddTimer(asEntity, 0.7f, "TimerGobletAnimation");
	else AddTimer(asEntity, 0.28f, "TimerGobletAnimation");
	
	if(GetQuestState("DiningHallGoblets1") == 1)
	{
		AddLocalVarInt("DiningHallGoblets2_var", 1);
		if(GetLocalVarInt("DiningHallGoblets2_var") == 24)
		{
			SetQuestCompleted("DiningHallGoblets1");
			SetQuestAdded("DiningHallGoblets2");
		}
	}
}

void PlayerInteractWithDrillPart(string asEntity)
{
	AddGlobalVarInt("DrillParts", 1);
	SetPlayerSanity("boost_verysmall");
	SetDebugMessage("Picked up Drill Part! Current num of drill parts collected: " + GetGlobalVarInt("DrillParts"));
	if(asEntity == "hand_drill_part03")
		SetEntityActive("AreaPrison_3_ShowEnemy_1");
	else
		ActivateRandomShowEnemyArea("", 0);
	
	if(GetGlobalVarInt("DrillParts") == 3)
	{
		PlayGuiSound("12_make_drill", 1.0f);
	
		SetPlayerSanity("boost_small_effect");
		
		for(int i=1;i<=3;i++) RemoveItem("hand_drill_part0"+i);
		
		GiveItem("handdrill", "Puzzle", "hand_drill", "hand_drill.tga", 0);	
	}
}

void PlayerInteractWithLadder(string asEntity)
{
	UseLadderOnAreaLadder("ladder_item_1", asEntity);
	if(asEntity == "AreaLadder_up_2")
		SetEntityInactive(GetStringWithExtraModesSuffix("waterlurker"));
}

void PlayerInteractWithDoor(string asEntity)
{
	if(asEntity == "swing_door_14")
	{
		if(GetLocalVarInt("swing_door_14_var") == 1)
		{
			SetActiveEnemyDisabled("off");
			SetPlayerReact("scare_small", 0.65f);
			PlayGuiSound("ghost_alert.snt", 4.0f);
			AddTimer("atticdoorbrute", 0.1f, "TimerForceEnemyEncounter");
		}
		else
		{
			SetMessage("DoorLockedByForce");
		}
	}
	else if(asEntity == "swing_door_20" || asEntity == "swing_door_23" || asEntity == "swing_door_24" || asEntity == "swing_door_27" || asEntity == "swing_door_30")
	{
		SetMessage("DoorLockedFromOneSide");
	}
	else if(asEntity == "swing_door_8" || asEntity == "swing_door_10" || asEntity == "swing_door_11" || asEntity == "swing_door_26" || asEntity == "swing_door_34" || asEntity == "swing_door_35" || asEntity == "swing_door_36" || asEntity == "swing_door_37" || asEntity == "swing_door_38" || asEntity == "AreaLargeEntranceDoor" || asEntity == "swing_door_47")
	{
		SetMessage("LevelDoors", "LockedForever");
		if(asEntity == "AreaLargeEntranceDoor")
		{
			PlayGuiSound("close_gate.snt", 0.7f);
			if(GetLocalVarInt(asEntity) == 0)
			{
				SetLocalVarInt(asEntity, 1);
				SetMessage("Mysterious", "YouCantLeave");
				PlayGuiSound("21_alex_low_freq_rumble.snt", 0.5f);
				PlayGuiSound("guardian_distant.snt", 0.3f);
				SetPlayerReact("scare_breath_effect_small", 1.5f);
			}
		}	
		else if(GetLocalVarInt("BruteLockedDoorEvent_var") == 0 && StringContains(GetActiveEnemyName(), "brute") == false && asEntity == "swing_door_34")
		{
			AddLocalVarInt("BruteLockedDoorEvent_var", 1);
			SetDebugMessage("Starting BruteLockedDoorEvent!");
			if(GetFunnyModeOn() == false)
				PlayGuiSound("sounds/enemy/brute/amb_alert01.ogg", 1.0f);
			else
				PlayGuiSound("sounds/enemy/chiu/alert.snt", 1.0f);
			AddTimer("brute_" + asEntity, 1.0f, "TimerBruteLockedDoorEvent");
			SetEntityActive("AreaPrison_1_ShowEnemy_3");
			SetEntityInactive("AreaPrison_1_ShowEnemy_5");
			SetEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_3", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_5", "CollidePlayerAndAreaShowEnemy", "enter");
		}
		else if(GetLocalVarInt("SecretCellLockedDoorEvent_var") == 0 && asEntity == "swing_door_47")
		{
			AddLocalVarInt("SecretCellLockedDoorEvent_var", 1);
			SetDebugMessage("Starting SecretCellLockedDoorEvent!");
			SetPlayerReact("scare_breath_small", 2.0f);
			SetMessage("Mysterious", "JackCellDiscovered");
			PlayGuiSound("21_alex_low_freq_rumble", 0.75f);
			AddTimer("guardian_activated.snt", 2.0f, "PlaySound");
			AddTimer("slime_5", "1.0f", 2.0f, "SetEntityActive");
			AddTimer("slime_mazecell_1", "1.0f", 2.0f, "SetEntityActive");
			AddTimer("slime_mazecell_2", "1.0f", 2.0f, "SetEntityActive");
			AddTimer("slime_mazecell_3", "1.0f", 2.0f, "SetEntityActive");
			AddTimer("slime_mazecell_4", "1.0f", 2.0f, "SetEntityActive");
			AddTimer("slime_loop.snt", "slime_5", "save_midquick", 2.0f, "PlaySound");
			PlaySound("slime_loop.snt", "slime_mazecell_1", "save_mid");
			PlaySound("slime_loop.snt", "slime_mazecell_2", "save_mid");
			PlaySound("slime_loop.snt", "slime_mazecell_3", "save_mid");
			PlaySound("slime_loop.snt", "slime_mazecell_4", "save_mid");
			AddTimer("Light_slime_5", "on_red", "1.0f", 2.0f, "SetLightState");
		}
	}
	else if(asEntity == "swing_door_2" || asEntity == "swing_door_12" || asEntity == "swing_door_15" || asEntity == "swing_door_19" || asEntity == "swing_door_28" || asEntity == "swing_door_29" || asEntity == "swing_door_46")
	{
		if(asEntity == "swing_door_46" && GetLocalVarInt(asEntity + "_var") == 1)
		{
			SetEntitiesCollideCallback(asEntity, "AreaShutDoorEvent_1", "CollideDoorAndAreaEvent", "enter_remove");
			return;
		}
		else if(asEntity == "swing_door_46")	SetQuestAdded("SecretPrisonDoor");
		
		SetMessage("NeedTheKey");
	}
	else if(asEntity == "swing_door_21" || asEntity == "swing_door_39" || asEntity == "swing_door_44")
	{
		SetMessage("Ch01Level10", "DoorLocked");
	}
	else if(asEntity == "swing_door_16")
	{
		if(GetActiveEnemyIsNear(8, 18) == false)
		{
			SetPlayerReact("pant_breathslow_effect_small", 0.8f);
			SetActiveEnemyDisabled("poofsilent");
			string sEnemyName = "brute" + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "307");
			SetEnemyPatrolNode(sEnemyName, 307, 1);
			SetEnemyPatrolNode(sEnemyName, 301, 1);
			SetEnemyPatrolNode(sEnemyName, 241, 2);
			SetEnemyPatrolNode(sEnemyName, 70, 1);
			if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
		}
		else
			SetEnemyState(GetActiveEnemyName(), "alert");
	}
	else if(asEntity == "level_dungeon_1")
	{
		if(GetLocalVarInt("level_dungeon_1_var") == 0) {
		SetPlayerReact("scare_breath_small", 1.0f);
		PlayGuiSound("05_event_bottles.snt", 0.6f); }
		else
		{
			SetLoadScreen("FromMansionToWineCellar", "dungeon_stairs");
		}
	}
}

void CollideDoorAndAreaEvent(string asParent, string asChild, int aiState)
{
	SetPlayerReact("scare_breathslow_small");
	CreateParticleSystemAtEntity(asChild + "_ps", "ps_dust_impact_vert.ps", asParent, false);
	StartScreenShake(0.01f, 0.5f, 0.1f, 0.3f);
	PlaySound("lurker_hit_wood.snt");
	
	if(asParent == "swing_door_46")
	{
		SetPlayerState("drop");
		AddPropImpulse(asParent, 0.0f, 0.0f, 10.0f, "World");
		SetDoorState(asParent, "close_forcez_max");
		PlayGuiSound("suitor/notice_long.snt", 0.4f);
	}
	else if(asParent == "swing_door_39")
	{
		AddPropImpulse(asParent, 0.0f, 0.0f, -10.0f, "World");
		SetDoorState(asParent, "close_force-z_max");
		StartInsanityEvent("Stream_Monster_Roar0" + RandInt(1, 3));
	}
}

void PlayerInteractWithAngelStatue(string asEntity)
{
	if(asEntity == "AreaFakeOrbPiece")
	{
		PlayAngelCutscene();
	}
	else
	{
		int iAngelCode = 0;
		if(asEntity.length() == 15)
			iAngelCode = StringToInt(StringSub(asEntity, asEntity.length() - 2, 2));
		else
			iAngelCode = StringToInt(StringSub(asEntity, asEntity.length() - 1, 1));
		
		SetEntityInactive("curtain_open_" + iAngelCode);
		SetEntityActive("curtain_closed_" + iAngelCode);
		if(GetLocalVarInt(asEntity + "_var") == 1)
		{
			AddLocalVarInt("AngelStatues_var", 1);
			SetDebugMessage("Angels done: " + GetLocalVarInt("AngelStatues_var"));
			SetPlayerSanity("boost_verysmall");
			
			PlayGuiSound("26_string_on_glass.ogg", 1.0f);
			StopSound(asEntity + gsSoundNameSuffix, "midquick");
			StopSound("curtain_open_" + iAngelCode + gsSoundNameSuffix, "midquick");
			PlaySound("03_in_a_bottle.snt", asEntity);
			
			SetLanternState("off_silent");
			SetPlayerState("speedveryslow_jumpoff");
			SetScreenEffect("white_max");
			SetScreenEffect("zoomout_verysmall_veryquick");
			AddTimer(gsPlayerStartAreaPrefix + "angel_" + iAngelCode, 0.5f, "TeleportPlayer");
			AddTimer("allnormal_mid", 0.5f, "SetScreenEffect");
			AddTimer("speednormal_jumpon", 0.6f, "SetPlayerState");
			if(GetLocalVarInt("AngelStatues_var") == 12)
			{
				AddTimer("AngelsAndCurtains", 2.0f, "CompletePuzzle");
				return;
			}
			int[] vAvailableAngels = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
			int k = 0;
			for(int i=1; i<=12; i++)
			{
				if(GetLocalVarInt("angel_statue_" + i + "_var") == 0)
				{
					vAvailableAngels[k] = i;
					k = k + 1;
				}
			}
			int iRand = 0;
			if(k == 1)
				iRand = 0;
			else
				iRand = RandInt(0, k-1);
			SetDebugMessage("Next Angel: " + vAvailableAngels[iRand]);
			SetLocalVarInt("angel_statue_" + vAvailableAngels[iRand] + "_var", 1);
			PlaySound("01_crowd_whispers_loop.snt", "angel_statue_" + vAvailableAngels[iRand], "save");
			PlaySound("01_whispers_loop.snt", "curtain_open_" + vAvailableAngels[iRand], "save");
		}
		else
		{
			SetLocalVarInt("AngelStatues_var", 0);
			for(int i=1; i<=12; i++)
			{
				SetLocalVarInt("angel_statue_" + i + "_var", 0);
				StopSound("angel_statue_" + i + gsSoundNameSuffix, "midquick");
				StopSound("curtain_open_" + i + gsSoundNameSuffix, "midquick");
				SetEntityInactive("curtain_closed_" + i);
				SetEntityActive("curtain_open_" + i);
			}
			int iRand = RandInt(1, 12);
			SetDebugMessage("Next Angel: " + iRand);
			SetLocalVarInt("angel_statue_" + iRand + "_var", 1);
			PlaySound("01_crowd_whispers_loop.snt", "angel_statue_" + iRand, "save");
			PlaySound("01_whispers_loop.snt", "curtain_open_" + iRand, "save");
			
			PlayGuiSound("01_teleport.snt", 1.0f);
			PlayGuiSound("00_laugh.snt", 1.0f);
			TeleportPlayer(gsPlayerStartAreaPrefix + 9);
			SetLanternState("off_silent");
			SetPlayerReact("scare_small");
			
			int iRand2 = RandInt(0, 1);
			if(iRand2 == 1)
			{
				SetMessage("Woman", "CurtainFail");
			}
		}
	}
}

void PlayerInteractWithLantern(string asEntity)
{
	SetDebugMessage("Picked up lantern!");
	if(asEntity == "lantern_1")
	{
		SetPlayerLampOil(50.0f * GetGlobalVarFloat("DifficultyInverseFactor"));
		SetEntityInactive("BlockBox_StorageEntrance");
		SetPlayerSanity("boost_small");
	}
	else if(asEntity == "lantern_2")
	{
		SetPlayerLampOil(25.0f);
		SetLightState("PointLight_" + asEntity, "off");
		SetLanternState("enabled");
		
		SetPlayerSanity("boost_small_effect");
		SetEntityActive("oil_barrel_1");
	}
}

void CollideObjectAndAreaRoom(string asParent, string asChild, int aiState)
{
    AddLocalVarInt("RoomObjects_var", 1);
	PlayGuiSound("01_voice_woman_melody.ogg", 0.6f);
	PlaySound("impact_wood_heavy_low.snt", "Area_painting_room");
	SetEntityInactive(asParent);
	SetEntityActive(asParent + "_static");
	SetPlayerLookAt(asParent + "_static", "verysmall", 1.0f);
	SetPlayerSanity("boost_small_effect");
	if(StringContains(asParent, "shirt") || StringContains(asParent, "carpet"))
	{
		PlayGuiSound("26_string_on_glass.ogg", 0.8f);
	}
	else if(StringContains(asParent, "statue"))
	{
		PlayGuiSound("impact_metal_low.snt", 1.0f);
	}
	else if(StringContains(asParent, "bed") || StringContains(asParent, "cross"))
	{
		PlayGuiSound("impact_wood_heavy_low.snt", 1.0f);
	}
	if(GetLocalVarInt("RoomObjects_var") == 9)
		CompletePuzzle("RoomObjects");
	else if(GetQuestState("AttachedPainting") >= 1 && GetQuestState("RoomObjects") == 0 && GetLocalVarInt("RoomPuzzleNote") == 1)
	{
		SetMessage("RoomObjects");
		SetQuestAdded("RoomObjects");
	}
}

void CollideEnemyAndAreaRoom(string asParent, string asChild, int aiState)
{
	if(StringContains(asParent, "grunt"))
	{
		if(GetLocalVarInt("GruntDiscovered_var") == 0)
		{
			SetLocalVarInt("GruntDiscovered_var", 1);
			SetEntityInactive("BlockBox2ndLibrary");
			string sEnemyName = "grunt" + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "friendoff");
			SetActiveEnemyName(sEnemyName);
			
			ActivateRandomShowEnemyArea("AreaEntranceHall", 5);
			ActivateRandomShowEnemyArea("AreaDiningHall", 5);
			ActivateRandomShowEnemyArea("AreaLibrary_2", 3);
			ActivateRandomShowEnemyArea("AreaCells_1", 6);
			ActivateRandomShowEnemyArea("AreaPrison_1", 5);
			ActivateRandomShowEnemyArea("AreaPrison_3", 4);
			
			SetEntityPlayerCollideCallback("AreaEntranceHall_ShowEnemy_1", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaEntranceHall_ShowEnemy_2", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaEntranceHall_ShowEnemy_3", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaEntranceHall_ShowEnemy_4", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaEntranceHall_ShowEnemy_5", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaLibrary_2_ShowEnemy_1", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaLibrary_2_ShowEnemy_2", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaLibrary_2_ShowEnemy_3", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaDiningHall_ShowEnemy_1", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaDiningHall_ShowEnemy_2", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaDiningHall_ShowEnemy_3", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaDiningHall_ShowEnemy_4", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaDiningHall_ShowEnemy_5", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaCells_1_ShowEnemy_1", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaCells_1_ShowEnemy_2", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaCells_1_ShowEnemy_3", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaCells_1_ShowEnemy_4", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaCells_1_ShowEnemy_5", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaCells_1_ShowEnemy_6", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_1", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_2", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_3", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_4", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_5", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_3_ShowEnemy_1", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_3_ShowEnemy_2", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_3_ShowEnemy_3", "CollidePlayerAndAreaShowEnemy", "enter");
			SetEntityPlayerCollideCallback("AreaPrison_3_ShowEnemy_4", "CollidePlayerAndAreaShowEnemy", "enter");
			
			if(GetLocalVarInt("DeathCount_var") == 0)
			{
				SetAchievementUnlocked("HealthAchievement");
			}
		}
	}
	else if(StringContains(asParent, "brute"))
	{
		SetEnemyState(asParent, "friendoff");
	}
}

void ManageRoomsAppearances(string asRoomArea)
{
	int iChapter = GetLocalVarInt("OrbPiecesCollected_var");
	
	if(iChapter >= 3)
	{
		if(GetLocalVarInt(asRoomArea + "DarkAmb_1_var") == 0) //ORBPIECES >= 3
		{
			SetLocalVarInt(asRoomArea + "DarkAmb_1_var", 1);
			SetDebugMessage("STARTING DARKAMB V1 " + asRoomArea);
			
			//MAIN HALL
			if(StringContains(asRoomArea, "EntranceHall"))
			{
				SetEntityActive("statue_entrancehall_1", 4.0f);
				FadeLightTo("BoxLightEntranceHall", 0.41f * 0.5f, 0.47f * 0.5f, 0.51f * 0.5f, 0.5f * 0.5f, -1, 2.0f);
			}
			//DINING HALL
			if(StringContains(asRoomArea, "DiningHall"))
			{
				FadeLightTo("BoxLightDiningHall", 0.175f * 0.5f, 0.195f * 0.5f, 0.205f * 0.5f, 0.2f * 0.5f, -1, 2.0f);
			}
			//LIBRARY
			if(StringContains(asRoomArea, "Library"))
			{
				FadeLightTo("BoxLightLibrary_1", 0.06f * 0.5f, 0.04f * 0.5f, 0.05f * 0.5f, 0.1f * 0.5f, -1, 2.0f);
				FadeLightTo("BoxLightLibrary_2", 0.15f * 0.5f, 0.12f * 0.5f, 0.09f * 0.5f, 0.15f * 0.5f, -1, 2.0f);
			}
			
			//OUTSIDE
			//NOTHING HERE...
			
			//OFFICE
			//NOTHING HERE...
			
			//THRONE ROOM
			//NOTHING HERE...
			
			//CANDLE ROOM
			//NOTHING HERE...
			
			//MACHINE ROOM
			//NOTHING HERE...
			
			//CELLS AREA
			//NOTHING HERE...
			
			//DUNGEON AREA
			//NOTHING HERE...
			
			//PRISON AREA
			//NOTHING HERE...
		}
	}
	
	if(iChapter >= 4)
	{
		if(GetLocalVarInt(asRoomArea + "DarkAmb_2_var") == 0) //ORBPIECES >= 4
		{
			SetLocalVarInt(asRoomArea + "DarkAmb_2_var", 1);
			SetDebugMessage("STARTING DARKAMB V2 " + asRoomArea);
			
			//MAIN HALL
			if(StringContains(asRoomArea, "EntranceHall"))
			{
				PlayMusic("00_event_gallery.ogg", "event_midquick");
				FadeLightTo("BoxLightEntranceHall", 0.41f * 0.25f, 0.47f * 0.25f, 0.51f * 0.25f, 0.5f * 0.25f, -1, 2.0f);
				SetEntityInactive("statue_entrancehall_1", 4.0f);
				SetEntityActive("statue_entrancehall_2", 4.0f);
				SetPlayerReact("scare_breath_small");
				PlayGuiSound("guardian_distant", 0.6f);
				ActivateGuardianSlime("slime_mainhall_1", true);
				ActivateGuardianSlime("slime_mainhall_2", true);
				ActivateGuardianSlime("slime_mainhall_3", true);
				ActivateGuardianSlime("slime_mainhall_5", true);
				ActivateGuardianSlime("slime_mainhall_4", false);
				if(GetGlobalVarInt("StatuesAchievement") == 0)
				{
					for(int j=1; j<=25; j++)
					{
						AddTimer("SlimeDamageArea_" + j, 2.0f, "SetEntityActive");
						CreateParticleSystemAtEntityExt("SlimeDamageArea_" + j + "_ps", "ps_slime_fog.ps", "SlimeDamageArea_" + j, true, 1.0f, 0.0f, 0.0f, 0.75f, true, 2.0f, 6.0f, 50.0f, 60.0f);
					}
				}
				for(int k=6; k<=16; k++)
				{
					ActivateGuardianSlime("slime_mainhall_" + k, false);
				}
				for(int i=1; i<=60; i++)
				{
					ActivateGuardianSlime("slime_noanim_mainhall_" + i, false);
				}
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_50", "save");
				
				for(int i=92; i<=95; i++)
				{
					if(RandInt(0, 1) == 1)
						SetEntityAndEffectsActive("slime_noanim_mainhall_" + i, "ps_slime_fog.ps", "", "save_midquick_red_dark");
					else
						SetEntityActive("slime_noanim_mainhall_" + i, 2.0f);
				}
			}
			//DINING HALL
			if(StringContains(asRoomArea, "DiningHall"))
			{
				FadeLightTo("BoxLightDiningHall", 0.175f * 0.25f, 0.195f * 0.25f, 0.205f * 0.25f, 0.2f * 0.25f, -1, 2.0f);
				SetPlayerReact("scare_breath_effect_small");
				PlayGuiSound("guardian_distant", 0.5f);
				if(GetGlobalVarInt("StatuesAchievement") == 0)
					SetEntitiesActive("SlimeDamageArea_", 26, 33);
				for(int i=61; i<=75; i++)
				{
					if(RandInt(0, 1) == 1)
						SetEntityAndEffectsActive("slime_noanim_mainhall_" + i, "ps_slime_fog.ps", "", "save_midquick_red_dark");
					else
						SetEntityActive("slime_noanim_mainhall_" + i, 2.0f);
				}
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_62", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_67", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_69", "save_midquick");
			}
			//LIBRARY
			if(StringContains(asRoomArea, "Library"))
			{
				FadeLightTo("BoxLightLibrary_1", 0.06f * 0.25f, 0.04f * 0.25f, 0.05f * 0.25f, 0.1f * 0.25f, -1, 2.0f);
				FadeLightTo("BoxLightLibrary_2", 0.15f * 0.25f, 0.12f * 0.25f, 0.09f * 0.25f, 0.15f * 0.25f, -1, 2.0f);
				SetEntityPlayerCollideCallback("AreaTriggerBones", "CollidePlayerAndAreaRandScaryEvent", "enter_remove");
				SetEntityActive("AreaTriggerBones");
				SetPlayerReact("scare_breath_effect_small");
				PlayGuiSound("guardian_distant", 0.5f);
				if(GetGlobalVarInt("StatuesAchievement") == 0)
					SetEntitiesActive("SlimeDamageArea_", 34, 46);
				for(int i=76; i<=91; i++)
				{
					if(RandInt(0, 1) == 1)
						SetEntityAndEffectsActive("slime_noanim_mainhall_" + i, "ps_slime_fog.ps", "", "save_midquick_red_dark");
					else
						SetEntityActive("slime_noanim_mainhall_" + i, 2.0f);
				}
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_77", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_83", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_87", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_90", "save_midquick");
				
				for(int i=92; i<=95; i++)
				{
					if(RandInt(0, 1) == 1)
						SetEntityAndEffectsActive("slime_noanim_mainhall_" + i, "ps_slime_fog.ps", "", "save_midquick_red_dark");
					else
						SetEntityActive("slime_noanim_mainhall_" + i, 2.0f);
				}
			}
			//OUTSIDE
			//MOVED TO LIBRARY AND ENTRANCEHALL
			
			//OFFICE
			if(StringContains(asRoomArea, "Office"))
			{
				FadeLightTo("BoxLightOffice", 0.53f * 0.5f, 0.54f * 0.5f, 0.55f * 0.5f, 0.6f * 0.5f, -1, 2.0f);
			}
			//THRONE ROOM
			//NOTHING HERE...
			
			//CANDLE ROOM
			if(StringContains(asRoomArea, "CandleRoom"))
			{
				FadeLightTo("BoxLightCandleRoom", 0.12f * 0.5f, 0.11f * 0.5f, 0.1f * 0.5f, 0.1f * 0.5f, -1, 2.0f);
			}
			//MACHINE ROOM
			if(StringContains(asRoomArea, "MachineRoom"))
			{
				SetLightState("hanging_lantern_wall_1", "lamp_off");
				SetLightState("SpotLight_21", "off_flicker");
				SetLightState("PointLight_130", "off_flicker");
				if(GetGlobalVarInt("StatuesAchievement") == 0)
					SetEntitiesActive("SlimeDamageArea_", 47, 49);
				for(int i=98; i<=104; i++)
				{
					if(RandInt(0, 1) == 1)
						SetEntityAndEffectsActive("slime_noanim_mainhall_" + i, "ps_slime_fog.ps", "", "save_midquick_red_dark");
					else
						SetEntityActive("slime_noanim_mainhall_" + i, 2.0f);
				}
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_99", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_101", "save_midquick");
			}
			//CELLS AREA
			if(StringContains(asRoomArea, "AreaCells"))
			{
				SetPlayerReact("scare_breath_effect_small");
				PlayGuiSound("guardian_distant", 0.5f);
				SetLightState("hanging_lantern_ceiling_chain_2", "lamp_off");
				SetLightState("torch_static01_8", "lamp_off");
				SetLightState("torch_static01_10", "lamp_off");
				SetLightState("candlestick_wall_orange_1", "lamp_off");
				SetLightState("candlestick_wall_orange_4", "lamp_off");
				SetLightState("PointLight_102", "off");
				SetLightState("PointLight_103", "off");
				SetLightState("PointLight_104", "off");
				SetLightState("PointLight_105", "off");
				SetLightState("PointLight_106", "off");
				SetLightState("PointLight_107", "off");
				SetLightState("SpotLight_23", "off");
				SetLightState("torch_static01_2", "lamp_off");
				SetLightState("torch_static01_12", "lamp_off");
				SetLightState("torch_static01_13", "lamp_off");
				SetLightState("torch_static01_14", "lamp_off");
				SetLightState("torch_static01_16", "lamp_off");
				SetLightState("torch_static01_17", "lamp_off");
				SetLightState("PointLight_109", "off");
				SetLightState("PointLight_111", "off");
				SetLightState("PointLight_112", "off");
				SetLightState("PointLight_113", "off");
				SetLightState("PointLight_114", "off");
				SetLightState("PointLight_115", "off");
				SetLightState("PointLight_116", "off");
				SetLightState("SpotLight_22", "off");
				if(GetGlobalVarInt("StatuesAchievement") == 0)
					SetEntitiesActive("SlimeDamageArea_", 50, 60);
				for(int i=105; i<=125; i++)
				{
					if(RandInt(0, 1) == 1)
						SetEntityAndEffectsActive("slime_noanim_mainhall_" + i, "ps_slime_fog.ps", "", "save_midquick_red_dark");
					else
						SetEntityActive("slime_noanim_mainhall_" + i, 2.0f);
				}
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_111", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_115", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_123", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_124", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_125", "save_midquick");
			}
			//DUNGEON AREA
			if(StringContains(asRoomArea, "AreaPrison"))
			{
				SetPlayerReact("scare_breath_effect_small");
				PlayGuiSound("guardian_distant", 0.5f);
				if(GetGlobalVarInt("StatuesAchievement") == 0)
					SetEntitiesActive("SlimeDamageArea_", 61, 75);
				for(int i=126; i<=160; i++)
				{
					if(RandInt(0, 1) == 1)
						SetEntityAndEffectsActive("slime_noanim_mainhall_" + i, "ps_slime_fog.ps", "", "save_midquick_red_dark");
					else
						SetEntityActive("slime_noanim_mainhall_" + i, 2.0f);
				}
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_127", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_135", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_141", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_143", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_145", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_154", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_158", "save_midquick");
			}
			//PRISON AREA
			if(StringContains(asRoomArea, "AreaSecretPrison"))
			{
				SetPlayerReact("scare_breath_effect_small");
				PlayGuiSound("guardian_distant", 0.5f);
				if(GetGlobalVarInt("StatuesAchievement") == 0)
					SetEntitiesActive("SlimeDamageArea_", 76, 88);
				for(int i=161; i<=182; i++)
				{
					if(RandInt(0, 1) == 1)
						SetEntityAndEffectsActive("slime_noanim_mainhall_" + i, "ps_slime_fog.ps", "", "save_midquick_red_dark");
					else
						SetEntityActive("slime_noanim_mainhall_" + i, 2.0f);
				}
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_161", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_165", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_170", "save_midquick");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_181", "save_midquick");
			}
		}
	}
	
	if(iChapter >= 5)
	{
		if(GetLocalVarInt(asRoomArea + "DarkAmb_3_var") == 0) //ORBPIECES >= 5
		{
			SetLocalVarInt(asRoomArea + "DarkAmb_3_var", 1);
			SetDebugMessage("STARTING DARKAMB V3 " + asRoomArea);
			
			//MAIN HALL
			if(StringContains(asRoomArea, "EntranceHall"))
			{
				SetEntityInactive("statue_entrancehall_1", 4.0f);
				SetEntityInactive("statue_entrancehall_2", 4.0f);
				SetEntityActive("statue_entrancehall_3", 4.0f);
				SetLightState("PointLight_198", "on_red");
				SetLightState("PointLight_199", "on_red");
				SetEntityInactive("chandelier_nice_1", 4.0f);
				SetEntityInactive("chandelier_nice_2", 4.0f);
				SetEntityInactive("chandelier_nice_3", 4.0f);
				SetEntityInactive("chandelier_nice_4", 4.0f);
				SetLightState("BoxLightEntranceHall", "off");
				SetLightState("PointLight_100", "off_flicker");
				SetLightState("candlestick_wall_22", "lamp_off");
				SetLightState("candlestick_wall_23", "lamp_off");
				SetLightState("candlestick_wall_24", "lamp_off");
				SetLightState("candlestick_wall_25", "lamp_off");
				SetLightState("candlestick_wall_26", "lamp_off");
				SetLightState("candlestick_wall_27", "lamp_off");
				SetLightState("candlestick_wall_28", "lamp_off");
				SetLightState("candlestick_wall_29", "lamp_off");
				SetLightState("candlestick_wall_30", "lamp_off");
				SetLightState("candlestick_wall_31", "lamp_off");
				SetLightState("candlestick_wall_32", "lamp_off");
				SetLightState("candlestick_wall_33", "lamp_off");
				SetLightState("candle_floor_small_2", "lamp_off");
				SetLightState("PointLight_1", "off");
				SetLightState("PointLight_2", "off");
				SetLightState("PointLight_84", "off");
				SetLightState("PointLight_85", "off");
				SetLightState("PointLight_86", "off");
				SetLightState("PointLight_87", "off");
				SetLightState("PointLight_88", "off");
				SetLightState("PointLight_89", "off");
				SetLightState("PointLight_90", "off");
				SetLightState("PointLight_91", "off");
				SetLightState("PointLight_92", "off");
				SetLightState("PointLight_93", "off");
				SetLightState("PointLight_94", "off");
				SetLightState("PointLight_95", "off");
				SetLightVisible("SpotLight_candle_11", false);
				FadeLightTo("BoxLightOutside_1", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_2", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_3", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_4", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_5", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_6", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				for(int i=1; i<=22; i++)
				{
					SetEntityInactive("pine_" + i, 2.0f);
					SetEntityActive("insane_pine_" + i, 2.0f);
				}
			}
			//DINING HALL
			if(StringContains(asRoomArea, "DiningHall"))
			{
				SetLightState("BoxLightDiningHall", "off");
				SetLightState("candlestick_wall_1", "lamp_off");
				SetLightState("PointLight_14", "off");
				SetLightState("chandelier_simple_short_1", "lamp_off");
				SetLightState("PointLight_9", "off_flicker");
				SetLightState("PointLight_11", "off_flicker");
				SetLightState("PointLight_12", "off_flicker");
				SetLightState("PointLight_13", "off_flicker");
				SetLightState("PointLight_14", "off_flicker");
				SetLightState("PointLight_15", "off_flicker");
				SetLightState("PointLight_96", "off_flicker");
				SetLightState("PointLight_97", "off_flicker");
				SetLightState("SpotLight_8", "off_flicker");
				SetLightState("SpotLight_9", "off_flicker");
				SetLightState("SpotLight_10", "off_flicker");
				SetLightState("candlestick_wall_1", "lamp_off");
				SetLightState("candlestick_wall_20", "lamp_off");
				SetLightState("candlestick_tri_3", "lamp_off");
				SetLightState("candle_floor_small_3", "lamp_off");
				SetLightState("candle_floor_small_5", "lamp_off");
				SetEntitiesInactive("chandelier_nice_", 4.0f, 5, 7);
				SetEntityInactive("candlestick_floor_3", 4.0f);
				SetEntityActive("candlestick_floor_3_insane", 4.0f);
				SetEntityActive("slime_3", 4.0f);
				SetEntityAndEffectsActive("slime_4", "", "slime_loop.snt", "mid");
				SetEntityActive("slime_6", 4.0f);
				SetUseItemCallback("ceremony_knife_1", "slime_3", "UseKnifeOnSlime", true);
				SetUseItemCallback("ceremony_knife_1", "slime_4", "UseKnifeOnSlime", true);
				SetUseItemCallback("ceremony_knife_1", "slime_6", "UseKnifeOnSlime", true);
			}
			//LIBRARY
			if(StringContains(asRoomArea, "Library"))
			{
				SetLightState("BoxLightLibrary_1", "off");
				SetLightState("BoxLightLibrary_2", "off");
				SetLightState("candlestick_wall_2", "lamp_off");
				SetLightState("candlestick_wall_3", "lamp_off");
				SetLightState("candlestick_wall_4", "lamp_off");
				SetLightState("candlestick_wall_5", "lamp_off");
				SetLightState("candlestick_wall_6", "lamp_off");
				SetLightState("candlestick_wall_7", "lamp_off");
				SetLightState("candlestick_wall_8", "lamp_off");
				SetLightState("candlestick_wall_9", "lamp_off");
				SetLightState("candlestick_wall_10", "lamp_off");
				SetLightState("candlestick_wall_11", "lamp_off");
				SetLightState("SpotLight_12", "off");
				SetLightState("PointLight_16", "off");
				SetLightState("PointLight_21", "off");
				SetLightState("PointLight_23", "off");
				SetLightState("PointLight_25", "off");
				SetLightState("PointLight_27", "off");
				SetLightState("PointLight_32", "off");
				SetLightState("PointLight_34", "off");
				SetLightState("PointLight_37", "off");
				SetEntitiesInactive("chandelier_large_", 4.0f, 1, 5);
				SetEntityInactive("candlestick_floor_2", 4.0f);
				SetEntityActive("candlestick_floor_2_insane", 4.0f);
				FadeLightTo("BoxLightOutside_1", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_2", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_3", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_4", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_5", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				FadeLightTo("BoxLightOutside_6", 0.0f, 0.0f, 0.0f, 0.0f, -1, 2.0f);
				for(int i=1; i<=22; i++)
				{
					SetEntityInactive("pine_" + i, 2.0f);
					SetEntityActive("insane_pine_" + i, 2.0f);
				}
			}
			//OUTSIDE
			//MOVED TO LIBRARY AND ENTRANCEHALL
			
			//OFFICE
			if(StringContains(asRoomArea, "Office"))
			{
				SetLightState("PointLight_78", "off_flicker");
				SetLightState("PointLight_79", "off_flicker");
				SetLightState("SpotLight_20", "off_flicker");
			}
			
			//THRONE ROOM
			if(StringContains(asRoomArea, "ThroneRoom"))
			{
				SetLightState("BoxLightThroneRoom", "off_flicker");
				SetLightState("SpotLight_17", "off_flicker");
				SetEntityActive("slime_noanim_mainhall_97", 2.0f);
				PlaySound("slime_create.snt", "slime_noanim_mainhall_97");
				PlaySound("slime_loop.snt", "slime_noanim_mainhall_97", "save");
				PlayParticleSystem("ps_slime_fog.ps", "slime_noanim_mainhall_97", "save_red_dark");
			}
			//CANDLE ROOM
			if(StringContains(asRoomArea, "CandleRoom"))
			{
				SetLightState("BoxLightCandleRoom", "off_flicker");
			}
			//MACHINE ROOM
			//NOTHING HERE...
			
			//CELLS AREA
			//NOTHING HERE...
			
			//DUNGEON AREA
			//NOTHING HERE...
			
			//PRISON AREA
			if(StringContains(asRoomArea, "AreaSecretPrison"))
			{
				FadeLightTo("BoxLight_5", 0.15f * 0.5f, 0.175f * 0.5f, 0.2f * 0.5f, 0.2f * 0.5f, -1, 2.0f);
				SetLightState("BoxLight_11", "off_flicker");
				SetLightState("BoxLight_12", "off_flicker");
				SetLampLit("torch_static01_35", false, true);
				SetLampLit("torch_static01_36", false, true);
				SetLampLit("torch_static01_37", false, true);
				SetLampLit("torch_static01_38", false, true);
				SetLampLit("torch_static01_39", false, true);
			}
		}
		
		if(iChapter == 6 && asRoomArea == "AreaOffice" && GetLocalVarInt("OfficeBlocked_var") == 0 && GetQuestState("Bull") == 2) //OFFICE
		{
			SetLocalVarInt("OfficeBlocked_var", 1);
			SetEntityInactive("AreaBruteFromOffice");
			SetActiveEnemyDisabled("poof");
			if(GetPlayerSanity() <= 30)
				SetPlayerSanity(50.0f);
			
			SetPlayerReact("scare_breath_small", 0.1f);
			PlaySound("25_guardian_slime_appear.snt");
			SetDoorState("swing_door_23", "explode");
			SetEntityActive("slime_noanim_mainhall_183", 2.0f);
			SetEntityActive("slime_noanim_mainhall_96", 2.0f);
			PlaySound("slime_create.snt", "slime_noanim_mainhall_96");
			PlaySound("slime_create.snt", "slime_noanim_mainhall_183");
			PlaySound("slime_loop.snt", "slime_noanim_mainhall_96", "save");
			PlaySound("slime_loop.snt", "slime_noanim_mainhall_183", "save");
			PlayParticleSystem("ps_slime_fog.ps", "slime_noanim_mainhall_96", "save_red_dark");
			PlayParticleSystem("ps_slime_fog.ps", "slime_noanim_mainhall_183", "save_red_dark");
		}
	}
}

void CollidePlayerAndAreaRoom(string asParent, string asChild, int aiState)
{
	string[] vsDeathHintsArray = {"Default", "DoNotMakeNoise", "BeCareful", "BlockThePath", "HideInTheDark", "ThinkAndRun", "MoveQuickly", "HideInACloset", "CreateDistraction", "HideAndWait", "TheyAreClose"};
	float fSanity = GetPlayerSanity();
	int iChapter = GetLocalVarInt("OrbPiecesCollected_var");
	
	SetEntityInactive("Area_swing_door_20");
	SetEntityInactive("Area_swing_door_23");
	SetEntityInactive("Area_swing_door_24");
	SetEntityInactive("Area_swing_door_27");
	SetEntityInactive("Area_swing_door_30");
	
	if(aiState == 1)
	{
		SetEntityActive("BlockBox_AreaDiningHall_4");
		SetPlayerCrouchDisabled(false);
		SetPlayerJumpDisabled(false);
	}
	
	if(((asChild == "AreaOutside" || asChild == "AreaOffice" || asChild == "AreaLibrary_2") && iChapter <= 3) || asChild == "AreaRoundedWall")
	{
		if(GetLocalVarInt("GlobalFogOn_var") == 1)
		{
			SetLocalVarInt("GlobalFogOn_var", 0);
			SetFogState("off_skybox");
		}
	}
	else
	{
		if(GetLocalVarInt("GlobalFogOn_var") == 0)
		{
			SetLocalVarInt("GlobalFogOn_var", 1);
			SetFogState("on_skybox_culling", GetLocalVarFloat("GlobalFogStart_var"), GetLocalVarFloat("GlobalFogEnd_var"), GetLocalVarFloat("GlobalFogExp_var"));
		}
	}
	
	if(asChild == "AreaColdRoom")
	{
		SetEntityCustomFocusCrossHair("AreaLadder_up_2", "Ladder");
		
		if(aiState == 1)
		{
			AddTimer("ColdRoom", 2.5f, "TimerPlayerInsideRoom");
			
			PlayMusic("22_amb.ogg", "ambient_loop_save_verybig_midslow");
			ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_MachineRoom.snt", "AreaAmbientSound_1");
			ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Cells.snt", "AreaAmbientSound_2");
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_EEE.snt", "AreaAmbientSound_3");
			
			SetupRoomSanityDamage("roomsanitydamage", 0.03f);
			
			SetEntityInactive(GetStringWithExtraModesSuffix("waterlurker"));
		}
		else
		{
			RemoveTimer("ColdRoom");
			
			SetupRoomSanityDamage("roomsanitydamage", 0.01f);
		}
		
		SetCheckPoint("CPDefault", 5);
	}
	else if(asChild == "AreaTunnel")
	{
		if(aiState == 1)
		{
			SetPlayerCrouching(true);
			SetPlayerCrouchDisabled(true);
			SetPlayerJumpDisabled(true);
			
			ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_1");
			ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Storage.snt", "AreaAmbientSound_2");
			
			if(fSanity <= 30)
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Monsters.snt", "AreaAmbientSound_3");
				
				if(fSanity <= 15)
				{
					SetupRoomSanityDamage("roomsanitydamage", 0.05f);
				}
				else
				{
					SetupRoomSanityDamage("roomsanitydamage", 0.04f);
				}
			}
			else
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
				SetupRoomSanityDamage("roomsanitydamage", 0.03f);
			}
		}
	}
	
	if(asChild == "AreaEntranceHall")
	{
		SetEnemyState(GetStringWithExtraModesSuffix("brute"), "friendoff");
		SetEntityState("AreaLargeEntranceDoor", "focuslevel");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_EntranceHall.snt", "AreaAmbientSound_1");
		
		SetLocalVarString("CurrentPlayerRoom_var", asChild);
		SetLocalVarInt("CurrentPlayerRoomMaxSpawns_var", 5);
		
		SetCheckPoint("CPDefault", 14);
		
		if(iChapter <= 2)
		{
			ManageAmbientSound("AreaAmbientSound_2_snt", "", "AreaAmbientSound_2");
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			
			if(GetLocalVarInt("GruntDiscovered_var") == 1)
				PlayMusic("02_amb_safe.ogg", "ambient_loop_save_verybig_midslow");
			else
				PlayMusic("01_amb_peace.ogg", "ambient_loop_save_verybig_midslow");
			
			if(iChapter <= 1)
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.01f);
			}
			else
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.02f);
			}
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Cells.snt", "AreaAmbientSound_2");
			SetupRoomSanityDamage("roomsanitydamage", 0.03f);
			
			if(iChapter == 3){
				PlayMusic("02_amb_strange.ogg", "ambient_loop_save_verybig_midslow"); ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");}
			else if(iChapter == 4)
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
				PlayMusic("07_amb.ogg", "ambient_loop_save_medbig_midslow");
			}
			else
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
				PlayMusic("01_amb_disturbing05.ogg", "ambient_loop_save_medbig_midslow");
			}
		}
		
		ManageRoomsAppearances(asChild);
		ManageRoomsAppearances("Outside");
	}
	else if(asChild == "AreaSewerEntrance")
	{
		SetEntityCustomFocusCrossHair("AreaLadder_up_2", "Ladder");
		
		PlayMusic("04_amb.ogg", "ambient_loop_save_verybig_midslow");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Sewer.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Cells.snt", "AreaAmbientSound_2");
		ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
		
		SetCheckPoint("CPDefault", 15);
		
		if(iChapter >= 4)
		{
			SetupRoomSanityDamage("roomsanitydamage", 0.04f);
		}
		else
		{
			SetupRoomSanityDamage("roomsanitydamage", 0.03f);
		}
	}
	else if(StringContains(asChild, "AreaDiningHall"))
	{
		SetLocalVarString("CurrentPlayerRoom_var", "AreaDiningHall");
		SetLocalVarInt("CurrentPlayerRoomMaxSpawns_var", 5);
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_EntranceHall.snt", "AreaAmbientSound_1");
		
		if(StringContains(asChild, "1"))
		{
			ManageAmbientSound("AreaAmbientSound_2_snt", "", "AreaAmbientSound_2");
			SetCheckPoint("CPDefault", 16);
			SetLocalVarString("CurrentPlayerRoom_var", asChild);
			SetLocalVarInt("CurrentPlayerRoomMaxSpawns_var", 3);
			SetEntityActive("Area_swing_door_20");
		}
		else if(StringContains(asChild, "2"))
		{
			ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_MachineRoom.snt", "AreaAmbientSound_2");
		}
		else if(StringContains(asChild, "3"))
		{
			SetCheckPoint("CPDefault", 17);
			ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Cells.snt", "AreaAmbientSound_2");
			SetLocalVarString("CurrentPlayerRoom_var", asChild);
			SetLocalVarInt("CurrentPlayerRoomMaxSpawns_var", 2);
		}
		else if(StringContains(asChild, "4"))
		{
			if(GetLocalVarInt("swing_door_21_var") == 1)
				SetCheckPoint(14); //BATHROOM CP CHANGED
			else
				SetCheckPoint(14);
			ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Voice.snt", "AreaAmbientSound_2");
			SetEntityInactive("BlockBox_AreaDiningHall_4");
		}
		
		if(iChapter <= 2)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			
			if(GetQuestState("Rocks") >= 1)
				PlayMusic("10_amb.ogg", "ambient_loop_save_verybig_midslow");
			else
				PlayMusic("01_amb_piano.ogg", "ambient_loop_save_verybig_midslow");
			
			
			SetupRoomSanityDamage("roomsanitydamage", 0.02f);
		}
		else
		{
			if(iChapter == 3)
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
				PlayMusic("02_amb_strange.ogg", "ambient_loop_save_verybig_midslow");
				SetupRoomSanityDamage("roomsanitydamage", 0.03f);
			}
			else if(iChapter == 4)
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
				PlayMusic("07_amb.ogg", "ambient_loop_save_medbig_midslow");
			}
			else
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Monsters.snt", "AreaAmbientSound_3");
				SetupRoomSanityDamage("roomsanitydamage", 0.04f);
				PlayMusic("01_amb_disturbing04.ogg", "ambient_loop_save_verybig_midslow");
			}
		}
		
		SetEntityInactive(GetStringWithExtraModesSuffix("waterlurker"));
		ManageRoomsAppearances("DiningHall");
	}
	else if(asChild == "AreaLibrary_1")
	{
		PlayMusic("01_amb_strange.ogg", "ambient_loop_save_verybig_midslow");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_MachineRoom.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Monsters.snt", "AreaAmbientSound_2");
		ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
		
		SetupRoomSanityDamage("roomsanitydamage", 0.04f);
		
		SetCheckPoint("CPDefault", 19);
	}
	else if(asChild == "AreaLibrary_2")
	{
		SetEntityCustomFocusCrossHair("AreaLadder_up_1", "Ladder");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_EntranceHall.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Library.snt", "AreaAmbientSound_2");
		
		SetLocalVarString("CurrentPlayerRoom_var", asChild);
		SetLocalVarInt("CurrentPlayerRoomMaxSpawns_var", 3);
		
		SetCheckPoint("CPDefault", 20);
		
		if(iChapter <= 2)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			PlayMusic("16_amb.ogg", "ambient_loop_save_verybig_midslow");
			SetupRoomSanityDamage("roomsanitydamage", 0.01f);
		}
		else
		{
			if(iChapter == 3)
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
				PlayMusic("02_amb_strange.ogg", "ambient_loop_save_verybig_midslow");
				SetupRoomSanityDamage("roomsanitydamage", 0.02f);
			}
			else if(iChapter == 4)
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
				PlayMusic("07_amb.ogg", "ambient_loop_save_medbig_midslow");
			}
			else
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
				SetupRoomSanityDamage("roomsanitydamage", 0.03f);
				PlayMusic("01_amb_disturbing01.ogg", "ambient_loop_save_verybig_midslow");
			}
		}
		
		ManageRoomsAppearances(asChild);
		ManageRoomsAppearances("Outside");
	}
	else if(asChild == "AreaOutside")
	{
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Outside.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Voice.snt", "AreaAmbientSound_2");
		
		if(iChapter <= 2)
			PlayMusic("01_amb_calm.ogg", "ambient_loop_save_max_slow");
		else if(iChapter <= 4)
			PlayMusic("01_amb_woods.ogg", "ambient_loop_save_verybig_midslow");
		else
			PlayMusic("01_amb_strange.ogg", "ambient_loop_save_verybig_midslow");
		
		if(fSanity <= 30)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
			SetupRoomSanityDamage("roomsanitydamage", 0.03f);
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			SetupRoomSanityDamage("roomsanitydamage", 0.02f);
		}
		
		SetCheckPoint("CPDefault", 41);
		ManageRoomsAppearances(asChild);
	}
	else if(asChild == "AreaOffice")
	{
		PlayMusic("01_amb_strange.ogg", "ambient_loop_save_verybig_midslow");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Cells.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Voice.snt", "AreaAmbientSound_2");
		ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
		
		SetupRoomSanityDamage("roomsanitydamage", 0.02f);
		SetEntityActive("Area_swing_door_23");
		
		SetCheckPoint("CPDefault", 22);
		ManageRoomsAppearances(asChild);
		ManageRoomsAppearances("Outside");
	}
	else if(asChild == "AreaRoom_1")
	{
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_EntranceHall.snt", "AreaAmbientSound_1");
		
		SetCheckPoint("CPDefault", 23);
		
		if(GetLocalVarInt("IntroHasEnded_var") == 0)
		{
			return; //DO NOT PLAY ANYTHING UNTIL THE INTRO HAS ENDED
		}
		
		if(iChapter <= 2)
		{
			ManageAmbientSound("AreaAmbientSound_2_snt", "", "AreaAmbientSound_2");
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			PlayMusic("01_amb_calm.ogg", "ambient_loop_save_max_slow");
			SetupRoomSanityDamage("roomsanitydamage", 0.01f);
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Voice.snt", "AreaAmbientSound_2");
			
			if(iChapter == 3)
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
				PlayMusic("02_amb_strange.ogg", "ambient_loop_save_verybig_midslow");
				SetupRoomSanityDamage("roomsanitydamage", 0.02f);
			}
			else
			{
				PlayMusic("01_amb_strange.ogg", "ambient_loop_save_verybig_midslow");
				ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
				SetupRoomSanityDamage("roomsanitydamage", 0.03f);
				
				if(iChapter >= 5)
					SetLightState("BoxLightRoom_1", "off");
			}
		}
	}
	else if(asChild == "AreaRoom_2")
	{
		PlayMusic("22_amb.ogg", "ambient_loop_save_verybig_midslow");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Monsters.snt", "AreaAmbientSound_2");
		
		SetCheckPoint("CPDefault", 14);
		
		if(GetGlobalVarInt("TinderboxesCollected") <= 1)
		{
			GiveItemFromFile("tinderbox.ent");
			GiveItemFromFile("tinderbox.ent");
		}
		SetEntityState("bonfire_room", "crosshairlamp");
		SetEntityState("candle_room", "crosshairlamp");
		
		if(iChapter <= 2)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			SetupRoomSanityDamage("roomsanitydamage", 0.03f);
		}
		else
		{
			if(iChapter == 3)
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
				SetupRoomSanityDamage("roomsanitydamage", 0.04f);
			}
			else
			{
				ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Storage.snt", "AreaAmbientSound_3");
				
				if(iChapter >= 5)
					SetLightState("BoxLightRoom_2", "off");
			}
		}
	}
	else if(asChild == "AreaThroneRoom")
	{
		PlayMusic("18_amb.ogg", "ambient_loop_save_medbig_midslow");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Storage.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Voice.snt", "AreaAmbientSound_2");
		ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
		
		SetupRoomSanityDamage("roomsanitydamage", 0.04f);
		
		SetEntityCustomFocusCrossHair("AreaFakeOrbPiece", "Pick");
		
		if(GetLocalVarInt("swing_door_12_var") == 1)
			SetCheckPoint(25);
		else
			SetCheckPoint(14);
		ManageRoomsAppearances(asChild);
	}
	else if(asChild == "AreaRoundedWall")
	{
		PlayMusic("01_amb_angel.ogg", "ambient_loop_save_med_midslow");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Storage.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Voice.snt", "AreaAmbientSound_2");
		ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
		
		RemoveTimer("roomsanitydamage");
		SetLocalVarFloat("CurrentRoomSanityDamage_var", 0.0f);
		
		SetCheckPoint("CPDefault", 9);
	}
	else if(asChild == "AreaCandleRoom")
	{
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_EntranceHall.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Cells.snt", "AreaAmbientSound_2");
		
		if(GetLocalVarInt("GruntDiscovered_var") == 1)
		{
			SetEntityActive("Area_swing_door_30");
		}
		
		if(iChapter <= 2)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			SetupRoomSanityDamage("roomsanitydamage", 0.02f);
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
			
			if(iChapter == 3)
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.03f);
			}
			else
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.04f);
			}
		}
		
		ManageRoomsAppearances(asChild);
	}
	else if(asChild == "AreaAttic")
	{
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Cells.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Voice.snt", "AreaAmbientSound_2");
		ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
		
		SetupRoomSanityDamage("roomsanitydamage", 0.01f);
	}
	else if(asChild == "AreaMachineRoom")
	{
		if(GetLocalVarInt("PlayerDiscoveredMachine_var") == 0)
		{
			SetLocalVarInt("PlayerDiscoveredMachine_var", 1);
			SetEntityState("statue_man_1", "off_quick");
			SetPlayerReact("sigh");
		}
		
		SetEntityCustomFocusCrossHair("AreaLadder_up_3", "Ladder");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_MachineRoom.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_2");
		
		if(iChapter >= 4)
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_EEE.snt", "AreaAmbientSound_3");
		else
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
		
		ManageRoomsAppearances(asChild);
	}
	else if(asChild == "AreaCells_1" || asChild == "AreaCells_3")
	{
		string sAmb1 = "";
		string sAmb2 = "";
		string sAmb3 = "";
		int iPlayerStartPosCode = 1;
		
		if(StringContains(asChild, "1"))
		{
			sAmb1 = "01_ambience_Cells.snt";
			sAmb2 = "01_ambience_Darkness.snt";
			sAmb3 = "01_ambience_Storage.snt";
			iPlayerStartPosCode = 27;
		}
		else
		{
			sAmb1 = "01_ambience_Cells.snt";
			sAmb2 = "01_ambience_Monsters.snt";
			sAmb3 = "01_ambience_EEE.snt";
			iPlayerStartPosCode = 28;
			
			SetEntityActive("Area_swing_door_24");
		}
		
		RemoveTimer("brutenoise");
		
		SetLocalVarString("CurrentPlayerRoom_var", "AreaCells_1");
		SetLocalVarInt("CurrentPlayerRoomMaxSpawns_var", 6);
		
		ManageAmbientSound("AreaAmbientSound_1_snt", sAmb1, "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", sAmb2, "AreaAmbientSound_2");
		
		SetCheckPoint("CPDefault", iPlayerStartPosCode);
		
		if(GetLocalVarInt("GruntDiscovered_var") == 0)
		{
			PlayMusic("18_amb.ogg", "ambient_loop_save_medbig_midslow");
			SetupRoomSanityDamage("roomsanitydamage", 0.03f);
			
			SetDeathHint(vsDeathHintsArray);
			return; //TO MAKE SURE IT DOESNT PLAY THE OTHER MUSIC
		}
		
		if(iChapter <= 2)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			PlayMusic("21_amb.ogg", "ambient_loop_save_medbig_midslow");
			SetupRoomSanityDamage("roomsanitydamage", 0.04f);
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", sAmb3, "AreaAmbientSound_3");
			
			if(iChapter <= 4)
			{
				PlayMusic("23_amb02.ogg", "ambient_loop_save_medbig_midslow");
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
			else
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
				PlayMusic("01_amb_disturbing03.ogg", "ambient_loop_save_medbig_midslow");
			}
		}
		
		ManageRoomsAppearances("AreaCells");
	}
	else if(asChild == "AreaCells_2")
	{
		RemoveTimer("brutenoise");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_MachineRoom.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Storage.snt", "AreaAmbientSound_2");
		
		if(iChapter >= 3)
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
		else
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
	}
	else if(asChild == "AreaPrison_1")
	{
		SetLocalVarString("CurrentPlayerRoom_var", "AreaPrison_1");
		SetLocalVarInt("CurrentPlayerRoomMaxSpawns_var", 5);
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Storage.snt", "AreaAmbientSound_2");
		
		if(fSanity <= 30)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Monsters.snt", "AreaAmbientSound_3");
			if(fSanity <= 15)
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
			else
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			SetupRoomSanityDamage("roomsanitydamage", 0.04f);
		}
		
		if(GetLocalVarInt("GruntDiscovered_var") == 1)
		{
			SetCheckPoint("CPDefault", 29);
			ManageRoomsAppearances("AreaPrison");
		}
		if(iChapter >= 5)
			PlayMusic("01_amb_disturbing02.ogg", "ambient_loop_save_medbig_midslow");
		else
			PlayMusic("12_amb.ogg", "ambient_loop_save_medbig_midslow");
	}
	else if(asChild == "AreaPrison_2")
	{
		SetEntityActive("Area_swing_door_27");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Voice.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Storage.snt", "AreaAmbientSound_2");
		
		if(fSanity <= 30)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
			if(fSanity <= 15)
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
			else
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			SetupRoomSanityDamage("roomsanitydamage", 0.04f);
		}
		
		if(GetLocalVarInt("GruntDiscovered_var") == 1)
		{
			SetCheckPoint("CPDefault", 37);
			ManageRoomsAppearances("AreaPrison");
		}
		if(iChapter >= 5)
			PlayMusic("01_amb_disturbing02.ogg", "ambient_loop_save_medbig_midslow");
		else
			PlayMusic("12_amb.ogg", "ambient_loop_save_medbig_midslow");
	}
	else if(asChild == "AreaPrison_3")
	{
		SetLocalVarString("CurrentPlayerRoom_var", "AreaPrison_3");
		SetLocalVarInt("CurrentPlayerRoomMaxSpawns_var", 4);
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Monsters.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Storage.snt", "AreaAmbientSound_2");
		
		if(GetLocalVarInt("swing_door_28_var") == 1)
			SetCheckPoint(31);
		else
			SetCheckPoint(29);
		
		if(fSanity <= 30)
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
			if(fSanity <= 15)
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
			else
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			SetupRoomSanityDamage("roomsanitydamage", 0.04f);
		}
		
		ManageRoomsAppearances("AreaPrison");
		if(iChapter >= 5)
			PlayMusic("01_amb_disturbing02.ogg", "ambient_loop_save_medbig_midslow");
		else
			PlayMusic("12_amb.ogg", "ambient_loop_save_medbig_midslow");
	}
	else if(StringContains(asChild, "AreaSecretPrison"))
	{
		SetEntityState("AreaLadder_up_4", "crosshair_ladder");
		
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_EEE.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Storage.snt", "AreaAmbientSound_2");
		
		if(fSanity <= 30)
		{
			PlayMusic("23_amb.ogg", "ambient_loop_save_medbig_midslow");
			
			if(fSanity <= 15)
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
			else
			{
				SetupRoomSanityDamage("roomsanitydamage", 0.05f);
			}
		}
		else
		{
			SetupRoomSanityDamage("roomsanitydamage", 0.04f);
			
			if(iChapter <= 3)
				PlayMusic("04_amb.ogg", "ambient_loop_save_medbig_midslow");
			else if(iChapter <= 4)
				PlayMusic("23_amb.ogg", "ambient_loop_save_medbig_midslow");
			else
				PlayMusic("01_amb_disturbing05.ogg", "ambient_loop_save_medbig_midslow");
		}
		
		if(StringContains(asChild, "1"))
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
			SetCheckPoint("CPDefault", 33);
		}
		else
		{
			ManageAmbientSound("AreaAmbientSound_3_snt", "01_ambience_Darkness.snt", "AreaAmbientSound_3");
			SetCheckPoint("CPDefault", 36);
		}
		
		ManageRoomsAppearances("AreaSecretPrison");
	}
	else if(asChild == "AreaSecretHallway")
	{
		ManageAmbientSound("AreaAmbientSound_1_snt", "01_ambience_Library.snt", "AreaAmbientSound_1");
		ManageAmbientSound("AreaAmbientSound_2_snt", "01_ambience_Voice.snt", "AreaAmbientSound_2");
		ManageAmbientSound("AreaAmbientSound_3_snt", "", "AreaAmbientSound_3");
		
		SetCheckPoint("CPDefault", 35);
		
		SetupRoomSanityDamage("roomsanitydamage", 0.04f);
		
		ManageRoomsAppearances("AreaSecretPrison");
	}
	
	int iRare = RandInt(0, 19);
	int iUncommon = RandInt(0, 9);
	int iCommon = RandInt(0, 4);
	
	if(iChapter <= 2)
	{
		//NOTHING HERE
	}
	else if(iChapter == 3)
	{
		//NOTHING HERE
	}
	else if(iChapter == 4)
	{
		if(iRare == 19 && GetPlayerLampOil() < 50)
		{
			AddPlayerLampOil(1.25f);
			SetDebugMessage("LANTERNOIL WITH RARE CHANCE!");
		}
	}
	else if(iChapter == 5)
	{
		if(fSanity >= 75)
			SetPlayerSanity(60.0f);
		
		if(iRare == 19)
		{
			ActivateRandomShowEnemyArea("", 0);
			SetDebugMessage("SHOWENEMY WITH RARE CHANCE!");
		}
	}
	else if(iChapter == 6)
	{
		if(fSanity > 50)
			SetPlayerSanity(50.0f);
		
		if(iUncommon == 9)
		{
			ActivateRandomShowEnemyArea("", 0);
			SetDebugMessage("SHOWENEMY WITH UNCOMMON CHANCE!");
		}
	}
	
	SetDeathHint(vsDeathHintsArray);
}

void ManageAmbientSound(string asSoundName, string asSoundFile, string asEntity)
{
	float fTime = 6.0f;
	
	if(asSoundFile.length() == 0)
	{
		StopSound(asSoundName, fTime);
		SetLocalVarString(asSoundName, asSoundFile);
		//SetDebugMessage("Stop ambient sound for " + asEntity);
		return;
	}
	
	if(GetLocalVarString(asSoundName) != asSoundFile)
	{
		StopSound(asSoundName, fTime);
		SetLocalVarString(asSoundName, asSoundFile);
		PlaySoundAtEntity(asSoundName, asSoundFile, asEntity, fTime, true);
	}
	else
	{
		//SetDebugMessage("No ambient sound changes for " + asEntity);
	}
}

void CollidePlayerAndAreaInsideCloset(string asParent, string asChild, int aiState)
{
	AddLocalVarInt("PlayerInsideCloset_var", 1);
	SetDebugMessage("PlayerInsideCloset_var: " + GetLocalVarInt("PlayerInsideCloset_var"));
	if(GetLocalVarInt("PlayerInsideCloset_var") == 4)
		SetAchievementUnlocked("WardrobeAchievement");
}

void AddOrbPieceToPedestal(string asItem)
{
	AddLocalVarInt("OrbPiecesOnPedestal_var", 1);
	int iPiecesOnPedestal = GetLocalVarInt("OrbPiecesOnPedestal_var");
	RemoveItem(asItem);
	SetEntityInactive("orb_" + (iPiecesOnPedestal - 1), 1.5f);
	SetEntityAndEffectsActive("orb_" + iPiecesOnPedestal, "ps_orb_repair_effect.ps", "22_orb_forge.snt", asItem + "_quick");
	SetEntityAndEffectsActive("candle_orb_" + iPiecesOnPedestal, "", "", asItem);
	SetLightState("candle_orb_" + iPiecesOnPedestal, "lamp_on");
	if(GetQuestState("OrbPedestalInsideOffice") == 0)
		SetQuestAdded("OrbPedestalInsideOffice");
	SetDebugMessage("Added an orb piece to the pedestal! Num of orb pieces on pedestal: " + GetLocalVarInt("OrbPiecesOnPedestal_var"));
	
	if(iPiecesOnPedestal == 6)
	{
		PlayParticleSystem("ps_orb_light_fade.ps", "orb_6", "save_midquick");
		SetPlayerHealth("boost_max_effect");
		SetPlayerSanity("boost_max_effect");
		PlaySound("27_orb_done.snt");
		PlaySound("27_thump.snt");
		PlaySound("27_wind.snt");
		SetQuestCompleted("Collect6Orb");
		SetQuestCompleted("Combine6Orb");
		SetQuestCompleted("OrbPedestalInsideOffice");
		SetDebugMessage("Orb is COMPLETED!");
		StopMusic("ambient_slow");
		PlayMusic("26_event_agrippa_head.ogg", "event");
		AddTimer("OrbComplete", 3.0f, "PlayCutsceneSequence");
	}
}

void UseTarOnPedestal(string asItem, string asEntity)
{
	SetLocalVarInt("TarOnPedestal_var", 1);
	RemoveItem(asItem);
	//SetEntityInactive("orb_pedestal_1");
	CompleteQuest("NeedTar", "NeedTar");
	PlaySoundAtEntity("tars", "22_use_tar.snt", asEntity, 1.0f, false);
	SetEntityActive("orb_pedestal_2");
	SetEntityVisible("orb_pedestal_2");
	ResetProp("orb_pedestal_2");
}

void UseOrbOnPedestal(string asItem, string asEntity)
{
	int iPiecesOnPedestal = GetLocalVarInt("OrbPiecesOnPedestal_var");
	int iTarOnPedestal = GetLocalVarInt("TarOnPedestal_var");
	
	if(iPiecesOnPedestal == 1 && iTarOnPedestal == 0)
	{
		SetQuestAdded("NeedTar");
		SetMessage("NeedTar");
		return;
	}
	
	AddOrbPieceToPedestal(asItem);
	if(iPiecesOnPedestal == 0)
	{
		SetActiveEnemyDisabled("off");
		PlayGuiSound("03_orb.snt", 0.3f);
		SetPlayerState("activeoff_drop");
		SetPlayerState("speedveryslow_jumpoff");
		AddTimer("off_silent", 0.01f, "SetLanternState");
		AddTimer("whitetoblack", 0.01f, "SetScreenEffect");
		AddTimer("01_voice_woman_melody.ogg", 0.5f, "PlaySound");
		SetEntitiesActive("candle_orb_", 4.0f, 1, 6);
		AddTimer("orb_pedestal_1", 2.0f, "SetPlayerLookAt");
		AddTimer("orb_pedestal_1", "lamp_on", 2.0f, "SetLightState");
		AddTimer(gsPlayerStartAreaPrefix + 22, 2.25f, "TeleportPlayer");
		AddTimer("activeon_drop", 2.5f, "SetPlayerState");
		AddTimer("fadein_midquick", 2.5f, "SetScreenEffect");
		AddTimer("shake_big_quick", 2.5f, "SetScreenEffect");
		AddTimer("guardian_activated.snt", 2.5f, "PlaySound");
		AddTimer("01_orb_loop.snt", asEntity, "save_slow", 2.5f, "PlaySound");
		AddTimer("med_midslow", 2.6f, "SetGlobalSoundVolume");
		AddTimer("scare_sigh_effect_small", 2.75f, "SetPlayerReact");
		AddTimer("allnormal_sloth", 4.0f, "SetScreenEffect");
		AddTimer("speednormal_jumpon", 6.0f, "SetPlayerState");
		AddTimer("", 6.0f, "StopPlayerLookAt");
		AddTimer("max_midslow", 6.0f, "SetGlobalSoundSpeed");
		AddTimer("max_midslow", 6.0f, "SetGlobalSoundVolume");
	}
	else
	{
		if(GetActiveEnemyIsAround())
			SetEnemyState(GetActiveEnemyName(), "alert");
	}
	
	if(iPiecesOnPedestal == 3)
	{
		PlaySound("guardian_idle.snt");
		SetPlayerReact("scare_breath_verysmall", 1.5f);
	}
	else if(iPiecesOnPedestal == 5)
	{
		PlaySound("guardian_ontop.snt");
		SetPlayerReact("scare_breath_verysmall", 1.25f);
	}
}

void PlayerInteractWithOrbPedestal(string asEntity)
{
	if(GetQuestState("OrbPedestalInsideOffice") == 0)
	{
		SetQuestAdded("OrbPedestalInsideOffice");
	}
	int iPiecesOnPedestal = GetLocalVarInt("OrbPiecesOnPedestal_var");
	if(iPiecesOnPedestal == 0)
		SetMessage("OrbPedestal_1");
	else if(iPiecesOnPedestal <= 2)
		SetMessage("OrbPedestal_2");
	else if(iPiecesOnPedestal <= 4)
		SetMessage("OrbPedestal_3");
	else if(iPiecesOnPedestal <= 6)
		SetMessage("OrbPedestal_4");
}

void SetAchievementUnlocked(string asInput)
{
	SetGlobalVarInt(asInput, 1);
	AddQuest(asInput, asInput);
	PlayMusic("01_event_achievement", false, 0.7f, 0.5f, 10, false);
	SetMessage("Hints", asInput, 10.0f);
	SetPlayerSanity("boost_verysmall_effect");
	SetDebugMessage("Unlocked Achievement " + asInput);
	
	if(asInput == "FastSeekerAchievement") //Unlocked by collecting all strange paintings, run faster
	{
		SetPlayerState("speedquick");
	}
	else if(asInput == "HealthAchievement") //Unlocked by not dying not even once after grunt discovered is triggered, recover health faster + towards full health
	{
		AddTimer(asInput, 5.0f, "TimerAchievementEffects");
	}
	else if(asInput == "SanityAchievement") //Unlocked by triggering enough insane object, recover sanity faster + towards full sanity
	{
		AddTimer(asInput, 10.0f, "TimerAchievementEffects");
	}
	else if(asInput == "WardrobeAchievement") //Unlocked by entering in all of the closets, jump higher
	{
		SetPlayerState("jumpbig");
	}
	else if(asInput == "EnemiesAchievement") //Unlocked by making autoremove a lot of enemies, no blur vision while looking at enemies + more lantern oil
	{
		SetEnemyState(GetStringWithExtraModesSuffix("grunt"), "sanitydrainoff");
		SetEnemyState(GetStringWithExtraModesSuffix("brute"), "sanitydrainoff");
		SetEnemyState(GetStringWithExtraModesSuffix("waterlurker"), "sanitydrainoff");
		SetEnemyState(GetStringWithExtraModesSuffix("ghost_music1"), "sanitydrainoff");
		SetEnemyState(GetStringWithExtraModesSuffix("ghost_music2"), "sanitydrainoff");
		SetEnemyState(GetStringWithExtraModesSuffix("ghost_music3"), "sanitydrainoff");
		SetEnemyState(GetStringWithExtraModesSuffix("ghost_music4"), "sanitydrainoff");
		AddTimer(asInput, 10.0f, "TimerAchievementEffects");
	}
	else if(asInput == "StatuesAchievement") //Unlocked by greeting all statues, no slime health damage
	{
		SetEntitiesInactive("SlimeDamageArea_", 1, 88);
	}
}

void TimerAchievementEffects(string asTimer)
{
	float fCooldown = 10.0f;
	if(StringContains(asTimer, "Health"))
	{
		SetPlayerHealth("boost_min");
		fCooldown = 5.0f;
	}
	else if(StringContains(asTimer, "Sanity"))
	{
		SetPlayerSanity("boost_min");
		fCooldown = 6.5f;
	}
	else
	{
		if(GetPlayerLampOil() < 50)
			AddPlayerLampOil(5.0f);
		fCooldown = 120.0f;
		SetDebugMessage(asTimer + " with a cooldown " + fCooldown);
	}
	AddTimer(asTimer, fCooldown, "TimerAchievementEffects");
}

void ActivateGuardianSlime(string asSlime, bool abPlayLoopSound)
{
	float fPlaySound = RandFloat(0.9f,1.5f);
	if(fPlaySound <= 1 && GetLocalVarInt("SlimeAppearSound_var") <= 5)
	{
		AddLocalVarInt("SlimeAppearSound_var", 1);
		PlaySound("slime_create.snt", asSlime);
		PlayParticleSystem("ps_slime_attack_normal.ps", asSlime);
	}
	SetEntityActive(asSlime, 2.0f);
	if(abPlayLoopSound == true)
	{
		PlaySoundAtEntity(asSlime + "_loop_snt", "slime_loop.snt", asSlime, 2.0f, true);
	}
}

void ActivateGuardianSlime(string asSlime, string asSlimeDamageArea, bool abPlayLoopSound)
{
	float fPlaySound = RandFloat(0.9f,1.5f);
	if(fPlaySound <= 1 && GetLocalVarInt("SlimeAppearSound_var") <= 5)
	{
		AddLocalVarInt("SlimeAppearSound_var", 1);
		PlaySound("slime_create.snt", asSlime);
		PlayParticleSystem("ps_slime_attack_normal.ps", asSlime);
	}
	AddTimer(asSlimeDamageArea, 2.0f, "SetEntityActive");
	SetEntityActive(asSlime, 2.0f);
	if(abPlayLoopSound == true)
	{
		PlaySound("slime_loop.snt", asSlime, "save_midquick");
	}
}

void SetupRoomSanityDamage(string asInputA, float afInputB)
{
	float fAmount = afInputB;
	if(GetPlayerSanity() > 55)
		fAmount = fAmount * 1.5f;
	
	if(GetActiveEnemyIsAround())
		fAmount = fAmount + 0.075f;
	
	if(GetLocalVarFloat("CurrentRoomSanityDamage_var") == fAmount)
	{
		SetDebugMessage("No changes to room sanity damage");
	}
	else if(GetLocalVarFloat("CurrentRoomSanityDamage_var") == 0)
	{
		SetLocalVarFloat("CurrentRoomSanityDamage_var", fAmount);
		AddTimer(asInputA, 2.0f, "TimerSanityDamage");
		SetDebugMessage("Resume room sanity damage!");
	}
	else
	{
		SetLocalVarFloat("CurrentRoomSanityDamage_var", fAmount);
		SetDebugMessage("New room sanity damage: " + fAmount);
	}
}

void CollidePlayerAndAreaRandomInsaneObject(string asParent, string asChild, int aiState)
{
	if(asChild == "AreaInsanePiano")
	{
		SetLeverStuckState("piano_1", -1, false);
		AddPropImpulse("piano_1", 0, -10, 10, "world");
		StopSound("piano_1" + gsSoundNameSuffix, "quick");
		GiveSanityDamage(10, true);
		CreateParticleSystemAtEntity("PSdust", "ps_dust_piano.ps", "piano_1", false);
		PlayMusic("01_event_piano.ogg", "event_bolt");
		
		SetEntityPlayerInteractDisablesStuck("piano_1");
		
		AddTimer("InsanePiano_var", "0", 200.0f, "SetLocalVarInt");
		
		if(GetActiveEnemyIsAround())
			SetEnemyState(GetActiveEnemyName(), "alert");
	}
}

void PlayerInteractWithRandomInsaneObject(string asEntity)
{
	AddLocalVarInt("InsaneObjectsTriggered_var", 1);
	SetDebugMessage("Insane objects triggered: " + GetLocalVarInt("InsaneObjectsTriggered_var"));
	if(GetLocalVarInt("InsaneObjectsTriggered_var") == 16)
		SetAchievementUnlocked("SanityAchievement");
	
	if(StringContains(asEntity, "phonograph_"))
	{
		PlayGuiSound("01_phonograph_turnedoff.ogg", 2.0f);
		RemoveEntityPlayerInteractCallback(asEntity);
		StopSound(asEntity + "_snt");
		
		AddTimer(asEntity, RandFloat(2.25f, 3.0f), "TimerPhonographScare");
	}
	else if(StringContains(asEntity, "AreaClockGrandfather_"))
	{
		PlayGuiSound("07_pick_lock.snt", 0.5f);
		PlayGuiSound("joint_bull_open.snt", 2.0f);
		PlayMusic("01_event_clock.ogg", "event_max_bolt");
		RemoveEntityPlayerInteractCallback(asEntity);
		StopSound(asEntity + "_snt");
		AddTimer("custom_stories/xdj_tcolm/sounds/01/clock/01_clock_grandfather.snt", asEntity, "save", 70.0f, "PlaySound");
		GiveSanityDamage(5.0f, false);
		SetPlayerState("speedslow_jumpoff");
		SetScreenEffect("sepia_mid");
		
		if(StringContains(asEntity, "1"))
		{
			AddTimer("InsaneClock_1_var", "0", 200.0f, "SetLocalVarInt");
			AddTimer("1", 22.0f, "TimerClockScare");
		}
		else
		{
			AddTimer("InsaneClock_2_var", "0", 200.0f, "SetLocalVarInt");
			AddTimer("2", 22.0f, "TimerClockScare");
		}
	}
	else if(StringContains(asEntity, "swing_door_"))
	{
		RemoveTimer(asEntity);
		StopSound(asEntity + gsSoundNameSuffix);
		SetEntityPlayerInteractCallback(asEntity, "PlayerInteractWithDoor", false);
		SetPlayerState("force-z_med");
		PlayMusic("04_event_stairs.ogg", "event_bolt_max");
		PlayGuiSound("lurker_hit_wood.snt", 1.5f);
		PlayGuiSound("27_jam.snt", 1.25f);
		PlayGuiSound("15_prisoner_scream.ogg", 1.5f);
		PlayGuiSound("01_teleport.snt", 0.75f);
		SetPlayerReact("scare_small");
		SetPlayerHealth("damage_min_blood_shake");
		SetScreenEffect("sepia_quick");
		AddTimer("allnormal_midquick", 4.0f, "SetScreenEffect");
		
		if(GetActiveEnemyIsAround())
			SetEnemyState(GetActiveEnemyName(), "alert");
		
		if(StringContains(asEntity, "8"))
		{
			AddTimer("InsaneDoor_1_var", "0", 200.0f, "SetLocalVarInt");
		}
		else
		{
			AddTimer("InsaneDoor_2_var", "0", 200.0f, "SetLocalVarInt");
		}
	}
}

void ConnectStateChangeOfLever(string asEntity, int aiState)
{
	if(MathAbs(aiState) == 1)
	{
		SetMessage("RoomObjectsReset");
		PlaySound("unlock_door.snt");
		
		if(GetQuestState("StuckStatuette") == 2)
		{
			ResetProp("statue_room_2");
			SetEntityPos("statue_room_2", 45.775f, -2.8f, 36.4f);
		}
		ResetProp("statue_room_1");
		SetEntityPos("statue_room_1", 43.0f, 5.5f, 6.35f);
		ResetProp("shirt_room_1");
		SetEntityPos("shirt_room_1", 24.986f, 1.9f, 18.446f);
		ResetProp("shirt_room_2");
		SetEntityPos("shirt_room_2", 33.0f, 6.5f, -9.75f);
		ResetProp("bed_room");
		SetEntityPos("bed_room", 22.25f, 2.0f, -6.75f);
		ResetProp("cross_small_jesus");
		SetEntityPos("cross_small_jesus", -19.459f, 5.8f, 22.046f);
	}
}

void TimerClockScare(string asTimer)
{
	SetPlayerState("speednormal_jumpon");
	SetScreenEffect("allnormal_midslow");
	if(asTimer == "1")
	{
		if(GetActiveEnemyIsNear(50, 60) == false)
		{
			SetPlayerReact("pant_breath_effect_small", 0.75f);
			SetActiveEnemyDisabled("poofsilent");
			string sEnemyName = "ghost_music" + 4 + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "fakeoff");
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "70");
			SetEntityInvisible(sEnemyName);
			SetEnemyPatrolNode(sEnemyName, 51);
			SetEnemyPatrolNode(sEnemyName, 2);
			SetEnemyPatrolNode(sEnemyName, 43);
			SetEnemyPatrolNode(sEnemyName, 250);
			if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
		}
		else
			SetEnemyState(GetActiveEnemyName(), "chase");
	}
	else if(asTimer == "2")
	{
		if(GetActiveEnemyIsNear(50, 60) == false)
		{
			SetPlayerReact("pant_breath_effect_small", 0.75f);
			SetActiveEnemyDisabled("poofsilent");
			string sEnemyName = "ghost_music" + 4 + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "fakeoff");
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "504");
			SetEntityInvisible(sEnemyName);
			SetEnemyPatrolNode(sEnemyName, 499);
			SetEnemyPatrolNode(sEnemyName, 535);
			SetEnemyPatrolNode(sEnemyName, 519);
			SetEnemyPatrolNode(sEnemyName, 571);
			if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
		}
		else
			SetEnemyState(GetActiveEnemyName(), "chase");
	}
}

void TimerPhonographScare(string asTimer)
{
	SetPlayerReact("scare_small");
	PlayGuiSound("01_phonograph_turnedoff.ogg", 2.0f);
	PlayGuiSound("01_phonograph_scare0" + RandInt(1, 3) + ".ogg", 2.0f);
	PlayMusic("01_event_eerie_stinger01.ogg", "event_max_bolt");
	
	if(GetActiveEnemyIsAround())
		SetEnemyState(GetActiveEnemyName(), "alert");
	
	if(StringContains(asTimer, "1"))
		AddTimer("InsanePhonograph_1_var", "0", 200.0f, "SetLocalVarInt");
	else
		AddTimer("InsanePhonograph_2_var", "0", 200.0f, "SetLocalVarInt");
}

void TimerSanityDamage(string asTimer)
{
	GiveSanityDamage(GetLocalVarFloat("CurrentRoomSanityDamage_var"), false);
	//AddDebugMessage("Sanity drain from room at value " + fAmount, false);
	AddTimer(asTimer, 2.0f, "TimerSanityDamage");
}

void CollidePlayerAndAreaIronMaidenGhost(string asParent, string asChild, int aiState)
{
	if(asChild == "AreaIronMaidenGhost_2")
	{
		return;
		
		/*SetSwingDoorClosed("iron_maiden_1", false, true);
		SetDoorState("iron_maiden_1", "force-z");
		AddBodyImpulse("iron_maiden_1_leftDoor", -0.7, 0 , -0.7, "world");
		AddBodyImpulse("iron_maiden_1_rightDoor", -0.7, 0 , 0.7, "world");
		AddTimer("iron_maiden_1", 0.1, "TimerExtraMaidenImpulse");
		PlaySoundAtEntity("AreaIronMaidenDoors_snt", "24_iron_maiden", "AreaIronMaidenDoors", 0.0f, false);
		CreateParticleSystemAtEntity("maidensmoke", "ps_iron_maiden_event_smoke.ps", "AreaIronMaidenDoors", false);
		StartScreenShake(0.1f, 0.1f, 0.0f, 0.1f);
		SetPlayerReact("scare_small");
		SetPlayerLookAt("iron_maiden_1", "max", 0.75f);*/
	}
	else if(asChild == "AreaIronMaidenGhost_1")
	{
		AddBodyImpulse("iron_maiden_3_leftDoor", -0.7, 0 , -0.7, "world");
		AddBodyImpulse("iron_maiden_3_rightDoor", -0.7, 0 , 0.7, "world");
		//AddTimer("iron_maiden_3", 0.1, "TimerExtraMaidenImpulse");
		PlaySoundAtEntity("iron_maiden_3_snt1", "24_iron_maiden", "iron_maiden_3", 0.0f, false);
		PlaySoundAtEntity("iron_maiden_3_snt2", "01_door", "iron_maiden_3", 1.0f, false);
		CreateParticleSystemAtEntity("maidensmoke", "ps_iron_maiden_event_smoke.ps", "iron_maiden_3", false);
		SetPlayerLookAt("iron_maiden_3", "max", 1.0f);
		//SetEntityState("naked_guy_1", "force-x_max_on_veryquick");
		SetScreenEffect("shake_medbig_bolt");
		AddTimer("pant_sigheffect_verysmall", 0.75f, "SetPlayerReact");
		GiveSanityDamage(5.0f, true);
	}
}

void TimerExtraMaidenImpulse(string asTimer)
{
	AddBodyImpulse(asTimer + "_leftDoor", -0.7, 0 , -0.7, "world");
	AddBodyImpulse(asTimer + "_rightDoor", -0.7, 0 , 0.7, "world");
}

void CollidePlayerAndAreaDiscoverGrunt(string asParent, string asChild, int aiState)
{
	SetActiveEnemyDisabled("poofsilent");
	string sEnemyName = GetStringWithExtraModesSuffix("grunt");
	SetEnemyState(sEnemyName, "friendon");
	SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "60");
	if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
	SetEnemyPatrolNode(sEnemyName, 55, 1);
	SetEnemyPatrolNode(sEnemyName, 70, 1);
	SetPlayerLookAt("chair_nice01_1", "med_playerspeedveryslow", 1.0f);
	SetDoorState("swing_door_1", "explode");
	PlayMusic("01_event_grunt.ogg", "event_verybig_quick");
	PlayGuiSound(GetFunnyModeString("sounds/enemy/grunt/notice_long.snt"), 0.7f);
	AddTimer("scare_verysmall", 0.75f, "SetPlayerReact");
	AddTimer("TheyAreLookingForMe", 5.0f, "SetMessage");
	
	StopSound("slime_2_snt");
	SetEntityInactive("slime_2");
	SetDoorState("swing_door_27", "unlock_silent");
	RemoveEntityPlayerInteractCallback("Area_swing_door_27");
	
	SetActiveEnemyName(sEnemyName);
}

void CollidePlayerAndAreaFall(string asParent, string asChild, int aiState)
{
	if(StringContains(asChild, "Scare"))
	{
		SetDeathHint("DoNotFall");
		SetScreenEffect("fadeout_midquick");
		PlaySound("react_scare.snt");
	}
	else
	{
		SetPlayerHealth("damage_max_lethal");
	}
}

void CollideEnemyAndAreaFall(string asParent, string asChild, int aiState)
{
	SetActiveEnemyDisabled("poofsilent");
}

void CollidePlayerAndInsaneObject(string asParent, string asChild, int aiState)
{
	if(GetPlayerSanity() <= 30)
	{
		RemoveEntityPlayerLookAtCallback(asChild);
		RemoveTimer(asChild);
		PlayInsaneEvent(asChild);
		AddTimer(asChild, "2.0f", 6.0f, "SetEntityInactive");
		AddPlayerBodyForce(0.0f, 1000*2.5f, -9000*2.5f, true);
		if(StringContains(asChild, "cross_jesus"))
		{
			SetPlayerHealth("damage_verysmall");
			PlayGuiSound("01_teleport", 1.0f);
		}
		else if(StringContains(asChild, "corpse_male"))
		{
			SetPlayerHealth("damage_verysmall");
			PlayGuiSound("01_teleport", 1.0f);
		}
	}
	else
	{
		AddTimer(asChild, "CollidePlayerAndInsaneObject", "enter_remove", 60.0f, "SetEntityPlayerCollideCallback");
	}
}

void CollidePlayerAndAreaShowEnemy(string asParent, string asChild, int aiState)
{
	if(GetLocalVarInt("LastBruteEvent_var") == 1)
	{
		SetDebugMessage("Last brute event is active! No show enemy for now.");
		return;
	}
	else if(GetLocalVarInt("ShowEnemyCooldown_var") == 1)
	{
		SetDebugMessage("Show enemy is on cooldown! No show enemy for now.");
		return;
	}
	
	string sCurrentActiveEnemy = GetActiveEnemyName();
	
	if(GetLocalVarInt(asChild + "_var") == 1)
	{
		SetDebugMessage("Could not trigger enemy show " + asChild + " it has been already triggered!");
		return;
	}
	
	if(asChild == "AreaDiningHall_ShowEnemy_1" || asChild == "AreaDiningHall_ShowEnemy_2")
	{
		if(sCurrentActiveEnemy == "")
		{
			SetEntityInactive(asChild);
			AddTimer(asChild, 0.125f, "SetupEnemyPath");
		}
		else
			SetDebugMessage("Could not trigger enemy show " + asChild + " there is an enemy around!");
		
		return;
	}
	else if(asChild == "AreaEntranceHall_ShowEnemy_3")
	{
		if(GetLocalVarInt("AreaCheckLook_1") != 1)
			return;
	}
	else if(asChild == "AreaDiningHall_ShowEnemy_5")
	{
		if(GetLocalVarInt("AreaCheckLook_2") != 1)
			return;
	}
	else if(asChild == "AreaCells_1_ShowEnemy_4")
	{
		if(GetLocalVarInt("AreaCheckLook_3") == 1 || GetLocalVarInt("swing_door_24_var") == 0)
			return;
	}
	else if(asChild == "AreaCells_1_ShowEnemy_2")
	{
		if(GetLocalVarInt("swing_door_24_var") == 0)
			return;
	}
	else if(asChild == "AreaPrison_3_ShowEnemy_2")
	{
		if(GetLocalVarInt("AreaCheckLook_4") == 1)
			return;
		else if(GetActiveEnemyIsNear(8, 18) == false)
		{
			SetEntityInactive(asChild);
			SetActiveEnemyDisabled("poofsilent");
			AddTimer(asChild, RandFloat(0.1f, 0.2f), "SetupEnemyPath");
			return;
		}
	}
	else if(asChild == "AreaEntranceHall_ShowEnemy_4")
	{
		if(GetActiveEnemyIsNear(8, 18) == false)
		{
			SetEntityInactive(asChild);
			SetActiveEnemyDisabled("poofsilent");
			AddTimer(asChild, RandFloat(0.125f, 0.25f), "SetupEnemyPath");
			return;
		}
		else
		{
			SetDebugMessage("Could not trigger enemy show! " + sCurrentActiveEnemy + " is too close!");
			return;
		}
	}
	
	if(GetActiveEnemyIsNear(50, 60) == false)
	{
		SetEntityInactive(asChild);
		SetActiveEnemyDisabled("poofsilent");
		AddTimer(asChild, RandFloat(0.125f, 0.25f), "SetupEnemyPath");
		return;
	}
	else
	{
		SetDebugMessage("Could not trigger enemy show! " + sCurrentActiveEnemy + " is too close!");
		return;
	}
}

void SetupEnemyPath(string asArea)
{
	string sEnemyName = "";
	int iAreaCode = StringToInt(GetSubString(asArea, asArea.length() - 1));
	
	if(StringContains(asArea, "AreaPrison_1"))
	{
		AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
		
		if(StringContains(asArea, "ShowEnemy_1"))
		{
			AddLocalVarInt(asArea + "_var", 1);
			sEnemyName = GetStringWithExtraModesSuffix("grunt");
			
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "567");
			string[] vsPathNodesArray = {"579_idle", "520_idle", "540_idle", "516_idle", "523_idle"};
			SetEnemyPatrolNodes(sEnemyName, vsPathNodesArray);
		}
		else if(StringContains(asArea, "ShowEnemy_2"))
		{
			sEnemyName = "grunt" + GetExtraModesSuffix();
			
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "523");
			string[] vsPathNodesArray = {"517_idle", "571_idle", "532_idle", "567_idle"};
			SetEnemyPatrolNodes(sEnemyName, vsPathNodesArray);
		}
		else if(StringContains(asArea, "ShowEnemy_3"))
		{
			sEnemyName = "brute" + GetExtraModesSuffix();
			
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "504");
			string[] vsPathNodesArray = {"499_idle", "571_idle", "525_idle", "504_idle"};
			SetEnemyPatrolNodes(sEnemyName, vsPathNodesArray);
		}
		else if(StringContains(asArea, "ShowEnemy_4"))
		{
			AddLocalVarInt(asArea + "_var", 1);
			sEnemyName = "grunt" + GetExtraModesSuffix();
			
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "533");
			string[] vsPathNodesArray = {"525_idle", "566_idle", "546_idle", "508_idle"};
			SetEnemyPatrolNodes(sEnemyName, vsPathNodesArray);
		}
		else if(StringContains(asArea, "ShowEnemy_5"))
		{
			AddLocalVarInt(asArea + "_var", 1);
			sEnemyName = "brute" + GetExtraModesSuffix();
			
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "508");
			string[] vsPathNodesArray = {"538_idle", "502_idle", "533_idle"};
			SetEnemyPatrolNodes(sEnemyName, vsPathNodesArray);
		}
		
		PlaySound("door_prison_close.snt", sEnemyName);
		if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
	}
	else if(StringContains(asArea, "AreaEntranceHall"))
	{
		if(StringContains(asArea, "ShowEnemy_1"))
		{
			AddLocalVarInt(asArea + "_var", 1);
			
			AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
			sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "fakeoff");
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "206");
			SetEntityVisible(sEnemyName, false);
			string[] vsPathNodesArray = {"199_idle", "182_idle", "196_idle", "260_idle"};
			SetEnemyPatrolNodes(sEnemyName, vsPathNodesArray);
		}
		else if(StringContains(asArea, "ShowEnemy_2"))
		{
			AddLocalVarInt(asArea + "_var", 1);
			
			AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
			sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "fakeoff");
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "206");
			SetEntityVisible(sEnemyName, false);
			string[] vsPathNodesArray = {"189_idle", "70_idle", "241_idle", "250_idle"};
			SetEnemyPatrolNodes(sEnemyName, vsPathNodesArray);
		}
		else if(StringContains(asArea, "ShowEnemy_3"))
		{
			AddLocalVarInt(asArea + "_var", 1);
			
			sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "fakeoff");
			AddTimer("scare_breath_small", 0.8f, "SetPlayerReact");
			//AddTimer(sEnemyName, "chase", 0.8f, "SetEnemyState");
			//PlaySound("sanity_heartbeat.snt");
			PlaySound("ghost_notice.snt");
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "242");
			SetEntityInvisible(sEnemyName);
			SetEnemyPatrolNode(sEnemyName, 250, 1);
			SetEnemyPatrolNode(sEnemyName, 274, 2);
			SetEnemyPatrolNode(sEnemyName, 473, 1);
		}
		else if(StringContains(asArea, "ShowEnemy_4"))
		{
			AddLocalVarInt(asArea + "_var", 1);
			AddLocalVarInt("BathroomExplored_var", 1);
			
			AddTimer("scare_breath_small", 0.7f, "SetPlayerReact");
			sEnemyName = "grunt" + GetExtraModesSuffix();
			PlayMusic("10_event_coming.ogg", "event_max_bolt");
			PlaySound(GetFunnyModeString("enemy/grunt/notice_long.snt"), "swing_door_21");
			PlaySoundAtEntity("doorgrunt", "10_close_door.snt", "swing_door_21", 0.1f, false);
			
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "244");
			SetEnemyPatrolNode(sEnemyName, 301, 2);
			SetEnemyPatrolNode(sEnemyName, 307, 1);
			AddEnemyPatrolNode(sEnemyName, gsPathNodeAreaPrefix + 304, 0.5f, "");
			SetEnemyPatrolNode(sEnemyName, 301, 1);
			SetEnemyPatrolNode(sEnemyName, 316, 0);
		}
		else if(StringContains(asArea, "ShowEnemy_5"))
		{
			AddLocalVarInt(asArea + "_var", 1);
			
			AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
			sEnemyName = "brute" + GetExtraModesSuffix();
			SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "255");
			SetEnemyPatrolNode(sEnemyName, 253, 2);
			SetEnemyPatrolNode(sEnemyName, 310, 1);
			SetEnemyPatrolNode(sEnemyName, 241, 1);
			SetEnemyPatrolNode(sEnemyName, 71, 0);
			SetEnemyPatrolNode(sEnemyName, 215, 0);
			SetEnemyPatrolNode(sEnemyName, 192, 0);
			SetEnemyPatrolNode(sEnemyName, 392, 1);
		}
		if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
	}
	else if(StringContains(asArea, "AreaLibrary_2"))
	{
		switch(iAreaCode)
		{
			case 3:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 0.75f, "SetPlayerReact");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "117");
				SetEntityInvisible(sEnemyName);
				SetEnemyPatrolNode(sEnemyName, 120, 0);
				SetEnemyPatrolNode(sEnemyName, 138, 1);
				SetEnemyPatrolNode(sEnemyName, 171, 0);
				SetEnemyPatrolNode(sEnemyName, 170, 0);
				SetEnemyPatrolNode(sEnemyName, 165, 1);
				SetEnemyPatrolNode(sEnemyName, 164, 0);
				SetEnemyPatrolNode(sEnemyName, 158, 0);
				SetEnemyPatrolNode(sEnemyName, 159, 1);
				SetEnemyPatrolNode(sEnemyName, 157, 0);
				SetEnemyPatrolNode(sEnemyName, 156, 0);
				SetEnemyPatrolNode(sEnemyName, 155, 0);
				SetEnemyPatrolNode(sEnemyName, 141, 2);
				SetEnemyPatrolNode(sEnemyName, 139, 0);
				SetEnemyPatrolNode(sEnemyName, 138, 0);
				SetEnemyPatrolNode(sEnemyName, 119, 0);
				SetEnemyPatrolNode(sEnemyName, 116, 0);
				SetEnemyPatrolNode(sEnemyName, 114, 1);
				SetEnemyPatrolNode(sEnemyName, 78, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 2:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "209");
				SetEntityInvisible(sEnemyName);
				SetEnemyPatrolNode(sEnemyName, 117, 0);
				SetEnemyPatrolNode(sEnemyName, 120, 2);
				SetEnemyPatrolNode(sEnemyName, 138, 0);
				SetEnemyPatrolNode(sEnemyName, 139, 1);
				SetEnemyPatrolNode(sEnemyName, 138, 0);
				SetEnemyPatrolNode(sEnemyName, 119, 1);
				SetEnemyPatrolNode(sEnemyName, 116, 0);
				SetEnemyPatrolNode(sEnemyName, 113, 1);
				SetEnemyPatrolNode(sEnemyName, 316, 1);
				SetEnemyPatrolNode(sEnemyName, 70, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 1:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_effect_small", 0.65f, "SetPlayerReact");
				sEnemyName = "brute" + GetExtraModesSuffix();
				PlayMusic("26_event_brute.ogg", "event_max");
				if(GetFunnyModeOn() == false)
					PlaySound("enemy/brute/amb_alert.snt");
				else
					PlaySound("enemy/chiu/alert.snt");
				SetPlayerLookAt("chair_nice01_6", "playerspeedveryslow_small", 2.0f);
				SetEntityPlayerCollideCallback("AreaLibraryFloor", "CollidePlayerAndAreaLibraryFloor", "enter_remove");
				SetEntitiesCollideCallback(sEnemyName, "AreaEntranceHall", "CollideEnemyAndAreaRoom", "enter_remove");
				
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "154");
				SetEnemyState(sEnemyName, "friendon");
				SetActiveEnemyName(sEnemyName);
				SetEnemyPatrolNode(sEnemyName, 155, 4);
				SetEnemyPatrolNode(sEnemyName, 158, 1);
				SetEnemyPatrolNode(sEnemyName, 162, 0);
				SetEnemyPatrolNode(sEnemyName, 140, 1);
				SetEnemyPatrolNode(sEnemyName, 138, 0);
				SetEnemyPatrolNode(sEnemyName, 119, 0);
				SetEnemyPatrolNode(sEnemyName, 116, 0);
				SetEnemyPatrolNode(sEnemyName, 113, 1);
				SetEnemyPatrolNode(sEnemyName, 316, 1);
				SetEnemyPatrolNode(sEnemyName, 345, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			default:
				SetDebugMessage("Show enemy area with code " + iAreaCode + " doesnt exist...");
				return;
			break;
		}
	}
	else if(StringContains(asArea, "AreaDiningHall"))
	{
		switch(iAreaCode)
		{
			case 5:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 0.75f, "SetPlayerReact");
				PlaySound(GetFunnyModeString("grunt/notice_long.snt"));
				sEnemyName = "grunt" + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "274");
				SetEnemyState(sEnemyName, "alert");
				SetEnemyPatrolNode(sEnemyName, 284, 0);
				SetEnemyPatrolNode(sEnemyName, 296, 2);
				SetEnemyPatrolNode(sEnemyName, 475, 1);
				SetEnemyPatrolNode(sEnemyName, 266, 1);
				SetEnemyPatrolNode(sEnemyName, 78, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 4:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 0.75f, "SetPlayerReact");
				sEnemyName = "grunt" + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "16");
				SetEnemyPatrolNode(sEnemyName, 10, 0);
				SetEnemyPatrolNode(sEnemyName, 81, 2);
				SetEnemyPatrolNode(sEnemyName, 105, 1);
				SetEnemyPatrolNode(sEnemyName, 98, 1);
				SetEnemyPatrolNode(sEnemyName, 2, 2);
				SetEnemyPatrolNode(sEnemyName, 70, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 3:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 0.75f, "SetPlayerReact");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "217");
				SetEntityInvisible(sEnemyName);
				SetEnemyPatrolNode(sEnemyName, 68, 2);
				SetEnemyPatrolNode(sEnemyName, 23, 0);
				SetEnemyPatrolNode(sEnemyName, 25, 1);
				SetEnemyPatrolNode(sEnemyName, 4, 1);
				SetEnemyPatrolNode(sEnemyName, 71, 1);
				SetEnemyPatrolNode(sEnemyName, 274, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 2:
				AddLocalVarInt(asArea + "_var", 1);
				
				PlayGuiSound(GetFunnyModeString("grunt/notice_long.snt"), 1.25f);
				AddTimer("scare_breath_small", 0.625f, "SetPlayerReact");
				AddTimer("AreaBarredDoorPS_1_bangtimer", RandFloat(0.25f, 0.5f), "TimerBangOnDoor");
				AddTimer("AreaBarredDoorPS_1_bangtimer", RandFloat(0.75f, 1.0f), "TimerBangOnDoor");
				AddTimer("AreaBarredDoorPS_1_bangtimer", RandFloat(1.25f, 1.5f), "TimerBangOnDoor");
			break;
			case 1:
				AddLocalVarInt(asArea + "_var", 1);
				
				PlayGuiSound(GetFunnyModeString("grunt/notice_long.snt"), 1.25f);
				AddTimer("scare_breath_small", 0.625f, "SetPlayerReact");
				AddTimer("AreaBarredDoorPS_2_bangtimer", RandFloat(0.25f, 0.5f), "TimerBangOnDoor");
				AddTimer("AreaBarredDoorPS_2_bangtimer", RandFloat(0.75f, 1.0f), "TimerBangOnDoor");
				AddTimer("AreaBarredDoorPS_2_bangtimer", RandFloat(1.25f, 1.5f), "TimerBangOnDoor");
			break;
			default:
				SetDebugMessage("Show enemy area with code " + iAreaCode + " doesnt exist...");
				return;
			break;
		}
	}
	else if(StringContains(asArea, "AreaCells_1"))
	{
		switch(iAreaCode)
		{
			case 6:
				AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "411");
				SetEntityInvisible(sEnemyName);
				SetEnemyState(sEnemyName, "alert");
				SetEnemyPatrolNode(sEnemyName, 496, 2);
				SetEnemyPatrolNode(sEnemyName, 804, 2);
				SetEnemyPatrolNode(sEnemyName, 415, 1);
				SetEnemyPatrolNode(sEnemyName, 427, 1);
				SetEnemyPatrolNode(sEnemyName, 399, 1);
				SetEnemyPatrolNode(sEnemyName, 192, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 5:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("pant_breath_small", 0.65f, "SetPlayerReact");
				PlaySound(GetFunnyModeString("brute/notice_long.snt"));
				PlayMusic("11_event_tree.ogg", "event_max_bolt");
				SetPlayerLookAt("swing_door_25", "playerspeedveryslow_verybig", 0.7f);
				SetDoorState("swing_door_25", "explode");
				sEnemyName = "brute" + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "413");
				//SetEnemyState(sEnemyName, "alert");
				SetEnemyPatrolNode(sEnemyName, 415, 2);
				SetEnemyPatrolNode(sEnemyName, 419, 1);
				SetEnemyPatrolNode(sEnemyName, 416, 1);
				SetEnemyPatrolNode(sEnemyName, 407, 2);
				SetEnemyPatrolNode(sEnemyName, 192, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 4:
				AddLocalVarInt(asArea + "_var", 1);
				
				sEnemyName = "brute" + GetExtraModesSuffix();
				SetPlayerState("speedveryslow_drop_jumpoff");
				AddTimer("pant", 1.0f, "SetPlayerReact");
				AddTimer("speednormal_jumpon", 1.0f, "SetPlayerState");
				AddTimer("lurker_hit_wood.snt", "swing_door_24", 1.0f, "PlaySound");
				AddTimer("swing_door_24", "explode", 1.0f, "SetDoorState");
				ResetProp("swing_door_24");
				PlaySound(GetFunnyModeString("enemy/brute/notice_long"));
				AddTimer(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "454", 1.0f, "SetEnemyState");
				AddTimer(sEnemyName, 1.1f, "ShowEnemyPlayerPosition");
				SetEnemyPatrolNode(sEnemyName, 70);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 3:
				AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
				PlaySound("ghost_notice.snt");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "475");
				SetEnemyState(sEnemyName, "alert");
				SetEntityInvisible(sEnemyName);
				SetEnemyPatrolNode(sEnemyName, 456, 1);
				SetEnemyPatrolNode(sEnemyName, 431, 2);
				SetEnemyPatrolNode(sEnemyName, 445, 1);
				SetEnemyPatrolNode(sEnemyName, 433, 0);
				SetEnemyPatrolNode(sEnemyName, 296, 0);
				SetEnemyPatrolNode(sEnemyName, 274, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 2:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 0.75f, "SetPlayerReact");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "426");
				SetEntityInvisible(sEnemyName);
				SetEnemyPatrolNode(sEnemyName, 431, 1);
				SetEnemyPatrolNode(sEnemyName, 446, 1);
				SetEnemyPatrolNode(sEnemyName, 429, 1);
				SetEnemyPatrolNode(sEnemyName, 441, 1);
				SetEnemyPatrolNode(sEnemyName, 421, 1);
				SetEnemyPatrolNode(sEnemyName, 496, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 1:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 0.8f, "SetPlayerReact");
				PlaySound("ghost_notice.snt");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "458");
				SetEnemyState(sEnemyName, "alert");
				SetEntityInvisible(sEnemyName);
				SetEnemyPatrolNode(sEnemyName, 433, 3);
				SetEnemyPatrolNode(sEnemyName, 441, 1);
				SetEnemyPatrolNode(sEnemyName, 452, 1);
				SetEnemyPatrolNode(sEnemyName, 433, 2);
				SetEnemyPatrolNode(sEnemyName, 454, 0);
				SetEnemyPatrolNode(sEnemyName, 455, 0);
				SetEnemyPatrolNode(sEnemyName, 474, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			default:
				SetDebugMessage("Show enemy area with code " + iAreaCode + " doesnt exist...");
				return;
			break;
		}
	}
	else if(StringContains(asArea, "AreaPrison_3"))
	{
		switch(iAreaCode)
		{
			case 4:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 0.75f, "SetPlayerReact");
				PlaySound("ghost_notice.snt");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "604");
				SetEnemyState(sEnemyName, "alert");
				SetEntityInvisible(sEnemyName);
				SetEnemyPatrolNode(sEnemyName, 585, 0);
				SetEnemyPatrolNode(sEnemyName, 589, 3);
				SetEnemyPatrolNode(sEnemyName, 586, 2);
				SetEnemyPatrolNode(sEnemyName, 579, 1);
				SetEnemyPatrolNode(sEnemyName, 523, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 3:
				AddLocalVarInt(asArea + "_var", 1);
				
				AddTimer("scare_breath_small", 0.75f, "SetPlayerReact");
				PlaySound(GetFunnyModeString("brute/notice_long.snt"));
				sEnemyName = "brute" + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "610");
				SetEnemyState(sEnemyName, "alert");
				SetEnemyPatrolNode(sEnemyName, 604, 2);
				SetEnemyPatrolNode(sEnemyName, 594, 1);
				SetEnemyPatrolNode(sEnemyName, 605, 1);
				SetEnemyPatrolNode(sEnemyName, 520, 2);
				SetEnemyPatrolNode(sEnemyName, 606, 1);
				SetEnemyPatrolNode(sEnemyName, 610, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 2:
				AddLocalVarInt(asArea + "_var", 1);
				
				ResetProp("swing_door_44");
				AddTimer("scare_breath_small", 0.5f, "SetPlayerReact");
				sEnemyName = "grunt" + GetExtraModesSuffix();
				PlayMusic("21_event_pit.ogg", "event_max");
				PlaySound("scare_slam_door.snt");
				PlaySound(GetFunnyModeString("grunt/notice_long.snt"));
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "586");
				SetEnemyState(sEnemyName, "alert");
				SetEnemyPatrolNode(sEnemyName, 589, 3);
				SetEnemyPatrolNode(sEnemyName, 586, 2);
				SetEnemyPatrolNode(sEnemyName, 579, 1);
				SetEnemyPatrolNode(sEnemyName, 523, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			case 1:
				AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
				sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
				SetEnemyState(sEnemyName, "fakeoff");
				SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "600");
				SetEntityInvisible(sEnemyName);
				SetEnemyState(sEnemyName, "alert");
				SetEnemyPatrolNode(sEnemyName, 609, 3);
				SetEnemyPatrolNode(sEnemyName, 614, 2);
				SetEnemyPatrolNode(sEnemyName, 583, 2);
				SetEnemyPatrolNode(sEnemyName, 520, 1);
				if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
			break;
			default:
				SetDebugMessage("Show enemy area with code " + iAreaCode + " doesnt exist...");
				return;
			break;
		}
	}
	
	//SetActiveEnemyName(sEnemyName);
}

void CollidePlayerAndAreaLibraryFloor(string asParent, string asChild, int aiState)
{
	SetEnemyState(GetStringWithExtraModesSuffix("brute"), "friendoff");
}

void PlayerLookAtAreaCheckLook(string asEntity, int aiState)
{
	SetLocalVarInt(asEntity, aiState);
}

void CollidePlayerAndAreaPrisonFirstEnemyShow(string asParent, string asChild, int aiState)
{
	SetActiveEnemyDisabled("poofsilent");
	string sEnemyName = GetStringWithExtraModesSuffix("grunt");
	SetActiveEnemyName(sEnemyName);
	SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "566");
	if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
	
	string[] vsPathNodesArray = {"579_idle", "520_idle", "540_idle", "516_idle", "523_idle"};
	
	PlaySound("scare_slam_door.snt", "swing_door_36");
	SetEnemyPatrolNodes(sEnemyName, vsPathNodesArray);
	PlayMusic("05_event_steps.ogg", "event_big");
	AddTimer("scare_breatheffect_small", 0.5f, "SetPlayerReact");
}

void CollidePlayerAndBlockStorageEntrance(string asParent, string asChild, int aiState)
{
	SetMessage("NeedTheLantern");
}

void CollidePlayerAndAreaDiscoverGoblets(string asParent, string asChild, int aiState)
{
	SetPlayerLookAt("Goblet7v", "med_activeoff", 2.0f);
	PlayGuiSound("01_goblet8.ogg", 0.7f);
	AddTimer("DiscoverGoblets", 2.0f, "SetMessage");
	StopMusic(0.28f, 1);
	StopMusic(0.29f, 0);
	AddTimer("AreaDiningHall_1", 2.0f, "TimerCollideWithAreaRoom");
}

void CollidePlayerAndAreaLadder(string asParent, string asChild, int aiState)
{
	if(HasItem("ladder_item_1") == false )
		SetMessage("Hints", "NeedTheLadder", 0);
}

void CollideBookAndAreaBook(string asParent, string asChild, int aiState)
{
	string sBookType = "fake";
	string sBookTypeOpposite = "true";
	float fResetTime = 40.0f * GetGlobalVarFloat("DifficultyInverseFactor");
	int iNumOfBooks = 4;
	int iNumOfBooksOpposite = 14;
	
	if(StringContains(asParent, "true"))
	{
		sBookType = "true";
		sBookTypeOpposite = "fake";
		fResetTime = 90.0f * GetGlobalVarFloat("DifficultyInverseFactor");
		iNumOfBooks = 14;
		iNumOfBooksOpposite = 4;
	}
	
	string sTemp = GetStringWithoutSubString(asParent, "book_" + sBookType + "_");
	int iBookCode = StringToInt(sTemp);
	
	float fTimeLeft = 0.0f;
	if(aiState == 1)
	{
		AddDebugMessage(asParent + " has been pulled", false);
		if(GetLocalVarInt("BookPulling_var") == 0)
		{
			SetMessage("FakeBooks");
			AddLocalVarInt("BookPulling_var", 1);
		}
		PlayGuiSound("lock_door.snt", 0.5f);
		SetPropObjectStuckState(asParent, aiState);
		StartScreenShake(0.001f, 0.5f, 0.5f, 0.5f);
		
		if(GetLocalVarInt("book_" + sBookType + "_snt_var") == 0)
		{
			SetLocalVarInt("book_" + sBookTypeOpposite + "_snt_var", 0);
			SetLocalVarInt("book_" + sBookType + "_snt_var", 1);
			StopSound("AreaBookTickSound_" + sBookTypeOpposite + gsSoundNameSuffix, 0.5f);
			PlaySound("gameplay_tick_long_dist.snt", "AreaBookTickSound_" + sBookType, "save");
		}
		
		//TURN OFF OPPOSITE BOOKS
		for(int i=1; i<=iNumOfBooksOpposite; i++)
			fTimeLeft = fTimeLeft + GetTimerTimeLeft("book_" + sBookTypeOpposite + "_" + i);
		if(fTimeLeft > 0)
		{
			DisableBooks("book_" + sBookTypeOpposite + "_");
		}
		//
		
		AddLocalVarInt("book_" + sBookType + "_var", 1);
		AddTimer(asParent, fResetTime, "PushBackBook");
	}
	else
	{
		AddDebugMessage(asParent + " has been pushed back", false);
		RemoveTimer(asParent);
		AddLocalVarInt("book_" + sBookType + "_var", -1);
		if(GetLocalVarInt("book_" + sBookType + "_var") == 0)
		{
			SetLocalVarInt("book_" + sBookType + "_snt_var", 0);
			StopSound("AreaBookTickSound_" + sBookType + gsSoundNameSuffix, 1.5f);
			PlayGuiSound("16_lever_stuck", 0.4f);
		}
	}
	
	int iCount = GetLocalVarInt("book_" + sBookType + "_var");
	if(sBookType == "true")
	{
		if(iCount == 14)
		{
			CompletePuzzle("BooksTrue");
		}
	}
	else
	{
		if(iCount == 4)
		{
			CompletePuzzle("BooksFake");
		}
	}
}

void CollidePlayerAndAreaLookAtLantern(string asParent, string asChild, int aiState)
{
	SetMessage(gsHintCat, "LanternFound", 5.0f);
	SetPlayerLookAt("lantern_2", "small_playerspeedslow", 2.0f);
	SetPlayerReact("sigh_min");
}

void CollidePlayerAndAngels(string asParent, string asChild, int aiState)
{
	SetPlayerRollTo("fall_big_midslow", 6.0f);
	SetLanternState("silent_disabled");
	AddTimer("allnormal_veryslow", 1.5f, "SetScreenEffect");
	AddTimer("jumpon", 8.0f, "SetPlayerState");
	AddTimer("boost_med", 8.5f, "SetPlayerHealth");
	AddTimer("enabled", 9.0f, "SetLanternState");
	int iRand = RandInt(1, 12);
	SetDebugMessage("Next Angel: " + iRand);
	SetLocalVarInt("angel_statue_" + iRand + "_var", 1);
	PlaySound("01_crowd_whispers_loop.snt", "angel_statue_" + iRand, "save_midquick");
	PlaySound("01_whispers_loop.snt", "curtain_open_" + iRand, "save_midquick");
}

void CollidePlayerAndAreaPrisonEntrance(string asParent, string asChild, int aiState)
{
	SetEntityInactive("AreaPrisonEntrance_1");
	SetEntityInactive("AreaPrisonEntrance_2");
	SetCheckPoint("Default", 12);
	SetDoorState("swing_door_30", "close_lock_force-z_silent");
	SetEntityPlayerInteractCallback("swing_door_26", "PlayerInteractWithDoor", false);
	SetEntityPlayerInteractCallback("swing_door_30", "PlayerInteractWithDoor", false);
	
	SetPlayerLookAt("AreaParticleDustPush", "max_activeoff", 1.0f); 
	PlayGuiSound("scare_wind", 1.0f);
	CreateParticleSystemAtEntity("PSDustPush", "ps_dust_push_15.ps", "AreaParticleDustPush", false);
	AddTimer("swing_door_26", 1.0f, "TimerShutDoor");
	AddTimer("scare_breath_small", 1.0f, "SetPlayerReact");
}

void PlayerInteractWithCloset(string asEntity)
{
	if(asEntity == "cabinet_nice_2")
	{
		if(GetActiveEnemyIsNear(4, 8) == false)
		{
			SetEntityState(asEntity, "impulsex_medbig");
			SetEntityState(asEntity, "impulsez_medbig");
			SetPlayerReact("scare_medsmall");
			SetScreenEffect("shake_med_veryquick");
			PlaySound("21_intro_scream.snt");
			PlaySound("break_wood.snt");
			PlaySound("lurker_hit_wood.snt");
			SetPlayerState("force-z_big");
			SetPlayerRollTo("fall_big_quick", RandFloat(5.0f, 7.0f));
			SetEntityActive("angel_statue_38");
			PlayParticleSystem("ps_iron_maiden_event_smoke.ps", "angel_statue_38");
			AddTimer("angel_statue_38", "8.0f", 8.0f, "SetEntityInactive");
			SetEntityPlayerInteractCallback("cabinet_nice_1", "PlayerInteractWithCloset", true);
			ResetProp("cabinet_nice_1");
			SetLanternState("disabled");
			AddTimer("enabled", 4.0f, "SetLanternState");
			SetDebugMessage("Starting Closet Scare Event!");
		}
		else
			SetEnemyState(GetActiveEnemyName(), "alert");
	}
	else if(asEntity == "cabinet_nice_1")
	{
		SetEntityState(asEntity, "impulse-x_min");
		SetEntityState(asEntity, "impulsez_min");
		SetPlayerReact("scare_breath_small", 0.5f);
		SetEntityActive("pig_corpse_2");
		SetEntityState("pig_corpse_2", "impulse-x_min");
		SetEntityState("pig_corpse_2", "impulsez_min");
	}
}

void PlaySelfSuitorCutscene(string asInput)
{
	SetActiveEnemyDisabled("off");
	PlayMusic("01_event_eerie_stinger04.ogg", "event_midquick");
	PlayGuiSound("sanity_flick.snt", 1.5f);
	SetPlayerState("activeoff_drop");
	SetLanternState("off");
	SetScreenEffect("fadeout_quick");
	SetPlayerReact("scare_effect_verysmall");
	SetGlobalSoundVolume("min_quick");
	AddTimer("enemy/suitor/enabled.snt", 1.0f, "PlaySound");
	AddTimer("enemy/suitor/amb_idle_scratch.snt", 2.0f, "PlaySound");
	AddTimer("enemy/suitor/amb_idle_whimp.snt", 3.0f, "PlaySound");
	AddTimer("enemy/suitor/enabled.snt", 4.0f, "PlaySound");
	AddTimer("activeon", 6.0f, "SetPlayerState");
	AddTimer("fadein_midquick", 6.0f, "SetScreenEffect");
	AddTimer("max_midquick", 6.0f, "SetGlobalSoundVolume");
	AddTimer("sigh_effect", 9.0f, "SetPlayerReact");
}

void CPDefault(string asName, int aiCount)
{
	AddLocalVarInt("DeathCount_var", 1);
	SetLocalVarInt("LastBruteEvent_var", 0);
	SetActiveEnemyDisabled("off");
	StopMusic("event_slow");
	StopMusic("ambient_slow");
	GiveSanityDamage(1.0f, false);
	
	if(GetLocalVarInt("ShowEnemyCooldown_var") == 0)
	{
		SetLocalVarInt("ShowEnemyCooldown_var", 1);
		AddTimer("ShowEnemyCooldown_var", "0", 50.0f * GetGlobalVarFloat("DifficultyInverseFactor"), "SetLocalVarInt");
	}
	
	AddTimer("createroomcollide", 1.0f, "TimerCheckCollide");
	
	//RANDOM SHOW ENEMY AREAS ACTIVATION
	if(GetLocalVarInt("OrbPiecesCollected_var") <= 3)
	{
		int i = RandInt(0, 7);
		if(i == 7)
			ActivateRandomShowEnemyArea("", 0);
	}
	else if(GetLocalVarInt("OrbPiecesCollected_var") == 4)
	{
		int i = RandInt(0, 3);
		if(i == 3)
			ActivateRandomShowEnemyArea("", 0);
	}
	else
		ActivateRandomShowEnemyArea("", 0);
	
	//RESET POOR BROKEN DOORS
	for(int i=1; i<=47; i++)
	{
		if(GetEntityIsBroken("swing_door_" + i))
			ResetProp("swing_door_" + i);
	}
	
	if(GetPlayerLampOil() < 10 && GetGlobalVarInt("ToughModeOn") == 0)
	{
		AddPlayerLampOil(5.0f);
	}
	
	if(GetLocalVarInt("DeathCount_var") == 5)
	{
		AddTimer("", 3.0f, "PlaySelfSuitorCutscene");
	}
	else if(GetLocalVarInt("DeathCount_var") == 6 && GetToughModeOn())
	{
		SetLoadScreen("FromMansionToBadEnding", "hand");
		SetGlobalVarInt("JackIsDead_var", 0);
		SetGlobalVarInt("GuardianKiller_var", 0);
		SetGlobalVarInt("HardModeFail_var", 1);
		AddTimer("custom_stories/xdj_tcolm/maps/02_mansion_redux.map", "4", 3.5f, "ChangeMap");
	}
	else if(GetLocalVarInt("DeathCount_var") >= 7)
	{
		int iRand = RandInt(1, 16);
		
		if(iRand == 1)
			AddTimer("", 3.5f, "PlaySelfSuitorCutscene");
	}
}

void TimerCheckCollide(string asTimer)
{
	if(asTimer == "createroomcollide")
	{
		CollidePlayerAndAreaRoom("Player", GetLocalVarString("CurrentPlayerRoom_var"), 1);
	}
}

void PlayerLookAtInsaneObject(string asEntity, int aiState)
{
	float fSanity = GetPlayerSanity();
	float fDistance = GetEntityPlayerDistance(asEntity);
	
	if(StringContains(asEntity, "statue_insane"))
	{
		if(fSanity <= 30 && fDistance<= 20)
		{
			if(aiState == 1)
			{
				SetDebugMessage("Player is looking at statue!");
				PlaySoundAtEntity("Player_torture_snt", "ui_torture.snt", "Player", 0.75f, true);
				
				SetPlayerLookAt("AreaFace_" + asEntity, "verysmall");
				AddTimer(asEntity, 2.0f, "PlayInsaneEvent");
			}
			else
			{
				StopSound("Player_torture_snt", "midquick");
				
				RemoveTimer(asEntity);
				StopPlayerLookAt();
			}
		}
		else
			return;
	}
	else if(StringContains(asEntity, "stuffed_dog"))
	{
		if(fSanity <= 30 && fDistance <= 10)
		{
			if(aiState == 1)
			{
				SetDebugMessage("Player is looking at dog!");
				PlaySound("01_insanity_dog_growl.snt", asEntity);
				
				SetPlayerLookAt(asEntity, "verysmall");
				AddTimer(asEntity, 1.9f, "PlayInsaneEvent");
			}
			else
			{
				StopSound(asEntity + "_snt", "veryquick");
				
				RemoveTimer(asEntity);
				StopPlayerLookAt();
			}
		}
		else
			return;
	}
	else if(StringContains(asEntity, "grunt_body_part"))
	{
		if(fSanity <= 30 && fDistance <= 10)
		{
			if(aiState == 1)
			{
				SetDebugMessage("Player is looking at gruntpart!");
				PlaySound(GetFunnyModeString("sounds/enemy/grunt/notice_long.snt"), asEntity);
				
				SetPlayerLookAt(asEntity, "verysmall");
				AddTimer(asEntity, 1.9f, "PlayInsaneEvent");
			}
			else
			{
				StopSound(asEntity + "_snt", "quick");
				
				RemoveTimer(asEntity);
				StopPlayerLookAt();
			}
		}
		else
			return;
	}
	else if(StringContains(asEntity, "corpse_male"))
	{
		if(fSanity <= 30 && fDistance <= 10)
		{
			if(aiState == 1)
			{
				SetDebugMessage("Player is looking at corpsemale!");
				PlaySound("15_man01_whimp.snt", asEntity);
				
				SetPlayerLookAt(asEntity, "verysmall");
				AddTimer(asEntity, 2.5f, "PlayInsaneEvent");
			}
			else
			{
				StopSound(asEntity + "_snt", "midquick");
				
				RemoveTimer(asEntity);
				StopPlayerLookAt();
			}
		}
		else
			return;
	}
	else if(StringContains(asEntity, "rat_corpse_pile"))
	{
		if(fSanity <= 30 && fDistance <= 7)
		{
			if(aiState == 1)
			{
				SetDebugMessage("Player is looking at ratcorpse!");
				//PlaySound("critter_rat_scare.snt", asEntity);
				
				SetPlayerLookAt(asEntity, "verysmall");
				AddTimer(asEntity, 0.5f, "PlayInsaneEvent");
			}
			else
			{
				//StopSound(asEntity + "_snt", "midquick");
				
				RemoveTimer(asEntity);
				StopPlayerLookAt();
			}
		}
		else
			return;
	}
	else if(StringContains(asEntity, "corpse_pile"))
	{
		if(fSanity <= 30 && fDistance <= 10)
		{
			SetDebugMessage("Player is looking at corpsepile!");
			PlayInsaneEvent(asEntity);
		}
		else
			return;
	}
	else if(StringContains(asEntity, "cross_jesus"))
	{
		if(fSanity <= 30 && fDistance <= 10)
		{
			if(aiState == 1)
			{
				SetDebugMessage("Player is looking at crossjesus!");
				SetPlayerLookAt(asEntity, "verysmall");
				AddTimer(asEntity, 3.0f, "PlayInsaneEvent");
			}
			else
			{
				StopPlayerLookAt();
				RemoveTimer(asEntity);
			}
		}
		else
			return;
	}
	else if(StringContains(asEntity, "human_skull") || StringContains(asEntity, "hanging_prisoner"))
	{
		if(fSanity <= 30 && fDistance <= 8)
		{
			if(aiState == 1)
			{
				SetDebugMessage("Player is looking at skull!");
				SetPlayerLookAt(asEntity, "verysmall");
				AddTimer(asEntity, 1.0f, "PlayInsaneEvent");
				
				PlaySoundAtEntity(asEntity + "_snt", "01_crowd_whispers_loop.snt", asEntity, 3.0f, true);
			}
			else
			{
				StopSound(asEntity + "_snt", "mid");
				
				StopPlayerLookAt();
				RemoveTimer(asEntity);
			}
		}
		else
		{
			StopSound(asEntity + "_snt", "mid");
			
			StopPlayerLookAt();
			RemoveTimer(asEntity);
			return;
		}
	}
}

void PlayInsaneEvent(string asEntity)
{
	if(StringContains(asEntity, "human_skull") || StringContains(asEntity, "hanging_prisoner"))
	{
		AddTimer(asEntity, 5.0f, "PlayInsaneEvent");
		SetPlayerSanity("damage_verysmall_lethal");
		return;
	}
	AddLocalVarInt("InsaneObjectsTriggered_var", 1);
	SetDebugMessage("Insane objects triggered: " + GetLocalVarInt("InsaneObjectsTriggered_var"));
	if(GetLocalVarInt("InsaneObjectsTriggered_var") == 16)
		SetAchievementUnlocked("SanityAchievement");
	SetEntityVisible(asEntity, true);
	RemoveEntityPlayerLookAtCallback(asEntity);
	RemoveEntityCollideCallback("Player", asEntity);
	if(GetActiveEnemyIsAround())
	{
		if(GetEnemyState(GetActiveEnemyName()) >= 4)
			SetEnemyState(GetActiveEnemyName(), "chase");
		else
			SetEnemyState(GetActiveEnemyName(), "alert");
	}
	if(StringContains(asEntity, "statue_insane"))
	{
		AddTimer("pant_verysmall_breathsloweffect", 1.13f, "SetPlayerReact");
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
		PlayGuiSound("hurt_pant.snt", 0.9f);
		PlayGuiSound("21_alex_low_freq_rumble", 0.5f);
		PlaySound("01_insanity_statue_seen.snt", asEntity);
		PlayMusic("18_puzzle_valve01.ogg", false, 0.8f, 0.1f, 10, false);
		SetMessage("Mysterious", "IGreetYou", 5.0f);
		StartPlayerLookAt("AreaFace_" + asEntity, 1.5f, 1.5f, "");
		AddTimer("", 2.5f, "StopPlayerLookAt");
		AddTimer("guardian_activated.snt", 3.6f, "PlaySound");
		AddTimer("damage_verysmall_blood_shake", 4.2f, "SetPlayerHealth");
		AddTimer("slime_attack_normal_hit.snt", 4.2f, "PlaySound");
		AddTimer("ps_slime_attack_normal.ps", 4.2f, "PlayParticleSystem");
		AddTimer("shake_verysmall_veryquick", 4.2f, "SetScreenEffect");
		
		StopSound("Player_torture_snt", "midquick");
		
		AddLocalVarInt("StatuesGreet_var", 1);
		SetDebugMessage("Num of Statues Greet: " + GetLocalVarInt("StatuesGreet_var"));
		if(GetLocalVarInt("StatuesGreet_var") == 6)
		{
			AddTimer("StatuesAchievement", 16.0f, "SetAchievementUnlocked");
		}
	}
	else if(StringContains(asEntity, "stuffed_dog"))
	{
		AddTimer("damage_small_grunt_shake", 0.1f, "SetPlayerHealth");
		AddTimer("sounds/enemy/grunt/attack_claw_hit.snt", 0.1f, "PlaySound");
		AddTimer("pant_verysmall_breathsloweffect", 0.5f, "SetPlayerReact");
		PlaySound("01_insanity_dog_bark.snt", asEntity);
		PlayMusic("11_event_dog.ogg", false, 0.7f, 0.1f, 10, false);
		StartPlayerLookAt(asEntity, 2.5f, 2.5f, "");
		AddTimer("", 2.0f, "StopPlayerLookAt");
	}
	else if(StringContains(asEntity, "grunt_body_part"))
	{
		AddTimer("damage_small_grunt_shake", 0.26f, "SetPlayerHealth");
		AddTimer("sounds/enemy/grunt/attack_claw_hit.snt", 0.26f, "PlaySound");
		AddTimer("pant_verysmall_breathsloweffect", 0.65f, "SetPlayerReact");
		if(GetFunnyModeOn())
			PlaySound("sounds/enemy/longo/attack.snt", asEntity);
		else
			PlaySound("sounds/enemy/grunt/attack_claw.snt", asEntity);
		PlayMusic("03_event_books.ogg", false, 0.7f, 0.1f, 10, false);
		AddTimer("", 1.0f, "StopPlayerLookAt");
	}
	else if(StringContains(asEntity, "corpse_male"))
	{
		AddTimer("pant_verysmall_breathsloweffect", 0.5f, "SetPlayerReact");
		PlayParticleSystem("blood.ps", asEntity);
		PlayGuiSound("01_player_knife_flesh.ogg", 0.7f);
		StartPlayerLookAt(asEntity, 3.0f, 3.0f, "");
		AddTimer("", 2.0f, "StopPlayerLookAt");
		int iRand = RandInt(0, 1);
		if(iRand == 0)
		{
			PlayGuiSound("00_cuts.ogg", 1.0f);
		}
		else
		{
			PlayGuiSound("15_the_big_scream.snt", 2.0f);
		}
	}
	else if(StringContains(asEntity, "rat_corpse_pile"))
	{
		AddTimer("scare_min_breathsloweffect", 0.5f, "SetPlayerReact");
		AddTimer("damage_verysmall_blood_shake", 0.15f, "SetPlayerHealth");
		PlayParticleSystem("blood.ps", asEntity);
		PlayGuiSound("spider_attack.snt", 1.0f);
		StartPlayerLookAt(asEntity, 2.5f, 2.5f, "");
		AddTimer("", 0.5f, "StopPlayerLookAt");
		
		StopSound(asEntity + "_snt", "midquick");
	}
	else if(StringContains(asEntity, "corpse_pile"))
	{
		AddTimer("pant_verysmall_breathsloweffect", 0.25f, "SetPlayerReact");
		PlayParticleSystem("ps_ghost_release.ps", asEntity);
		PlaySoundAtEntity("pooff1", "03_in_a_bottle.snt", asEntity, 0.0f, false);
		PlaySoundAtEntity("pooff2", "03_rock_move.snt", asEntity, 0.0f, false);
		SetPropActiveAndFade(asEntity, false, 3);
		StartPlayerLookAt(asEntity, 3.0f, 3.0f, "");
		AddTimer("", 2.0f, "StopPlayerLookAt");
	}
	else if(StringContains(asEntity, "cross_jesus"))
	{
		AddTimer("pant_verysmall_breathsloweffect", 0.25f, "SetPlayerReact");
		PlayGuiSound("cell_hector.snt", 0.6f);
		StopPlayerLookAt();
	}
	else if(StringContains(asEntity, "armour_insane"))
	{
		AddTimer("scare_verysmall_breathsloweffect", 0.15f, "SetPlayerReact");
		AddTimer("damage_small_brute_shake", 0.05f, "SetPlayerHealth");
		PlayParticleSystem("ps_hit_metal.ps", asEntity);
		PlayGuiSound("sounds/enemy/brute/attack_claw_hit.snt", 1.0f);
	}
}

void PlayerInteractWithJar(string asEntity)
{
	if(asEntity == "vase01_10")
	{
		SetEntityHealth(asEntity, 0.0f);
		SetPlayerHealth("damage_small_blood_effect");
		PlayParticleSystem("ps_ghost_release.ps", asEntity);
		SetPlayerReact("scare_breathslow_small");
		PlayGuiSound("ghost_idle.snt", 0.25f);
		PlayGuiSound("03_in_a_bottle.snt", 0.5f);
		return;
	}
	SetPlayerSanity("boost_small_effect");
	SetLightState("PointLight_" + asEntity, "off");
	SetEntityActive("AreaFadeOutEvent_1");
	SetEntityPlayerCollideCallback("AreaFadeOutEvent_1", "CollidePlayerAndAreaRandScaryEvent", "enter_remove");
}

void UseKeyOnDoor(string asItem, string asEntity)
{
	string sCorrectDoorName = "";
	if(asItem == "key_coldroom")
	{
		sCorrectDoorName = "swing_door_2";
	}
	else if(asItem == "key_basement")
	{
		sCorrectDoorName = "swing_door_19";
	}
	else if(asItem == "key_attic")
	{
		sCorrectDoorName = "swing_door_15";
	}
	else if(asItem == "key_throneroom")
	{
		sCorrectDoorName = "swing_door_12";
	}
	else if(asItem == "key_cell")
	{
		sCorrectDoorName = "swing_door_29";
	}
	else if(asItem == "key_dungeon")
	{
		sCorrectDoorName = "swing_door_28";
	}
	else if(asItem == "key_jar_1_item")
	{
		sCorrectDoorName = "swing_door_46";
	}
	else if(asItem == "key_storage")
	{
		sCorrectDoorName = "level_dungeon_1";
	}
	
	if(asEntity == sCorrectDoorName)
	{
		if(asItem != "hollow_needle_1")
			RemoveItem(asItem);
		
		RemoveEntityPlayerInteractCallback(asEntity);
		RemoveUseItemCallback(asItem + "_" + "swing_door_2");
		RemoveUseItemCallback(asItem + "_" + "swing_door_12");
		RemoveUseItemCallback(asItem + "_" + "swing_door_15");
		RemoveUseItemCallback(asItem + "_" + "swing_door_19");
		RemoveUseItemCallback(asItem + "_" + "swing_door_28");
		RemoveUseItemCallback(asItem + "_" + "swing_door_29");
		RemoveUseItemCallback(asItem + "_" + "swing_door_46");
		RemoveUseItemCallback(asItem + "_" + "level_dungeon_1");
		
		if(asItem == "key_storage")
		{
			SetDoorState(asEntity, "unlock_silent_level");
			SetEntityPlayerInteractCallback("level_dungeon_1", "PlayerInteractWithDoor", false);
		}
		else
			SetDoorState(asEntity, "unlock_silent");
		
		PlayGuiSound("unlock_door.snt", 0.8f);
		SetLocalVarInt(asEntity + "_var", 1);
		AddPlayerSanity(RandFloat(10.0f, 15.0f));
		
		if(sCorrectDoorName == "swing_door_29")
		{
			StopSound("swing_door_29_snt", "midquick");
			PlaySound("18_prisoner4.snt", "chains_statue_insane_27");
		}
		
		if(asItem ==  "key_jar_1_item")
		{
			SetEntityPlayerInteractCallback(asEntity, "PlayerInteractWithDoor", true);
			SetQuestCompleted("SecretPrisonDoor");
		}
	}
	else if(GetLocalVarInt(asEntity + "_var") == 1)
	{
		SetMessage("DoorAlreadyUnlocked");
	}
	else
	{
		SetPlayerState("activeoff_inventory");
		PlayGuiSound("switch_min_max02.snt", 0.8f);
		AddTimer("activeon_inventory", 0.75f, "SetPlayerState");
		AddTimer("WrongKey", 0.75f, "SetMessage");
	}
}

void UseNeedleOnChest(string asItem, string asEntity)
{
	SetPlayerSanity("boost_min");
	RemoveEntityPlayerInteractCallback(asEntity);
	SetLeverStuckState(asEntity, 0, true);
	SetEntityPlayerInteractCallback(asEntity, "PlayerInteractWithChest", true);
	PlayGuiSound("07_pick_lock.snt", 0.8f);
}

void UseLadderOnAreaLadder(string asItem, string asEntity)
{
	int iLadderCode = StringToInt(StringSub(asEntity, asEntity.length() - 1, 1));
	int iStartPosCode = 1;
	bool bPickUp = false;
	SetPlayerSanity("boost_min");
	if(StringContains(asEntity, "up"))
	{
		if(iLadderCode == 1)
			iStartPosCode = 3;
		else if(iLadderCode == 2)
			iStartPosCode = 5;
		else if(iLadderCode == 3)
			iStartPosCode = 7;
		else if(iLadderCode == 4)
			iStartPosCode = 32;
		
		GiveItem("ladder_item_1", "Ladder", "ladder.tga");
		bPickUp = true;
		SetEntityInactive("ladder_static_" + iLadderCode, 4.0f);
		SetEntityActive("AreaLadder_down_" + iLadderCode);
	}
	else if(StringContains(asEntity, "down"))
	{
		if(iLadderCode == 1)
			iStartPosCode = 2;
		else if(iLadderCode == 2)
			iStartPosCode = 4;
		else if(iLadderCode == 3)
			iStartPosCode = 6;
		else if(iLadderCode == 4)
			iStartPosCode = 33;
		
		RemoveItem(asItem);
		SetEntityActive("ladder_static_" + iLadderCode);
		SetEntityActive("AreaLadder_up_" + iLadderCode);
	}
	SetEntityInactive(asEntity);
	PlayLadderCutscene(asEntity, iStartPosCode, bPickUp);
}

void UseKnifeOnCurtain(string asItem, string asEntity)
{
	SetPlayerSanity("boost_verysmall");
	PlayKnifeCutscene(asEntity, "curtain");
	SetEntityInactive(asEntity, 3.0f);
	if(asEntity == "curtain01_closed_2")
	{
		AddTimer("curtain01_open_2", 3.0f, "SetEntityActive");
		
		SetEntityPlayerInteractOn("statue_room_2_stuck");
		SetLightVisible("PointLight_statue_room_2_stuck", true);
		
		if(GetGlobalVarInt("TinderboxesCollected") <= 1)
		{
			GiveItemFromFile("tinderbox.ent");
			GiveItemFromFile("tinderbox.ent");
		}
	}
	else if(StringContains(asEntity, "banners_rag_"))
	{
		SetEntityInactive("banners_rag_1", 3.0f);
		SetEntityInactive("banners_rag_2", 3.0f);
		RemoveEntityPlayerInteractCallback("banners_rag_1");
		RemoveEntityPlayerInteractCallback("banners_rag_2");
	}
}

void UseKnifeOnSlime(string asItem, string asEntity)
{
	if(asEntity == "slime_2")
	{
		SetMessage("UseKnifeOnSlimeFail");
		return;
	}
	SetPlayerSanity("boost_verysmall");
	PlayKnifeCutscene(asEntity, "slime");
	if(asEntity == "slime_5")
	{
		SetDoorState("swing_door_47", "unlock_silent");
		SetEntityPlayerInteractCallback("swing_door_47", "PlayerInteractWithJackDoor", true);
	}
}

void PlayerInteractWithJackDoor(string asEntity)
{
	PlayCutsceneSequence("JackCellDiscovered");
}

void UseHammerAndChipperOnRocks(string asItem, string asEntity)
{
	if(asItem == "hammer" || asItem == "chipper")
	{
		SetMessage("Ch02Level15", "HoleNotEnoughItem", 0);
		SetQuestState("NeedMoreTool", "add");
		return;
	}
	else
	{
		SetQuestState("NeedMoreTool", "complete");
		AddTimer("FindLabKeyAndDagger", 5.0f, "SetQuestAdded");
		RemoveItem(asItem);
		PlayHammerAndChipperCutscene(asEntity);
	}
}

void UseCrowbarOnDoor(string asItem, string asEntity)
{
	SetPlayerSanity("boost_verysmall");
	SetLocalVarInt(asEntity + "_var", 1);
	AddLocalVarInt("CrowbarUsed_var", 1);
	if(GetLocalVarInt("CrowbarUsed_var") == 3)
	{
		RemoveItem(asItem);
	}
	if(asEntity == "swing_door_39")
	{
		SetEntitiesCollideCallback("swing_door_39", "AreaShutDoorEvent_2", "CollideDoorAndAreaEvent", "enter_remove");
	}
	PlayCrowbarCutscene(asEntity);
}

void UseStringOnStuckObject(string asItem, string asEntity)
{
	SetPlayerSanity("boost_verysmall");
	AddLocalVarInt("StringUsed_var", 1);
	if(GetLocalVarInt("StringUsed_var") == 2)
	{
		RemoveItem(asItem);
	}
	PlayStringCutscene(asEntity);
}

void StateOfEnemy(string asEntity, string asType)
{
	SetLocalVarInt("ShowEnemyCooldown_var", 1);
	AddTimer("ShowEnemyCooldown_var", "0", 60.0f * GetGlobalVarFloat("DifficultyInverseFactor"), "SetLocalVarInt");
	AddLocalVarInt("AutoremovedEnemies_var", 1);
	SetPlayerSanity("boost_min");
	SetDebugMessage("AutoremovedEnemies_var: " + GetLocalVarInt("AutoremovedEnemies_var"));
	if(GetLocalVarInt("AutoremovedEnemies_var") == 10)
		SetAchievementUnlocked("EnemiesAchievement");
	
	if(GetLocalVarInt("OrbPiecesCollected_var") == 5)
	{
		int iRand = RandInt(0, 7);
		if(iRand == 0)
			ActivateRandomShowEnemyArea("", 0);
	}
	else if(GetLocalVarInt("OrbPiecesCollected_var") == 6)
	{
		int iRand = RandInt(0, 3);
		if(iRand == 0)
			ActivateRandomShowEnemyArea("", 0);
	}
	
	SetActiveEnemyName("");
	if(StringContains(asEntity, "ghost_music3"))
		SetLocalVarInt("LastBruteEvent_var", 0);
	
	SetEnemyState(GetStringWithExtraModesSuffix("grunt"), "friendoff");
	SetEnemyState(GetStringWithExtraModesSuffix("grunt"), "fakeoff");
	SetEnemyState(GetStringWithExtraModesSuffix("brute"), "friendoff");
	SetEnemyState(GetStringWithExtraModesSuffix("brute"), "fakeoff");
	SetEnemyState(GetStringWithExtraModesSuffix("waterlurker"), "friendoff");
	SetEnemyState(GetStringWithExtraModesSuffix("ghost_music1"), "friendoff");
	SetEnemyState(GetStringWithExtraModesSuffix("ghost_music1"), "fakeoff");
	SetEnemyState(GetStringWithExtraModesSuffix("ghost_music2"), "friendoff");
	SetEnemyState(GetStringWithExtraModesSuffix("ghost_music2"), "fakeoff");
	SetEnemyState(GetStringWithExtraModesSuffix("ghost_music3"), "friendoff");
	SetEnemyState(GetStringWithExtraModesSuffix("ghost_music3"), "fakeoff");
	SetEnemyState(GetStringWithExtraModesSuffix("ghost_music4"), "friendoff");
	SetEnemyState(GetStringWithExtraModesSuffix("ghost_music4"), "fakeoff");
}

void StateOfDoor(string asEntity, string asType)
{
	if(asType == "Break")
	{
		if(GetLocalVarInt(asEntity + "_var") == 0)
		{
			ResetProp(asEntity);
		}
	}
}

void StateOfLamp(string asEntity, string asType)
{
	if(asType == "OnIgnite")
	{
		if(asEntity == "torch_static01_20")
		{
			SetLightVisible("PointLight_119", true);
		}
		else if(asEntity == "torch_static01_29")
		{
			SetLightVisible("PointLight_120", true);
			SetLightVisible("PointLight_121", true);
			SetLightVisible("PointLight_122", true);
		}
		else if(asEntity == "torch_static01_31")
		{
			SetLightVisible("PointLight_117", true);
			SetLightVisible("PointLight_118", true);
		}
		else if(asEntity == "torch_static01_34")
		{
			SetLightVisible("PointLight_123", true);
			SetLightVisible("PointLight_124", true);
		}
	}
}

void PlayerInteractWithRoomLamp(string asEntity)
{
	PlayGuiSound("01_voice_woman_melody.ogg", 0.6f);
	PlaySound("impact_wood_heavy_low.snt", "Area_painting_room");
	SetLightState(asEntity, "lamp_on");
	SetEntityInteractionDisabled(asEntity, true);
	AddLocalVarInt("RoomObjects_var", 1);
	AddLocalVarInt("RoomLamps_var", 1);
	SetPlayerSanity("boost_verysmall_effect");
	if(GetLocalVarInt("RoomObjects_var") == 9)
		CompletePuzzle("RoomObjects");
	else if(GetQuestState("AttachedPainting") >= 1 && GetLocalVarInt("RoomLamps_var") == 1)
		SetMessage("RoomLamps");
}

void CompletePuzzle(string asInput)
{
	//AddLocalVarInt("CompletedPuzzle_var", 1);
	SetPlayerSanity("boost_big_effect");
	if(asInput == "RoomObjects")
	{
		AddDebugMessage("RoomObjects Puzzle Done!", false);
		SetEntityPlayerInteractOn("orbpiece_green_1");
		
		SetQuestState("AttachedPainting", "complete");
		SetQuestState("RoomObjects", "complete");
		SetEntityInactive("Area_painting_room");
		SetEntityInactive("painting_room_static");
		SetEntityActive("painting_room");
		PlayGuiSound("lock_door", 1.0f);
		SetPlayerLookAt("painting_room", "speedveryslow_small", 1.0f);
		
		PlayMusic("10_puzzle02.ogg", "event_big");
	}
	else if(asInput == "Candles")
	{
		AddDebugMessage("Candles Puzzle Done!", false);
		SetEntityPlayerInteractOn("orbpiece_yellow_1");
		SetQuestState("AtticCandles", "complete");
		
		if(GetLocalVarInt("CandlesInteractions_var") < 33)
			SetEntityActive("coins_small_5");
		
		for(int i=1; i<=12; i++)
		{
			SetEntityInactive("Area_candle_" + i);
			SetEntityPlayerInteractOff("candle_puzzle_" + i);
		}
		SetDoorState("swing_door_14", "unlock");
		SetDoorState("swing_door_14", "open_force-z_max");
		SetDoorState("swing_door_14", "open_silent_forcex_big");
		RemoveEntityPlayerInteractCallback("swing_door_14");
		SetEntityPlayerInteractCallback("swing_door_14", "PlayerInteractWithDoor", true);
		SetPlayerLookAt("swing_door_14", "playerspeedslow_med", 2.0f);
		SetLocalVarInt("swing_door_14_var", 1);
		
		PlayMusic("23_puzzle.ogg", "event_big");
	}
	else if(StringContains(asInput, "Books"))
	{
		AddDebugMessage("Books Puzzle Done!", false);
		SetLocalVarInt("BooksPuzzle_var", 1);
		SetEntityPlayerInteractOn("orbpiece_cyan_1");
		
		SetQuestState("AttachedShelf", "complete");
		PlayGuiSound("unlock_door", 1.0f);
		DisableBooks("book_true_");
		DisableBooks("book_fake_");
		SetEntityInactive("AreaShelf");
		SetPropStaticPhysics("shelf_door_1", false);
		SetSwingDoorLocked("shelf_door_1", false, false);
		SetSwingDoorClosed("shelf_door_1", false, false);
		if(StringContains(asInput, "True"))
		{
			SetEntityActive("coins_small_6");
			PlayMusic("03_puzzle_secret.ogg", "event_big");
		}
		else if(StringContains(asInput, "Fake"))
		{
			PlayMusic("01_puzzle_passage.ogg", "event_big");
		}
	}
	else if(asInput == "GobletsAndButtons")
	{
		SetDebugMessage("Goblets And Buttons Puzzle Done!");
		SetEntityPlayerInteractOn("orbpiece_red_1");
		
		SetQuestState("DiningHallFire", "complete");
		SetQuestState("DiningHallButtons", "complete");
		SetQuestState("DiningHallGoblets1", "complete");
		SetQuestState("DiningHallGoblets2", "complete");
		SetEntityInactive("AreaDiscoverGoblets");
		SetEntityActive("AreaGlassBreakScare");
		SetEntitiesActive("candle_tri_diningtable_", 1, 6);
		if(GetLocalVarInt("GobletsInteractions_var") < 14)
			SetEntityActive("coins_small_4");
	}
	else if(asInput == "AngelsAndCurtains")
	{
		SetDebugMessage("Angels And Curtains Puzzle Done!");
		SetEntityPlayerInteractOn("orbpiece_blue_1");
		PlaySound("01_orb_loop", "orbpiece_blue_1", "save_quick");
		for(int i=13; i<=30; i++)
		{
			SetEntityInactive("angel_statue_" + i, 4.0f);
		}
		PlaySound("01_voice_woman_death.snt", "BlockBoxAngels");
		PlayParticleSystem("ps_acid_web_dissolve.ps", "BlockBoxAngels");
		PlayGuiSound("gameplay_acid_web.snt", 0.6f);
		SetPlayerLookAt("BlockBoxAngels", "big_playerspeedveryslow", 4.0f);
		SetEntityInactive("BlockBoxAngels");
		SetScreenEffect("shake_med_mid");
		
		PlayMusic("05_event_falling.ogg", "event_big");
	}
	else if(asInput == "DungeonKitchenKey")
	{
		SetDebugMessage("Dungeon Kitchen Puzzle Done!");
		
		PlayMusic("20_puzzle.ogg", "event_big");
	}
}

void TimerPlayerInsideRoom(string asTimer)
{
	if(asTimer == "ColdRoom")
	{
		if(GetPlayerHealth() > 0)
		{
			PlayGuiSound("player_cough.snt", 1.0f);
			SetPlayerHealth("damage_min_blood");
		}
		AddTimer(asTimer, RandFloat(5.0f, 10.0f), "TimerPlayerInsideRoom");
	}
}

void TimerShutDoor(string asTimer)
{
	if(asTimer == "swing_door_26")
	{
		SetDoorState(asTimer, "close_lock_force-z");
	}
}

void TimerBruteLockedDoorEvent(string asTimer)
{
	StartScreenShake(0.3f, 0.1f, 0.5f, 0.0f);
	PlaySoundAtEntity("man_scream", "01_prisoner_scream.snt", "torch_static01_1", 0.0f, false);
	PlayGuiSound("attack_claw_hit.snt", 0.5f);
	PlayGuiSound("15_bang_fall.snt", 1.0f);
	PlayGuiSound("15_ripp_door.snt", 1.0f);
	PlaySoundAtEntity("dinbe", "scare_tingeling", "Player", 0.0f, false);
	PlaySoundAtEntity("shake2", "scare_whine_loop4", "Player", 0.0f, false);
	PlayMusic("15_event_prisoner.ogg", "event_max");
	CreateParticleSystemAtEntity("splatt", "blood.ps", "swing_door_34", false);
	AddPropImpulse("swing_door_34", -10.0f, 0.0f, 0.0f, "World");
	AddTimer("scare_breatheffect_small", 1.0f, "SetPlayerReact");
	
	AddTimer("brutenoise", 4.0f, "TimerMakeMonsterNoise");
}

void TimerMakeMonsterNoise(string &in asTimer)
{
	int iRand = RandInt(8, 16);
	
	if(GetFunnyModeOn() == true)
		PlaySoundAtEntity("brutenoise", "enemy/chiu/giveup.snt", "torch_static01_1", 0.0f, false);
	else
		PlaySoundAtEntity("brutenoise", "enemy/brute/amb_idle.snt", "torch_static01_1", 0.0f, false);

	AddTimer("brutenoise", iRand, "TimerMakeMonsterNoise");
}

void TurnCandles(int[] avInputArray, bool abUseSounds)
{
	for(int i=0; i<avInputArray.length(); i++)
	{
		if(GetLocalVarInt("Candle_" + avInputArray[i] + "_var") == 0)
		{
			SetLocalVarInt("Candle_" + avInputArray[i] + "_var", 1);
			SetLightState("candle_puzzle_" + avInputArray[i], "lamp_off");
			SetLightState("PointLight_candle_" + avInputArray[i], "offquick");
			SetLightState("SpotLight_candle_" + avInputArray[i], "offquick");
			if(abUseSounds == true)
				PlaySound("15_player_burn.snt", "candle_puzzle_" + avInputArray[i]);
		}
		else
		{
			SetLocalVarInt("Candle_" + avInputArray[i] + "_var", 0);
			SetLightState("candle_puzzle_" + avInputArray[i], "lamp_on");
			SetLightState("PointLight_candle_" + avInputArray[i], "onquick");
			SetLightState("SpotLight_candle_" + avInputArray[i], "onquick");
			if(abUseSounds == true)
				PlayGuiSound("ui_use_tinderbox.ogg", 0.5f);
		}
	}
	int iCandleCount = 0;
	for(int i=1; i<=12; i++)
	{
		iCandleCount = iCandleCount + GetLocalVarInt("Candle_" + i + "_var");
	}
	if(iCandleCount == 12)
	{
		CompletePuzzle("Candles");
	}
}

void PushBackBook(string asInput)
{
	string sBookName = "";
	if(StringContains(asInput, "secondreset_"))
	{
		sBookName = StringSub(asInput, 12, asInput.length() - 12);
		AddDebugMessage("Reset book " + sBookName, false);
		SetEntityPlayerInteractOn(sBookName);
		return;
	}
	else if(StringContains(asInput, "reset_"))
	{
		sBookName = StringSub(asInput, 6, asInput.length() - 6);
		//AddDebugMessage("Reset " + sBookName, false);
		SetPropObjectStuckState(sBookName, 0);
		AddTimer("secondreset_" + sBookName, 0.35f, "PushBackBook");
		return;
	}
	SetPropObjectStuckState(asInput, -1);
	AddTimer("reset_" + asInput, 0.35f, "PushBackBook");
}

void DisableBooks(string asInput)
{
	int iLength = 0;
	string sType = "";
	if(StringContains(asInput, "true"))
	{
		iLength = 14;
		sType = "True";
	}
	else if(StringContains(asInput, "fake"))
	{
		iLength = 4;
		sType = "Fake";
	}
	for(int i=1; i<=iLength; i++)
	{
		SetPropObjectStuckState(asInput + i, -1);
		SetEntityInteractionDisabled(asInput + i, true);
		RemoveTimer(asInput + i);
		if(GetLocalVarInt("BooksPuzzle_var") == 0)
			AddTimer("reset_" + asInput + i, 0.25f, "PushBackBook");
	}
}

void TimerCheckButtons(string asTimer)
{
	SetEntityActive(asTimer + "_1", false);
	SetEntityActive(asTimer, true);
	if(GetLocalVarInt("Button1Var") == 3 && GetLocalVarInt("Button2Var") == 1 && GetLocalVarInt("Button3Var") == 6 && GetLocalVarInt("Button4Var") == 5 && GetLocalVarInt("Button5Var") == 2 && GetLocalVarInt("Button6Var") == 4)
	{
		SetEntityInteractionDisabled("Button1", true);
		RemoveEntityPlayerInteractCallback("Button1");
		SetEntityInteractionDisabled("Button2", true);
		RemoveEntityPlayerInteractCallback("Button2");
		SetEntityInteractionDisabled("Button3", true);
		RemoveEntityPlayerInteractCallback("Button3");
		SetEntityInteractionDisabled("Button4", true);
		RemoveEntityPlayerInteractCallback("Button4");
		SetEntityInteractionDisabled("Button5", true);
		RemoveEntityPlayerInteractCallback("Button5");
		SetEntityInteractionDisabled("Button6", true);
		RemoveEntityPlayerInteractCallback("Button6");
		
		SetEntityInteractionDisabled("Goblet1v", true);
		RemoveEntityPlayerInteractCallback("Goblet1v");
		SetLightState("Goblet1Light", "off");
		SetEntityInteractionDisabled("Goblet2v", true);
		RemoveEntityPlayerInteractCallback("Goblet2v");
		SetLightState("Goblet2Light", "off");
		SetEntityInteractionDisabled("Goblet3v", true);
		RemoveEntityPlayerInteractCallback("Goblet3v");
		SetLightState("Goblet3Light", "off");
		SetEntityInteractionDisabled("Goblet4v", true);
		RemoveEntityPlayerInteractCallback("Goblet4v");
		SetLightState("Goblet4Light", "off");
		SetEntityInteractionDisabled("Goblet5v", true);
		RemoveEntityPlayerInteractCallback("Goblet5v");
		SetLightState("Goblet5Light", "off");
		SetEntityInteractionDisabled("Goblet6v", true);
		RemoveEntityPlayerInteractCallback("Goblet6v");
		SetLightState("Goblet6Light", "off");
		SetEntityInteractionDisabled("Goblet7v", true);
		RemoveEntityPlayerInteractCallback("Goblet7v");
		SetLightState("Goblet7Light", "off");
		
		PlayMusic("21_puzzle_door", "event_big");
		SetEntityActive("key_coldroom_static", false);
		SetEntityActive("key_coldroom", true);
		SetEntityActive("Goblet7v", false);
		CreateParticleSystemAtEntity("AreaWater" + gsParticleNameSuffix, "ps_water_stream.ps", "AreaWater", false);
		PlaySound("01_water_pipe_stream.snt", "AreaWater");
		SetPlayerLookAt("fire_place_1", "med_playerspeedveryslow", 2.25f);
		AddTimer("nofiregood", 2.0f, "TimerDisableFire");
	}
	else
	{
		SetEntityInteractionDisabled("Button1", false);
		SetEntityInteractionDisabled("Button2", false);
		SetEntityInteractionDisabled("Button3", false);
		SetEntityInteractionDisabled("Button4", false);
		SetEntityInteractionDisabled("Button5", false);
		SetEntityInteractionDisabled("Button6", false);
	}
}

void TimerDisableFire(string asTimer)
{
	if(asTimer == "nofiregood")
	{
		SetLampLit("fire_place_1", false, true);
		SetLocalVarInt("fire_place_1_var", 0);
		SetEntityPlayerInteractOff("fire_place_1");
		CreateParticleSystemAtEntity("AreaFire_ps", "ps_dust_impact.ps", "AreaFire", false);
		PlaySound("15_player_burn.snt", "AreaFire");
		StopSound("SoundFire", 2.0f);
		StopSound("AreaWater_snt", "veryquick");
		StopParticleSystem("AreaWater", "suffix");
		SetLightState("LightFire_1", "off");
		SetLightState("LightFire_2", "off");
		RemoveEntityPlayerInteractCallback("AreaFire");
		CompletePuzzle("GobletsAndButtons");
	}
}

void TimerGobletAnimation(string asTimer)
{
	AddLocalVarInt("GobletAnimationVar", 1);
	SetEntityActive(asTimer, false);
	if(GetLocalVarInt("GobletAnimationVar") == 9)
	{
		if(StringContains(asTimer, "Goblet7") == false)
		{
			SetLocalVarInt("GobletAnimationVar", 0);
			if(StringContains(asTimer, "Goblet1") == true)
			{
				SetEntityActive("Goblet1v", true);
				FadeLightTo("Goblet1Light", 1.0f, 1.0f, 1.0f, 0.1f, -1, 0.28f);
				AddTimer("Goblet1v", 1.0f, "TimerResetGoblet");
			}
			else if(StringContains(asTimer, "Goblet2") == true)
			{
				SetEntityActive("Goblet2v", true);
				FadeLightTo("Goblet2Light", 1.0f, 1.0f, 1.0f, 0.1f, -1, 0.28f);
				AddTimer("Goblet2v", 1.0f, "TimerResetGoblet");
			}
			else if(StringContains(asTimer, "Goblet3") == true)
			{
				SetEntityActive("Goblet3v", true);
				FadeLightTo("Goblet3Light", 1.0f, 1.0f, 1.0f, 0.1f, -1, 0.28f);
				AddTimer("Goblet3v", 1.0f, "TimerResetGoblet");
			}
			else if(StringContains(asTimer, "Goblet4") == true)
			{
				SetEntityActive("Goblet4v", true);
				FadeLightTo("Goblet4Light", 1.0f, 1.0f, 1.0f, 0.1f, -1, 0.28f);
				AddTimer("Goblet4v", 1.0f, "TimerResetGoblet");
			}
			else if(StringContains(asTimer, "Goblet5") == true)
			{
				SetEntityActive("Goblet5v", true);
				FadeLightTo("Goblet5Light", 1.0f, 1.0f, 1.0f, 0.1f, -1, 0.28f);
				AddTimer("Goblet5v", 1.0f, "TimerResetGoblet");
			}
			else if(StringContains(asTimer, "Goblet6") == true)
			{
				SetEntityActive("Goblet6v", true);
				FadeLightTo("Goblet6Light", 1.0f, 1.0f, 1.0f, 0.1f, -1, 0.28f);
				AddTimer("Goblet6v", 1.0f, "TimerResetGoblet");
			}
			return;
		}
	}
	else if(GetLocalVarInt("GobletAnimationVar") == 18)
	{
		SetLocalVarInt("GobletAnimationVar", 0);
		if(StringContains(asTimer, "Goblet7") == true)
		{
			SetEntityActive("Goblet7v", true);
			FadeLightTo("Goblet7Light", 1.0f, 1.0f, 1.0f, 0.1f, 1.5f, 2.0f);
			AddTimer("Goblet7v", 1.0f, "StopGobletAnimation");
		}
		return;
	}
	if(StringContains(asTimer, "Goblet1") == true)
	{
		if(StringContains(asTimer, "v1") == true)
		{
			SetEntityActive("Goblet1v2", true);
			FadeLightTo("Goblet1Light", 0.0f, 0.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet1v2", 0.28f, "TimerGobletAnimation");
		}
		else
		{
			SetEntityActive("Goblet1v1", true);
			FadeLightTo("Goblet1Light", 1.0f, 0.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet1v1", 0.28f, "TimerGobletAnimation");
		}
	}
	else if(StringContains(asTimer, "Goblet2") == true)
	{
		if(StringContains(asTimer, "v1") == true)
		{
			SetEntityActive("Goblet2v2", true);
			FadeLightTo("Goblet2Light", 0.0f, 0.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet2v2", 0.28f, "TimerGobletAnimation");
		}
		else
		{
			SetEntityActive("Goblet2v1", true);
			FadeLightTo("Goblet2Light", 1.0f, 1.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet2v1", 0.28f, "TimerGobletAnimation");
		}
	}
	else if(StringContains(asTimer, "Goblet3") == true)
	{
		if(StringContains(asTimer, "v1") == true)
		{
			SetEntityActive("Goblet3v2", true);
			FadeLightTo("Goblet3Light", 0.0f, 0.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet3v2", 0.28f, "TimerGobletAnimation");
		}
		else
		{
			SetEntityActive("Goblet3v1", true);
			FadeLightTo("Goblet3Light", 1.0f, 0.0f, 1.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet3v1", 0.28f, "TimerGobletAnimation");
		}
	}
	else if(StringContains(asTimer, "Goblet4") == true)
	{
		if(StringContains(asTimer, "v1") == true)
		{
			SetEntityActive("Goblet4v2", true);
			FadeLightTo("Goblet4Light", 0.0f, 0.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet4v2", 0.28f, "TimerGobletAnimation");
		}
		else
		{
			SetEntityActive("Goblet4v1", true);
			FadeLightTo("Goblet4Light", 0.0f, 1.0f, 1.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet4v1", 0.28f, "TimerGobletAnimation");
		}
	}
	else if(StringContains(asTimer, "Goblet5") == true)
	{
		if(StringContains(asTimer, "v1") == true)
		{
			SetEntityActive("Goblet5v2", true);
			FadeLightTo("Goblet5Light", 0.0f, 0.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet5v2", 0.28f, "TimerGobletAnimation");
		}
		else
		{
			SetEntityActive("Goblet5v1", true);
			FadeLightTo("Goblet5Light", 0.0f, 0.0f, 1.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet5v1", 0.28f, "TimerGobletAnimation");
		}
	}
	else if(StringContains(asTimer, "Goblet6") == true)
	{
		if(StringContains(asTimer, "v1") == true)
		{
			SetEntityActive("Goblet6v2", true);
			FadeLightTo("Goblet6Light", 0.0f, 0.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet6v2", 0.28f, "TimerGobletAnimation");
		}
		else
		{
			SetEntityActive("Goblet6v1", true);
			FadeLightTo("Goblet6Light", 0.0f, 1.0f, 0.0f, 0.1f, -1, 0.0f);
			AddTimer("Goblet6v1", 0.28f, "TimerGobletAnimation");
		}
	}
	else if(StringContains(asTimer, "Goblet7") == true)
	{
		if(StringContains(asTimer, "v1") == true)
		{
			SetEntityActive("Goblet7v2", true);
			//FadeLightTo("Goblet7Light", 0.2f, 0.4f, 0.8f, 0.1f, 2.5f, 0.0f);
			AddTimer("Goblet7v2", 1.107f, "TimerGobletAnimation");
		}
		else if(StringContains(asTimer, "v2") == true)
		{
			SetEntityActive("Goblet7v3", true);
			//FadeLightTo("Goblet7Light", 0.4f, 0.8f, 0.2f, 0.1f, 2.5f, 0.0f);
			AddTimer("Goblet7v3", 1.107f, "TimerGobletAnimation");
		}
		else if(StringContains(asTimer, "v3") == true)
		{
			SetEntityActive("Goblet7v4", true);
			//FadeLightTo("Goblet7Light", 0.8f, 0.2f, 0.4f, 0.1f, 2.5f, 0.0f);
			AddTimer("Goblet7v4", 1.107f, "TimerGobletAnimation");
		}
		else if(StringContains(asTimer, "v4") == true)
		{
			SetEntityActive("Goblet7v5", true);
			//FadeLightTo("Goblet7Light", 0.4f, 0.2f, 0.8f, 0.1f, 2.5f, 0.0f);
			AddTimer("Goblet7v5", 1.107f, "TimerGobletAnimation");
		}
		else if(StringContains(asTimer, "v5") == true)
		{
			SetEntityActive("Goblet7v6", true);
			//FadeLightTo("Goblet7Light", 0.2f, 0.8f, 0.4f, 0.1f, 2.5f, 0.0f);
			AddTimer("Goblet7v6", 1.107f, "TimerGobletAnimation");
		}
		else if(StringContains(asTimer, "v6") == true)
		{
			SetEntityActive("Goblet7v7", true);
			//FadeLightTo("Goblet7Light", 0.8f, 0.4f, 0.2f, 0.1f, 2.5f, 0.0f);
			AddTimer("Goblet7v7", 1.107f, "TimerGobletAnimation");
		}
		else if(StringContains(asTimer, "v7") == true)
		{
			SetEntityActive("Goblet7v8", true);
			//FadeLightTo("Goblet7Light", 0.8f, 0.2f, 0.4f, 0.1f, 2.5f, 0.0f);
			AddTimer("Goblet7v8", 1.107f, "TimerGobletAnimation");
		}
		else if(StringContains(asTimer, "v8") == true)
		{
			SetEntityActive("Goblet7v1", true);
			//FadeLightTo("Goblet7Light", 0.4f, 0.8f, 0.2f, 0.1f, 2.5f, 0.0f);
			AddTimer("Goblet7v1", 1.107f, "TimerGobletAnimation");
		}
		else
		{
			SetEntityActive("Goblet7v1", true);
			//FadeLightTo("Goblet7Light", 0.2f, 0.8f, 0.4f, 0.1f, 2.5f, 0.55f);
			AddTimer("Goblet7v1", 1.107f, "TimerGobletAnimation");
		}
	}
}

void TimerResetGoblet(string asTimer)
{
	StopPlayerLookAt();
	SetPlayerState("speednormal_jumpon");
	CollidePlayerAndAreaRoom("Player", "AreaDiningHall_1", 1);
	if(asTimer != "nointeract")
		SetEntityInteractionDisabled("Goblet*", false);
}

void TimerCollideWithAreaRoom(string asTimer)
{
	CollidePlayerAndAreaRoom("Player", asTimer, 1); 
}

void PlayLadderCutscene(string asInputA, int aiInputB, bool abInputC)
{
	if(GetLanternActive() == true)
	{
		SetLanternState("off");
		AddTimer("on", 4.0f, "SetLanternState");
	}
	SetScreenEffect("fadeout_veryquick_activeoff");
	PlayGuiSound("player_ladder_wood_attach", 1.0f);
	PlaySound("01_player_ladder_wood_up_loop.snt", asInputA, "save");
	AddTimer("fadein_veryquick_activeon", 4.0f, "SetScreenEffect");
	AddTimer(gsPlayerStartAreaPrefix + aiInputB, 3.75f, "TeleportPlayer");
	AddTimer("player_ladder_wood_attach", 4.0f, "PlaySound");
	AddTimer(asInputA + "_snt", 4.0f, "StopSound");
	if(abInputC == true)
	{
		AddTimer("pickupladder", 4.0f, "EndCutscene");
	}
}

void PlayHammerAndChipperCutscene(string asInput)
{
	if(GetActiveEnemyIsAround())
		SetEnemyState(GetActiveEnemyName(), "alert");
	if(GetLanternActive() == true)
	{
		SetLanternState("off");
		AddTimer("on", 3.0f, "SetLanternState");
	}
	SetScreenEffect("fadeout_veryquick_activeoff");
	AddTimer("fadein_veryquick_activeon", 3.0f, "SetScreenEffect");
	
	SetQuestState("Rocks", "complete");
	AddTimer("boost_medsmall_effect", 3.0f, "SetPlayerSanity");
	
	PlayGuiSound("15_rock_break", 1.0f);
	PlayGuiSound("15_make_hammer", 1.0f);
	PlayGuiSound("03_rock_move", 1.0f);
	AddTimer("impact_rock_high", 0.3f, "PlaySound");
	AddTimer("15_hammer", 0.3f, "PlaySound");
	AddTimer("03_break_wall", 1.5f, "PlaySound");
	
	SetEntityInactive("AreaRocks");
	AddTimer("BlockBoxRocks", 3.0f, "SetEntityInactive");
	for(int i=1; i<=18; i++)
		SetEntityInactive("rock_debris_" + i, 3.0f);
}

void PlayKnifeCutscene(string asInputA, string asInputB)
{
	if(GetActiveEnemyIsAround())
		SetEnemyState(GetActiveEnemyName(), "alert");
	if(asInputB == "curtain")
	{
		if(GetLanternActive() == true)
		{
			SetLanternState("off");
			AddTimer("on", 3.0f, "SetLanternState");
		}
		SetScreenEffect("fadeout_veryquick_activeoff");
		PlayGuiSound("01_player_knife_curtain.ogg", 1.0f);
		AddTimer("fadein_veryquick_activeon", 3.0f, "SetScreenEffect");
	}
	else if(asInputB == "slime")
	{
		SetEntityAndEffectsInactive(asInputA, "save_midquick");
		PlayGuiSound("01_player_knife_flesh.ogg", 1.0f);
		PlayGuiSound("25_guardian_activated.snt", 0.8f);
		PlayParticleSystem("ps_acid_web_dissolve.ps", asInputA);
		
		if(asInputA == "slime_wheel")
			AddTimer("AreaWheelCorridor", 1.0f, "SetEntityActive");
		else if(asInputA == "slime_1")
			SetEntityInactive("BlockBox_" + asInputA);
	}
}

void PlayWheelCutscene()
{
	if(GetActiveEnemyIsAround())
		SetEnemyState(GetActiveEnemyName(), "alert");
	if(GetLocalVarInt("WheelsUsed_var") == 0)
	{
		SetQuestAdded("Wheels");
	}
	AddLocalVarInt("WheelsUsed_var", 1);
	SetPlayerState("activeoff_inventory");
	PlayGuiSound("17_strain_wheel.snt", 1.0f);
	AddTimer("activeon_inventory", 1.0f, "SetPlayerState");
	AddTimer("01_steam_release.snt", 1.0f, "PlaySound");
	AddTimer("boost_small_effect", 1.1f, "SetPlayerSanity");
	if(GetLocalVarInt("WheelsUsed_var") == 3)
	{
		SetQuestCompleted("Wheels");
		AddTimer("AllWheelsUsed", 1.1f, "SetMessage");
		AddTimer("17_start_machine.snt", 1.1f, "PlaySound");
		AddTimer("17_puzzle.ogg", "event_big", 1.2f, "PlayMusic");
		
		SetEntityPlayerInteractOn("bucket_of_tar_1");
		SetLeverStuckState("brazen_bull_1", 0, false);
		RemoveEntityPlayerInteractCallback("brazen_bull_1");
		StopSound("brazen_bull_1_snt", "midquick");
	}
}

void TimerWheelSound(string asTimer)
{
	PlaySound("17_steam_quiet.snt", asTimer, "save_veryquick");
	SetEntityPlayerLookAtCallback(asTimer, "PlayerLookAtWheel", false);
}

void PlayerLookAtWheel(string asEntity, int aiState)
{
	if(aiState == 1)
	{
		SetMessage("WheelUsed");
	}
}

void PlayerInteractWithSink(string asInput)
{
	float fMaxUse = 4 * GetGlobalVarFloat("DifficultyInverseFactor");
	if(GetLocalVarInt("SinkUsed_var") >= fMaxUse)
	{
		SetMessage("NoMoreSink");
		PlayGuiSound("oil_tank_empty.snt", 0.7f);
		return;
	}
	
	AddLocalVarInt("SinkUsed_var", 1);
	SetEntityInactive(asInput);
	SetPlayerState("activeoff_drop");
	PlaySound("01_player_sink_wash.ogg");
	AddTimer("boost_medsmall", 2.8f, "SetPlayerHealth");
	AddTimer("boost_medsmall_effect", 2.9f, "SetPlayerSanity");
	AddTimer("activeon", 3.0f, "SetPlayerState");
	AddTimer("sinkstartcooldown", 3.1f, "TimerSinkCooldown");
	AddTimer("UseSinkTutorial", 3.2f, "SetMessage");
}

void TimerSinkCooldown(string asTimer)
{
	if(asTimer == "sinkstartcooldown")
	{
		AddTimer("sinkcooldown", 180.0f, "TimerSinkCooldown");
	}
	else if(asTimer == "sinkcooldown")
	{
		SetEntityActive("AreaSink");
	}
}

void PlayCrowbarCutscene(string asInput)
{
	if(GetActiveEnemyIsAround())
		SetEnemyState(GetActiveEnemyName(), "alert");
	if(GetLocalVarInt("CrowbarUsed_var") == 3)
	{
		SetMessage("Ch01Level10", "CrowbarBroken", 0);
	}
	else
	{
		AddTimer("DoorUnlocked", 1.0f, "SetMessage");
	}
	SetDoorState(asInput, "unlock_silent");
	SetPlayerState("activeoff_inventory");
	AddTimer("activeon_inventory", 1.0f, "SetPlayerState");
	
	PlayGuiSound("joint_oven_close.snt", 1.2f);
	PlayParticleSystem("ps_hit_wood.ps", asInput);
	AddTimer("unlock_door.snt", 1.0f, "PlaySound");
	AddTimer("boost_small_effect", 1.0f, "SetPlayerSanity");
	
	RemoveEntityPlayerInteractCallback(asInput);
}

void PlayStringCutscene(string asInput)
{
	if(GetActiveEnemyIsAround())
		SetEnemyState(GetActiveEnemyName(), "alert");
	if(GetLocalVarInt("StringUsed_var") == 2)
	{
		SetMessage("StringBroken");
	}
	if(GetLanternActive() == true)
	{
		SetLanternState("off");
		AddTimer("on", 2.0f, "SetLanternState");
	}
	SetScreenEffect("fadeout_veryquick_activeoff");
	PlayGuiSound("26_string_on_glass.ogg", 1.0f);
	AddTimer("fadein_veryquick_activeon", 2.0f, "SetScreenEffect");
	
	SetLightState("PointLight_" + asInput, "off");
	if(asInput == "AreaStuckKey")
	{
		SetQuestState("StuckKey", "complete");
		
		SetEntityInactive(asInput);
		SetEntityInactive("key_dungeon_static", 2.0f);
		SetEntityActive("key_dungeon");
		SetLightState("PointLight_key_dungeon", "on_white", 2.0f);
		AddTimer("25_drop_key.snt", 1.75f, "PlaySound");
		AddTimer("key_dungeon", 0.5f, "SetPlayerLookAt");
		AddTimer("", 5.0f, "StopPlayerLookAt");
	}
	else if(asInput == "statue_room_2_stuck")
	{
		SetQuestState("StuckStatuette", "complete");
		
		SetEntityInactive(asInput, 2.0f);
		SetLightState("PointLight_statue_room_2", "on_white_flicker", 2.0f);
		AddTimer("impact_metal_low.snt", 1.4f, "PlaySound");
		AddTimer("impact_metal_high.snt", 1.75f, "PlaySound");
		AddTimer("statue_room_2", 1.6f, "SetEntityActive");
		AddTimer("statue_room_2", 2.02f, "SetPlayerLookAt");
		AddTimer("", 5.0f, "StopPlayerLookAt");
	}
}

void PlayAngelCutscene()
{
	SetActiveEnemyDisabled("poof");
	SetMessage("Woman", "FakeOrb");
	StopSound("orbpiece_blue_1_fake_snt", "mid");
	SetEntityInactive("orbpiece_blue_1_fake", 3.5f);
	PlayGuiSound("03_orb.snt", 0.3f);
	SetLightState("PointLight_AreaFakeOrbPiece", "off", 3.5f);
	SetPlayerState("speedveryslow_jumpoff");
	SetPlayerLookAt("AreaAngelEyes", "medsmall_activeoff", 1.98f);
	AddTimer("off_silent", 2.0f, "SetLanternState");
	AddTimer("whitetoblack", 2.0f, "SetScreenEffect");
	AddTimer(gsPlayerStartAreaPrefix + 8, 2.5f, "TeleportPlayer");
	AddTimer("AreaRoundedWall", 2.5f, "SetPlayerLookAt");
	AddTimer("activeoff_inventory", 3.5f, "SetPlayerState");
	AddTimer("fadein_midquick", 5.0f, "SetScreenEffect");
	AddTimer("med_midslow", 5.1f, "SetGlobalSoundVolume");
	AddTimer("zoomout_small_slow", 5.2f, "SetScreenEffect");
	AddTimer("27_wind2.ogg", 6.5f, "PlaySound");
	AddTimer("BlockBoxSpace", 6.5f, "SetEntityInactive");
	AddTimer("shake_medsmall_midquick", 6.5f, "SetScreenEffect");
	AddTimer("active", 6.6f, "StopPlayerLookAt");
	AddTimer("speedveryslow", 6.7f, "SetPlayerState");
}

void EndCutscene(string asInput)
{
	if(asInput == "pickupladder")
	{
		PlayGuiSound("pick_generic", 1.0f);
		SetMessage("Hints", "PickUpLadder", 0);
	}
}

/*float gfGhostPatrolDetectRadius = 7.5f; //This indicates how close the Player must be to be chased from the ghost if the ghost is in a patrol state
float gfGhostChaseDetectRadius = 10.0f; //This indicates how close the Player must be to be chased from the ghost if the ghost is already chasing the Player
int giGhostChaseSteps = 10; //This indicates how many steps towards the Player the ghost will make whenever a chase starts
int[] gviGhostPatrolAreasArray = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; //Length = 32

void SetGhostPos(string asEntity, float afX, float afY, float afZ)
{
	SetEntityPos(asEntity, afX, afY, afZ);
	//StopSound("Ghostheartbeat_snt_" + GetLocalVarInt("GhostMovementCount_var"), 2.0f);
	//AddLocalVarInt("GhostMovementCount_var", 1);
	//PlaySoundAtEntity("Ghostheartbeat_snt_" + GetLocalVarInt("GhostMovementCount_var"), "01_player_heartbeat_loop", "GhostBlock", 2.0f, true);
}

void PlayGhostSounds()
{
	PlaySoundAtEntity("GhostBlock_snt1", "ghost_walk.snt", "GhostBlock", 0.0f, false);
	
	if(RandInt(0, 1) == 0)
	{
		PlaySoundAtEntity("GhostBlock_snt2", "ghost_male_terrified.snt", "GhostBlock", 1.0f, false);
	}
	else
	{
		PlaySoundAtEntity("GhostBlock_snt2", "ghost_whine.snt", "GhostBlock", 1.0f, false);
	}
}

void MoveGhostTowardEntity(string asEntity)
{
	if(StringContains(asEntity, "check"))
	{
		if(GetEntityPlayerDistance("GhostBlock") <= gfGhostChaseDetectRadius)
		{
			StartGhostChase("");
			
			SetDebugMessage("Ghost is still too close to the Player, starting another chase");
		}
		else
		{
			SetupGhostPatrol("");
			
			SetDebugMessage("Player managed to get far enough from the Ghost, resuming Ghost patrol path");
		}
		
		return;
	}
	
	float fGhostPosX = GetEntityPosX("GhostBlock");
	float fGhostPosY = GetEntityPosY("GhostBlock");
	float fGhostPosZ = GetEntityPosZ("GhostBlock");
	float fEntityPosX = 0.0f;
	float fEntityPosY = 0.0f;
	float fEntityPosZ = 0.0f;
	
	if(StringContains(asEntity, "player"))
	{
		fEntityPosX = GetPlayerPosX();
		fEntityPosY = GetPlayerPosY();
		fEntityPosZ = GetPlayerPosZ();
	}
	else
	{
		fEntityPosX = GetEntityPosX(asEntity);
		fEntityPosY = GetEntityPosY(asEntity);
		fEntityPosZ = GetEntityPosZ(asEntity);
	}
	
	if(fGhostPosX >= fEntityPosX)
		fGhostPosX = (fGhostPosX - (2.5f * GetGlobalVarFloat("DifficultyDirectFactor")));
	else
		fGhostPosX = (fGhostPosX + (2.5f * GetGlobalVarFloat("DifficultyDirectFactor")));
	
	if(fGhostPosY >= fEntityPosY)
		fGhostPosY = fGhostPosY - 0.5f;
	else
		fGhostPosY = fGhostPosY + 0.5f;
	
	if(fGhostPosZ >= fEntityPosZ)
		fGhostPosZ = (fGhostPosZ - (2.5f * GetGlobalVarFloat("DifficultyDirectFactor")));
	else
		fGhostPosZ = (fGhostPosZ + (2.5f * GetGlobalVarFloat("DifficultyDirectFactor")));
	
	SetGhostPos("GhostBlock", fGhostPosX, fGhostPosY, fGhostPosZ);
	RemoveTimer("lookatghostdamage");
	RemoveTimer("lookatghost");
	SetScreenEffect("allnormal_bolt");
	RemoveEntityPlayerLookAtCallback(GetLocalVarString("GhostLastUsedArea_var"));
	SetEntityPlayerLookAtCallback("GhostBlock", "PlayerLookAtGhost", false);
	PlayGhostSounds();
	
	if(StringContains(asEntity, "player") == false)
	{
		SetDebugMessage("Ghost is moving towards " + asEntity);
	}
	else
	{
		SetDebugMessage("Ghost is moving towards Player");
	}
	
	if(StringContains(asEntity, "player") == false)
	{
		float fRand = GetGlobalVarFloat("DifficultyInverseFactor") * RandFloat(1.5f, 2.0f);
		if(GetEntitiesDistance("GhostBlock", asEntity) > 4)
		{
			AddTimer(asEntity, fRand, "MoveGhostTowardEntity");
		}
		else
		{
			AddTimer(asEntity, fRand + 0.01f, "ResumeGhostPatrol");
			
			SetDebugMessage("Ghost got enough close to " + asEntity);
		}
	}
}

void DisableGhost(string asInput)
{
	SetDebugMessage("Ghost has been disabled!");
	SetEntityInactive("GhostBlock");
	SetLocalVarInt("GhostIsBeingObserved_var", 0);
	SetLocalVarInt("GhostIsChasing_var", 0);
	SetLocalVarInt("GhostIsActive_var", 0);
	SetLocalVarInt("GhostPatrolSteps_var", 0);
	
	for(int i=GetLocalVarInt("GhostMinPatrolAreaCode_var"); i<=GetLocalVarInt("GhostMaxPatrolAreaCode_var"); i++)
	{
		RemoveTimer("AreaGhostPath_" + i);
	}
	
	RemoveTimer("AreaGhostPath_0");
	RemoveTimer("AreaGhostPath_*");
	RemoveTimer("playernearghost");
	RemoveTimer("ghostchaseplayer");
	RemoveTimer("checkghostchase");
	RemoveTimer("checkdistanceghostandplayer");
	RemoveTimer("lookatghostblockdamage");
	RemoveTimer("lookatghostdamage");
	RemoveTimer("lookatghostblock");
	RemoveTimer("lookatghost");
	StopMusic(6.0f, 0);
	StopSound("Player_terror_snt", "mid");
	//StopSound("Ghostheartbeat_snt_" + GetLocalVarInt("GhostMovementCount_var"), 4.0f);
	RemoveEntityPlayerLookAtCallback(GetLocalVarString("GhostLastUsedArea_var"));
	RemoveEntityPlayerLookAtCallback("GhostBlock");
	StopPlayerLookAt();
	
	SetScreenEffect("allnormal_bolt");
	
	if(asInput != "disableghost")
	{
		if(asInput.length() >= 2)
		{
			PlayGuiSound(asInput, 1.0f);
		}
	}
}

void EmptyGhostPatrolArray()
{
	for(int i=0; i<gviGhostPatrolAreasArray.length(); i++)
	{
		gviGhostPatrolAreasArray[i] = 0;
	}
}

string GetGhostNearestPath()
{
	string sMin = "AreaGhostPath_" + gviGhostPatrolAreasArray[0];
	string sTemp = "";
	int iMin = 999;
	int iTemp = 0;
	int iTempDistance = 0;
	
	for(int i=0; i<gviGhostPatrolAreasArray.length(); i++)
	{
		if(gviGhostPatrolAreasArray[i] == 0)
		{
			break;
		}
		
		sTemp = "AreaGhostPath_" + gviGhostPatrolAreasArray[i];
		iTemp = GetEntitiesDistance("GhostBlock", sTemp);
		iTempDistance = GetEntityPlayerDistance(sTemp);
		
		if(iTemp < iMin && GetEntityPlayerDistance(sTemp) > ((gfGhostPatrolDetectRadius * GetGlobalVarFloat("DifficultyDirectFactor")) + 1))
		{
			iMin = iTemp;
			sMin = sTemp;
		}
	}
	
	return sMin;
}

void SetupGhostPatrol(string asType)
{
	string sCurrentGhostRoom = GetLocalVarString("GhostPatrolRoom_var");
	
	SetLocalVarInt("GhostIsChasing_var", 0);
	
	if(StringContains(asType, "enabled"))
	{
		SetLocalVarInt("GhostIsActive_var", 1);
		PlayGuiSound("scare_ghost.snt", 6.0f);
		PlayGuiSound("player_react_guardian3.snt", 0.4f);
		AddTimer("", 2.0f, "SetupGhostPatrol");
		
		SetLocalVarInt("GhostIsActive_var", 1);
		EmptyGhostPatrolArray();
		
		if(sCurrentGhostRoom == "Library")
		{
			gviGhostPatrolAreasArray[0] = 1;
			gviGhostPatrolAreasArray[1] = 2;
			gviGhostPatrolAreasArray[2] = 3;
			gviGhostPatrolAreasArray[3] = 4;
			gviGhostPatrolAreasArray[4] = 5;
			gviGhostPatrolAreasArray[5] = 6;
			gviGhostPatrolAreasArray[6] = 7;
			gviGhostPatrolAreasArray[7] = 8;
			gviGhostPatrolAreasArray[8] = 9;
			gviGhostPatrolAreasArray[9] = 10;
			gviGhostPatrolAreasArray[10] = 11;
			gviGhostPatrolAreasArray[11] = 12;
			gviGhostPatrolAreasArray[12] = 13;
			gviGhostPatrolAreasArray[13] = 14;
			gviGhostPatrolAreasArray[14] = 15;
			gviGhostPatrolAreasArray[15] = 16;
			gviGhostPatrolAreasArray[16] = 11;
			gviGhostPatrolAreasArray[17] = 10;
			gviGhostPatrolAreasArray[18] = 5;
			gviGhostPatrolAreasArray[19] = 4;
			gviGhostPatrolAreasArray[20] = 3;
			gviGhostPatrolAreasArray[21] = 2;
			gviGhostPatrolAreasArray[22] = 1;
			
			SetLocalVarInt("GhostMinPatrolAreaCode_var", 1);
			SetLocalVarInt("GhostMaxPatrolAreaCode_var", 16);
			
			SetDebugMessage("Setup Ghost Library Patrol");
		}
		else if(sCurrentGhostRoom == "EntranceHall")
		{
			gviGhostPatrolAreasArray[0] = 17;
			gviGhostPatrolAreasArray[1] = 18;
			gviGhostPatrolAreasArray[2] = 19;
			gviGhostPatrolAreasArray[3] = 20;
			gviGhostPatrolAreasArray[4] = 21;
			gviGhostPatrolAreasArray[5] = 22;
			gviGhostPatrolAreasArray[6] = 23;
			gviGhostPatrolAreasArray[7] = 22;
			gviGhostPatrolAreasArray[8] = 21;
			gviGhostPatrolAreasArray[9] = 24;
			gviGhostPatrolAreasArray[10] = 25;
			gviGhostPatrolAreasArray[11] = 26;
			gviGhostPatrolAreasArray[12] = 27;
			gviGhostPatrolAreasArray[13] = 28;
			gviGhostPatrolAreasArray[14] = 29;
			gviGhostPatrolAreasArray[15] = 30;
			gviGhostPatrolAreasArray[16] = 31;
			gviGhostPatrolAreasArray[17] = 32;
			gviGhostPatrolAreasArray[18] = 33;
			gviGhostPatrolAreasArray[19] = 34;
			
			SetLocalVarInt("GhostMinPatrolAreaCode_var", 17);
			SetLocalVarInt("GhostMaxPatrolAreaCode_var", 34);
			
			SetDebugMessage("Setup Ghost Library EntranceHall");
		}
		
		SetEntityPos("GhostBlock", GetEntityPosX("AreaGhostPath_" + gviGhostPatrolAreasArray[0]), GetEntityPosY("AreaGhostPath_" + gviGhostPatrolAreasArray[0]), GetEntityPosZ("AreaGhostPath_" + gviGhostPatrolAreasArray[0]));
		
		return;
	}
	
	string sNearestArea = GetGhostNearestPath();
	
	SetEntityActive("GhostBlock");
	ResumeGhostPatrol(sNearestArea);
	
	PlayMusic("dan_ghost01.ogg", true, 3.0f, 6.0f, 0, true);
	StopSound("Player_terror_snt", "midquick");
}

void CollidePlayerAndGhost(string asParent, string asChild, int aiState)
{
	SetPlayerHealth("damage_max_lethal");
	SetScreenEffect("shake_big_veryquick");
	SetScreenEffect("white_max_veryquick");
	PlayGuiSound("enemy_hallucination_disappear.snt", 1.5f);
	
	DisableGhost("");
	AddTimer("player_react_guardian1.snt", 1.0f, "DisableGhost");
	AddTimer("", 2.0f, "DisableGhost");
}

void StartGhostChase(string asInput)
{
	SetLocalVarInt("GhostIsChasing_var", 1);
	SetDebugMessage("Started a Ghost chase!");
	
	for(int i=GetLocalVarInt("GhostMinPatrolAreaCode_var"); i<=GetLocalVarInt("GhostMaxPatrolAreaCode_var"); i++)
	{
		RemoveTimer("AreaGhostPath_" + i);
	}
	
	RemoveTimer("AreaGhostPath_0");
	RemoveTimer("AreaGhostPath_*");
	RemoveTimer("disableghost");
	RemoveTimer("checkdistanceghostandplayer");
	
	MoveGhostTowardEntity("ghostchaseplayer");
	
	for(int k=1; k<=giGhostChaseSteps; k++)
	{
		AddTimer("ghostchaseplayer", k, "MoveGhostTowardEntity");
	}
	
	AddTimer("checkghostchase", GetGlobalVarFloat("DifficultyDirectFactor") * giGhostChaseSteps, "MoveGhostTowardEntity");
	
	PlayMusic("att_ghost.ogg", true, 0.8f, 3.0f, 0, true);
	PlaySoundAtEntity("Player_terror_snt", "insanity_terror", "Player", 2.0f, true);
}

void TimerLookAtGhost(string asTimer)
{
	if(StringContains(asTimer, "damage"))
	{
		SetPlayerHealth("damage_small");
		SetPlayerSanity("damage_verysmall_lethal");
		PlayGuiSound("sanity_drain_high.snt", 1.0f);
		SetScreenEffect("shake_verysmall_bolt");
		AddTimer(asTimer, RandFloat(1.25f, 2.5f), "TimerLookAtGhost");
	}
	else
	{
		if(GetLocalVarInt("GhostIsChasing_var") == 0)
		{
			StartGhostChase("");
		}
	}
}

void PlayerLookAtGhost(string asEntity, int aiState)
{
	if(aiState == 1)
	{
		SetLocalVarInt("GhostIsBeingObserved_var", 1);
		
		if(asEntity == "GhostBlock")
		{
			AddTimer("lookatghostblockdamage", GetGlobalVarFloat("DifficultyInverseFactor") * 0.5f, "TimerLookAtGhost");
			AddTimer("lookatghostblock", GetGlobalVarFloat("DifficultyInverseFactor") * 1, "TimerLookAtGhost");
		}
		else
		{
			AddTimer("lookatghostdamage", GetGlobalVarFloat("DifficultyInverseFactor") * 0.5f, "TimerLookAtGhost");
			AddTimer("lookatghost", GetGlobalVarFloat("DifficultyInverseFactor") * 1, "TimerLookAtGhost");
		}
		
		SetRadialBlurStartDist(0.25f);
		FadeRadialBlurTo(2.0f, 0.25f);
		FadeSepiaColorTo(0.75f, 0.5f);
		FadeImageTrailTo(0.25f, 1.0f);
		FadePlayerFOVMulTo(0.985f, 7.5f);
		FadePlayerAspectMulTo(0.985f, 7.5f);
	}
	else
	{
		SetLocalVarInt("GhostIsBeingObserved_var", 0);
		
		if(asEntity == "GhostBlock")
		{
			RemoveTimer("lookatghostblock");
			RemoveTimer("lookatghostblockdamage");
		}
		else
		{
			RemoveTimer("lookatghost");
			RemoveTimer("lookatghostdamage");
		}
		
		SetScreenEffect("allnormal_veryquick");
	}
}

void CheckDistanceGhostAndPlayer(string asInput)
{
	if(GetEntityPlayerDistance("GhostBlock") <= GetGlobalVarFloat("DifficultyDirectFactor") * gfGhostPatrolDetectRadius)
	{
		SetLocalVarInt("GhostIsChasing_var", 1);
		AddTimer("playernearghost", 0.01f, "StartGhostChase");
		SetDebugMessage("Player is too close to Ghost! Distance= " + GetEntityPlayerDistance("GhostBlock"));
	}
	else
	{
		AddTimer("checkdistanceghostandplayer", 0.5f, "CheckDistanceGhostAndPlayer");
	}
}

void TeleportGhostToArea(string asArea)
{
	AddLocalVarInt("GhostPatrolSteps_var", 1);
	
	SetGhostPos("GhostBlock", GetEntityPosX(asArea), GetEntityPosY(asArea), GetEntityPosZ(asArea));
	RemoveEntityPlayerLookAtCallback("GhostBlock");
	RemoveEntityPlayerLookAtCallback(GetLocalVarString("GhostLastUsedArea_var"));
	RemoveTimer("lookatghostblockdamage");
	RemoveTimer("lookatghostblock");
	SetScreenEffect("allnormal_bolt");
	SetLocalVarString("GhostLastUsedArea_var", asArea);
	SetEntityPlayerLookAtCallback(asArea, "PlayerLookAtGhost", false);
	PlayGhostSounds();
	
	SetDebugMessage("Ghost teleported to " + asArea);
}

void ResumeGhostPatrol(string asArea)
{
	int iCurrentAreaCode = StringToInt(StringSub(asArea, 14, asArea.length() - 14));
	
	SetDebugMessage("Resuming Ghost patrol from node " + iCurrentAreaCode);
	
	float fRand = GetGlobalVarFloat("DifficultyInverseFactor") * RandFloat(3.0f, 4.0f);
	
	if(gviGhostPatrolAreasArray[GetLocalVarInt("GhostPatrolSteps_var")] == iCurrentAreaCode)
	{
		for(int i=1; i<=gviGhostPatrolAreasArray.length(); i++)
		{
			if(gviGhostPatrolAreasArray[GetLocalVarInt("GhostPatrolSteps_var") + i] != 0)
			{
				AddTimer("AreaGhostPath_" + gviGhostPatrolAreasArray[GetLocalVarInt("GhostPatrolSteps_var") + i], fRand * i, "TeleportGhostToArea");
			}
			else
			{
				AddTimer("disableghost", fRand * i, "DisableGhost");
				break;
			}
		}
	}
	else
	{
		AddTimer("AreaGhostPath_" + gviGhostPatrolAreasArray[GetLocalVarInt("GhostPatrolSteps_var")], fRand, "MoveGhostTowardEntity");
	}
	
	AddTimer("checkdistanceghostandplayer", 4.5f, "CheckDistanceGhostAndPlayer");
}*/

void UseBucketOnWater(string asItem, string asEntity)
{
	if(asEntity == "AreaSewerWater_3" || asEntity == "AreaSink")
	{
		SetMessage("NotEnoughWater");
	}
	else
	{
		SetMessage("PickUpFilledBucket");
		RemoveItem(asItem);
		RemoveUseItemCallback("wooden_bucket_1_AreaSewerWater_1");
		RemoveUseItemCallback("wooden_bucket_1_AreaSewerWater_2");
		RemoveUseItemCallback("wooden_bucket_1_AreaSewerWater_3");
		RemoveUseItemCallback("wooden_bucket_1_AreaSink");
		SetEntityInactive("AreaSewerWater_1");
		SetEntityInactive("AreaSewerWater_2");
		GiveItem("wooden_bucket_filled_1", "WoodenBucketFilled", "wooden_bucket_filled");
		PlayGuiSound("26_fill_blood.ogg", 1.0f);
		PlayGuiSound("pick_glass", 1.0f);
		SetPlayerSanity("boost_small");
		ActivateRandomShowEnemyArea("AreaDiningHall", 5);
	}
}

void StateChangeOfBonfire(string asEntity, string asType)
{
	if(asType == "OnIgnite")
	{
		SetLocalVarInt(asEntity + "_var", 1);
	}
}

void UseFilledBucketOnBonfire(string asItem, string asEntity)
{
	if(asEntity == "bonfire_3" || asEntity == "AreaCopperFire")
	{
		SetLocalVarInt("bonfire_3_var", 0);
		RemoveUseItemCallback(asItem, "bonfire_3");
		RemoveUseItemCallback(asItem, "AreaCopperFire");
		
		SetQuestCompleted("CopperFire");
		SetLampLit("bonfire_3", false, true);
		PlayParticleSystem("ps_dust_impact.ps", asEntity);
		PlayGuiSound("15_player_burn.ogg", 1.0f);
		SetEntityInactive("copper_tube_static");
		SetEntityInactive("AreaCopperFire");
		PlayGuiSound("15_make_hammer", 0.7f);
		PlayGuiSound("pick_generic", 1.0f);
		SetMessage("PickUpCopper");
		GiveItem("copper_tube_and_needle", "Puzzle", "copper_tube_and_needle", "copper_tube_and_needle.tga", 0);
		SetUseItemCallback("copper_tube_and_needle", "AreaJackHead", "UseCopperOnJack", false);
		SetLightState("PointLight_190", "off_flicker");
		SetLightState("SpotLight_32", "off_flicker");
		
		RemoveItem(asItem);
		SetEntityActive("wooden_bucket_object_1");
	}
	else if(asEntity == "AreaAngelFire")
	{
		SetPlayerState("force-z_med");
		PlayGuiSound("01_teleport.snt", 1.0f);
		PlayGuiSound("00_laugh", 1.0f);
		SetPlayerReact("pant_sigh_effect_verysmall", 0.25f);
		SetPlayerHealth("damage_min");
	}
	else if(asEntity == "brazen_bull_1")
	{
		if(GetLocalVarInt("WheelsUsed_var") >= 3)
		{
			SetMessage("BucketOnBullCold");
		}
		else
		{
			SetMessage("BucketOnBullHot");
		}
	}
	else
	{
		if(asEntity == "bonfire_1" || asEntity == "AreaDungeonKitchenFire" || GetLocalVarInt(asEntity + "_var") == 1)
			SetMessage("BucketOnWrongFire");
		else
			SetMessage("BucketOnTurnedOffFire");
	}
}

void UseMeatOnFire(string asItem, string asEntity)
{
	if(StringContains(asEntity, "bonfire") || asEntity == "fire_place_1" || asEntity == "AreaDungeonKitchenFire" || asEntity == "AreaCopperFire")
	{
		if(asEntity == "bonfire_1" || asEntity == "AreaDungeonKitchenFire" || asEntity == "AreaCopperFire" || GetLocalVarInt(asEntity + "_var") == 1)
			SetMessage("MeatOnWrongFire");
		else
			SetMessage("BucketOnTurnedOffFire");
	}
	else
	{
		RemoveItem(asItem);
		GiveItem("key_storage", "KeyStorage", "key_tomb_rusty.tga");
		SetMessage("PickUpStorageKey");
		SetPlayerSanity("boost_medsmall_effect");
		
		PlayGuiSound("15_player_burn.ogg", 1.5f);
		PlayGuiSound("pick_key", 1.0f);
		PlayParticleSystem("ps_hit_wood.ps", asEntity);
		PlayMusic("01_theme_love.ogg", "event");
		
		SetEntityAndEffectsInactive("AreaAngelEyes", "save");
		SetEntityInactive(asEntity);
	}
}

void UseDrillOnJack(string asItem, string asEntity)
{
	AddGlobalVarInt("JackIsDead_var", 1);
	RemoveUseItemCallback("copper_tube_and_needle", "AreaJackHead");
	SetUseItemCallback("copper_tube_and_needle", asEntity, "UseCopperOnJack", true);
	RemoveItem(asItem);
	StopSound("AreaJackHead" + gsSoundNameSuffix);
	PlayDrillCutscene(asEntity);
}

void PlayDrillCutscene(string asEntity)
{
	if(GetLanternActive() == true)
	{
		SetLanternState("off_silent");
		//AddTimer("on", 6.0f, "SetLanternState");
	}
	SetScreenEffect("fadeout_veryquick_activeoff");
	AddTimer("fadein_veryquick_activeon", 6.0f, "SetScreenEffect");
	AddTimer("boost_small", 6.0f, "SetPlayerSanity");
	AddTimer("FindCopper", 6.0f, "SetQuestAdded");
	
	PlayPropAnimation("jack_corpse", "squirm", 0.2f, true, "");
	SetLightState("Light_Jack_1", "off_flicker_mid");
	StopSound("Sound_Jack_1", 1.0f);
	StopSound("Sound_Jack_2", 2.0f);
	StopSound("Sound_Jack_3", 3.0f);
	StopSound("Sound_Jack_4", 4.0f);
	StopSound("Sound_Jack_5", 5.0f);
	StopSound("Sound_Jack_6", 6.0f);
	PlayGuiSound("12_make_drill", 1.0f);
	PlaySoundAtEntity("drilling", "19_drill.snt", asEntity, 1.0f, false);
	AddTimer("24_mb_04_01.ogg", 0.75f, "PlaySound");
	AddTimer("24_paint.snt", 1.0f, "PlaySound");
	AddTimer("27_paper_daniel01.ogg", "event", 0.5f, "PlayMusic");
	AddTimer("Particle_Jack_1", 1.1f, "DestroyParticleSystem");
	AddTimer("Particle_Jack_2", 1.2f, "DestroyParticleSystem");
	AddTimer("Particle_Jack_3", 1.3f, "DestroyParticleSystem");
	AddTimer("Particle_Jack_4", 1.4f, "DestroyParticleSystem");
	AddTimer("Particle_Jack_5", 1.5f, "DestroyParticleSystem");
	AddTimer("Particle_Jack_6", 1.6f, "DestroyParticleSystem");
	AddTimer("Particle_Jack_7", 1.7f, "DestroyParticleSystem");
	AddTimer("19_pour_blood.snt", asEntity, "save", 2.5f, "PlaySound");
	AddTimer("ps_blood_tiny_stream_tube.ps", asEntity, "save_red", 2.5f, "PlayParticleSystem");
	AddTimer("Idle", 5.0f, "TimerJackAnimation");
}

void TimerJackAnimation(string asTimer)
{
	if(asTimer == "Idle")
		ResetProp("jack_corpse");
	
	PlayPropAnimation("jack_corpse", asTimer, 0.2f, true, "");
}

void UseCopperOnJack(string asItem, string asEntity)
{
	if(asEntity == "AreaJackHead" && GetGlobalVarInt("JackIsDead_var") == 0)
	{
		SetMessage("Ch02Level19", "UseTubeOnHead_NoBlood");
		return;
	}
	
	RemoveItem(asItem);
	SetEntityActive("copper_tube_static_head");
	SetEntityActive("AreaCopperOnHead");
	SetEntityInactive("AreaJackHead");
	StopParticleSystem(asEntity + gsParticleNameSuffix);
	StopSound(asEntity + "_snt", 2.0f);
	PlaySoundAtEntity("attach","19_attach_pipe.snt", asEntity, 0, false);
	PlaySoundAtEntity("bloodStream2", "19_pour_blood_low.snt", "AreaCopperOnHead", 0, true);
	PlayParticleSystem("ps_blood_tiny_stream_needle.ps", "AreaCopperOnHead", "save_red");
}

void PlayerInteractWithAreaCopperOnHead(string asEntity)
{
	AddGlobalVarInt("JackIsDead_var", 1);
	SetQuestCompleted("FindACure");
	SetQuestCompleted("FindCopper");
	SetActiveEnemyDisabled();
	
	StopParticleSystem(asEntity + gsParticleNameSuffix);
	StopSound("bloodStream2", "midslow");
	
	StartPlayerLookAt("AreaJackHead", 1, 3, "");
	SetPlayerMoveSpeedMul(0.3);
	SetRadialBlurStartDist(0.1);
	FadeRadialBlurTo(0.1, 2);
	FadePlayerFOVMulTo(0.3, 0.6);
	
	SetPlayerActive(false);
	if(GetLanternActive() == true)
		SetLanternActive(false, false);
	
	PlayGuiSound("19_inject.snt", 1.0f);
	
	AddTimer("InjectSounds", 1.15f, "TimerInjectSounds");
	FadeOut(1.06f);
}

void TimerInjectSounds(string &in asTimer)
{
	PlayGuiSound("19_creak.snt", 1.0f);
	PlayGuiSound("sanity_heartbeat", 0.5f);
	
	PlayMusic("19_puzzle_inject.ogg", false,1, 1, 10, false);
	
	AddTimer("1", 1.2f, "TimerInjectSounds02");
	AddTimer("2", 2.4f, "TimerInjectSounds02");
	AddTimer("3", 3.6f, "TimerInjectSounds02");
	AddTimer("4", 4.8f, "TimerInjectSounds02");
	
	SetPlayerMoveSpeedMul(1.0f);
	StopPlayerLookAt();
	FadeRadialBlurTo(0, 0.015);
	FadePlayerFOVMulTo(1, 2);
	
	AddTimer("InjectSoundsOver", 5.0f, "TimerInjectSoundsOver");
}

void TimerInjectSounds02(string &in asTimer)
{
	if(asTimer == "1")
		PlayGuiSound("react_breath_slow", 0.3f);	
	else if(asTimer == "2")
		PlayGuiSound("sanity_heartbeat", 0.7f);
	else if(asTimer == "3")
		PlayGuiSound("react_breath_slow", 0.5f);
	else
		PlayGuiSound("sanity_heartbeat", 1.0f);
}

void TimerInjectSoundsOver(string &in asTimer)
{
	if(GetPlayerSanity() > 50)
	{
		SetPlayerSanity(50);
		FadeImageTrailTo(0.9f, 1);
		AddTimer("trail_min_veryslow", 7.0f, "SetScreenEffect");
	}

	PlayGuiSound("react_pant", 0.5f);
	PlayGuiSound("03_in_a_bottle.snt", 0.5f);
	
	SetPlayerActive(true);
	FadeIn(4.0f);
	
	SetEntityActive("AreaJackHead");
	SetEntityActive("AreaSecretPrison_ShowGhost");
	SetEntityPlayerCollideCallback("AreaSecretPrison_ShowGhost", "CollidePlayerAndAreaAfterInject", "enter_remove");
}

void CollidePlayerAndAreaAfterInject(string asParent, string asChild, int aiState)
{
	if(asChild == "AreaSecretPrison_ShowGhost")
	{
		PlayMusic("18_puzzle_valve02.ogg", "medbig_event_mid");
		PlaySound("29_amb_guard.snt");
		PlaySound("guardian_ontop.snt");
		SetPlayerReact("scare_breathslow_effect_small", 1.1f);
		AddTimer("damage_min_effect", 1.1f, "SetPlayerSanity");
		AddTimer("secretprisonghost", RandFloat(2.5f, 3.5f), "TimerForceEnemyEncounter");
	}
}

void TimerForceEnemyEncounter(string asTimer)
{
	SetActiveEnemyDisabled("poofsilent");
	SetLocalVarInt("LastBruteEvent_var", 0);
	string sEnemyName = "";
	
	if(asTimer == "secretprisonghost")
	{
		sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
		SetEnemyState(sEnemyName, "fakeoff");
		SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "689");
		SetEntityInvisible(sEnemyName);
		SetEnemyPatrolNode(sEnemyName, 680, 1);
		SetEnemyPatrolNode(sEnemyName, 715, 0);
		SetEnemyPatrolNode(sEnemyName, 680, 0);
		SetEnemyPatrolNode(sEnemyName, 713, 0);
		SetEnemyPatrolNode(sEnemyName, 710, 0);
		SetEnemyPatrolNode(sEnemyName, 707, 0);
		SetEnemyPatrolNode(sEnemyName, 703, 0);
		SetEnemyPatrolNode(sEnemyName, 689, 0);
		SetEnemyPatrolNode(sEnemyName, 737, 3);
		SetEnemyPatrolNode(sEnemyName, 694, 0);
		SetEnemyPatrolNode(sEnemyName, 803, 0);
	}
	else if(asTimer == "atticdoorbrute")
	{
		sEnemyName = "ghost_music" + GetGlobalVarInt("GhostChaseMusic_var") + GetExtraModesSuffix();
		SetEnemyState(sEnemyName, "reset_" + gsEnemyPathNodeCodePrefix + "365");
		SetEntityInvisible(sEnemyName);
		SetEnemyPatrolNode(sEnemyName, 369, 2);
		SetEnemyPatrolNode(sEnemyName, 316, 1);
		SetEnemyState(sEnemyName, "fakeon");
		SetActiveEnemyName("");
	}
	if(GetGlobalVarInt("EnemiesAchievement") == 1) SetEnemyState(sEnemyName, "sanitydrainoff");
}

void CollidePlayerAndAreaRandSound(string asParent, string asChild, int aiState)
{
	int iCode = StringToInt(GetStringWithoutSubString(asChild, "AreaRandSound_"));
	
	if(iCode == 5 || iCode == 6 || iCode == 7 || iCode == 10)
	{
		StartInsanityEvent("Steps_Crawl01");
		PlayGuiSound("15_amb_rand.ogg", 0.5f);
		SetPlayerSanity("damage_min");
	}
	else if(iCode == 2 || iCode == 8)
	{
		StartInsanityEvent("Steps_SlimeySneak01");
		PlayGuiSound("scare_scratch_intense.ogg", 0.75f);
		SetPlayerSanity("damage_verysmall");
	}
	else if(iCode == 1 || iCode == 3)
	{
		PlayGuiSound("ghost_humming.snt", 0.7f);
		SetPlayerSanity("damage_verysmall");
		if(iCode == 1)
		{
			SetEntityState("wood_box03_5", "impulsex_min");
			SetEntityState("wood_box03_5", "impulse-y_min");
		}
	}
	else if(iCode == 4)
	{
		PlayGuiSound("scare_wind_reverse.snt", 0.6f);
		SetPlayerSanity("damage_verysmall");
	}
	else if(iCode == 9)
	{
		StartInsanityEvent("Bugs_Swarm");
		PlayGuiSound("spider_hurt.snt", 0.9f);
		SetPlayerSanity("damage_verysmall");
	}
}

void PlayerLookAtLibraryStatue(string asEntity, int aiState)
{
	SetLocalVarInt("AreaLibraryStatue_look_var", aiState);
}

void TimerECopper(string &in asTimer)
{
	string sEvent = asTimer;	//Do not edit, sets timer loop function name.
	AddLocalVarInt(sEvent, 1);	//Do not edit, steps through timer loop events.
	bool bPauseAtStep = false;	//Do not edit, to pause or end the timer loop at specified step.

	float fEventSpeed = 2.0f;	//Set to preferred default time for the timer loop.

	switch(GetLocalVarInt(sEvent)){
		//////////
		//First step in the event - replace with step comment.
		case 1:
			FadeOut(8.0f);
			PlayGuiSound("react_breath", 0.3f);
			FadeImageTrailTo(0.1f, 0.1f);
			SetPlayerRunSpeedMul(0.8f);
			SetPlayerMoveSpeedMul(0.8f);
		break;
        case 2:
			PlayGuiSound("react_breath", 0.5f);
			FadeImageTrailTo(0.3f, 0.3f);
			SetPlayerRunSpeedMul(0.7f);
			SetPlayerMoveSpeedMul(0.7f);
		break;
		case 3:
			PlayGuiSound("react_breath", 0.7f);
			StopSound("creak", 8.0f);
			StopSound("metal", 10.0f);
			FadeImageTrailTo(0.5f, 0.5f);
			FadePlayerAspectMulTo(1.0f, 0.05f);
			SetPlayerRunSpeedMul(0.6f);
			SetPlayerMoveSpeedMul(0.6f);
		break;
		case 4:
			FadeIn(8.0f);
			PlayGuiSound("react_breath", 0.5f);
			FadeImageTrailTo(0.3f, 0.3f);
			SetPlayerRunSpeedMul(0.7f);
			SetPlayerMoveSpeedMul(0.7f);
		break;
		case 5:
			PlayGuiSound("react_breath", 0.3f);
			FadeImageTrailTo(0.1f, 0.1f);
			SetPlayerRunSpeedMul(0.85f);
			SetPlayerMoveSpeedMul(0.85f);
		break;
		//////////
		//End timer when no more steps in the event found.
		default:
			FadeImageTrailTo(0.0f, 0.0f);
			SetPlayerState("speednormal");
			bPauseAtStep = true;
		break;
	}

	if(!bPauseAtStep) AddTimer(sEvent, fEventSpeed, sEvent);
}

void CollideBookAndAreaFloor(string asParent, string asChild, int aiState)
{
	if(asParent == "book03_13")
	{
		RemoveEntityPlayerInteractCallback(asParent);
		PlayParticleSystem("ps_ghost_release.ps", asChild);
		PlaySound("impact_wood_heavy_high.snt", asChild);
		SetPlayerReact("breath", 0.75f);
	}
}

void PlayerInteractWithBook(string asEntity)
{
	if(asEntity == "book03_13")
	{
		RemoveEntityCollideCallback("book03_13", "AreaLibraryFloor");
	}
}

void CollidePlayerAndAreaRandScaryEvent(string asParent, string asChild, int aiState)
{
	int iCode = 0;
	
	if(asChild == "AreaStatueLibrary")
	{
		if(GetLocalVarInt("AreaLibraryStatue_look_var") != 1)
		{
			SetDebugMessage("Could not trigger library statue scary event!");
			return;
		}
		else
		{
			SetEntityInactive(asChild);
			RemoveEntityPlayerCollideCallback(asChild);
			
			SetPlayerReact("scare_breath_small");
			PlayMusic("01_event_eerie_stinger02.ogg", "event_max_bolt");
			PlayGuiSound("21_scream12.ogg", 1.0f);
			SetEntityInactive("statue_library_1", 0.25f);
			SetEntityActive("statue_library_2", 0.25f);
			SetPlayerLookAt("statue_library_2", "playerspeedveryslow_max", 0.5f);
			SetScreenEffect("zoomin_bolt_med");
			AddTimer("zoomnormal_midquick", 0.5f, "SetScreenEffect");
		}
	}
	else if(asChild == "AreaTriggerBones")
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		
		StartScreenShake(0.1f, 0.0f, 2.0f, 4.0f);
		PlaySoundAtEntity("shake", "general_rock_rumble_no3d.snt", "Player", 2.0f, false);
		SetPlayerReact("scare_breath_effect_verysmall", 2.0f);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.3f, 0.1f);
		StopCurrentInsanityEvent();
		AddTimer("Stream_Monster_Roar02", 0.1f, "StartInsanityEvent");
		SetEntitiesActive("Bone_", 2.0f, 1, 25);
		AddTimer("shake", 2.0f, "StopSound");
		AddTimer("allnormal", 2.1f, "SetScreenEffect");
	}
	else if(StringContains(asChild, "AreaFadeOutEvent"))
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		
		PlaySoundAtEntity("creak", "00_creak.snt", "Player", 6.0f, true);
		PlaySoundAtEntity("metal", "15_amb_metal", "Player", 6.0f, true);
		StartScreenShake(0.002f, 2.0f, 5.0f, 5.0f);
		FadePlayerAspectMulTo(1.8f, 0.02f);
		GiveSanityDamage(5.0f, false);
		SetLocalVarInt("TimerECopper", 0);
		AddTimer("TimerECopper", 2.0f, "TimerECopper");
	}
	else if(asChild == "AreaGlassBreakScare")
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		
		StartInsanityEvent("Stream_Whisper0" + RandInt(1, 3));
		SetEntitiesActive("wine_scare_", 1.0f, 1, 3);
		GiveSanityDamage(10.0f, false);
		SetPlayerReact("breath", 1.1f);
		SetPlayerReact("breath", 2.2f);
		AddTimer("ghost_alert.snt", "2.0f", 2.0f, "PlayGuiSound");
		PlayMusic("03_paper_village.ogg", "event_mid");
		if(GetLocalVarInt("KeyBasement_var") == 0)
			AddTimer("WhatWasThat", 3.5f, "SetMessage");
	}
	else
	{
		iCode = StringToInt(GetStringWithoutSubString(asChild, "AreaScaryEvent_"));
	}
	
	if(asChild == "AreaScaryEvent_1")
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		SetEntityState("tome01_1", "forcez_medbig");
		SetEntityState("tome01_1", "force-x_med");
		SetEntityState("book03_13", "force-z_big");
		SetEntityState("book03_13", "force-x_med");
		SetEntitiesCollideCallback("book03_13", "AreaLibraryFloor", "CollideBookAndAreaFloor", "enter_remove");
		SetEntityPlayerInteractCallback("book03_13", true);
	}
	else if(asChild == "AreaScaryEvent_2")
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		SetEntityPlayerInteractCallback("vase01_10", "PlayerInteractWithJar", true);
	}
	else if(asChild == "AreaScaryEvent_3")
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		SetEntityState("plate_65", "forcex_medbig");
	}
	else if(asChild == "AreaScaryEvent_4")
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		PlayGuiSound("04_enter_clank.snt", 0.8f);
		SetPlayerReact("scare_breath_small", 1.0f);
	}
	
	if(iCode == 5)
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		SetEntityState("rolled_up_carpet_2", "forcez_med");
		if(GetActiveEnemyIsNear(4, 8) == false)
		{
			SetPlayerLookAt("swing_door_27", "med", 1.0f);
			SetMessage("OpenDoorsTutorial");
			AddPlayerLampOil(2.0f);
			SetLanternState("on");
		}
	}
	else if(iCode == 6)
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		StartInsanityEvent("Particles_Flies_Long1");
		StartInsanityEvent("Bugs_Single");
		SetEntityState("carcass_6", "force-z_medbig");
		SetEntityState("carcass_8", "forcez_medbig");
	}
	else if(iCode == 7)
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		StartInsanityEvent("Stream_BabyCry0" + RandInt(1, 2));
		GiveSanityDamage(5.0f, false);
		SetEntityState("wine01_10", "forcex_verybig");
		SetEntityState("goblet_42", "forcex_med");
		SetEntityState("goblet_42", "forcey_med");
		SetEntityState("goblet_42", "force-z_med");
		SetEntityState("wine02_9", "forcex_medsmall");
	}
	else if(iCode == 8)
	{
		if(GetLocalVarInt("PlayerLookAtEagleDoor_var") == 1)
			return;
		else
		{
			SetEntityInactive(asChild);
			RemoveEntityPlayerCollideCallback(asChild);
			SetPlayerReact("scare_breath_small", 0.25f);
			PlaySound("lurker_hit_wood.snt", "AreaEagleDoor");
			PlaySound("suitor/notice_long.snt", "AreaEagleDoor");
			PlayParticleSystem("ps_hit_metal.ps", "AreaEagleDoor");
			SetScreenEffect("shake_medbig_veryquick");
			AddTimer("lurker_hit_wood.snt", "AreaEagleDoor", 1.0f, "PlaySound");
			AddTimer("suitor/notice_long.snt", "AreaEagleDoor", 1.0f, "PlaySound");
			AddTimer("ps_hit_metal.ps", "AreaEagleDoor", 1.0f, "PlayParticleSystem");
			AddTimer("shake_medbig_veryquick", 1.0f, "SetScreenEffect");
			AddTimer("suitor/enabled.snt", 5.0f, "PlaySound");
			AddTimer("pant_breathslow_verysmall", 6.0f, "SetPlayerReact");
		}
	}
	else if(iCode == 9)
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		SetDoorState("swing_door_4", "close_force-z_medbig");
		PlaySound("scare_slam_door.snt");
		PlaySound(GetFunnyModeString("grunt/notice_long.snt"));
		SetPlayerReact("scare_breath_small", 0.5f);
		AddTimer("impact_wood_heavy_high.snt", "swing_door_4", 1.5f, "PlaySound");
		AddTimer("impact_wood_heavy_high", "swing_door_4", 2.5f, "PlaySound");
		AddTimer("impact_wood_heavy_high1.ogg", 3.2f, "PlaySound");
		AddTimer(GetFunnyModeString("grunt/notice_long.snt"), 3.25f, "PlaySound");
		if(GetEntityIsBroken("swing_door_4") == false)
		{
			AddTimer("swing_door_4", "explode", 6.5f, "SetDoorState");
			AddTimer("pant_breathslow_verysmall", 7.0f, "SetPlayerReact");
		}
	}
	else if(iCode == 10)
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		StartInsanityEvent("Steps_Muffled");
		SetPlayerReact("scare_breath_small", 0.75f);
		SetPlayerState("activeoff_drop");
		AddTimer("activeon", 0.75f, "SetPlayerState");
		PlayMusic("04_event_stairs.ogg", "event");
		PlayGuiSound(GetFunnyModeString("grunt/notice_long"), 0.7f);
		PlayGuiSound("scare_slam_door", 1.5f);
		PlayParticleSystem("ps_ghost_release.ps", "swing_door_25");
		PlayParticleSystem("ps_dust_impact_vert.ps", "swing_door_25");
		SetDoorState("swing_door_25", "close_force-x_big");
		SetScreenEffect("shake_small_veryquick");
	}
	else if(iCode == 11)
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		SetPlayerReact("pant_breathslow_small", 0.6f);
		AddTimer("ghost_alert.snt", "swing_door_24", 1.0f, "PlaySound");
		PlayGuiSound("lurker_hit_wood.snt", 1.2f);
		PlayGuiSound("break_wood_metal.snt", 1.0f);
		SetScreenEffect("shake_medsmall_veryquick");
		AddPropImpulse("wood_box_small01_28", 9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_small01_29", 9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_small01_30", 9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_01_14", 9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_01_15", 9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_02_10", 9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_02_11", 9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_02_12", 9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_03_6", 9.0f, 0, 0, "World");
		AddPropImpulse("barrel01_13", 9.0f, 0, 0, "World");
		AddPropImpulse("barrel01_14", 9.0f, 0, 0, "World");
		AddPropImpulse("barrel01_15", 9.0f, 0, 0, "World");
		PlayParticleSystem("ps_break_cavein.ps", "Area_swing_door_24");
	}
	else if(iCode == 12)
	{
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		StartInsanityEvent("Stream_BabyCry0" + RandInt(1, 2));
		SetEntityActive("pig_corpse_1");
		PlayGuiSound("ghost_humming.snt", 0.7f);
	}
	else if(iCode == 13)
	{
		if(GetLocalVarInt("AreaCheckLook_3") != 1)
			return;
		
		SetEntityInactive(asChild);
		RemoveEntityPlayerCollideCallback(asChild);
		SetPlayerReact("pant_breathslow_small", 0.6f);
		PlayGuiSound("lurker_hit_wood.snt", 1.2f);
		PlayGuiSound("break_wood_metal.snt", 1.0f);
		SetScreenEffect("shake_medsmall_veryquick");
		AddPropImpulse("wood_box_small01_22", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_small01_23", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_small01_24", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_small01_25", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_small01_26", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_small01_27", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_01_16", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_02_6", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_02_7", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_03_7", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_03_8", -9.0f, 0, 0, "World");
		AddPropImpulse("wood_box_03_9", -9.0f, 0, 0, "World");
		AddPropImpulse("barrel01_16", -9.0f, 0, 0, "World");
		AddPropImpulse("barrel01_17", -9.0f, 0, 0, "World");
	}
}

void PlayerLookAtEagleDoor(string asEntity, int aiState)
{
	SetLocalVarInt("PlayerLookAtEagleDoor_var", aiState);
}

void PlayCutsceneSequence(string asType)
{
	SetActiveEnemyDisabled("off");
	if(asType == "Intro")
	{
		SetPlayerState("speedveryslow_jumpoff_activeoff_runoff_drop");
		SetPlayerCrouching(true);
		SetPlayerRollTo("big_midslow", 41.5f);
		SetPlayerLookAt("chains_statue_insane_35");
		FadeOut(0.001f);
		SetGlobalSoundVolume("min", 0.001f);
		FadeGlobalSoundSpeed(0.7f, 0.01f);
		StopMusic("ambient", 0.001f);
		StopMusic("event", 0.001f);
		SetEntityActive("curtain01_closed_1", true);
		
		//GUARDIAN REMORSE
		AddTimer("CH03L29_DanielRemorse_01.ogg", 6.0f, "PlaySound");
		//AddTimer("Flashbacks", "CH03L29_DanielRemorse_01", 6.0f, "SetMessage");
		AddTimer("25_guardian_slime_appear02.ogg", 9.25f, "PlaySound");
		AddTimer("29_amb_guard3.ogg", 9.5f, "PlaySound");
		AddTimer("CH03L29_DanielRemorse_03.ogg", 14.5f, "PlaySound");
		//AddTimer("Flashbacks", "CH03L29_DanielRemorse_03", 14.5f, "SetMessage");
		AddTimer("25_guardian_slime_appear03.ogg", 17.75f, "PlaySound");
		AddTimer("22_start_daniel.ogg", 18.0f, "PlaySound");
		
		//START TO WAKING UP
		AddTimer("03_event_tomb.ogg", "event_veryslow_medbig", 23.5f, "PlayMusic");
		AddTimer("sepia_max_bolt", 27.0f, "SetScreenEffect");
		AddTimer("blur_max_bolt", 27.0f, "SetScreenEffect");
		AddTimer("zoomin_bolt_big", 28.0f, "SetScreenEffect");
		AddTimer("react_breath_slow", 29.0f, "PlaySound");
		AddTimer("IntroWakeUp_1", 29.5f, "SetMessage");
		AddTimer("react_breath_slow.snt", 32.0f, "PlaySound");
		AddTimer("IntroWakeUp_2", 32.5f, "SetMessage");
		AddTimer("max_veryslow", 33.0f, "SetGlobalSoundVolume");
		
		//OPEN EYES
		AddTimer("fadein_mid", 36.0f, "SetScreenEffect");
		AddTimer("zoomout_veryslow", 36.0f, "SetScreenEffect");
		AddTimer("sepia_min_veryslow", 36.0f, "SetScreenEffect");
		AddTimer("react_pant.snt", 36.5f, "PlaySound");
		AddTimer("03_in_a_bottle.snt", 36.6f, "PlaySound");
		
		//GET UP FROM THE BED
		AddTimer("blur_min_slow", 40.5f, "SetScreenEffect");
		AddTimer("react_sigh.snt", 40.5f, "PlaySound");
		AddTimer("player_stand.snt", 41.0f, "PlaySound");
		AddTimer("fadeout_veryquick", 41.5f, "SetScreenEffect");
		AddTimer("26_string_on_glass.ogg", 42.0f, "PlaySound");
		AddTimer(gsPlayerStartAreaPrefix + 23, 42.0f, "TeleportPlayer");
		AddTimer("", 42.0f, "StopPlayerLookAt");
		AddTimer("step_run_wood_squeaky4.ogg", 43.0f, "PlaySound");
		AddTimer("fadein_midquick", 43.5f, "SetScreenEffect");
		AddTimer("activeon_stand", 43.5f, "SetPlayerState");
		AddTimer("react_sigh.snt", 43.5f, "PlaySound");
		AddTimer("player_stand.snt", 43.55f, "PlaySound");
		AddTimer("max_slow", 44.0f, "SetGlobalSoundSpeed");
		AddTimer("allnormal_sloth", 46.0f, "SetScreenEffect");
		AddTimer("IntroWakeUp_3", 46.0f, "SetMessage");
		AddTimer("speedslow", 46.0f, "SetPlayerState");
	}
	else if(asType == "JackCellDiscovered")
	{
		SetPlayerState("activeoff_drop_sanitydrainoff");
		SetPlayerLookAt("AreaJackHead");
		FadeOut(0.001f);
		SetGlobalSoundVolume("min", 0.001f);
		PlayMusic("18_paper_daniel03.ogg", "event_bolt");
		PlaySound("react_breath_slow.snt");
		AddTimer("JackCellDiscovered_1", 0.25f, "SetMessage");
		AddTimer("JackCellDiscovered_2", 3.5f, "SetMessage");
		AddTimer(gsPlayerStartAreaPrefix + 38, 3.8f, "TeleportPlayer");
		AddTimer("JackCellDiscovered_3", 9.6f, "SetMessage");
		AddTimer("JackCellDiscovered_4", 18.5f, "SetMessage");
		AddTimer("fadein_midquick", 18.5f, "SetScreenEffect");
		AddTimer("max_slow", 18.5f, "SetGlobalSoundVolume");
		AddTimer("01_voice_brother_idle.snt", "AreaJackHead", "save_midquick", 18.5f, "PlaySound");
		AddTimer("activeon", 20.0f, "StopPlayerLookAt");
		AddTimer("sanitydrainon", 20.0f, "SetPlayerState");
	}
	else if(asType == "OrbComplete")
	{
		SetPlayerState("activeoff_drop_darknessoff_sanitydrainoff_maxhealth_maxsanity_inventoryoff");
		FadeOut(6.0f);
		SetGlobalSoundVolume("min", 6.0f);
		PlaySound("react_breath.snt");
		AddTimer("0", 6.0f, "PlayFullOrbEvents");
	}
}

void SetupChangeMap(string asType)
{
	if(asType == "actualchange")
		ChangeMap("custom_stories/xdj_tcolm/maps/02_mansion_redux.map", 1);
	else
	{
		SetLoadScreen("FromMansionToMansionRedux", "office");
		SetGlobalSoundVolume("min_midquick");
		FadeOut(0.001f);
		AddTimer("actualchange", 3.0f, "SetupChangeMap");
	}
}

void PlayerInteractWithEndingDoor(string asEntity)
{
	StopMusic("event_bolt");
	PlayMusic("29_amb_end_soft.ogg", "event_bolt");
	SetEntityInactive("alexander_1");
	SetPlayerState("activeoff");
	SetLanternState("disabled");
	
	PlayGuiSound("03_in_a_bottle.snt", 1.0f);
	PlayGuiSound("29_hole_open.ogg", 1.0f);
	
	FadePlayerFOVMulTo(0.5, 0.25);
	
	StartEffectFlash(3,5,3);
	
	AddTimer("fadeout_midquick", 5.0f, "SetScreenEffect");
	AddTimer("Mysterious", "ThankYou", 12.0f, "SetMessage");
	AddTimer("", 16.0f, "SetupChangeMap");
}

void UseKnifeOnAlexander(string asItem, string asEntity)
{
	RemoveEntityPlayerInteractCallback("swing_door_23");
	ResetProp("swing_door_23");
	RemoveItem(asItem);
	SetEntityActive("knife_static");
	SetEntityInteractionDisabled("knife_static", true);
	SetLanternState("disabled");
	SetDoorState("swing_door_23", "close_lock_silent");
	SetGlobalVarInt("GuardianKiller_var", 1);
	StopMusic("event_bolt");
	PlayMusic("29_event_end.ogg", "event_bolt");
	PlaySound("01_voice_mysterious_death.ogg");
	PlayGuiSound("01_player_knife_flesh.ogg", 1.5f);
	
	FadeLightTo("Light_AreaAlexander", 1, 0, 0, 0, -1, 2.0f);
	SetNPCFollowPlayer("alexander_1", false);
	FadePlayerFOVMulTo(0.8f, 3.5f);
	StartPlayerLookAt("alexander_1", 2.0f, 2.0f, "");
	
	SetPlayerMoveSpeedMul(0.2f);
	SetPlayerRunSpeedMul(0.2f);
	SetPlayerLookSpeedMul(0.2f);
	AddTimer("", 4.8f, "TimerStopLook");
	AddTimer("Death", 1.3f, "TimerAlexAnimation");
	
	SetMessage("Mysterious", "GotKilled", 4.0f);
	AddTimer("", 4.8f, "StopPlayerLookAt");
	AddTimer("scare_small", 4.8f, "SetPlayerReact");
	AddTimer("25_guardian_slime_appear.snt", 4.8f, "PlaySound");
	AddTimer("ps_orb_room_alex_die.ps", "AreaAlexander", 4.8f, "PlayParticleSystem");
	AddTimer("allnormal_veryslow", 4.8f, "SetScreenEffect");
	AddTimer("alexander_1", "2.0f", 4.8f, "SetEntityInactive");
	AddTimer("knife_static", "2.0f", 4.8f, "SetEntityInactive");
	AddTimer("AreaAlexander", "midquick", 4.8f, "SetEntityAndEffectsInactive");
	AddTimer("fadeout_slow", 5.0f, "SetScreenEffect");
	AddTimer("", 15.0f, "SetupChangeMap");
}

void TimerAlexAnimation(string asTimer)
{
	PlayPropAnimation("alexander_1", asTimer, 0.3, false, "");
}

void PlayFullOrbEvents(string asType)
{
	float fTime = 1.0f;
	
	if(asType == "12"){
		SetPlayerState("speednormal_jumpon_runon");
		SetPlayerState("inventoryon");
		StopPlayerLookAt();
		SetDoorState("swing_door_23", "unlock_silent");
		SetEntityPlayerInteractCallback("swing_door_23", "PlayerInteractWithEndingDoor", true);
		SetUseItemCallback("ceremony_knife_1", "AreaAlexander", "UseKnifeOnAlexander", true);
		SetMessage("Protagonist", "PeaceOrRevenge", 8.0f);
		SetDebugMessage("Time for the player to choose his ending!");}
	if(asType == "11"){
		SetMessage("Mysterious", "OrbFull_7", 6.0f);
		fTime = 6.0f;
		AddTimer("12", fTime, "PlayFullOrbEvents");}
	if(asType == "10"){
		SetMessage("Mysterious", "OrbFull_6", 15.0f);
		fTime = 15.0f;
		AddTimer("11", fTime, "PlayFullOrbEvents");}
	if(asType == "9"){
		SetMessage("Mysterious", "OrbFull_5", 10.0f);
		fTime = 10.0f;
		AddTimer("10", fTime, "PlayFullOrbEvents");}
	if(asType == "8"){
		SetMessage("Protagonist", "OrbFull_3", 9.0f);
		fTime = 9.0f;
		AddTimer("9", fTime, "PlayFullOrbEvents");}
	if(asType == "7"){
		SetMessage("Mysterious", "OrbFull_4", 28.0f);
		fTime = 28.0f;
		AddTimer("8", fTime, "PlayFullOrbEvents");}
	if(asType == "6"){
		SetMessage("Mysterious", "OrbFull_3", 21.0f);
		if(GetGlobalVarInt("JackIsDead_var") == 2)
		{
			AddTimer("Mysterious", "OrbFull_3_Extra", 22.0f, "SetMessage");
			fTime = 22.0f + 8.0f;
		}
		else
		{
			fTime = 22.0f;
		}
		AddTimer("7", fTime, "PlayFullOrbEvents");}
	if(asType == "5"){
		SetMessage("Protagonist", "OrbFull_2", 21.0f);
		fTime = 21.0f;
		AddTimer("6", fTime, "PlayFullOrbEvents");}
	if(asType == "4"){
		SetMessage("Protagonist", "OrbFull_1", 7.0f);
		fTime = 7.0f;
		AddTimer("5", fTime, "PlayFullOrbEvents");}
	if(asType == "3"){
		PlayMusic("amb_extra01.ogg", "event_loop_medbig_mid");
		SetPlayerState("activeon_speedslow");
		SetPlayerState("inventoryoff");
		SetMessage("Mysterious", "OrbFull_2", 16.0f);
		fTime = 16.0f;
		AddTimer("4", fTime, "PlayFullOrbEvents");}
	if(asType == "2"){
		SetMessage("Mysterious", "OrbFull_1", 18.0f);
		SetEntityAndEffectsInactive("slime_noanim_mainhall_96", "sloth");
		SetEntityAndEffectsInactive("slime_noanim_mainhall_183", "sloth");
		SetPlayerState("activeoff_drop");
		fTime = 18.0f;
		AddTimer("3", fTime, "PlayFullOrbEvents");}
	
	if(asType == "1"){
		FadeIn(3.0f);
		SetEntityInactive("statue_insane_4_silent", 8.0f);
		SetEntityInactive("statue_insane_5_silent", 8.0f);
		PlaySound("react_scare.snt");
		PlaySound("03_in_a_bottle.snt");
		SetPlayerLookAt("alexander_1", "verysmall");
		PlayMusic("29_amb_end_daniel.ogg", "event_midquick");
		SetPlayerState("activeoff_drop");
		SetGlobalSoundVolume("max_midslow");
		fTime = 3.0f;
		AddTimer("2", fTime, "PlayFullOrbEvents");}
	
	if(asType == "0"){
		RemoveTimer("insaneobjects");
		RemoveTimer("insanesounds");
		RemoveTimer("roomsanitydamage");
		RemoveTimer("swing_door_8");
		StopSound("Sound_5");
		StopSound("Sound_9");
		StopSound("Sound_12");
		SetPlayerHealth(100.0f);
		SetPlayerSanity(100.0f);
		ResetProp("swing_door_23");
		SetDoorState("swing_door_23", "lock_silent");
		SetEntityInactive("chandelier_nice_8");
		SetEntityActive("alexander_1");
		SetEntityAndEffectsActive("AreaAlexander", "ps_orb_light.ps", "01_guardian_noise.snt", "save_cyan");
		SetEntityActive("blockbox_orbfull_1");
		SetEntityActive("blockbox_orbfull_2");
		TeleportPlayer(gsPlayerStartAreaPrefix + 22);
		SetPlayerState("activeoff_drop");
		
		//SetEntitiesAndEffectsInactive("slime_mainhall_", "midquick", 1, 5);
		//SetEntitiesAndEffectsInactive("slime_noanim_mainhall_", "midquick", 1, 60);
		//SetEntitiesAndEffectsInactive("slime_noanim_mainhall_", "midquick", 76, 95);
		for(int i=1; i<=22; i++)
		{
			SetEntityInactive("pine_" + i, 2.0f);
			SetEntityActive("insane_pine_" + i, 2.0f);
		}
		fTime = 0.5f;
		AddTimer("1", fTime, "PlayFullOrbEvents");}
}

//A LITTLE CELL EVENT
void CollideAreaCellEvent(string &in asParent, string &in asChild, int alState)
{
	SetActiveEnemyDisabled("off");
	SetLanternState("off_silent");
	SetPlayerState("sanitydrainoff");
	SetPlayerActive(false);
	SetPlayerSanity("damage_verysmall");
	PlayMusic("05_event_falling.ogg", false, 1.0f, 0.1f, 10,false);
	
	PlayGuiSound("scare_wall_stomp.snt", 1.0f);
	PlayGuiSound("sanity_flick.snt", 0.4f);
	PlaySoundAtEntity("brum", "00_creak.snt", "Player", 0.5f, false);
	
	AddTimer("react_scare", 0.5f, "TimerScareReaction02");
	AddTimer("react_breath", 2.0f, "TimerScareReaction02");
	
	StartEffectFlash(0.4f, 0.2f, 0.2f);
	
	AddTimer("cell1", 0.4f, "TimerCellEvent");
	AddTimer("cell2", 1.0f, "TimerCellEvent");
	AddTimer("cell3", 1.5f, "TimerCellEvent");
	AddTimer("cell4", 3.5f, "TimerCellEvent");
	AddTimer("cell4.1", 4.0f, "TimerCellEvent");
	AddTimer("cell5", 6.0f, "TimerCellEvent");
}
void TimerCellEvent(string &in asTimer)
{
	if(asTimer == "cell1"){
		FadeOut(0.4f);
		PlayGuiSound("sanity_flick.snt", 0.7f);
		StartScreenShake(0.3f, 0.0f, 0.5f, 0.0f);
	}
	
	if(asTimer == "cell2"){
		SetEntityActive("torturetable_3", true);
		SetEntityActive("channeling_machine_1", true);
		SetRadialBlurStartDist(0.3f);
		FadeRadialBlurTo(0.1f, 1);
		PlayGuiSound("15_the_big_scream3.ogg", 0.7f);
		PlaySound("enemy/suitor/amb_hunt.snt", "Player");
	}
	if(asTimer == "cell3"){
		StartPlayerLookAt("torturetable_3", 10.0f, 10.0f, "");
		PlayGuiSound("15_ripp_door.snt", 1.0f);
		PlaySound("enemy/suitor/attack_launch.snt", "Player");
	}
	if(asTimer == "cell4"){
		PlayGuiSound("15_the_big_scream2.ogg", 0.7f);
		PlaySound("enemy/suitor/amb_alert.snt", "Player");
		AddTimer("react_scare", 0.5f, "TimerScareReaction02");
		AddTimer("react_breath", 2.0f, "TimerScareReaction02");
	}
	if(asTimer == "cell4.1"){
		PlayGuiSound("enemy/suitor/attack_claw_hit.snt", 0.5f);
		PlayGuiSound("15_bang_fall.snt", 1);
	}
	if(asTimer == "cell5"){
		StopPlayerLookAt();
		FadeIn(5.0f);
		StopSound("brum", 5.0f);
		FadeRadialBlurTo(0.0f, 0.01f);
		SetPlayerActive(true);
		SetPlayerState("sanitydrainon");
		AddTimer("SuitorRoomDiscovered", 1.0f, "SetMessage");
	}
}
void TimerScareReaction02(string &in asTimer)
{
	PlayGuiSound(asTimer, 0.7f);
}

void StateChangeOfNote(string asEntity, string asType)
{
	if(asType == "OnPickup")
	{
		if(asEntity == "note_paper01_1") //KIDNAP NOTE
		{
			PlayMusic("01_theme_insanity.ogg", "event_mid");
			SetMessage("PaperKidnappingDiscovered");
		}
		else if(asEntity == "note_paper01_2") //FIRST NOTE
		{
			SetLocalVarInt("IntroHasEnded_var", 1);
			SetPlayerState("speednormal_jumpon_runon");
			PlayMusic("01_paper_self.ogg", "event_mid_medbig");
			SetEntityInactive("curtain01_closed_1");
			SetEntityActive("curtain01_open_1");
			SetDoorState("swing_door_18", "unlock_silent");
			SetQuestAdded("Collect6Orb");
			SetMessage("PaperSelfDiscovered");
		}
		else if(asEntity == "note_paper01_3") //SICKNESS CURE NOTE
		{
			PlayMusic("10_paper_daniel01.ogg", "event_mid");
			SetMessage("PaperCureDiscovered");
			SetQuestAdded("FindACure");
		}
		else if(asEntity == "note_paper01_4") //ROOM PUZZLE NOTE
		{
			PlayMusic("01_theme_wrath.ogg", "event_mid");
			SetLocalVarInt("RoomPuzzleNote", 1);
		}
		else if(asEntity == "note_scroll_1") //BURNING LOVE NOTE
		{
			PlayMusic("01_theme_burning_love.ogg", "event_mid");
		}
		else if(asEntity == "note_scroll_2") //LIBRARY NOTE
		{
			PlayMusic("03_paper_daniel01.ogg", "event_mid");
			if(GetQuestState("AttachedShelf") <= 1)
				SetMessage("PaperLibraryDiscovered");
		}
		else if(asEntity == "note_letter_1") //FAMILY STORY AND GHOST NOTE
		{
			PlayMusic("01_theme_village.ogg", "event_mid");
			SetMessage("PaperGhostDiscovered");
		}
		else if(asEntity == "note_prisoner") //PRISONER NOTE
		{
			PlayMusic("15_event_girl_mother.ogg", "event_mid");
		}
		else if(asEntity == "note_generic_1") //SICKNESS NOTE
		{
			PlayMusic("22_paper_daniel01.ogg", "event_mid");
			if(GetQuestState("FindACure") >= 1)
				SetMessage("PaperSicknessDiscovered");
		}
	}
}

void CollideAreaFireplaceHint(string asParent, string asChild, int aiState)
{
	SetPlayerLookAt("bonfire_3", "playerspeedslow", 1.0f);
	SetMessage("CopperInsideFireplace");
}

void CombineHammerAndChipper(string asItemA, string asItemB)
{
	PlayGuiSound("15_make_hammer", 1.0f);
	
	SetPlayerSanity("boost_small_effect");
	
	RemoveItem(asItemA); RemoveItem(asItemB);
	
	SetQuestCompleted("NeedMoreTool");
	
	GiveItem("stone_hammer_chipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0);	
}
//END CURRENT MAP RELATED FUNCTIONS

//START MAIN FUNCTIONS
void OnStart() //IT RUNS WHEN ENTERING IN THE LEVEL FOR THE FIRST TIME. IT HAS PRIORITY OVER OnEnter() FUNCTION BELOW.
{
	SetLocalVarFloat("GlobalFogStart_var", 4.0f);
	SetLocalVarFloat("GlobalFogEnd_var", 40.0f);
	SetLocalVarFloat("GlobalFogExp_var", 1.0f);
	SetLocalVarInt("GlobalFogOn_var", 1);
	SetLocalVarInt("bonfire_3_var", 1);
	SetLocalVarInt("fire_place_1_var", 1);
	SetLocalVarInt("CandlePuzzleType_var", RandInt(0, 2));
	SetGlobalVarInt("GhostChaseMusic_var", 1);
	
	SetEntitiesCollideCallback(GetStringWithExtraModesSuffix("grunt"), "AreaFall", "CollideEnemyAndAreaFall", "enter");
	SetEntitiesCollideCallback(GetStringWithExtraModesSuffix("brute"), "AreaFall", "CollideEnemyAndAreaFall", "enter");
	SetEntitiesCollideCallback(GetStringWithExtraModesSuffix("ghost_music1"), "AreaFall", "CollideEnemyAndAreaFall", "enter");
	SetEntitiesCollideCallback(GetStringWithExtraModesSuffix("ghost_music2"), "AreaFall", "CollideEnemyAndAreaFall", "enter");
	SetEntitiesCollideCallback(GetStringWithExtraModesSuffix("ghost_music3"), "AreaFall", "CollideEnemyAndAreaFall", "enter");
	SetEntitiesCollideCallback(GetStringWithExtraModesSuffix("ghost_music4"), "AreaFall", "CollideEnemyAndAreaFall", "enter");
	SetEntitiesCollideCallback(GetStringWithExtraModesSuffix("grunt"), "AreaGruntDiscovered", "CollideEnemyAndAreaRoom", "enter_remove");
	SetEntitiesCollideCallback("bed_room", "Area_bed_room", "CollideObjectAndAreaRoom", "remove_enter");
	SetEntitiesCollideCallback("carpet_room", "Area_carpet_room", "CollideObjectAndAreaRoom", "remove_enter");
	SetEntitiesCollideCallback("statue_room_1", "Area_statue_room_1", "CollideObjectAndAreaRoom", "remove_enter");
	SetEntitiesCollideCallback("statue_room_2", "Area_statue_room_2", "CollideObjectAndAreaRoom", "remove_enter");
	SetEntitiesCollideCallback("shirt_room_1", "Area_shirt_room_1", "CollideObjectAndAreaRoom", "remove_enter");
	SetEntitiesCollideCallback("shirt_room_2", "Area_shirt_room_2", "CollideObjectAndAreaRoom", "remove_enter");
	SetEntitiesCollideCallback("cross_small_jesus", "Area_cross_small_jesus", "CollideObjectAndAreaRoom", "remove_enter");
	for(int i=1; i<=4; i++)
		SetEntitiesCollideCallback("book_fake_" + i, "AreaBookFake_" + i + "_suffix6");
	for(int i=1; i<=9; i++)
		SetEntitiesCollideCallback("book_true_" + i, "AreaBookTrue_" + i + "_suffix6");
	for(int i=10; i<=14; i++)
		SetEntitiesCollideCallback("book_true_" + i, "AreaBookTrue_" + i + "_suffix7");
	
	SetEntityPlayerCollideCallback("AreaInsideCloset_1", "CollidePlayerAndAreaInsideCloset", "enter_remove");
	SetEntityPlayerCollideCallback("AreaInsideCloset_2", "CollidePlayerAndAreaInsideCloset", "enter_remove");
	SetEntityPlayerCollideCallback("AreaInsideCloset_3", "CollidePlayerAndAreaInsideCloset", "enter_remove");
	SetEntityPlayerCollideCallback("AreaInsideCloset_4", "CollidePlayerAndAreaInsideCloset", "enter_remove");
	SetEntityPlayerCollideCallback("AreaGlassBreakScare", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaStatueLibrary", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaFadeOutEvent_2", "CollidePlayerAndAreaRandScaryEvent", "enter_remove");
	SetEntityPlayerCollideCallback("AreaScaryEvent_1", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_2", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_3", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_4", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_5", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_6", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_7", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_8", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_9", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_10", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_11", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_12", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaScaryEvent_13", "CollidePlayerAndAreaRandScaryEvent", "enter");
	SetEntityPlayerCollideCallback("AreaIronMaidenGhost_1", "CollidePlayerAndAreaIronMaidenGhost", "enter_remove");
	SetEntityPlayerCollideCallback("AreaIronMaidenGhost_2", "CollidePlayerAndAreaIronMaidenGhost", "enter_remove");
	SetEntityPlayerCollideCallback("AreaFallScare", "CollidePlayerAndAreaFall", "enter");
	SetEntityPlayerCollideCallback("AreaFall", "CollidePlayerAndAreaFall", "enter");
	SetEntityPlayerCollideCallback("AreaLookAtLantern", "CollidePlayerAndAreaLookAtLantern", "enter_remove");
	SetEntityPlayerCollideCallback("AreaDiscoverGrunt", "CollidePlayerAndAreaDiscoverGrunt", "enter_remove");
	SetEntityPlayerCollideCallback("AreaPrison_1_ShowEnemy_4", "CollidePlayerAndAreaShowEnemy", "enter");
	SetEntityPlayerCollideCallback("AreaPrisonFirstEnemyShow", "CollidePlayerAndAreaPrisonFirstEnemyShow", "enter_remove");
	//SetEntityPlayerCollideCallback("GhostBlock", "CollidePlayerAndGhost", "enter");
	SetEntityPlayerCollideCallback("BlockBoxLadder_2", "CollidePlayerAndAreaLadder", "enter");
	SetEntityPlayerCollideCallback("BlockBoxLadder_3", "CollidePlayerAndAreaLadder", "enter");
	SetEntityPlayerCollideCallback("AreaEntranceHall", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaDiningHall_1", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaDiningHall_2", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaDiningHall_3", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaDiningHall_4", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaColdRoom", "CollidePlayerAndAreaRoom", "");
	SetEntityPlayerCollideCallback("AreaSewerEntrance", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaLibrary_1", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaRoom_1", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaLibrary_2", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaRoom_2", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaOutside", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaOffice", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaRoundedWall", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaCandleRoom", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaAttic", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaThroneRoom", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaMachineRoom", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaCells_1", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaCells_2", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaCells_3", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaPrison_1", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaPrison_2", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaPrison_3", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaTunnel", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaSecretPrison_1", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaSecretPrison_2", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaSecretHallway", "CollidePlayerAndAreaRoom", "enter");
	SetEntityPlayerCollideCallback("AreaAngels", "CollidePlayerAndAngels", "enter_remove");
	SetEntityPlayerCollideCallback("AreaDiscoverGoblets", "CollidePlayerAndAreaDiscoverGoblets", "enter_remove");
	SetEntityPlayerCollideCallback("BlockBox_StorageEntrance", "CollidePlayerAndBlockStorageEntrance", "enter");
	SetEntityPlayerCollideCallback("AreaPrisonEntrance_1", "CollidePlayerAndAreaPrisonEntrance", "enter_remove");
	SetEntityPlayerCollideCallback("AreaPrisonEntrance_2", "CollidePlayerAndAreaPrisonEntrance", "enter_remove");
	SetEntityPlayerCollideCallback("AreaDiscoverMachine", "CollidePlayerAndAreaDiscoverMachine", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_1", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_2", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_3", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_4", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_5", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_6", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_7", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_8", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_9", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaRandSound_10", "CollidePlayerAndAreaRandSound", "enter_remove");
	SetEntityPlayerCollideCallback("AreaBangDoorEvent", "CollideBangDoor", "enter_remove");
	SetEntityPlayerCollideCallback("AreaSuitorRoomEvent", "CollideAreaCellEvent", "enter_remove");
	SetEntityPlayerCollideCallback("AreaFireplaceHint", "CollideAreaFireplaceHint", "enter_remove");
	
	AddUseItemCallback("key_coldroom_swing_door_2", "key_coldroom", "swing_door_2", "UseKeyOnDoor", true);
	AddUseItemCallback("key_coldroom_swing_door_12", "key_coldroom", "swing_door_12", "UseKeyOnDoor", false);
	AddUseItemCallback("key_coldroom_swing_door_15", "key_coldroom", "swing_door_15", "UseKeyOnDoor", false);
	AddUseItemCallback("key_coldroom_swing_door_19", "key_coldroom", "swing_door_19", "UseKeyOnDoor", false);
	AddUseItemCallback("key_coldroom_swing_door_28", "key_coldroom", "swing_door_28", "UseKeyOnDoor", false);
	AddUseItemCallback("key_coldroom_swing_door_29", "key_coldroom", "swing_door_29", "UseKeyOnDoor", false);
	AddUseItemCallback("key_coldroom_swing_door_46", "key_coldroom", "swing_door_46", "UseKeyOnDoor", false);
	AddUseItemCallback("key_coldroom_level_dungeon_1", "key_coldroom", "level_dungeon_1", "UseKeyOnDoor", false);
	
	AddUseItemCallback("key_basement_swing_door_2", "key_basement", "swing_door_2", "UseKeyOnDoor", false);
	AddUseItemCallback("key_basement_swing_door_12", "key_basement", "swing_door_12", "UseKeyOnDoor", false);
	AddUseItemCallback("key_basement_swing_door_15", "key_basement", "swing_door_15", "UseKeyOnDoor", false);
	AddUseItemCallback("key_basement_swing_door_19", "key_basement", "swing_door_19", "UseKeyOnDoor", true);
	AddUseItemCallback("key_basement_swing_door_28", "key_basement", "swing_door_28", "UseKeyOnDoor", false);
	AddUseItemCallback("key_basement_swing_door_29", "key_basement", "swing_door_29", "UseKeyOnDoor", false);
	AddUseItemCallback("key_basement_swing_door_46", "key_basement", "swing_door_46", "UseKeyOnDoor", false);
	AddUseItemCallback("key_basement_level_dungeon_1", "key_basement", "level_dungeon_1", "UseKeyOnDoor", false);
	
	AddUseItemCallback("key_attic_swing_door_2", "key_attic", "swing_door_2", "UseKeyOnDoor", false);
	AddUseItemCallback("key_attic_swing_door_12", "key_attic", "swing_door_12", "UseKeyOnDoor", false);
	AddUseItemCallback("key_attic_swing_door_15", "key_attic", "swing_door_15", "UseKeyOnDoor", true);
	AddUseItemCallback("key_attic_swing_door_19", "key_attic", "swing_door_19", "UseKeyOnDoor", false);
	AddUseItemCallback("key_attic_swing_door_28", "key_attic", "swing_door_28", "UseKeyOnDoor", false);
	AddUseItemCallback("key_attic_swing_door_29", "key_attic", "swing_door_29", "UseKeyOnDoor", false);
	AddUseItemCallback("key_attic_swing_door_46", "key_attic", "swing_door_46", "UseKeyOnDoor", false);
	AddUseItemCallback("key_attic_level_dungeon_1", "key_attic", "level_dungeon_1", "UseKeyOnDoor", false);
	
	AddUseItemCallback("key_throneroom_swing_door_2", "key_throneroom", "swing_door_2", "UseKeyOnDoor", false);
	AddUseItemCallback("key_throneroom_swing_door_12", "key_throneroom", "swing_door_12", "UseKeyOnDoor", true);
	AddUseItemCallback("key_throneroom_swing_door_15", "key_throneroom", "swing_door_15", "UseKeyOnDoor", false);
	AddUseItemCallback("key_throneroom_swing_door_19", "key_throneroom", "swing_door_19", "UseKeyOnDoor", false);
	AddUseItemCallback("key_throneroom_swing_door_28", "key_throneroom", "swing_door_28", "UseKeyOnDoor", false);
	AddUseItemCallback("key_throneroom_swing_door_29", "key_throneroom", "swing_door_29", "UseKeyOnDoor", false);
	AddUseItemCallback("key_throneroom_swing_door_46", "key_throneroom", "swing_door_46", "UseKeyOnDoor", false);
	AddUseItemCallback("key_throneroom_level_dungeon_1", "key_throneroom", "level_dungeon_1", "UseKeyOnDoor", false);
	
	AddUseItemCallback("key_cell_swing_door_2", "key_cell", "swing_door_2", "UseKeyOnDoor", false);
	AddUseItemCallback("key_cell_swing_door_12", "key_cell", "swing_door_12", "UseKeyOnDoor", false);
	AddUseItemCallback("key_cell_swing_door_15", "key_cell", "swing_door_15", "UseKeyOnDoor", false);
	AddUseItemCallback("key_cell_swing_door_19", "key_cell", "swing_door_19", "UseKeyOnDoor", false);
	AddUseItemCallback("key_cell_swing_door_28", "key_cell", "swing_door_28", "UseKeyOnDoor", false);
	AddUseItemCallback("key_cell_swing_door_29", "key_cell", "swing_door_29", "UseKeyOnDoor", true);
	AddUseItemCallback("key_cell_swing_door_46", "key_cell", "swing_door_46", "UseKeyOnDoor", false);
	AddUseItemCallback("key_cell_level_dungeon_1", "key_cell", "level_dungeon_1", "UseKeyOnDoor", false);
	
	AddUseItemCallback("key_dungeon_swing_door_2", "key_dungeon", "swing_door_2", "UseKeyOnDoor", false);
	AddUseItemCallback("key_dungeon_swing_door_12", "key_dungeon", "swing_door_12", "UseKeyOnDoor", false);
	AddUseItemCallback("key_dungeon_swing_door_15", "key_dungeon", "swing_door_15", "UseKeyOnDoor", false);
	AddUseItemCallback("key_dungeon_swing_door_19", "key_dungeon", "swing_door_19", "UseKeyOnDoor", false);
	AddUseItemCallback("key_dungeon_swing_door_28", "key_dungeon", "swing_door_28", "UseKeyOnDoor", true);
	AddUseItemCallback("key_dungeon_swing_door_29", "key_dungeon", "swing_door_29", "UseKeyOnDoor", false);
	AddUseItemCallback("key_dungeon_swing_door_46", "key_dungeon", "swing_door_46", "UseKeyOnDoor", false);
	AddUseItemCallback("key_dungeon_level_dungeon_1", "key_dungeon", "level_dungeon_1", "UseKeyOnDoor", false);
	
	AddUseItemCallback("key_storage_swing_door_2", "key_storage", "swing_door_2", "UseKeyOnDoor", false);
	AddUseItemCallback("key_storage_swing_door_12", "key_storage", "swing_door_12", "UseKeyOnDoor", false);
	AddUseItemCallback("key_storage_swing_door_15", "key_storage", "swing_door_15", "UseKeyOnDoor", false);
	AddUseItemCallback("key_storage_swing_door_19", "key_storage", "swing_door_19", "UseKeyOnDoor", false);
	AddUseItemCallback("key_storage_swing_door_28", "key_storage", "swing_door_28", "UseKeyOnDoor", false);
	AddUseItemCallback("key_storage_swing_door_29", "key_storage", "swing_door_29", "UseKeyOnDoor", false);
	AddUseItemCallback("key_storage_swing_door_46", "key_storage", "swing_door_46", "UseKeyOnDoor", false);
	AddUseItemCallback("key_storage_level_dungeon_1", "key_storage", "level_dungeon_1", "UseKeyOnDoor", true);
	
	AddUseItemCallback("key_jar_1_item_swing_door_2", "key_jar_1_item", "swing_door_2", "UseKeyOnDoor", false);
	AddUseItemCallback("key_jar_1_item_swing_door_12", "key_jar_1_item", "swing_door_12", "UseKeyOnDoor", false);
	AddUseItemCallback("key_jar_1_item_swing_door_15", "key_jar_1_item", "swing_door_15", "UseKeyOnDoor", false);
	AddUseItemCallback("key_jar_1_item_swing_door_19", "key_jar_1_item", "swing_door_19", "UseKeyOnDoor", false);
	AddUseItemCallback("key_jar_1_item_swing_door_28", "key_jar_1_item", "swing_door_28", "UseKeyOnDoor", false);
	AddUseItemCallback("key_jar_1_item_swing_door_29", "key_jar_1_item", "swing_door_29", "UseKeyOnDoor", false);
	AddUseItemCallback("key_jar_1_item_swing_door_46", "key_jar_1_item", "swing_door_46", "UseKeyOnDoor", true);
	AddUseItemCallback("key_jar_1_item_level_dungeon_1", "key_jar_1_item", "level_dungeon_1", "UseKeyOnDoor", false);
	
	SetUseItemCallback("ladder_item_1", "AreaLadder_up_1", "UseLadderOnAreaLadder", false);
	SetUseItemCallback("ladder_item_1", "AreaLadder_up_2", "UseLadderOnAreaLadder", false);
	SetUseItemCallback("ladder_item_1", "AreaLadder_up_3", "UseLadderOnAreaLadder", false);
	SetUseItemCallback("ladder_item_1", "AreaLadder_up_4", "UseLadderOnAreaLadder", false);
	SetUseItemCallback("ladder_item_1", "AreaLadder_down_1", "UseLadderOnAreaLadder", false);
	SetUseItemCallback("ladder_item_1", "AreaLadder_down_2", "UseLadderOnAreaLadder", false);
	SetUseItemCallback("ladder_item_1", "AreaLadder_down_3", "UseLadderOnAreaLadder", false);
	SetUseItemCallback("ladder_item_1", "AreaLadder_down_4", "UseLadderOnAreaLadder", false);
	
	SetUseItemCallback("ceremony_knife_1", "curtain01_closed_2", "UseKnifeOnCurtain", true);
	SetUseItemCallback("ceremony_knife_1", "banners_rag_1", "UseKnifeOnCurtain", true);
	SetUseItemCallback("ceremony_knife_1", "banners_rag_2", "UseKnifeOnCurtain", true);
	SetUseItemCallback("ceremony_knife_1", "slime_1", "UseKnifeOnSlime", true);
	SetUseItemCallback("ceremony_knife_1", "slime_wheel", "UseKnifeOnSlime", true);
	SetUseItemCallback("ceremony_knife_1", "slime_5", "UseKnifeOnSlime", true);
	
	SetUseItemCallback("hollow_needle_1", "treasure_chest_1", "UseNeedleOnChest", true);
	SetUseItemCallback("hollow_needle_1", "treasure_chest_2", "UseNeedleOnChest", true);
	SetUseItemCallback("hollow_needle_1", "treasure_chest_3", "UseNeedleOnChest", true);
	SetUseItemCallback("hollow_needle_1", "treasure_chest_4", "UseNeedleOnChest", true);
	
	SetUseItemCallback("hammer", "AreaRocks", "UseHammerAndChipperOnRocks", false);
	SetUseItemCallback("chipper", "AreaRocks", "UseHammerAndChipperOnRocks", false);
	SetUseItemCallback("stone_hammer_chipper", "AreaRocks", "UseHammerAndChipperOnRocks", true);
	
	SetUseItemCallback("crowbar_1", "swing_door_21", "UseCrowbarOnDoor", true);
	SetUseItemCallback("crowbar_1", "swing_door_39", "UseCrowbarOnDoor", true);
	SetUseItemCallback("crowbar_1", "swing_door_44", "UseCrowbarOnDoor", true);
	
	SetUseItemCallback("string_pile_1", "AreaStuckKey", "UseStringOnStuckObject", true);
	SetUseItemCallback("string_pile_1", "statue_room_2_stuck", "UseStringOnStuckObject", true);
	
	SetUseItemCallback("fresh_meat_1", "fire_place_1", "UseMeatOnFire", false);
	SetUseItemCallback("fresh_meat_1", "AreaDungeonKitchenFire", "UseMeatOnFire", false);
	SetUseItemCallback("fresh_meat_1", "bonfire_1", "UseMeatOnFire", false);
	SetUseItemCallback("fresh_meat_1", "bonfire_2", "UseMeatOnFire", false);
	SetUseItemCallback("fresh_meat_1", "bonfire_3", "UseMeatOnFire", false);
	SetUseItemCallback("fresh_meat_1", "AreaCopperFire", "UseMeatOnFire", false);
	
	SetUseItemCallback("wooden_bucket_filled_1", "fire_place_1", "UseFilledBucketOnBonfire", false);
	SetUseItemCallback("wooden_bucket_filled_1", "AreaDungeonKitchenFire", "UseFilledBucketOnBonfire", false);
	SetUseItemCallback("wooden_bucket_filled_1", "bonfire_1", "UseFilledBucketOnBonfire", false);
	SetUseItemCallback("wooden_bucket_filled_1", "bonfire_2", "UseFilledBucketOnBonfire", false);
	SetUseItemCallback("wooden_bucket_filled_1", "brazen_bull_1", "UseFilledBucketOnBonfire", false);
	SetUseItemCallback("wooden_bucket_filled_1", "bonfire_3", "UseFilledBucketOnBonfire", true);
	SetUseItemCallback("wooden_bucket_filled_1", "AreaCopperFire", "UseFilledBucketOnBonfire", true);
	
	//AddUseItemCallback("wooden_bucket_1_AreaSewerWater_1", "wooden_bucket_1", "AreaSewerWater_1", "UseBucketOnWater", true);
	AddUseItemCallback("wooden_bucket_1_AreaSewerWater_2", "wooden_bucket_1", "AreaSewerWater_2", "UseBucketOnWater", true);
	AddUseItemCallback("wooden_bucket_1_AreaSewerWater_3", "wooden_bucket_1", "AreaSewerWater_3", "UseBucketOnWater", false);
	AddUseItemCallback("wooden_bucket_1_AreaSink", "wooden_bucket_1", "AreaSink", "UseBucketOnWater", false);
	
	SetUseItemCallback("handdrill", "AreaJackHead", "UseDrillOnJack", true);
	
	SetEntityPlayerInteractOff("key_coldroom_static");
	SetEntityPlayerInteractOff("candle_puzzle_1");
	SetEntityPlayerInteractOff("candle_puzzle_2");
	SetEntityPlayerInteractOff("candle_puzzle_3");
	SetEntityPlayerInteractOff("candle_puzzle_4");
	SetEntityPlayerInteractOff("candle_puzzle_5");
	SetEntityPlayerInteractOff("candle_puzzle_6");
	SetEntityPlayerInteractOff("candle_puzzle_7");
	SetEntityPlayerInteractOff("candle_puzzle_8");
	SetEntityPlayerInteractOff("candle_puzzle_9");
	SetEntityPlayerInteractOff("candle_puzzle_10");
	SetEntityPlayerInteractOff("candle_puzzle_11");
	SetEntityPlayerInteractOff("candle_puzzle_12");
	SetEntityPlayerInteractOff("Goblet1v");
	SetEntityPlayerInteractOff("Goblet2v");
	SetEntityPlayerInteractOff("Goblet3v");
	SetEntityPlayerInteractOff("Goblet4v");
	SetEntityPlayerInteractOff("Goblet5v");
	SetEntityPlayerInteractOff("Goblet6v");
	SetEntityPlayerInteractOff("Goblet7v");
	SetEntityPlayerInteractOff("orbpiece_red_1");
	SetEntityPlayerInteractOff("orbpiece_cyan_1");
	SetEntityPlayerInteractOff("orbpiece_yellow_1");
	SetEntityPlayerInteractOff("orbpiece_blue_1");
	//SetEntityPlayerInteractOff("orbpiece_magenta_1");
	SetEntityPlayerInteractOff("orbpiece_green_1");
	SetEntityPlayerInteractOff("key_dungeon_static");
	SetEntityPlayerInteractOff("bucket_of_tar_1");
	SetEntityPlayerInteractOff("statue_room_2_stuck");
	SetEntityPlayerInteractOff("orbpiece_blue_1_fake");
	SetEntityPlayerInteractOff("bonfire_3");
	SetEntityPlayerInteractOff("fresh_meat_1");
	SetEntityPlayerInteractOff("copper_tube_static");
	SetEntityPlayerInteractOff("copper_tube_static_head");
	SetEntityPlayerInteractOff("candle_orb_1");
	SetEntityPlayerInteractOff("candle_orb_2");
	SetEntityPlayerInteractOff("candle_orb_3");
	SetEntityPlayerInteractOff("candle_orb_4");
	SetEntityPlayerInteractOff("candle_orb_5");
	SetEntityPlayerInteractOff("candle_orb_6");
	
	SetEntityAndEffectsActive("slime_1", "ps_slime_fog.ps", "slime_loop.snt", "save_red_dark");
	SetEntityAndEffectsActive("slime_wheel", "ps_slime_fog.ps", "slime_loop.snt", "save_red_dark");
	
	SetEntityActive("curtain01_closed_2");
	SetEntityActive("shelf_door_1");
	SetEntityActive("banners_rag_1");
	SetEntityActive("banners_rag_2");
	SetEntityActive("BlockBoxRocks");
	SetEntityActive("rock_debris_1");
	SetEntityActive("rock_debris_2");
	SetEntityActive("rock_debris_3");
	SetEntityActive("rock_debris_4");
	SetEntityActive("rock_debris_5");
	SetEntityActive("rock_debris_6");
	SetEntityActive("rock_debris_7");
	SetEntityActive("rock_debris_8");
	SetEntityActive("rock_debris_9");
	SetEntityActive("rock_debris_10");
	SetEntityActive("rock_debris_11");
	SetEntityActive("rock_debris_12");
	SetEntityActive("rock_debris_13");
	SetEntityActive("rock_debris_14");
	SetEntityActive("rock_debris_15");
	SetEntityActive("rock_debris_16");
	SetEntityActive("rock_debris_17");
	SetEntityActive("rock_debris_18");
	SetEntityActive("BlockBox_StorageEntrance");
	
	SetEntityInactive("Goblet7v");
	SetEntityInactive("block_box_23");
	SetEntityInactive("cell_box_1");
	SetEntityInactive("cell_box_2");
	SetEntityInactive("cell_box_3");
	SetEntityInactive("cell_box_6");
	
	SetLightVisible("Goblet1Light", false);
	SetLightVisible("Goblet2Light", false);
	SetLightVisible("Goblet3Light", false);
	SetLightVisible("Goblet4Light", false);
	SetLightVisible("Goblet5Light", false);
	SetLightVisible("Goblet6Light", false);
	SetLightVisible("Goblet7Light", false);
	SetLightVisible("PointLight_117", false);
	SetLightVisible("PointLight_118", false);
	SetLightVisible("PointLight_119", false);
	SetLightVisible("PointLight_120", false);
	SetLightVisible("PointLight_121", false);
	SetLightVisible("PointLight_122", false);
	SetLightVisible("PointLight_123", false);
	SetLightVisible("PointLight_124", false);
	SetLightVisible("PointLight_statue_room_2_stuck", false);
	
	PlaySound("01_orb_loop.snt", "orbpiece_red_1", "save_sloth");
	SetUseItemCallback("orbpiece_red_1", "AreaOrbPedestal", "UseOrbOnPedestal", false);
	PlaySound("01_orb_loop.snt", "orbpiece_cyan_1", "save_sloth");
	SetUseItemCallback("orbpiece_cyan_1", "AreaOrbPedestal", "UseOrbOnPedestal", false);
	PlaySound("01_orb_loop.snt", "orbpiece_yellow_1", "save_sloth");
	SetUseItemCallback("orbpiece_yellow_1", "AreaOrbPedestal", "UseOrbOnPedestal", false);
	PlaySound("01_orb_loop.snt", "orbpiece_blue_1_fake", "save_sloth");
	//PlaySound("01_orb_loop.snt", "orbpiece_blue_1", "save_sloth");
	SetUseItemCallback("orbpiece_blue_1", "AreaOrbPedestal", "UseOrbOnPedestal", false);
	PlaySound("01_orb_loop.snt", "orbpiece_magenta_1", "save_sloth");
	SetUseItemCallback("orbpiece_magenta_1", "AreaOrbPedestal", "UseOrbOnPedestal", false);
	PlaySound("01_orb_loop.snt", "orbpiece_green_1", "save_sloth");
	SetUseItemCallback("orbpiece_green_1", "AreaOrbPedestal", "UseOrbOnPedestal", false);
	SetUseItemCallback("bucket_of_tar_1", "AreaOrbPedestal", "UseTarOnPedestal", true);
	
	PlaySound("27_hum.snt", "brazen_bull_1", "save_sloth");
	PlaySound("custom_stories/xdj_tcolm/sounds/01/clock/01_clock_grandfather.snt", "AreaClockGrandfather_1", "save_mid");
	PlaySound("custom_stories/xdj_tcolm/sounds/01/clock/01_clock_grandfather.snt", "AreaClockGrandfather_2", "save_mid");
	
	PlayPropAnimation("jack_corpse", "Idle", 0.2f, true, "");
	
	//INTRO
	PlayCutsceneSequence("Intro");
	
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false)
		{
			GiveItemFromFile("lantern", "lantern.ent");
		}
	}
}

void OnEnter() //IT RUNS WHEN ENTERING IN THE LEVEL.
{
	string[] vPSArray = {
	"ps_fire_candle.ps", "ps_torch_fire.ps", "ps_acid_web_dissolve.ps", "ps_blood_tiny_stream_needle.ps", "ps_blood_tiny_stream_tube.ps", "ps_dust_impact.ps", "ps_dust_impact_vert.ps", 
	"ps_dust_piano.ps", "ps_ghost_release.ps", "ps_hit_metal.ps", "ps_hit_wood.ps", "ps_iron_maiden_event_smoke.ps", "ps_orb_light.ps", "ps_orb_light_fade.ps", "ps_orb_repair_effect.ps", "ps_orb_room_alex_die.ps", 
	"ps_slime_attack_normal.ps", "ps_slime_fog.ps", "ps_torch_fire_calm.ps", "ps_water_stream.ps", "ps_dust_falling.ps", "ps_area_fog.ps", "ps_area_fog_falling.ps", "ps_light_dust.ps", "ps_light_dust_large.ps", "ps_break_cavein.ps"
	};
	string[] vSNTArray = {
	"general_fire_burning.snt", "lock_door.snt", "unlock_door.snt", "locked_door.snt", "player_bodyfall.snt", "step_sneak_rock_rev.snt", "insanity_ear_ring.snt", 
	"react_breath.snt", "react_breath_slow.snt", "react_sigh.snt", "react_scare.snt", "react_pant.snt", "flashback_flash.snt", "scare_wall_stomp.snt", "slime_loop.snt", "ghost_idle.snt", "ghost_alert.snt", 
	"lurker_hit_wood.snt", "break_wood.snt", "break_wood_metal.snt", "break_glass_large.snt", "03_in_a_bottle.snt", "player_react_guardian1.snt", "player_react_guardian3.snt", "sanity_flick.snt", 
	"ptest/enemy/suitor/amb_idle_scratch.snt", "ptest/enemy/suitor/amb_idle_whimp.snt", "01_door_knocking.snt", "01_clock_desk.snt", "01_clock_grandfather.snt", "01_clock_grandfather_insane.snt", 
	"01_teleport.snt", "slime_attack_normal_hit.snt", "impact_metal_high.snt", "impact_metal_low.snt", "impact_organic_low.snt", "impact_rock_high.snt", "impact_rock_low.snt", "impact_wood_heavy_high.snt", 
	"impact_wood_heavy_low.snt", "01_door.snt", "gameplay_tick_long_dist.snt", "21_alex_low_freq_rumble.snt", "guardian_activated.snt", "guardian_distant.snt", "guardian_idle.snt", "guardian_ontop.snt", 
	"05_event_bottles.snt", "01_crowd_whispers_loop.snt", "01_whispers_loop.snt", "00_laugh.snt", "slime_create.snt", "25_guardian_activated.snt", "25_guardian_slime_appear.snt", 
	"01_ambience_Cells.snt", "01_ambience_Darkness.snt", "01_ambience_EEE.snt", "01_ambience_EntranceHall.snt", "01_ambience_Library.snt", "01_ambience_MachineRoom.snt", "01_ambience_Monsters.snt", "01_ambience_Outside.snt", "01_ambience_Sewer.snt", 
	"01_ambience_Storage.snt", "01_ambience_Voice.snt", "03_orb.snt", "01_orb_loop.snt", "door_prison_close.snt", "sanity_drain_high.snt", "sanity_heartbeat.snt", "10_close_door.snt", "scare_slam_door.snt", "21_intro_scream.snt", 
	"ptest/enemy/suitor/enabled.snt", "ptest/enemy/suitor/notice_long.snt", "01_insanity_dog_bark.snt", "01_insanity_dog_growl.snt", "01_insanity_statue_seen.snt", "01_water_pipe_stream.snt", "15_man01_whimp.snt", "15_man02_whimp.snt", 
	"hurt_pant.snt", "enemy/grunt/attack_claw_hit.snt", "15_the_big_scream.snt", "spider_attack.snt", "spider_hurt.snt", "03_rock_move.snt", "sounds/enemy/brute/attack_claw_hit.snt", "gameplay_acid_web.snt", "player_cough.snt", 
	"01_prisoner_scream.snt", "scare_animal_squeal.snt", "scare_wind.snt", "scare_wind_reverse.snt", "scare_whine_loop.snt", "scare_tingeling.snt", "01_player_ladder_wood_up_loop.snt", "17_strain_wheel.snt", "01_steam_release.snt", 
	"17_steam_quiet.snt", "oil_tank_empty.snt", "joint_oven_close.snt", "19_pour_blood.snt", "19_pour_blood_low.snt", "ghost_humming.snt", "00_creak.snt", "00_cuts.snt", "01_voice_brother_idle.snt", "player_stand.snt", 
	"01_phonograph1.snt", "01_phonograph2.snt", "01_phonograph3.snt", "01_phonograph4.snt", "01_piano1.snt", "01_piano2.snt", "01_piano3.snt", "01_piano4.snt", "impact_generic_soft_low.snt"
	};
	
	PreloadParticleSystems(vPSArray);
    PreloadSounds(vSNTArray);
    
    PreloadSound(GetFunnyModeString("enemy/grunt/notice_long.snt"));
	PreloadSound(GetFunnyModeString("enemy/grunt/enabled.snt"));
	PreloadSound(GetFunnyModeString("enemy/brute/notice_long.snt"));
	PreloadSound(GetFunnyModeString("enemy/brute/enabled.snt"));
	//PreloadSound(GetFunnyModeString("enemy/suitor/notice_long.snt"));
	//PreloadSound(GetFunnyModeString("enemy/suitor/enabled.snt"));
	PreloadSound(GetFunnyModeString("water_lurker_attack.snt"));
	PreloadSound(GetFunnyModeString("water_lurker_attack_rev.snt"));
	PreloadSound(GetFunnyModeString("water_lurker_eat.snt"));
	PreloadSound(GetFunnyModeString("water_lurker_eat_rev.snt"));
	PreloadSound(GetFunnyModeString("water_lurker_hunt.snt"));
	PreloadSound(GetFunnyModeString("water_lurker_hunt_rev.snt"));
	PreloadSound(GetFunnyModeString("water_lurker_idle.snt"));
	PreloadSound(GetFunnyModeString("water_lurker_idle_rev.snt"));
    
    SetupExtraModes();

	SetMapDisplayNameEntry("Mansion");
	
	SetCheckPoint("Default", 1);
	
	BlockHint("PickCoin");
}

void OnLeave() //IT RUNS WHEN LEAVING THE LEVEL.
{
	SetActiveEnemyName("");
	
	if(GetPlayerLampOil() < 10 && GetToughModeOn() == false)
		AddPlayerLampOil(7.5f);
}
//END MAIN FUNCTIONS

//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------END VARIABLE CODE-------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//
//-------------------------------------------------------//