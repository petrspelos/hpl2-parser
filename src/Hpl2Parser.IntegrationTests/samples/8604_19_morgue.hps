
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "19_morgue";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6};
int[] gviEasierOilPotionsCodesArray = {1};
int[] gviEasierHealthPotionsCodesArray = {1, 2};
int[] gviEasierSanityPotionsCodesArray = {1};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3};
int[] gviNormalOilPotionsCodesArray = {0};
int[] gviNormalHealthPotionsCodesArray = {1, 2};
int[] gviNormalSanityPotionsCodesArray = {1};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {4};
int[] gviToughOilPotionsCodesArray = {0};
int[] gviToughHealthPotionsCodesArray = {1};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//CURRENT MAP SPECIFIC
string[] gvsDangerousLampsArray = {
	"candlestick_wall_25", "candlestick_wall_28", "candlestick_wall_30", "candlestick_wall_32", "candlestick_wall_35", "candle_floor_small_1", 
	"candlestick_wall_9", "candlestick_wall_15", "candlestick_wall_14", "candlestick_wall_13", "candlestick_wall_12"
};

float GetEntityPlayerDistance(string asEntity)
{
	float fPlayerPosX = GetPlayerPosX();
	float fPlayerPosY = GetPlayerPosY();
	float fPlayerPosZ = GetPlayerPosZ();
	float fEntityPosX = GetEntityPosX(asEntity);
	float fEntityPosY = GetEntityPosY(asEntity);
	float fEntityPosZ = GetEntityPosZ(asEntity);
	float fDistance = MathSqrt(MathPow((fEntityPosX - fPlayerPosX), 2.0f) + MathPow((fEntityPosY - fPlayerPosY), 2.0f) + MathPow((fEntityPosZ - fPlayerPosZ), 2.0f));
	return fDistance;
}

void OnLampStateChange(string asEntity, string asType)
{
	string[] vsDangerousEnemiesArray = {"servant_brute_1", "servant_brute_2"};
	
	if(asType == "OnIgnite")
	{
		if(GetToughModeOn() >= 1)
		{
			for(int i=0; i<vsDangerousEnemiesArray.length(); i++)
			{
				string sEnemyName = GetStringWithExtraModesSuffix(vsDangerousEnemiesArray[i]);
				string sEnemyState = GetEnemyStateName(sEnemyName);
				
				if(sEnemyState != "Idle" && sEnemyState != "GoHome" && sEnemyState != "Dead" && sEnemyState != "NULL" && sEnemyState != "")
				{
					if((GetToughModeOn() == 1 && GetEntityPlayerDistance(sEnemyName) <= 20.0f) || (GetToughModeOn() >= 2))
					{
						AlertEnemyOfPlayerPresence(sEnemyName);
						AddDebugMessage("DEBUG: Enemy " + sEnemyName + " is now in alert state!", false);
						return;
					}
				}
			}
		}
		
		AddDebugMessage("DEBUG: Could not trigger enemy alert from enviroment lamp lit!", false);
	}
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

////////////////////////////////////////
// Drill Corpse
void UseDrillOnCorpseHeadArea(string &in asItem, string &in asEntity)
{
	if(GetLocalVarInt("CorpseDrilled")==0)
	{
		AddDebugMessage("Drilled in corpse head!", false);
		AddTimer("DrillHead", 0.1f, "TimerDrillHead");
		RemoveItem("handdrill");
		
		StartPlayerLookAt("AreaCorpseHead", 1.5f, 3, "");
		SetPlayerMoveSpeedMul(0.3);
		SetRadialBlurStartDist(0.1);
		FadeRadialBlurTo(0.05, 0.025);
		
		SetPlayerActive(false);
	}
	else
	{
		SetMessage("Ch02Level19", "DrillCorpse_AlreadyDone", 0);	
	}	
}

void TimerDrillHead(string &asTimer)
{
	SetEntityActive("antidote_corpse_drilled",true);
	SetPropActiveAndFade("antidote_corpse",false, 0.3);
	
	CreateParticleSystemAtEntity("bloodSplash", "ps_blood_tiny_splash.ps", "AreaDrillCenter",false);
	
	SetPropActiveAndFade("hand_drill_static_1",true, 0.3);
	RotatePropToSpeed("hand_drill_static_1", 8.0f, 8.0f,  1.0f, 0, 0 ,  true, "AreaDrillCenter");
	PlaySoundAtEntity("drilling", "19_drill.snt", "AreaDrillCenter", 0.5f, false);
	
	AddTimer("StopDrillHead", 1.5f, "TimerStopDrillHead");
}

void TimerStopDrillHead(string &asTimer)
{
	SetPlayerMoveSpeedMul(1.0f);
	StopPlayerLookAt();
	FadeRadialBlurTo(0, 0.015);

	SetEntityPlayerInteractCallback("AreaCorpseHead", "InteractCorpseHeadArea", false);
	
	CreateParticleSystemAtEntity("bloodStream", "ps_blood_tiny_stream.ps", "AreaDrillCenter",true);
	CreateParticleSystemAtEntity("bloodStreamImpact", "ps_blood_tiny_stream_impact02.ps","AreaBloodImpact",true);
	PlaySoundAtEntity("bloodStream","19_pour_blood.snt", "AreaDrillCenter", 0, true);
	
	StopPropMovement("hand_drill_static_1");
	SetPropActiveAndFade("hand_drill_static_1",false, 0.3);	
	
	AddTimer("nomoredrill", 1.5f, "TimerNoMoreDrill");
	
	SetLocalVarInt("CorpseDrilled", 1);
}

void TimerNoMoreDrill(string &in asTimer)
{
	PlayGuiSound("19_attach_needle", 0.7f);
	
	SetPropActiveAndFade("hand_drill_part0*_static_2", true, 1.0f);
	
	SetMessage("Ch02Level19", "DrillBroke", 0);
	
	SetPlayerActive(true);
}

void UseDrillOnCorpseBodyArea(string &in asItem, string &in asEntity)
{
	if(GetLocalVarInt("CorpseDrilled")==0)
	{
		SetMessage("Ch02Level19", "DrillCorpseBody", 0);	
	}
	else
	{
		SetMessage("Ch02Level19", "DrillCorpse_AlreadyDone", 0);	
	}
}


////////////////////////////////////////
// Use Tube-Need in Head
void UseTubeNeedleOnHead(string &in asItem, string &in asEntity)
{
	if(GetLocalVarInt("CorpseDrilled")==0)	
	{
		SetMessage("Ch02Level19", "UseTubeNeedleOnHead_NoBlood", 0);
		PlayGuiSound("impact_generic_soft_med", 0.7f);		
	}
	else
	{
		RemoveItem(asItem);
		
		CompleteQuest("19Pipe", "19Pipe");
		
		if(GetLocalVarInt("TubeInPlace")==0)
		{
			PlaySoundAtEntity("attach","19_attach_pipe.snt", "AreaDrillCenter", 0, false);
			PlaySoundAtEntity("bloodStream2","19_pour_blood_low.snt", "AreaDrillCenter", 0, true);
			
			DestroyParticleSystem("bloodStream");
			DestroyParticleSystem("bloodStreamImpact");
			StopSound("bloodStream", 0.5f);
		}
		else
		{
			SetEntityActive("copper_tube_skull", false);
			DestroyParticleSystem("bloodStreamTube");
		}
		
		SetEntityActive("copper_tube_and_needle_1", true);
		CreateParticleSystemAtEntity("bloodStreamNeedle", "ps_blood_tiny_stream_needle.ps", "AreaNeedleTip",true);
		
		SetLocalVarInt("TubeNeedleInPlace", 1);
	}
}

void UseTubeOnHead(string &in asItem, string &in asEntity)
{
	//ADD SO THAT TUBE ONLY CAN BE INSERTED INTO HEAD HOLE, THEN NEEDLED ADDED TO IT
	//IF SO ALSO CompleteQuest("19Pipe", "19Pipe");
	//Added a UseHandOnTube for hint it trying to interact with the Tube only before adding needle.
	
	if(GetLocalVarInt("CorpseDrilled")==0){
		SetMessage("Ch02Level19", "UseTubeOnHead_NoBlood", 0);	
		PlayGuiSound("impact_generic_soft_med", 0.7f);
	}
	else{
		RemoveItem(asItem);
		
		DestroyParticleSystem("bloodStream");
		DestroyParticleSystem("bloodStreamImpact");
		
		PlaySoundAtEntity("attach","19_attach_pipe.snt", "AreaDrillCenter", 0, false);
		
		StopSound("bloodStream", 0.5f);
		PlaySoundAtEntity("bloodStream2","19_pour_blood_low.snt", "AreaDrillCenter", 0, true);
		
		SetEntityActive("copper_tube_skull", true);
		CreateParticleSystemAtEntity("bloodStreamTube", "ps_blood_tiny_stream_tube.ps", "AreaTubeTip",true);
		
		SetLocalVarInt("TubeInPlace", 1);
		
		//SetMessage("Ch02Level19", "UseTubeOnHead_Blood", 0);
		//PlayGuiSound("impact_generic_soft_med", 0.7f);
	}
}

void UseNeedleOnHead(string &in asItem, string &in asEntity)
{
	if(GetLocalVarInt("CorpseDrilled")==0){
		SetMessage("Ch02Level19", "UseNeedleOnHead_NoBlood", 0);	
		PlayGuiSound("impact_generic_soft_med", 0.7f);	
	}
	else{
		if(GetLocalVarInt("TubeInPlace")==0)
		{
			SetMessage("Ch02Level19", "UseNeedleOnHead_Blood", 0);
			PlayGuiSound("impact_generic_soft_med", 0.7f);	
		}
		else
		{
			UseTubeNeedleOnHead(asItem, asEntity);	
			PlayGuiSound("switch_min_max01.ogg", 1);
		}
	}
}

///////////////////////////////////
//CORPSE HINT
void UseTubeNeedleOnBody(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level19", "UseTubeNeedleOnBody", 0);
	
	PlayGuiSound("impact_generic_soft_med", 0.7f);
}

void InteractCorpseHint(string &in asEntity)
{
	PlayGuiSound("touch_corpse", 0.3f);
	SetMessage("Ch02Level19", "TouchCorpse", 5.0f);
	
	AddQuest("19Corpse", "19Corpse");
	
	AddTimer("1", 0.1f, "TimerInteractSounds");
	AddTimer("2", 0.4f, "TimerInteractSounds");
	
	if(GetLocalVarInt("CorpseDrilled") == 1) return;
	AddTimer(asEntity, 1.0, "TimerInteractSounds");
	
	//string sDisable = asEntity == "AreaCorpseHead" ? "AreaCorpseBody" : "AreaCorpseHead";
	//SetEntityPlayerInteractCallback(sDisable, "InteractCorpseHint", true);
}

void TimerInteractSounds(string &in asTimer)
{
	if(asTimer=="1")
		PlayGuiSound("touch_corpse", 1.0f);
	if(asTimer=="2") 
		PlayGuiSound("touch_corpse", 0.7f);
		
	else SetEntityPlayerInteractCallback(asTimer, "InteractCorpseHint", true);
}

////////////////////////////////////////
// Get Antidote

void InteractCorpseHeadArea(string &in asEntity)
{
	if(GetLocalVarInt("TubeNeedleInPlace")==0)
	{
		if(GetLocalVarInt("TubeInPlace")==0)
			SetMessage("Ch02Level19", "InteractBloodStream", 0);	
		else
			SetMessage("Ch02Level19", "UseHandOnTube", 0);
			
		PlayGuiSound("impact_organic_low", 0.3f);		
	}
	else
	{
		//SetEntityActive("AreaCorpseHead", false);
		
		CompleteQuest("19Corpse", "19Corpse");
		
		SetGlobalVarInt("PlayerHasAntidote", 1); //Setup global var sp player no survives poison in 16.
		
		StartPlayerLookAt("AreaCorpseHead", 1, 3, "");
		SetPlayerMoveSpeedMul(0.3);
		SetRadialBlurStartDist(0.1);
		FadeRadialBlurTo(0.1, 2);
		FadePlayerFOVMulTo(0.3, 0.6);
		
		SetPlayerActive(false);
		if(GetLanternActive() == true)
			SetLanternActive(false, false);
		
		PlayGuiSound("19_inject.snt", 1.0f);
		
		StopSound("bloodStream2", 1.0f);
		
		AddTimer("InjectSounds", 1.15f, "TimerInjectSounds");
		FadeOut(1.06f);
	}
}

void TimerInjectSounds(string &in asTimer)
{
	PlayGuiSound("19_creak.snt", 1.0f);
	PlayGuiSound("sanity_heartbeat", 0.5f);
	
	PlayMusic("19_puzzle_inject.ogg", false,1, 1, 10, false);
	
	AddTimer("1", 1.2f, "TimerInjectSounds02");
	AddTimer("2", 2.4f, "TimerInjectSounds02");
	AddTimer("3", 3.6f, "TimerInjectSounds02");
	AddTimer("4", 4.8f, "TimerInjectSounds02");
	
	SetPlayerMoveSpeedMul(1.0f);
	StopPlayerLookAt();
	FadeRadialBlurTo(0, 0.015);
	FadePlayerFOVMulTo(1, 2);
	
	ResetProp("cellar_wood01_2");
	
	DestroyParticleSystem("bloodStreamNeedle");
	
	AddTimer("InjectSoundsOver", 5.0f, "TimerInjectSoundsOver");
}

void TimerInjectSounds02(string &in asTimer)
{
	if(asTimer == "1")
		PlayGuiSound("react_breath_slow", 0.3f);	
	else if(asTimer == "2")
		PlayGuiSound("sanity_heartbeat", 0.7f);
	else if(asTimer == "3")
		PlayGuiSound("react_breath_slow", 0.5f);
	else
		PlayGuiSound("sanity_heartbeat", 1.0f);
}
void TimerInjectSoundsOver(string &in asTimer)
{
	AddTimer("CompleteQuest", 1.0f, "TimerCompleteAntidoteQuest");
	
	float fValue = 50.0f;
	if(GetEasyModeOn() >= 1)
		fValue = 60.0f;
	else if(GetToughModeOn() >= 1)
		fValue = 40.0f;
	
	if(GetPlayerSanity() > fValue)
	{
		SetPlayerSanity(fValue);
		FadeImageTrailTo(0.9f, 1);
		AddTimer("ImageTrailOver", 7.0f, "TimerImageTrailOver");
	}

	PlayGuiSound("react_pant", 0.5f);
	PlayGuiSound("03_in_a_bottle.snt", 0.5f);
	
	SetPlayerActive(true);
	FadeIn(4.0f);
	
	SetEntityPlayerInteractCallback("AreaCorpseBody", "InteractCorpseAllDone", true);
	SetEntityPlayerInteractCallback("AreaCorpseHead", "InteractCorpseAllDone", true);
}

void InteractCorpseAllDone(string &in asEntity)
{
	SetMessage("Ch02Level19", "TouchCorpseAllDone", 0);
	
	AddTimer("1", 0.1f, "TimerInteractSounds");
	AddTimer("2", 0.4f, "TimerInteractSounds");
	
	AddTimer("intback", 1.0f, "TimerIntBackOn");
}

void TimerIntBackOn(string &in asTimer)
{
	SetEntityPlayerInteractCallback("AreaCorpseBody", "InteractCorpseAllDone", true);
	SetEntityPlayerInteractCallback("AreaCorpseHead", "InteractCorpseAllDone", true);
}

void TimerImageTrailOver(string &in asTimer)
{
	FadeImageTrailTo(0, 0.3f);
}

void TimerCompleteAntidoteQuest(string &in asTimer)
{
	CompleteQuest("FindAntidote", "16FindAntidote");
	SetEntityActive("AreaShowBrute", true);
}


////////////////////////////////////////
// Brute Appears
void CollideShowBrute(string &in asParent, string &in asChild, int alState)
{
	AddTimer("PoundDoor", 0.5, "TimerBrutePoundDoor");
	
	CheckPoint("check01","PlayerStartArea_3", "CheckPoint01", "Hints", "DeathBrute_18_Morgue_01");
	
	if(GetToughModeOn() >= 2)
		AddEntityCollideCallback("Player", "AreaShowBrute02", "CollideShowBrute02", true, 1);
	
	SetEntityPlayerInteractCallback("cellar_wood01_2", "InteractCellarDoor", true);
	
	PlayEnemySoundAtEntity("enabled.snt", "cellar_wood01_2", "brute");
}

void InteractCellarDoor(string &in asEntity)
{
	ActivatePoundingBrute();
	GivePlayerDamage(10.0f, "BloodSplat", false, false);
	PlayGuiSound("react_pant.snt", 0.7f);
	GiveSanityDamage(5.0f, false);
	
	if(GetEasyModeOn() <= 0)
	{
		AddTimer(GetStringWithExtraModesSuffix("servant_brute_1"), 0.1f, "ShowEnemyPlayerPosition");
	}
}

void ActivatePoundingBrute()
{
	RemoveTimer("PoundDoor");
	
	SetEntityPlayerInteractCallback("cellar_wood01_2", "", true);
	
	SetPropHealth("cellar_wood01_2", 0);
	
	ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_1"));
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_1"), "PathNodeArea_42", GetEnemyIdleTime(3.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_1"), "PathNodeArea_43", GetEnemyIdleTime(5.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_1"), "PathNodeArea_38", 5.0f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_1"), "PathNodeArea_36", GetEnemyIdleTime(3.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_1"), "PathNodeArea_14", 2.0f, "");	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_1"), true);
}

void TimerBrutePoundDoor(string &in asTimer)
{
	if(GetLocalVarInt("PoundDoorCount")==4)
	{
		ActivatePoundingBrute();
				
		return;
	}
	
	if(GetLocalVarInt("PoundDoorCount")==0)
	{
		PlayMusic("19_event_brute.ogg", false,1, 0.1, 10, false);
		
		GiveSanityDamage(10, true);
		StartPlayerLookAt("cellar_wood01_2", 3, 5, "");
		AddTimer("StopHeadMove", 0.75, "TimerStopHeadMove");
	}

	if(GetLocalVarInt("PoundDoorCount")==1)
		PlayEnemySoundAtEntity("idle.snt", "cellar_wood01_2", "brute");
		
	AddBodyImpulse("cellar_wood01_2_Body_1", 0, 0,5, "World");
	PlaySoundAtEntity("Bang","break_wood.snt", "AreaDoorBang", 0, false);
	CreateParticleSystemAtEntity("Bang", "ps_break_wood_small.ps", "AreaDoorBang", false);
	
	
	AddLocalVarInt("PoundDoorCount", 1);
	AddTimer("PoundDoor", 2.5f * GetDifficultyInverseFactor(), "TimerBrutePoundDoor");
}

void TimerStopHeadMove(string &in asTimer)
{
	StopPlayerLookAt();
}

void CollideShowBrute02(string &in asParent, string &in asChild, int alState)
{
	AddTimer("ShowBrute02", RandFloat(1.25f, 1.75f), "TimerShowBrute02");
}

void TimerShowBrute02(string &in asTimer)
{
	string sEnemyName = GetStringWithExtraModesSuffix("servant_brute_1");
	string sEnemyState = GetEnemyStateName(sEnemyName);
	if(StringContains(sEnemyState, "Hunt") == false && StringContains(sEnemyState, "Alert") == false && StringContains(sEnemyState, "Attack") == false && StringContains(sEnemyState, "Search") == false)
	{
		SetEntityActive(sEnemyName, false);
		FadeEnemyToSmoke(sEnemyName, false);
		ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("servant_brute_2"));
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_2"), true);
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_16", GetEnemyIdleTime(4.0f), "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_25", 3.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_11", 2.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_36", 2.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_11", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_2"), "PathNodeArea_14", GetEnemyIdleTime(4.0f), "");
		
		GiveSanityDamage(RandFloat(5.0f, 10.0f), false);
		PlayGuiSound("react_breath_slow", 0.7f);
	}
	else
		return;
}

void ResetDoorIfBroken(string asDoor)
{
	if(GetPropHealth(asDoor) <= 0.0f)
	{
		ResetProp(asDoor);
	}
}

void CheckPoint01(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_2");
	ResetDoorIfBroken("cellar_wood01_3");
	ResetDoorIfBroken("cellar_wood01_4");
	
	PlayMusic("04_amb.ogg", true, 0.8, 8, 0, true);
	AddEntityCollideCallback("Player", "AreaShowBrute02", "CollideShowBrute02", true, 1);
	if(alCount == 1)
		CheckPoint("check02","PlayerStartArea_4", "CheckPoint02", "Hints", "DeathBrute_18_Morgue_02");
}

void CheckPoint02(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_2");
	ResetDoorIfBroken("cellar_wood01_3");
	ResetDoorIfBroken("cellar_wood01_4");
	
	GiveSanityDamage(10.0f, false);
	
	SetEntityActive("slime*", true);
	SetEntityActive("antidote_corpse_4", true);
	
	SetEntityActive("SlimeDamageArea_1", true);
	SetEntityActive("SlimeDamageArea_2", true);
	
	StopSound("Sound_19", 4.0f);
	PlaySoundAtEntity("slimea", "amb_guardian", "slime_anim_wall_1", 2.0f, true);
	PlaySoundAtEntity("slime2", "slime_loop", "slime_pile_4", 2.0f, true);
	PlaySoundAtEntity("slime3", "slime_loop", "slime_6way_1", 2.0f, true);
	PlaySoundAtEntity("slime1", "slime_loop", "slime_egg_1", 2.0f, true);
	
	PlayMusic("04_event_hole.ogg", false,1, 0.1, 10, false);
	FadeLightTo("PointLight_24", 0.6, 0,0, 0.55f, -1, 1);
	ResetProp("cellar_wood01_2");
	
	AddTimer("GuardianScream", 0.5f, "TimerGuardianScream");
	AddTimer("1", 1.0f, "TimerGuardianScream");
	AddTimer("2", 2.0f, "TimerGuardianScream");
	AddTimer("3", 5.0f, "TimerGuardianScream");
}

void TimerGuardianScream(string &in asTimer)
{
	if(asTimer == "1"){
		PlaySoundAtEntity("react_breath1", "react_breath", "Player", 0.5f, false);
		FadePlayerFOVMulTo(0.5f, 0.1f);
		return;
	} 
	else if(asTimer == "2"){
		PlaySoundAtEntity("react_scare1", "react_scare", "Player", 0.3f, false);
		return;
	}
	else if(asTimer == "3"){
		FadePlayerFOVMulTo(1.0f, 0.01f);
		return;
	}
	PlaySoundAtEntity("howl","guardian_distant1", "Player", 0, false);	
}


///////////////////
//ALEXANDER VOICE
void VisionOver01()
{
	SetEntityActive("AreaAlexVoice", true);
}
void CollideAlexVoice(string &in asParent, string &in asChild, int alState)
{
	if(StringContains(asParent, "servant_brute"))
	{
		if(GetLocalVarInt("PlayerInsideTerrorRoom") <= 1)
			return;
		else if((GetToughModeOn() >= 1) && GetLocalVarInt("PlayerInsideTerrorRoom") == 2)
		{
			if(GetSwingDoorClosed("cellar_wood01_4") == true || GetPropHealth("cellar_wood01_4") == 0 || GetToughModeOn() >= 2)
			{
				AlertEnemyOfPlayerPresence(asParent);
				SetEntityActive(asChild, false);
			}
			else
			{
				return;
			}
		}
		else if((GetEasyModeOn() <= 0) && GetLocalVarInt("PlayerInsideTerrorRoom") == 3)
		{
			if(GetSwingDoorClosed("cellar_wood01_3") == true || GetPropHealth("cellar_wood01_3") == 0 || GetToughModeOn() >= 2)
			{
				AlertEnemyOfPlayerPresence(asParent);
				SetEntityActive(asChild, false);
			}
			else
			{
				return;
			}
		}
		else
			return;
	}
	else
		AddTimer("voicedelay", 4.0f, "TimerAlexVoice");
}
void TimerAlexVoice(string &in asTimer)
{
	AddEffectVoice("CH02L19_Alexander_01", "", "Voice", "CH02L19_Alexander_01", false, "", 0.0f, 0.0f);
}


///////////////////////////
//LIGHT OPTIMIZATION
void CollideLights(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1){
		FadeLightTo("SpotLight_1", 0.8f, 0.7f, 0.6f, 0.5f, -1, 0);
		FadeLightTo("SpotLight_8", 0.6f, 0.6f, 0.5f, 0.6f, -1, 0);
		FadeLightTo("SpotLight_7", 0.4f, 0.4f, 0.4f, -1, -1, 0);
		FadeLightTo("SpotLight_3", 0.3f, 0.3f, 0.3f, -1, -1, 0);
		FadeLightTo("SpotLight_4", 0.3f, 0.3f, 0.3f, -1, -1, 0);
		FadeLightTo("SpotLight_5", 0.3f, 0.3f, 0.3f, -1, -1, 0);
		FadeLightTo("SpotLight_6", 0.3f, 0.3f, 0.3f, -1, -1, 0);
		
		FadeLightTo("SpotLight_2", 0, 0, 0, 0, -1, 0);
		FadeLightTo("SpotLight_10", 0, 0, 0, -1, -1, 0);
		
	} else{
		FadeLightTo("SpotLight_1", 0, 0, 0, 0, -1, 0);
		FadeLightTo("SpotLight_8", 0, 0, 0, 0, -1, 0);
		FadeLightTo("SpotLight_7", 0, 0, 0, -1, -1, 0);
		FadeLightTo("SpotLight_3", 0, 0, 0, -1, -1, 0);
		FadeLightTo("SpotLight_4", 0, 0, 0, -1, -1, 0);
		FadeLightTo("SpotLight_5", 0, 0, 0, -1, -1, 0);
		FadeLightTo("SpotLight_6", 0, 0, 0, -1, -1, 0);
		
		FadeLightTo("SpotLight_2", 0.3f, 0.3f, 0.2f, 1, -1, 0);
		FadeLightTo("SpotLight_10", 0.4f, 0.4f, 0.3f, -1, -1, 0);
	}
	
}
////////////////////////


//////////////////////////////
//Sanity drain in corpse rooms
void CollideAreaRooms(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1){
		AddTimer(asChild, RandFloat(0.2f,2.0f), "TimerEnterAreaRooms");
		PlaySoundAtEntity(asChild+"terror", "ui_torture.ent", asChild, 10, true);
		if(StringContains(asChild, "1"))
			SetLocalVarInt("PlayerInsideTerrorRoom", 1);
		else if(StringContains(asChild, "2"))
			SetLocalVarInt("PlayerInsideTerrorRoom", 2);
		else if(StringContains(asChild, "3"))
			SetLocalVarInt("PlayerInsideTerrorRoom", 3);
	}
	else if(alState == -1){
		RemoveTimer(asChild);
		FadeRadialBlurTo(0.0f, 0.1f);
		StopSound(asChild+"terror", 2);
		AddDebugMessage("Leave", false);
		SetLocalVarInt("PlayerInsideTerrorRoom", 0);
	}
}
void TimerEnterAreaRooms(string &in asTimer)
{
	if(GetLocalVarInt("Sanity") == 0){
		FadeRadialBlurTo(0.1f, 0.2f);
		SetRadialBlurStartDist(0.7f);
		SetLocalVarInt("Sanity", 1);
		PlayGuiSound("react_sigh.snt", 0.5f);
	} 
	else{
		FadeRadialBlurTo(0.0f, 0.1f);
		SetLocalVarInt("Sanity", 0);
		PlayGuiSound("react_breath.snt", 0.5f);
	}
	
	GiveSanityDamage(0.75f * GetDifficultyDirectFactor(), false);
	
	PlaySoundAtEntity("E_"+asTimer+"s", "scare_baby_cry.snt", "E_"+asTimer+"_"+RandInt(1,5), RandFloat(0.1f, 4.0f), false);
	
	AddTimer(asTimer, RandFloat(6.0f,12.0f), "TimerEnterAreaRooms");
}
/////////////////

	
//GOT THE COPPER TUBE
void EntityCallPickCopper(string &in asEntity, string &in type)
{
	SetEntityActive("AreaCopperEvent", true);
	
	AddQuest("19Pipe", "19Pipe");
}
void CollideAreaCopperEvent(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("creak", "00_creak.snt", "Player", 6.0f, true);
	PlaySoundAtEntity("metal", "15_amb_metal", "Player", 6.0f, true);
	
	StartScreenShake(0.002f, 2.0f, 5.0f, 5.0f);
	FadePlayerAspectMulTo(1.8f, 0.02f);
	GiveSanityDamage(5.0f, false);
	
	AddTimer("TimerECopper", 2.0f, "TimerECopper");
	
	if(GetToughModeOn() >= 2)
	{
		AddEntityCollideCallback("Player", "AreaShowBrute02", "CollideShowBrute02", true, 1);
	}
}
void TimerECopper(string &in asTimer)
{
	string sEvent = asTimer;	//Do not edit, sets timer loop function name.
	AddLocalVarInt(sEvent, 1);	//Do not edit, steps through timer loop events.
	bool bPauseAtStep = false;	//Do not edit, to pause or end the timer loop at specified step.

	float fEventSpeed = 2.0f;	//Set to preferred default time for the timer loop.

	switch(GetLocalVarInt(sEvent)){
		//////////
		//First step in the event - replace with step comment.
		case 1:
			FadeOut(8.0f);
			PlayGuiSound("react_breath", 0.3f);
			FadeImageTrailTo(0.1f, 0.1f);
			SetPlayerRunSpeedMul(0.8f);
			SetPlayerMoveSpeedMul(0.8f);
		break;
        case 2:
			PlayGuiSound("react_breath", 0.5f);
			FadeImageTrailTo(0.3f, 0.3f);
			SetPlayerRunSpeedMul(0.7f);
			SetPlayerMoveSpeedMul(0.7f);
		break;
		case 3:
			PlayGuiSound("react_breath", 0.7f);
			StopSound("creak", 8.0f);
			StopSound("metal", 10.0f);
			FadeImageTrailTo(0.5f, 0.5f);
			FadePlayerAspectMulTo(1.0f, 0.05f);
			SetPlayerRunSpeedMul(0.6f);
			SetPlayerMoveSpeedMul(0.6f);
		break;
		case 4:
			FadeIn(8.0f);
			PlayGuiSound("react_breath", 0.5f);
			FadeImageTrailTo(0.3f, 0.3f);
			SetPlayerRunSpeedMul(0.7f);
			SetPlayerMoveSpeedMul(0.7f);
		break;
		case 5:
			PlayGuiSound("react_breath", 0.3f);
			FadeImageTrailTo(0.1f, 0.1f);
			SetPlayerRunSpeedMul(0.85f);
			SetPlayerMoveSpeedMul(0.85f);
		break;
		//////////
		//End timer when no more steps in the event found.
		default:
			FadeImageTrailTo(0.0f, 0.0f);
			SetPlayerRunSpeedMul(1.0f);
			SetPlayerMoveSpeedMul(1.0f);
			bPauseAtStep = true;
		break;
	}

	if(!bPauseAtStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
/////////////////////



//Flashback 01 from survivor over
void SurvivorEnd()
{
	AddTimer("FlashbackArea_3", 10.0f, "TimerSecondSurvivorFlash");
}
void TimerSecondSurvivorFlash(string &in asTimer)
{
	SetEntityActive(asTimer, true);
}


////////////////////////////
// Run first time starting map
void OnStart()
{
	for(int i=0; i<gvsDangerousLampsArray.length(); i++)
	{
		SetEntityCallbackFunc(gvsDangerousLampsArray[i], "OnLampStateChange");
	}
	
	SetMapDisplayNameEntry("Morgue");
	
	////////////////////////////////////////
	// Use item callbacks
	AddUseItemCallback("usedrillhead", "handdrill", "AreaCorpseHead", "UseDrillOnCorpseHeadArea", false);
	AddUseItemCallback("usedrillhead", "handdrill", "AreaCorpseBody", "UseDrillOnCorpseHeadArea", false);
	//AddUseItemCallback("usedrillbody", "handdrill", "AreaCorpseBody", "UseDrillOnCorpseBodyArea", false);
	
	AddUseItemCallback("use_tube_and_needle_on_head", "copper_tube_and_needle", "AreaCorpseHead", "UseTubeNeedleOnHead", false);
	AddUseItemCallback("use_tube_on_head", "copper_tube_1", "AreaCorpseHead", "UseTubeOnHead", false);
	AddUseItemCallback("use_needle_on_head", "hollow_needle_1", "AreaCorpseHead", "UseNeedleOnHead", false);
	
	//AddUseItemCallback("use_tube_and_needle_on_body", "copper_tube_and_needle", "AreaCorpseBody", "UseTubeNeedleOnBody", false);
	//AddUseItemCallback("use_tube_on_body", "copper_tube_1", "AreaCorpseBody", "UseTubeNeedleOnBody", false);
	AddUseItemCallback("use_tube_and_needle_on_body", "copper_tube_and_needle", "AreaCorpseBody", "UseTubeNeedleOnHead", false);
	AddUseItemCallback("use_tube_on_body", "copper_tube_1", "AreaCorpseBody", "UseTubeOnHead", false);
	
	AddUseItemCallback("use_needle_on_body", "hollow_needle_1", "AreaCorpseBody", "UseNeedleOnHead", false);
	
	
	/////////////////////////////////////
	//PLAYER INTERACT
	SetEntityPlayerInteractCallback("AreaCorpseHead", "InteractCorpseHint", true);
	SetEntityPlayerInteractCallback("AreaCorpseBody", "InteractCorpseHint", true);
	
	
	////////////////////////////////////////
	// Collisions
	AddEntityCollideCallback("Player", "AreaShowBrute", "CollideShowBrute", true, 1);
	AddEntityCollideCallback("Player", "AreaAlexVoice", "CollideAlexVoice", true, 1);
	AddEntityCollideCallback("Player", "AreaLights", "CollideLights", false, 0);
	for(int i=1;i<=3;i++) AddEntityCollideCallback("Player", "AreaRoom_"+i, "CollideAreaRooms", false, 0);
	AddEntityCollideCallback("Player", "AreaCopperEvent", "CollideAreaCopperEvent", true, 1);
	
	////////////////////////////////////////
	//Debug
	if(ScriptDebugOn())
	{
		//GiveItemFromFile("copper_tube_1", "copper_tube.ent");
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		
		if(HasItem("hollow_needle_1") == false) GiveItemFromFile("hollow_needle_1", "hollow_needle.ent");
		if(HasItem("handdrill") == false) GiveItem("handdrill", "Puzzle", "hand_drill", "hand_drill.tga", 0);	
		//GiveItem("copper_tube_and_needle", "Puzzle", "copper_tube_and_needle", "copper_tube_and_needle.tga", 0);		
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	CheckPoint("check01", "PlayerStartArea_3", "CheckPoint01", "Hints", "DeathBrute_18_Morgue_01");
	PreloadSound("19_drill"); PreloadSound("19_pour_blood"); PreloadSound("19_attach_pipe"); PreloadSound("19_pour_blood_low");
	PreloadSound("break_wood"); PreloadSound("amb_guardian");
	PreloadSound("slime_loop"); PreloadSound("react_breath"); PreloadSound("react_scare"); PreloadSound("guardian_distant1");
	PreloadSound("scare_baby_cry"); PreloadSound("00_creak"); PreloadSound("15_amb_metal"); PreloadSound("19_attach_needle");
	PreloadSound("touch_corpse"); PreloadSound("19_inject"); PreloadSound("19_creak"); PreloadSound("sanity_heartbeat");
	PreloadSound("sanity_heartbeat"); PreloadSound("react_breath_slow"); PreloadSound("03_in_a_bottle"); PreloadSound("react_pant");
	PreloadSound("react_sigh");

	PlayMusic("04_amb.ogg", true, 0.8, 8, 0, true);
	
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_brute_1"), "AreaAlexVoice", "CollideAlexVoice", false, 1);
	
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	string sEnemyName = "";
	
	sEnemyName = "brute";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	StopMusic(4, 0);
}