
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "15_prison_north";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
int[] gviEasierOilPotionsCodesArray = {1, 2, 3, 4, 5, 6, 7, 8};
int[] gviEasierHealthPotionsCodesArray = {1, 2};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
int[] gviNormalOilPotionsCodesArray = {1, 2, 3, 4};
int[] gviNormalHealthPotionsCodesArray = {1};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {3, 14, 15, 16, 19, 21};
int[] gviToughOilPotionsCodesArray = {3, 6};
int[] gviToughHealthPotionsCodesArray = {2};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {15};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {2};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//CURRENT MAP SPECIFIC
string[] gvsDangerousLampsArray = {
	"candlestick02_1", "torch_static01_8", "torch_static01_7", "torch_static01_6", "torch_static01_10", "torch_static01_25", 
	"torch_static01_24", "torch_static01_23", "torch_static01_22", "torch_static01_19", "torch_static01_20", "torch_static01_21", 
	"torch_static01_16", "torch_static01_18", "torch_static01_15", "torch_static01_13", "torch_static01_11", "torch_static01_12"
};

float GetEntityPlayerDistance(string asEntity)
{
	float fPlayerPosX = GetPlayerPosX();
	float fPlayerPosY = GetPlayerPosY();
	float fPlayerPosZ = GetPlayerPosZ();
	float fEntityPosX = GetEntityPosX(asEntity);
	float fEntityPosY = GetEntityPosY(asEntity);
	float fEntityPosZ = GetEntityPosZ(asEntity);
	float fDistance = MathSqrt(MathPow((fEntityPosX - fPlayerPosX), 2.0f) + MathPow((fEntityPosY - fPlayerPosY), 2.0f) + MathPow((fEntityPosZ - fPlayerPosZ), 2.0f));
	return fDistance;
}

void OnLampStateChange(string asEntity, string asType)
{
	string[] vsDangerousEnemiesArray = {
		"servant_grunt_1", "servant_grunt_2", "servant_grunt_4", "servant_grunt_5", 
		"servant_grunt_6", "servant_grunt_10", "servant_grunt_11"
	};
	
	if(asType == "OnIgnite")
	{
		if(GetToughModeOn() >= 1)
		{
			for(int i=0; i<vsDangerousEnemiesArray.length(); i++)
			{
				string sEnemyName = GetStringWithExtraModesSuffix(vsDangerousEnemiesArray[i]);
				string sEnemyState = GetEnemyStateName(sEnemyName);
				
				if(sEnemyState != "Idle" && sEnemyState != "GoHome" && sEnemyState != "Dead" && sEnemyState != "NULL" && sEnemyState != "")
				{
					if((GetToughModeOn() == 1 && GetEntityPlayerDistance(sEnemyName) <= 20.0f) || (GetToughModeOn() >= 2))
					{
						AlertEnemyOfPlayerPresence(sEnemyName);
						AddDebugMessage("DEBUG: Enemy " + sEnemyName + " is now in alert state!", false);
						return;
					}
				}
			}
		}
		
		AddDebugMessage("DEBUG: Could not trigger enemy alert from enviroment lamp lit!", false);
	}
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

//////////////////////////
//BEGIN ALEXANDER VOICES//
/*When in area play alexander voices
 */
void CollideAlexanderArea(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("InAlexArea") == 0)
		AddTimer("alex", RandInt(25,35), "TimerAlexVoice");
		
	SetLocalVarInt("InAlexArea", alState);
}
void TimerAlexVoice(string &in asTimer)
{
	if(GetLocalVarInt("InAlexArea") == 1)
		AddLocalVarInt("AlexVoice", 1);
	
	switch(GetLocalVarInt("AlexVoice")){
		case 1:
			AlexanderMental(1);
			AddLocalVarInt("AlexVoice", 1);
		break;
		case 3:
			AlexanderMental(2);
			AddLocalVarInt("AlexVoice", 1);
		break;
		case 5:
			AlexanderMental(3);
			if(GetToughModeOn() >= 1)
			{
				AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_grunt_4"));
				AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_grunt_5"));
			}
			return;
		break;
	}
	
	AddTimer("alex", RandInt(10,30), "TimerAlexVoice");
}
void AlexanderMental(int iVoice)
{
	AddEffectVoice("CH02L15_Alexander_0"+iVoice, "", "Voice", "CH02L15_Alexander_0"+iVoice, false, "", 0.0f, 0.0f);
}

/*If close to prisoner vision, turn off alexander voices and turn back on when vision over
 */
void CollideNoAlex(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AlexanderArea", false);
	
	AddTimer("shakeshackles", 2.5f, "TimerShakeShackles");
	AddTimer("shakeshackles", 3.0f, "TimerShakeShackles");
	AddTimer("shakeshackles", 3.4f, "TimerShakeShackles");
	AddTimer("shakeshackles", 4.0f, "TimerShakeShackles");
}
void VisionOverAlexOn()
{
	SetEntityActive("AlexanderArea", true);
}
//END ALEXANDER VOICES//
////////////////////////


////////////////////
//BEGIN MISC STUFF//
/*Shake some shackles during captured prisioner Vision
 */
void TimerShakeShackles(string &in asTimer)
{
	AddBodyImpulse("shackles_3_Body_5", RandFloat(-0.7f, 0.7f), RandFloat(1.0f, 2.5f), RandFloat(-0.7f, 0.7f), "World");
	AddBodyImpulse("shackles_3_Body_9", RandFloat(-0.7f, 0.7f), RandFloat(1.0f, 2.5f), RandFloat(-0.7f, 0.7f), "World");
}

/*Messages for interacting/using items on doors that can not be opened.
 */
void InteractExtraDoor(string &in asEntity)
{
	AddTimer("messdoor", 0.3f, "TimerMessDoor");
}
void TimerMessDoor(string &in asTimer)
{
	SetMessage("Ch02Level15", "LockedPerfect", 0);
}

void UseItemOnExtraDoor(string &in asItem, string &in asEntity)
{
	AddTimer(asItem, 0.3f, "TimerItemMessDoor");
}
void TimerItemMessDoor(string &in asTimer)
{
	if(asTimer == "glass_container_filled")
		SetMessage("Ch02Level15", "UseGlassFilledOnExtra", 0);
	else if(asTimer == "glass_container_1")
		SetMessage("Ch02Level15", "UseGlassOnExit", 0);
	else
		SetMessage("Ch02Level15", "UseItemMint", 0);
}

/*Always locked door
 */
void InteractAlwaysLocked(string &in asEntity)
{
	SetMessage("LevelDoors", "LockedForever", 0);
}

/*Help me Voice
 */
void CollideAreaHelpMe(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("help", "15_help", "AreaHelpMe_1", 0.0f, false);
	
	AddTimer("i", 0.3f, "TimerEee");
}	
void TimerEee(string &in asTimer)
{
	PlaySoundAtEntity("ii", "react_scare", "Player", 0.1f, false);
	
	GiveSanityDamage(10.0f, true);
}
//END MISC STUFF//
//////////////////


/////////////////////
//BEGIN ACID PUZZLE//
/*If player touches or jump up on the barrel he gets acid damage
 */
void CollideAcidDamage(string &in asParent, string &in asChild, int alState)
{
	InteractTouchAcid(asChild);
}
void InteractTouchAcid(string &in asEntity)
{
	PlaySoundAtEntity("acid_burn", "puzzle_acid", "Player", 0.2f, false);

	AddQuest("15Acid", "15Acid");
	
	AddTimer("acidmess", 0.3f, "TimerAcidDamageMess");
	AddTimer("acidmessoff", 1.5f, "TimerAcidDamageMess");
}	
void TimerAcidDamageMess(string &in asTimer)
{
	if(asTimer == "acidmessoff"){
		FadeRadialBlurTo(0, 0.1f);
		return;
	}
	
	SetMessage("Ch02Level15", "AcidBurnPlayer", 0);
	
	GivePlayerDamage(50.0f, "BloodSplat", false, false);
	
	FadeRadialBlurTo(0.1f, 1);
	SetRadialBlurStartDist(0.2f);
}

/*Using the empty bottle will fill it, all else will give error messages
 */
void UseBottle(string &in asItem, string &in asEntity)
{
	if(asItem == "glass_container_1"){
		PlaySoundAtEntity("fillbottle", "puzzle_acid_success", asEntity, 1.0f, false);
		
		RemoveItem(asItem);
		GiveItemFromFile("glass_container_filled", "glass_container_filled.ent");
		
		SetMessage("Ch02Level15", "AcidInJar", 0);
		
		GiveSanityBoostSmall();
		
		CompleteQuest("15Acid", "15Acid");
	} 
	else if(asItem == "glass_container_filled"){
		SetMessage("Ch02Level15", "AcidAlreadyInJar", 0);
	} 
	else SetMessage("Ch02Level15", "AcidWithItem", 0);
}

/*Just fun stuff - vaporize organic objects and hint on glass and metal objects
 */
void CollideAcidWater(string &in asParent, string &in asChild, int alState)
{
	if(StringContains(asParent, "glass_")){
		string sGlassVar = "used_"+asParent+"_on_acid";
		AddLocalVarInt(sGlassVar, 1);
		AddDebugMessage("Added 1 to var " + sGlassVar + ": " + GetLocalVarInt(sGlassVar), false);
		AddTimer("glass "+sGlassVar, 0.5f, "TimerVanishOA");
		return;
	} 
	
 	FadeLightTo("AcidLight", 0.0f, 1.0f, 0.4f, 1.0f, -1, 2.0f);
	
	PlaySoundAtEntity("burn"+asParent, "gameplay_acid_web", asChild, 1.0f, false);
	PlaySoundAtEntity("burn2"+asParent, "puzzle_acid", asChild, 0.0f, false);
	
	AddTimer(asParent, 1.0f, "TimerVanishOA");
	AddTimer("light", 1.5f, "TimerVanishOA");
}
void TimerVanishOA(string asTimer)
{
	AddQuest("15Acid", "15Acid");
	
	if(StringSub(asTimer, 0, 5) == "glass" && 
		GetLocalVarInt(StringSub(asTimer, 6, -1))==1){
		SetMessage("Ch02Level15", "AcidOnGlass", 0);
		return;
	} 
 	else if(asTimer == "light"){
		FadeLightTo("AcidLight", 0.0f, 0.0f, 0.0f, 0.0f, -1, 0.5f);
		return;
	} 
	else if(StringContains(asTimer, "plate_")){
		StopSound("burn"+asTimer, 1.0f);
		
		SetPropHealth(asTimer, 0.0f);
		return;
	} 
	else if(asTimer == "pot_1"){
		StopSound("burn"+asTimer, 1.0f);
		
		SetMessage("Ch02Level15", "AcidOnPot", 0);
		return;
	} 
	
 	SetPropActiveAndFade(asTimer, false, 1.0f);
	
	StopSound("burn"+asTimer, 1.0f);
}
//END ACID PUZZLE//
///////////////////


///////////////////
//BEGIN EXIT GATE//
/*Touch the exit gate or lock for quest and hint messages
 */
void InteractExitGate(string &in asEntity)
{
	AddTimer(asEntity, 0.3f, "TimerExitGate");
}
void TimerExitGate(string &in asTimer)
{
	if(asTimer== "padlock_rusty_1"){
		SetMessage("Ch02Level15", "IntRustyLock", 0);
		
	} 
	else if(asTimer== "padlock_acid_1"){
		SetMessage("Ch02Level15", "IntAcidLock", 0);
		
	} else {
		SetMessage("Ch02Level15", "IntExitGate", 0);
	} 
	
	AddQuest("15ExitGate", "15ExitGate");
}

/*Messages with hints for various use of items on exit gate/lock, 
**tear the lock on acid use, break it on hammer use after acid use
 */
void UseItemOnExit(string &in asItem, string &in asEntity)
{
	if(asItem == "glass_container_1")
		SetMessage("Ch02Level15", "UseGlassOnExit", 0);
	
	if(asItem == "handdrill")
		SetMessage("Ch02Level15", "UseDrillOnExit", 0);
	
	if(asItem == "glass_container_filled" && asEntity != "padlock_acid_1")
		TearLock();

	if(asItem == "glass_container_filled" && asEntity == "padlock_acid_1")
		SetMessage("Ch02Level15", "UseAcidOnAcidLock", 0);
	
	if(asItem == "stone_hammer_chipper"){
		if(GetLocalVarInt("AcidOnGate") == 0){
			SetMessage("Ch02Level15", "UseOnGateFail", 0);
			
		} else{
			  
			RemoveUseItemCallback("hce");
			RemoveUseItemCallback("hcp");
			RemoveUseItemCallback("hcpa");
			
			SetEntityActive("stone_hammer_move_1", true);

			AddTimer("hactive", 0.05f, "TimerActiveHammer");
			AddTimer("hdie", 0.25f, "TimerActiveHammer");
		}
	}
}

/*Using the acid will wear the lock some more
 */
void TearLock()
{
	if(GetLocalVarInt("AcidOnGate") == 1) return;
	
	RemoveItem("glass_container_filled");
	GiveItemFromFile("glass_container_1", "glass_container.ent");
	
	SetLocalVarInt("AcidOnGate", 1);
	
	FadeLightTo("PointLight_14", 0.0f, 1.0f, 0.3f, 1.0f, -1, 1);
	PlaySoundAtEntity("burnlock", "puzzle_acid", "prison_section_2", 1.0f, false);
	
	AddTimer("endLight", 1.0f, "TimerEndlight");
	
	SetPropActiveAndFade("padlock_rusty_1", false, 2.0f);
	SetPropActiveAndFade("padlock_acid_1", true, 1.0f);
}
void TimerEndlight(string &in asTimer)
{
	FadeLightTo("PointLight_14", 0.0f, 0.0f, 0.0f, 0.0f, -1, 1);
}

/*Complete the quest and break lock if all done properly
 */
void EntityCallBreakLock(string &in asEntity, string &in type)
{
	float fHuntTime = 1.0f + 1.5f;
	if(GetToughModeOn() >= 2)
		fHuntTime = 1.0f + 0.1f;
	else if(GetToughModeOn() >= 1)
		fHuntTime = 1.0f + 0.5f;
	
	PlaySoundAtEntity("break", "impact_metal_high", "stone_hammer_move_1", 0.0f, false);

	SetMoveObjectState("stone_hammer_move_1", 0.0f);
			
	SetSwingDoorLocked("prison_section_2",false, false);
	
	GiveSanityBoostSmall();
			
	CompleteQuest("15ExitGate", "15ExitGate");
			
	SetEntityPlayerInteractCallback("prison_section_2", "", false);
	
	AddTimer("removeh", 0.3f, "TimerRemoveHammer");
	
	AddTimer(GetStringWithExtraModesSuffix("servant_grunt_6"), 1.0f, "TimerStartGrunt");
	if(GetEasyModeOn() <= 0)
		AddTimer(GetStringWithExtraModesSuffix("servant_grunt_6"), fHuntTime, "TimerShowGrunt");
	
	CheckPoint("checkpoint3","PlayerStartArea_12","CPCall03", "", "");
}
void TimerActiveHammer(string &in asTimer)
{
	if(asTimer == "hdie"){
		SetPropHealth("padlock_acid_1", 0.0f);
		return;
	}
	
	PlaySoundAtEntity("swing", "player_crouch", "Player", 0.0f, false);
			
	SetMoveObjectState("stone_hammer_move_1", 0.2f);
}
void TimerRemoveHammer(string &in asTimer)
{
	SetEntityActive("stone_hammer_move_1", false);
}
void TimerStartGrunt(string &in asTimer)
{
	SetEntityActive(asTimer, true);
}
void TimerShowGrunt(string &in asTimer)
{
	ShowEnemyPlayerPosition(asTimer);
}
//END EXIT GATE//
/////////////////


//////////////////////////
//BEGIN ENEMY ENCOUNTERS//
/*When in kitchen a grunt is activated in the corridor outside
 */
void EntityCallPickGlass(string &in asEntity, string &in type)
{
	SetEntityActive("AreaKitchenGrunt", true);	//Grunt in kitchen will activate.
}
void CollideKitchenGrunt(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("EnemyActive") != 0) return;
	
	SetEntityActive(asChild, true);
	
	if(HasItem("glass_container_1")){ 
		SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_1"), true);
		
		CheckPoint("checkpoint1","PlayerStartArea_8","CPCall01", "", "");
		
		SetEntityActive(asChild, false);
	}
}
/*Enemy disables, only play sound if grunt disables at door*/
void CollideAreaGrunt1Exit(string &in asParent, string &in asChild, int alState)
{
	SetLocalVarInt(asParent, alState);
}
void EntityCallEnemyKitchen(string &in asEntity, string &in type)
{
	if(GetLocalVarInt(asEntity) != 1) return;
	
	PlaySoundAtEntity("doorleave", "open_door.snt", "cellar_wood01_4", 0.0f, false);
	
	AddTimer("close_door.snt", 1.5f, "TimerEnemyKitchenDoor");
}
void TimerEnemyKitchenDoor(string &in asTimer)
{
	PlaySoundAtEntity("doorleave", asTimer, "cellar_wood01_4", 0.0f, false);
}

/*When walking down the long corridor to the storage, a brute is seen far away
 */
void CollideCorridorBrute(string &in asParent, string &in asChild, int alState)
{
	if(asParent == "Player"){
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_1"), true);
		
		//To great risk of missing the trigger
		//SetEntityPlayerLookAtCallback("AreaCorridorBruteLook", "LookAtBrute", true);
		
		AddTimer("noticegrunt", 1.0f, "TimerNoticeGrunt");
		
		CheckPoint("checkpoint2","PlayerStartArea_9","CPCall02", "", "");
	}
	else {
		SetEntityActive(GetStringWithExtraModesSuffix("servant_brute_1"), false);
		
		PlayEnemySoundAtEntity("attack.snt", "AreaCorridorBruteDisable", "brute");
		PlaySoundAtEntity("bruteslam", "15_slam_door", "AreaCorridorBruteDisable", 0.5f, false);
		
		StartScreenShake(0.01f, 0.5f, 0.5f,1.0f);
	}
}
/*When seeing the brute, scare player and slow him down so brute event has time to finish
 */
void TimerNoticeGrunt(string &in asTimer)
{
	GiveSanityDamage(30.0f, true);
	
	FadeRadialBlurTo(0.1f, 1);
	SetRadialBlurStartDist(0.2f);
	
	SetPlayerMoveSpeedMul(0.8f);
	SetPlayerRunSpeedMul(0.8f);
	
	AddEntityCollideCallback("Player", "AreaCorridorServant_1", "CollideCorridorServant", false, 1);
	
	AddTimer("stepchange", 0.3f, "TimerPlayerSpeed");
}
/*When seeing the brute, scare player and slow him down so brute event has time to finish
 */
/* void LookAtBrute(string &in asEntity, int alState)
{
	GiveSanityDamage(30.0f, true);
	
	FadeRadialBlurTo(0.1f, 1);
	SetRadialBlurStartDist(0.2f);
	
	SetPlayerMoveSpeedMul(0.8f);
	SetPlayerRunSpeedMul(0.8f);
	
	AddEntityCollideCallback("Player", "AreaCorridorServant_1", "CollideCorridorServant", true, 1);
	
	AddTimer("stepchange", 0.3f, "TimerPlayerSpeed");
} */
void TimerPlayerSpeed(string &in asTimer)
{
	AddLocalVarInt("PlayerSpeed", 1);
	
	if(GetLocalVarInt("PlayerSpeed") < 8) AddTimer("stepchange", 0.5f, "TimerPlayerSpeed");
	
	switch(GetLocalVarInt("PlayerSpeed")){
		case 1:
			PlaySoundAtEntity("eee", "scare_whine_loop1", "Player", 2.0f, false);
			SetPlayerMoveSpeedMul(0.7f);
			SetPlayerRunSpeedMul(0.7f);
			PlaySoundAtEntity("ii", "react_scare", "Player", 0.1f, false);
		break;
		case 2:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
		break;
		case 3:
			SetPlayerMoveSpeedMul(0.4f);
			SetPlayerRunSpeedMul(0.4f);
			PlaySoundAtEntity("b1", "react_breath", "Player", 0.1f, false);
			RemoveTimer("stepchange");
			AddTimer("stepchange", 1.5f, "TimerPlayerSpeed");
		break;
		case 4:
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerRunSpeedMul(0.5f);
			PlaySoundAtEntity("b1", "react_breath", "Player", 0.1f, false);
			FadeRadialBlurTo(0.0f, 1);
			RemoveTimer("stepchange");
			AddTimer("stepchange", 1.0f, "TimerPlayerSpeed");
		break;
		case 5:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
			PlaySoundAtEntity("b2", "react_breath", "Player", 0.2f, false);
		break;
		case 6:
			SetPlayerMoveSpeedMul(0.7f);
			SetPlayerRunSpeedMul(0.7f);
		break;
		case 7:
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
			PlaySoundAtEntity("b3", "react_breath", "Player", 0.4f, false);
		break;
		case 8:
			SetPlayerMoveSpeedMul(1.0f);
			SetPlayerRunSpeedMul(1.0f);
			SetLocalVarInt("PlayerSpeed", 0);
		break;
	}
}

/*After having seen the brute and been in the storage corridor, a grunt is activated on the way back
 */
void CollideCorridorServant(string &in asParent, string &in asChild, int alState)
{
	string sEnemyName = GetStringWithExtraModesSuffix("servant_grunt_5");
	string sEnemyState = GetEnemyStateName(sEnemyName);
	if(asChild == "AreaCorridorServant_2"){
		if(GetLocalVarInt("GruntDoor") == 1)
		{
			if(StringContains(sEnemyState, "Hunt") == false && StringContains(sEnemyState, "Alert") == false && StringContains(sEnemyState, "Attack") == false && StringContains(sEnemyState, "Search") == false)
			{
				SetEntityActive(sEnemyName, false);
				FadeEnemyToSmoke(sEnemyName, false);
				EntityCallGruntDoor(sEnemyName, "OnAutoDisabled");
			}
			else
				return;
		}
		
		SetSwingDoorDisableAutoClose("prison_8", true);
		SetSwingDoorClosed("prison_8", false, false);
		
		AddPropImpulse("prison_8", 0, 0, -3, "World");
		
		SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_2"), true);
		SetLocalVarInt("GruntDoor", 1);
		
		SetEntityActive("AreaCorridorServant_2", false);
		
		CheckPoint("cp_wayback", "PlayerStartArea_6", "CPCallWayBack", "", "");
		if(GetToughModeOn() >= 1)		AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_grunt_2"));
	}
	else if(asChild == "AreaCorridorServant_1"){
		AddEntityCollideCallback("Player", "AreaCorridorServant_2", "CollideCorridorServant", false, 1);
		
		SetEntityActive("AreaCorridorServant_1", false);
	}
}
void EntityCallCorridorServant(string &in asEntity, string &in type)
{
	//SetLocalVarInt("GruntDoor", 0);	//Doing this no good, as player can be in room and know it is empty
	
	AddDebugMessage("Corridor Servant Disabled", false);
}

void ResetDoorIfBroken(string asDoor)
{
	if(GetPropHealth(asDoor) <= 0.0f)
	{
		ResetProp(asDoor);
	}
}

void CPCallWayBack(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("prison_5");
	ResetDoorIfBroken("prison_7");
	ResetDoorIfBroken("prison_8");
	ResetDoorIfBroken("prison_9");
	ResetDoorIfBroken("prison_10");
	ResetDoorIfBroken("prison_11");
	ResetDoorIfBroken("prison_12");
	ResetDoorIfBroken("prison_section_2");
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
	
	SetSwingDoorClosed("prison_8", true, false);
	
	SetLocalVarInt("GruntDoor", 0);	//The grunt in double prison can activate again, regardless if he has before or not.
}


/*After picking diary in west wing 3 rooms corridor, grunt activates on way back
 */
void EntityCallPickDiary(string &in asEntity, string &in type)
{
	if(asEntity == "diary_paper01_1") SetEntityActive("AreaNoteGrunt", true);	
	
	AddLocalVarInt("DiaryMusic", 1);
	
	PlayMusic("15_paper_daniel0"+GetLocalVarInt("DiaryMusic"), false, 0.85f, 0.0f, 10, false);
}
void CollideAreaNoteGrunt(string &in asParent, string &in asChild, int alState)
{
	if(GetEasyModeOn() <= 1)
	{
		SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_4"), true);
	}
	
	CheckPoint("grunt_4", "PlayerStartArea_14", "CPCallGrunt4", "", "");
}
void CPCallGrunt4(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("prison_5");
	ResetDoorIfBroken("prison_7");
	ResetDoorIfBroken("prison_8");
	ResetDoorIfBroken("prison_9");
	ResetDoorIfBroken("prison_10");
	ResetDoorIfBroken("prison_11");
	ResetDoorIfBroken("prison_12");
	ResetDoorIfBroken("prison_section_2");
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
	SetEntityActive("cp4_rat_*", true);
	AddTimer("cp4", 4.0f, "TimerCP4Rat");
}
void TimerCP4Rat(string &in asTimer)
{
	SetPropActiveAndFade("cp4_rat_*", false, 3.0f);
}
//END ENEMY ENCOUNTERS//
////////////////////////


///////////////////
//BEGIN CP EVENTS//
/*If dying after the grunt in kitches has been activated
 */
void CPCall01(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("prison_5");
	ResetDoorIfBroken("prison_7");
	ResetDoorIfBroken("prison_8");
	ResetDoorIfBroken("prison_9");
	ResetDoorIfBroken("prison_10");
	ResetDoorIfBroken("prison_11");
	ResetDoorIfBroken("prison_12");
	ResetDoorIfBroken("prison_section_2");
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
	SetPlayerCrouching(true);
	
	SetPropActiveAndFade("slime_*", true, 4.0f);
	
	SetEntityActive("SlimeDamageArea_3", true);
	SetEntityActive("SlimeDamageArea_4", true);

	for(int i=1;i<7;i++) CreateParticleSystemAtEntity("slimeps"+i, "ps_slime_fog", "AreaPS_"+i, true);
	for(int i=1;i<6;i++) FadeLightTo("LightSiime_"+i, 0.2f, 0.04f, 0.08f, 1.0f, -1, 4.0f);
	
	PlaySoundAtEntity("slimes1", "slime_loop", "AreaPS_1", 4.0f, true);
	PlaySoundAtEntity("slimes3", "slime_loop", "AreaPS_3", 4.0f, true);
	PlaySoundAtEntity("slimes5", "slime_loop", "AreaPS_5", 4.0f, true);
	PlaySoundAtEntity("guard", "guardian_activated.snt", "Player", 1.5f, false);
	
	AddTimer("splat", 0.4f, "TimerSplat");
	AddTimer("loop", 1.0f, "TimerLoopSlime");
	
	SetLocalVarInt("SlimeRemove", 1);
}
void TimerSplat(string &in asTimer)
{
	AddLocalVarInt("Splat", 1);

	PlaySoundAtEntity("splat"+GetGlobalVarInt("Splat"), "slime_create", "Player", RandFloat(0.1f, 0.3f), false);

	if(GetLocalVarInt("Splat") <= 6) AddTimer("splat", RandFloat(0.2f, 0.8f), "TimerSplat");
}
void TimerLoopSlime(string &in asTimer)
{
	if(asTimer == "loops"){ 
		StopSound("loops", 4.0f);
		StopSound("loops2", 4.0f);
		PlaySoundAtEntity("breath", "react_breath", "Player", 0.6f, false);
		FadePlayerFOVMulTo(1.0f, 0.3f);
		FadeRadialBlurTo(0, 0.1f);
		return;
	}
	
	PlaySoundAtEntity("loops", "general_rock_rumble_no3d", "Player", 10.0f, false);
	PlaySoundAtEntity("loops2", "15_cloud_swarm", "Player", 8.0f, false);
	PlaySoundAtEntity("loops2", "15_cloud", "Player", 7.0f, false);
	
	FadePlayerFOVMulTo(0.5f, 0.1f);
	
	FadeRadialBlurTo(0.1f, 0.025f);
	SetRadialBlurStartDist(0.2f);
	
	StartScreenShake(0.01f, 1.0f, 2.0f,3.0f);
	
	AddTimer("loop", 10.0f, "TimerLoopSlime");
	AddTimer("loops", 4.0f, "TimerLoopSlime");
}
void CollideAreaRemoveSlime(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("SlimeRemove") != 1) return;
	
	//SetPropActiveAndFade("slime_*", false, 1.0f);
	
	//for(int i=1;i<7;i++) DestroyParticleSystem("slimeps"+i);
	//for(int i=1;i<6;i++) FadeLightTo("LightSiime_"+i, 0, 0, 0, 0, -1, 1.0f);
	
	//StopSound("slimes1", 1.0f); StopSound("slimes3", 1.0f); StopSound("slimes5", 1.0f);
	StopSound("loops", 1.0f); StopSound("loops2", 1.0f);
	
	RemoveTimer("loop"); RemoveTimer("loops");

	PlaySoundAtEntity("breath", "react_scare", "Player", 0.6f, false);
	PlaySoundAtEntity("breath", "react_breath", "Player", 0.6f, false);
	//PlaySoundAtEntity("crak", "sanity_flick", "Player", 0.0f, false);
	
	FadePlayerFOVMulTo(1.0f, 1.0f);
	FadeRadialBlurTo(0, 1.0f);
		
	//StartScreenShake(0.1f, 0.1f, 0.0f, 0.0f);

	//AddTimer("shake", 0.3f, "TimerSlimeEnd");
	
	AddLocalVarInt("SlimeRemove", 1);
}
void TimerSlimeEnd(string &in asTimer)
{
	StartScreenShake(0.1f, 0.1f, 0.1f, 0.0f);
	
	PlaySoundAtEntity("crak", "sanity_flick", "Player", 0.2f, false);
}

/*If dying after the second grunt has been activated
 */
void CPCall02(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("prison_5");
	ResetDoorIfBroken("prison_7");
	ResetDoorIfBroken("prison_8");
	ResetDoorIfBroken("prison_9");
	ResetDoorIfBroken("prison_10");
	ResetDoorIfBroken("prison_11");
	ResetDoorIfBroken("prison_12");
	ResetDoorIfBroken("prison_section_2");
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
	if(GetGlobalVarInt("15CPEvent") == 0){
		SetPlayerCrouching(true);
	
		StartPlayerLookAt("AreaLookCP", 4.0f, 4.0f, "");
	
		SetPlayerMoveSpeedMul(0.2f);
		SetPlayerRunSpeedMul(0.2f);
		SetPlayerLookSpeedMul(0.2f);
	
		AddTimer("1", 0.5f, "TimerCPEvent");
		AddTimer("2", 3.0f, "TimerCPEvent");
		AddTimer("3", 3.8f, "TimerCPEvent");
		AddTimer("4", 4.0f, "TimerCPEvent");
		AddTimer("5", 4.5f, "TimerCPEvent");
	} else {
		SetPlayerCrouching(false);
		
		PlaySoundAtEntity("guard", "guardian_activated.snt", "Player", 1.0f, false);
	
		TeleportPlayer("PlayerStartArea_10");
		
		StartPlayerLookAt("AreaLookCP02", 4.0f, 4.0f, "");
		
		SetSwingDoorLocked("prison_8", true, false);
		
		AddTimer("1", 0.5f, "TimerCP02Event");
		
		PlaySoundAtEntity("slime1", "slime_loop_no3d", "Player", 1.0f, false);
		PlaySoundAtEntity("slime2", "slime_loop", "slime02_1", 1.0f, false);
		PlaySoundAtEntity("slime3", "slime_loop", "slime02_5", 1.0f, false);
		PlaySoundAtEntity("swarm", "15_cloud", "Player", 10.0f, false);
		
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
		
		SetEntityActive("SlimeDamageArea_1", true);
		SetEntityActive("SlimeDamageArea_2", true);
		
		SetPropActiveAndFade("slime02_*", true, 4.0f);
		
		SetGlobalVarInt("15CPEvent", 0);
	}
}

/*For version1 of CP02
 */
void TimerCPEvent(string &in asTimer)
{
	if(asTimer == "1"){
		SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_3"), true);
		StopPlayerLookAt();
	}	
	else if(asTimer == "2"){
		SetPlayerMoveSpeedMul(0.4f);
		SetPlayerRunSpeedMul(0.4f);
		SetPlayerLookSpeedMul(0.4f);
	}
	else if(asTimer == "3"){
		StartScreenShake(0.1f, 0.1f, 0.1f, 0.1f);
		PlaySoundAtEntity("flick1", "sanity_flick.snt", "Player", 0.0f, false);
		FadeLightTo("CPLight", 1, 1, 1, 1, -1, 0.1);
		AddTimer("lightoff", 0.2f, "TimerLightOff");
		SetPlayerMoveSpeedMul(0.6f);
		SetPlayerRunSpeedMul(0.6f);
		SetPlayerLookSpeedMul(0.6f);
	}
	else if(asTimer == "4"){
		FadeLightTo("CPLight", 1, 1, 1, 1, -1, 0.1);
		AddTimer("lightoff", 0.2f, "TimerLightOff");
		StartScreenShake(0.3f, 0.1f, 0.1f, 0.1f);
		PlaySoundAtEntity("flick1", "sanity_flick.snt", "Player", 0.0f, false);
		SetPlayerMoveSpeedMul(0.7f);
		SetPlayerRunSpeedMul(0.7f);
		SetPlayerLookSpeedMul(0.7f);
		FadeGlobalSoundVolume(0.0f, 0.5f);
	}
	else if(asTimer == "5"){
		PlaySoundAtEntity("aa", "react_scare.snt", "Player", 0.5f, false);
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		FadeGlobalSoundVolume(1.0f, 10.0f);
	}
}
void TimerLightOff(string &in asTimer)
{
	FadeLightTo("CPLight", 0, 0, 0, 1, -1, 0.1f);
}

/*For version2 of CP02
 */
void LookAtPrisonDoor(string &in asEntity, int alState)
{
	AddTimer("2", 0.1f, "TimerCP02Event");
	AddTimer("3", 2.2f, "TimerCP02Event");
	AddTimer("4", 2.5f, "TimerCP02Event");
	AddTimer("5", 2.7f, "TimerCP02Event");
}
void TimerCP02Event(string &in asTimer)
{
	if(asTimer == "1"){
		StopPlayerLookAt();
		SetEntityPlayerLookAtCallback("prison_8", "LookAtPrisonDoor", true);
	}
	else if(asTimer == "2"){
		PlaySoundAtEntity("eeek", "scare_whine_loop3", "Player", 2.0f, false);
		PlaySoundAtEntity("guardian", "guardian_distant3", "Player", 0.0f, false);
	}
	else if(asTimer == "3"){
		SetSwingDoorLocked("prison_8", false, false);
		StartScreenShake(0.1f, 0.1f, 0.1f, 0.1f);
		PlaySoundAtEntity("flick1", "sanity_flick.snt", "Player", 0.0f, false);
		FadeLightTo("CPLight02", 1, 1, 1, 1, -1, 0.1);
		AddTimer("lightoff", 0.2f, "TimerLightOff02");
	}	
	else if(asTimer == "4"){
		FadeLightTo("CPLight02", 1, 1, 1, 1, -1, 0.1);
		AddTimer("lightoff", 0.2f, "TimerLightOff02");
		StartScreenShake(0.3f, 0.1f, 0.1f, 0.1f);
		PlaySoundAtEntity("flick1", "sanity_flick.snt", "Player", 0.0f, false);
		FadeRadialBlurTo(0.0f, 0.1f);
		StopSound("slime1", 0.4f); StopSound("slime2", 0.4f); StopSound("slime3", 0.4f);
		StopSound("eeek", 0.4f);
		StopSound("guardian", 0.4f);
		StopSound("swarm", 0.4f);
		SetPropActiveAndFade("slime02_*", false, 0.8f);
	}
	else if(asTimer == "5"){
		PlaySoundAtEntity("aa", "react_scare.snt", "Player", 0.5f, false);
		GiveSanityDamage(10.0f, true);
	}
}
void TimerLightOff02(string &in asTimer)
{
	FadeLightTo("CPLight02", 0, 0, 0, 1, -1, 0.1f);
}

/*For the Grunt after picking Diary
 */
void CPCall03(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("prison_5");
	ResetDoorIfBroken("prison_7");
	ResetDoorIfBroken("prison_8");
	ResetDoorIfBroken("prison_9");
	ResetDoorIfBroken("prison_10");
	ResetDoorIfBroken("prison_11");
	ResetDoorIfBroken("prison_12");
	ResetDoorIfBroken("prison_section_2");
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
	
	SetEntityActive("torch_cp_*", true);
	SetEntityActive("torch_empty_*", false);
	
	SetLampLit("torch_cp_*", true, false);
	
	SetEntityActive("AreaCP03", true);
	
	SetEntityActive("AreaDarkSteps", false);	//No dark sneaky steps as this area is now lit and comfy (except the 3 grunts of course, but they enjoy a nice cup of tea too. honest.)
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_7"), "PathNodeArea_197", 5.0f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_7"), "PathNodeArea_94", 1.0f, "");
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_8"), "PathNodeArea_198", 15.0f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_8"), "PathNodeArea_102", 1.0f, "");
	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_7"), true);
	SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_8"), true);
	
	SetLampLit("torch_static01_17", true, true);
	SetLampLit("torch_static01_18", true, true);
	
	ResetProp("prison_section_static_2"); 
	ResetProp("padlock_2");
	ResetProp("padlock_2_replace");
}
void CollideAreaCP03(string &in asParent, string &in asChild, int alState)
{
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_9"), "PathNodeArea_119", GetEnemyIdleTime(3.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_9"), "PathNodeArea_132", 1.0f, "");
	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_9"), true);
	
	PlaySoundAtEntity("door_open", "15_open_door", "cellar_wood01_2", 0.0f, false);
}
//END CP EVENTS//
/////////////////


/////////////////////
//BEGIN TUNNEL DUST//
/*Some shaking and dust falling in the tunnel at Start
 */
void TimerTunnelDust(string &in asTimer)
{
	CreateParticleSystemAtEntity("dustyfally", "ps_debris_tunnel.ps", "AreaDustFall_"+RandInt(1,7), false);
	PlaySoundAtEntity("dustynoise", "03_rock_move.snt", "Player", 2.0f, false);
	
	AddTimer("stoprsound", 1, "TimerStopTunnelDust");
	
	AddTimer(asTimer, RandFloat(3.0f, 7.0f), asTimer);
	
	StartScreenShake(0.003f, 0.2f, 1.0f, 1.0f);
}
void TimerStopTunnelDust(string &in asTimer)
{
	StopSound("dustynoise", 4.0f);
	
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
}
/*When exiting the tunnel, stop the effect*/
void CollideAreaRemoveDust(string &in asParent, string &in asChild, int alState)
{
	RemoveTimer("TimerTunnelDust");
}

/*Stop the look at for the start of the game*/
void LookAtIntro(string &in asTimer)
{
	StopPlayerLookAt();
}
//END TUNNEL DUST//
///////////////////


//BEGIN KITCHEN FIRE//
void CollideAreaFire(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1) AddTimer("burn", 0.1f, "TimerBurnFire");
	else RemoveTimer("burn");
}
void InteractFire(string &in asEntity)
{
	TimerBurnFire("touch");
}
void TimerInteractFire(string &in asTimer)
{
	SetEntityPlayerInteractCallback("AreaFire", "InteractFire", true);
}
void TimerBurnFire(string &in asTimer)
{
	if(asTimer == "touch"){
		PlayGuiSound("15_player_burn.snt", 1.0f);
		GivePlayerDamage(5.0f, "BloodSplat", false,false);
		AddTimer("InteractFire", 1.0f, "TimerInteractFire");
		return;
	}
	
	PlayGuiSound("15_player_burn.snt", 1.0f);
	GivePlayerDamage(5.0f, "BloodSplat", false,false);
	
	AddTimer("burn", 1.0f, "TimerBurnFire");
}
//END KITCHEN FIRE//


//BEGIN BANG HEAD//
void CollideAreaBodyFallActivate(string &in asParent, string &in asChild, int alState)
{
	RemoveTimer("TimerBangHead");
	PlaySoundAtEntity("AreaBodyFallBang", "15_bang_fall.snt", "AreaBodyFall", 0.0f, false);
}
void TimerBangHead(string &in asTimer)
{
	PlaySoundAtEntity("AreaBodyFallBang", "15_bang.snt", "AreaBodyFall", 0.0f, false);
	AddTimer("TimerBangHead", RandFloat(4.0,6.0), "TimerBangHead");
}
//END BANG HEAD//


//Prison gate - break padlock then gate breaks
void EntityCallPrisonGate(string &in asEntity, string &in type)
{
	if(type == "Break")
	{
		if(QuestIsCompleted("15ExitGate") == true)
		{
			return;
		}
		else
		{
			ResetProp(asEntity);
		}
	}
	
	//SetEntityActive("padlock_2", false);
	//SetEntityActive("padlock_2_replace", true);
}


/////////////////
//Grunt in double cell
void InteractGruntDoor(string &in asEntity)
{
	if(GetLocalVarInt("GruntDoor") == 1) return;	//If player went to storage, this event will be cancled
	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_5"), true);
	SetLocalVarInt("GruntDoor", 1);
	
	SetEntityPlayerInteractCallback(asEntity, "", true);
	
	CheckPoint("cp_gruntdoor", "PlayerStartArea_9", "CPCallGruntDoor", "", "");
	
	AddTimer("scare", 2.5f, "TimerPlayerreact");
	AddTimer("breath", 4.0f, "TimerPlayerreact");
	AddTimer("breathl", 6.0f, "TimerPlayerreact");
	
	if(GetToughModeOn() >= 2)
	{
		AddTimer(GetStringWithExtraModesSuffix("servant_grunt_5"), 2.5f, "ShowEnemyPlayerPosition");
	}
	else
	if(GetToughModeOn() >= 1)
	{
		AddTimer(GetStringWithExtraModesSuffix("servant_grunt_5"), 2.5f, "AlertEnemyOfPlayerPresence");
	}
}
void TimerPlayerreact(string &in asTimer)
{
	if(asTimer == "breathl")
		PlayGuiSound("react_"+asTimer, 0.4f);
	else
		PlayGuiSound("react_"+asTimer, 0.7f);
		
	if(asTimer == "scare")
		GiveSanityDamage(10.0f, true);
}
void EntityCallGruntDoor(string &in asEntity, string &in type)
{
	SetLocalVarInt("GruntDoor", 0);
	
	AddDebugMessage("Grunt Door Gone", false);
}
void CPCallGruntDoor(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("prison_5");
	ResetDoorIfBroken("prison_7");
	ResetDoorIfBroken("prison_8");
	ResetDoorIfBroken("prison_9");
	ResetDoorIfBroken("prison_10");
	ResetDoorIfBroken("prison_11");
	ResetDoorIfBroken("prison_12");
	ResetDoorIfBroken("prison_section_2");
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
	
	SetLocalVarInt("GruntDoor", 0);
	SetPlayerCrouching(true);
	PlayEnemySoundAtEntity("giveup.snt", "AreaLookCP_1", "grunt");
	AddTimer("sound2", 2.0f, "TimerCPGruntDoor");
}
void TimerCPGruntDoor(string &in asTimer)
{
	PlayEnemySoundAtEntity("idle_extra.snt", "AreaLookCP_1", "grunt");
}


////////////////////
//Dark echo steps
void CollideAreaDarkSteps(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1){
		AddTimer("dark_step", RandFloat(0.0f, 1.5f), "TimerDarkSteps");
	}
	else{
		RemoveTimer("dark_step");
		PlayGuiSound("step_sneak_hard_water.snt", 0.9f);
	}
}
//Play steps at various speed and volume depending on movement of player
void TimerDarkSteps(string &in asTimer)
{
	if(GetPlayerSpeed() > 3){
		AddTimer("dark_step", 0.5f, "TimerDarkSteps");
		
		PlayGuiSound("step_run_hard_water.snt", 0.3f);
		SetLocalVarInt("StopStep", 0);
		
		AddDebugMessage("Speed High", false);
	}
	if(GetPlayerSpeed() > 2 && GetPlayerSpeed() < 3){
		AddTimer("dark_step", 0.7f, "TimerDarkSteps");
		
		PlayGuiSound("step_walk_hard_water.snt", 0.4f);
		SetLocalVarInt("StopStep", 0);
		
		AddDebugMessage("Speed Med", false);
	}
	if(GetPlayerSpeed() > 1 && GetPlayerSpeed() < 2){
		AddTimer("dark_step", 0.9f, "TimerDarkSteps");
		
		PlayGuiSound("step_sneak_hard_water.snt", 0.8f);
		SetLocalVarInt("StopStep", 0);
		
		AddDebugMessage("Speed Low", false);
	}
	if(GetPlayerSpeed() < 1){
		AddTimer("dark_step", 1.0f, "TimerDarkSteps");
		
		if(GetLocalVarInt("StopStep") != 0) return;
		
		PlayGuiSound("step_sneak_hard_water.snt", 1.0f);
		SetLocalVarInt("StopStep", 1);
		
		AddDebugMessage("Speed Silent", false);
	}
}

///////////////////
//Enemy at Start
void CollideAreaACStart(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaAroundCorner_1", true);
	SetEntityActive("AreaAroundCorner_2", true);
}
void CollideAreaAroundCorner(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("GruntDoor") == 1 || GetEasyModeOn() >= 2) return;	//If any of the grunts from the corridor to storage is active, skip this.
	
	SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_10"), true);
	if(GetToughModeOn() >= 2)	ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("servant_grunt_10"));
	else if(GetToughModeOn() >= 1)	AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_grunt_10"));
	
	AddTimer("scare", 1.0f, "TimerPlayerreact");
	AddTimer("breath", 3.0f, "TimerPlayerreact");
	AddTimer("breathl", 5.0f, "TimerPlayerreact");
	
	SetEntityActive("AreaAroundCorner_1", false);
	SetEntityActive("AreaAroundCorner_2", false);
	SetEntityActive("AreaACStart_1", false);
	SetEntityActive("AreaACStart_2", false);
	
	SetLocalVarInt("EnemyActive", 1);
	
	CheckPoint("cp_start", "PlayerStartArea_13", "CPCallStartGrunt", "", "");
}
void EntityCallEnemyRemoved(string &in asEntity, string &in type)
{
	SetLocalVarInt("EnemyActive", 0);
	
	AddDebugMessage("Removed AroundCorner Grunt", false);
}
void CPCallStartGrunt(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("prison_5");
	ResetDoorIfBroken("prison_7");
	ResetDoorIfBroken("prison_8");
	ResetDoorIfBroken("prison_9");
	ResetDoorIfBroken("prison_10");
	ResetDoorIfBroken("prison_11");
	ResetDoorIfBroken("prison_12");
	ResetDoorIfBroken("prison_section_2");
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
	
	SetEntityActive("AreaCPStart", true);
	AddEntityCollideCallback("Player", "AreaCPStart", "CollideAreaCPStart", true, 1);
	SetLocalVarInt("EnemyActive", 0);
}
void CollideAreaCPStart(string &in asParent, string &in asChild, int alState)
{
	AddPropImpulse("cellar_wood01_4", 4.0f, 0.0f, 0.0f, "World");
	
	CreateParticleSystemAtEntity("pscp", "ps_hit_wood.ps", "cellar_wood01_4", false);
	PlaySoundAtEntity("scp", "impact_wood_heavy_high.snt", "cellar_wood01_4", 0.0f, false);
	PlayEnemySoundAtEntity("attack.snt", "cellar_wood01_4", "grunt");
	PlayEnemySoundAtEntity("hunt.snt", "cellar_wood01_4", "grunt");
	
	AddTimer("bang1", 0.8f, "TimerCPStart");
	AddTimer("bang2", 1.2f, "TimerCPStart");
	
	AddTimer("scare", 0.5f, "TimerPlayerreact");
	AddTimer("breath", 2.5f, "TimerPlayerreact");
	AddTimer("breathl", 4.5f, "TimerPlayerreact");
}
void TimerCPStart(string &in asTimer)
{
	CreateParticleSystemAtEntity("pscp", "ps_hit_wood.ps", "cellar_wood01_4", false);
	PlaySoundAtEntity("scp", "impact_wood_heavy_high.snt", "cellar_wood01_4", 0.0f, false);
}

/////////////////////
//Enemy in the long dead end
void CollideAreaLongCorridorGrunt(string &in asParent, string &in asChild, int alState)
{
	if(GetEasyModeOn() <= 1)
	{
		SetEntityActive(GetStringWithExtraModesSuffix("servant_grunt_11"), true);
	}
	
	CheckPoint("cp_corridor", "PlayerStartArea_12", "CPCallLongCorridor", "", "");
}
void CPCallLongCorridor(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("prison_5");
	ResetDoorIfBroken("prison_7");
	ResetDoorIfBroken("prison_8");
	ResetDoorIfBroken("prison_9");
	ResetDoorIfBroken("prison_10");
	ResetDoorIfBroken("prison_11");
	ResetDoorIfBroken("prison_12");
	ResetDoorIfBroken("prison_section_2");
	PlayMusic("04_amb.ogg", true, 0.9f, 4.0f, 0, true);
	
	SetEntityActive("AreaLongCP", true);
	SetEntityActive("AreaLongCP_1", true);
	
	AddEntityCollideCallback("Player", "AreaLongCP", "CollideAreaLongCP", true, 1);
	AddEntityCollideCallback("Player", "AreaLongCP_1", "CollideAreaLongCP", true, 1);
	
	SetEntityActive("cp_roach_*", true);
}
void CollideAreaLongCP(string &in asParent, string &in asChild, int alState)
{
	SetPropActiveAndFade("cp_roach_*", false, 5.0f);
	
	SetEntityActive("AreaLongCP_1", false);
	SetEntityActive("AreaLongCP", false);
}

//Interqact on door to activate Vision
void InteractVisionDoor(string &in asEntity)
{
	SetEntityActive("FlashbackArea_1", true);
}

void CollideAreaCheckSuitorSound(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1)
		AddTimer("suitor", 2.5f, "TimerSuitorSound");
	else
		RemoveTimer("suitor");
}

void TimerSuitorSound(string &in asTimer)
{
	int lRand = RandInt(8, 16);
	
	if(lRand <= 12)
	{
		PlayEnemySoundAtEntity("giveup.snt", "AreaSuitorSound", "suitor");
	}
	else
	{
		PlayEnemySoundAtEntity("alert.snt", "AreaSuitorSound", "suitor");
	}

	PlayGuiSound("general_chain_rattle_single.snt", RandFloat(0.1f, 0.3f));
	AddTimer("suitor", lRand, "TimerSuitorSound");
	
	if(GetToughModeOn() >= 1)
	{
		GiveSanityDamage(2.0f, false);
		
		if(GetToughModeOn() >= 2)
		{
			AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_grunt_4"));
			AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("servant_grunt_5"));
		}
	}
}

////////////////////////////
// Run first time starting map
void OnStart()
{
	for(int i=0; i<gvsDangerousLampsArray.length(); i++)
	{
		SetEntityCallbackFunc(gvsDangerousLampsArray[i], "OnLampStateChange");
	}
	
	SetMapDisplayNameEntry("PrisonNorth");
	
	SetPlayerCrouching(true);
	
	//---- COLLIDE CALLBACKS ----//
	AddEntityCollideCallback("Player", "AlexanderArea", "CollideAlexanderArea", false, 0);
	AddEntityCollideCallback("Player", "FlashbackArea_1", "CollideNoAlex", true, 1);
	AddEntityCollideCallback("Player", "AcidDamage", "CollideAcidDamage", false, 1);
	AddEntityCollideCallback("Player", "AreaKitchenGrunt", "CollideKitchenGrunt", false, 1);
	AddEntityCollideCallback("Player", "AreaCorridorBrute", "CollideCorridorBrute", true, 1);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_brute_1"), "AreaCorridorBruteDisable", "CollideCorridorBrute", true, 1);
	
	AddEntityCollideCallback("Player", "AreaHelpMe", "CollideAreaHelpMe", true, 1);
	
	for(int i=1;i<=44;i++)
		AddEntityCollideCallback("object_"+i, "AcidArea", "CollideAcidWater", true, 1);
	
	for(int i=1;i<=5;i++)
		AddEntityCollideCallback("plate_"+i, "AcidArea", "CollideAcidWater", true, 1);
	
	AddEntityCollideCallback("pot_1", "AcidArea", "CollideAcidWater", false, 1);
	
	for(int i=1;i<=5;i++)
		AddEntityCollideCallback("glass_"+i, "AcidArea", "CollideAcidWater", false, 1);
	
	AddEntityCollideCallback("Player", "AreaRemoveSlime", "CollideAreaRemoveSlime", false, 1);
	AddEntityCollideCallback("Player", "AreaNoteGrunt", "CollideAreaNoteGrunt", true, 1);
	
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_grunt_1"), "AreaGrunt1Exit", "CollideAreaGrunt1Exit", false, 0);
	AddEntityCollideCallback(GetStringWithExtraModesSuffix("servant_grunt_10"), "AreaGrunt1Exit", "CollideAreaGrunt1Exit", false, 0);
	
	AddEntityCollideCallback("Player", "AreaRemoveDust", "CollideAreaRemoveDust", true, 1);
	
	AddEntityCollideCallback("Player", "AreaFire", "CollideAreaFire", false, 0);
	
	AddEntityCollideCallback("Player", "AreaBodyFallActivate", "CollideAreaBodyFallActivate", true, 1);
	
	AddEntityCollideCallback("Player", "AreaCP03", "CollideAreaCP03", true, 1);
	
	AddEntityCollideCallback("Player", "AreaDarkSteps", "CollideAreaDarkSteps", false, 0);
	
	AddEntityCollideCallback("Player", "AreaAroundCorner_1", "CollideAreaAroundCorner", true, 1);
	AddEntityCollideCallback("Player", "AreaAroundCorner_2", "CollideAreaAroundCorner", true, 1);
	AddEntityCollideCallback("Player", "AreaACStart_1", "CollideAreaACStart", true, 1);
	AddEntityCollideCallback("Player", "AreaACStart_2", "CollideAreaACStart", true, 1);
	
	AddEntityCollideCallback("Player", "AreaLongCorridorGrunt", "CollideAreaLongCorridorGrunt", true, 1);
	
	AddEntityCollideCallback("Player", "AreaCheckSuitorSound", "CollideAreaCheckSuitorSound", false, 0);
	
	//---- INTERACT CALLBACKS ----//
	AddUseItemCallback("bottleEcon", "glass_container_1", "acid_container_1", "UseBottle", true);
	AddUseItemCallback("bottleFcon", "glass_container_filled", "acid_container_1", "UseBottle", false);
	AddUseItemCallback("hammerchipperFcon", "stone_hammer_chipper", "acid_container_1", "UseBottle", false);
	AddUseItemCallback("drillFcon", "handdrill", "acid_container_1", "UseBottle", false);
	
	AddUseItemCallback("hce", "stone_hammer_chipper", "prison_section_2", "UseItemOnExit", false);
	AddUseItemCallback("hcp", "stone_hammer_chipper", "padlock_rusty_1", "UseItemOnExit", false);
	AddUseItemCallback("hde", "handdrill", "prison_section_2", "UseItemOnExit", false);
	AddUseItemCallback("hdp", "handdrill", "padlock_rusty_1", "UseItemOnExit", false);
	AddUseItemCallback("gce", "glass_container_1", "prison_section_2", "UseItemOnExit", false);
	AddUseItemCallback("gcp", "glass_container_1", "padlock_rusty_1", "UseItemOnExit", false);
	AddUseItemCallback("gcfe", "glass_container_filled", "prison_section_2", "UseItemOnExit", false);
	AddUseItemCallback("gcfpa", "glass_container_filled", "padlock_rusty_1", "UseItemOnExit", false);
	AddUseItemCallback("gcfpa", "glass_container_filled", "padlock_acid_1", "UseItemOnExit", false);
	AddUseItemCallback("gcpa", "glass_container_1", "padlock_acid_1", "UseItemOnExit", false);
	AddUseItemCallback("hdpa", "handdrill", "padlock_acid_1", "UseItemOnExit", false);
	AddUseItemCallback("hcpa", "stone_hammer_chipper", "padlock_acid_1", "UseItemOnExit", false);
	
	for(int i=1;i<=2;i++){
		AddUseItemCallback("hce", "stone_hammer_chipper", "prison_section_static_"+i, "UseItemOnExtraDoor", false);
		AddUseItemCallback("hcp", "stone_hammer_chipper", "padlock_"+i, "UseItemOnExtraDoor", false);
		AddUseItemCallback("hde", "handdrill", "prison_section_static_"+i, "UseItemOnExtraDoor", false);
		AddUseItemCallback("hdp", "handdrill", "padlock_"+i, "UseItemOnExtraDoor", false);
		AddUseItemCallback("gce", "glass_container_1", "prison_section_static_"+i, "UseItemOnExtraDoor", false);
		AddUseItemCallback("gcp", "glass_container_1", "padlock_"+i, "UseItemOnExtraDoor", false);
		AddUseItemCallback("gcfe", "glass_container_filled", "prison_section_static_"+i, "UseItemOnExtraDoor", false);
		AddUseItemCallback("gcfp", "glass_container_filled", "padlock_"+i, "UseItemOnExtraDoor", false);
	}
	
	
	//---- ENEMY PATROLS ----//
	/*Kitchen enemy
	 */
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_3", 0, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_29", 0, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_32", GetEnemyIdleTime(2.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_41", 0, "");
	if(GetToughModeOn() >= 1)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_42", 0.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_39", 0.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_40", 0.5f, "");
	}
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_29", 0, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_3", 0, "");
	
	if(GetEasyModeOn() <= 0)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_9", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_72", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_77", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_80", GetEnemyIdleTime(2.0f), "");
	}
	
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_1"), "PathNodeArea_46", 1.0f, "");
	
	/*Corridor Brute
	 */
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_brute_1"), "PathNodeArea_167", 0, "");
	
	/*Corridor Servant
	 */
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_159", 1.0f, "");
	if(GetEasyModeOn() <= 0)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_167", 1.9f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_164", 1.3f, "");
	}
	if(GetToughModeOn() >= 1)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_191", 1.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_194", 1.0f, "");
	}
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_2"), "PathNodeArea_46", GetEnemyIdleTime(3.0f), "");
	
	/*Grunt door
	 */
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_5"), "PathNodeArea_158", 0, "");
	if(GetToughModeOn() >= 1)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_5"), "PathNodeArea_164", 1.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_5"), "PathNodeArea_171", 1.5f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_5"), "PathNodeArea_158", 2.0f, "");
	}
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_5"), "PathNodeArea_112", 1.0f, "");
	
	
	/*CP Servant
	 */
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_3"), "PathNodeArea_187", 0, "");
	
	/*Diary Servant
	 */
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_4"), "PathNodeArea_105", GetEnemyIdleTime(5.0f), "");
	if(GetEasyModeOn() <= 0)
	{
		if(GetToughModeOn() >= 1)
		{
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_4"), "PathNodeArea_139", 4.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_4"), "PathNodeArea_154", 1.5f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_4"), "PathNodeArea_148", 1.5f, "");
		}
		else
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_4"), "PathNodeArea_137", 4.0f, "");
	}
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_4"), "PathNodeArea_114", 3.0f, "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_4"), "PathNodeArea_132", 1.0f, "");
	
	/*Exit grunts
	 */
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_6"), "PathNodeArea_118", 10.0f, "");
	
	/*Entry grunt
	 */
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_10"), "PathNodeArea_30", GetEnemyIdleTime(6.0f), "");
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_10"), "PathNodeArea_46", GetEnemyIdleTime(1.0f), "");
	
	/*Long hall
	 */
	if(GetEasyModeOn() <= 0)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_11"), "PathNodeArea_132", 4.0f, "");
	else
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_11"), "PathNodeArea_128", 4.0f, "");
	if(GetToughModeOn() >= 1)
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_11"), "PathNodeArea_46", GetEnemyIdleTime(2.0f), "");
	else
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("servant_grunt_11"), "PathNodeArea_79", GetEnemyIdleTime(2.0f), "");
	 
	SetNumberOfQuestsInMap(1);
	
	
	//----INSANITY----//
	SetInsanitySetEnabled("Ch02", true); 
	SetInsanitySetEnabled("Ch01", false); 
	
	StartPlayerLookAt("AreaStartLook", 4.0f, 4.0f, "");
	AddTimer("Stop", 0.5f, "LookAtIntro");
	
	AddTimer("TimerTunnelDust", RandInt(0,3), "TimerTunnelDust");	//Dust falling random from ceiling in tunnel
	AddTimer("TimerBangHead", RandFloat(3.0,5.0), "TimerBangHead");	//Person banging head on wall
	
	
	//----DEBUG----//
	if(ScriptDebugOn())
	{
		//CPCall01("", 1); //Test player checkpoint 1, must be in PlayerStart_8 and crouching.
		
		//SetGlobalVarInt("15CPEvent", 1);	//Test CP02 version1(same as in level south) if == 0 else test version2
		//CPCall02("", 2);	//PlayerStart_9 for version 1, PlayerStart_10 for version 2
		
		//CPCall03("",1);	//PlayerStartArea_12
		
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
		
		//GiveItem("stone_hammer_chipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0);	
		//GiveItemFromFile("glass_container_1", "glass_container.ent");
		//GiveItemFromFile("glass_container_filled", "glass_container_filled.ent");
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{	 
	PreloadSound("enemy/brute/attack_claw"); PreloadSound("15_slam_door"); PreloadSound("scare_whine_loop1"); PreloadSound("react_scare");
	PreloadSound("react_breath"); PreloadSound("slime_loop"); PreloadSound("guardian_activated"); PreloadSound("slime_create");
	PreloadSound("general_rock_rumble_no3d"); PreloadSound("15_cloud_swarm"); PreloadSound("15_cloud"); PreloadSound("sanity_flick");
	PreloadSound("step_walk_hard_water"); PreloadSound("guardian_distant3"); PreloadSound("scare_whine_loop3"); PreloadSound("03_rock_move");
	PreloadSound("impact_metal_high"); PreloadSound("player_crouch"); PreloadSound("step_sneak_hard_water"); PreloadSound("step_run_hard_water");
	PreloadSound("gameplay_acid_web"); PreloadSound("15_help"); PreloadSound("15_bang"); PreloadSound("15_bang_fall");
	PreloadSound("general_chain_rattle.snt"); PreloadSound("general_chain_rattle_single.snt");
	
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
	{
		SetEntityActive("tinderbox_13", true);
	}	
	else
	{
		SetEntityActive("tinderbox_13", false);
	}
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
	
	string sEnemyName = "";
	
	sEnemyName = "grunt";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
	
	sEnemyName = "brute";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
	
	sEnemyName = "suitor";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	//////////////////////
	//Load Screen Setup
	//SetupLoadScreen("LoadingText", "Ch02_Prison03", 1, "game_loading_well.jpg");
}