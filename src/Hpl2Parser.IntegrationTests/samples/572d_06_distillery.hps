
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "06_distillery";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
int[] gviEasierOilPotionsCodesArray = {1, 2, 3};
int[] gviEasierHealthPotionsCodesArray = {1};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2, 3, 4, 5, 6, 7, 8, 9};
int[] gviNormalOilPotionsCodesArray = {1};
int[] gviNormalHealthPotionsCodesArray = {1};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {2, 3, 12, 18};
int[] gviToughOilPotionsCodesArray = {0};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {18};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//CURRENT MAP SPECIFIC
string[] gvsDangerousLampsArray = {
	"hanging_lantern_ceiling_1", "hanging_lantern_ceiling_3", "hanging_lantern_ceiling_2", "hanging_lantern_ceiling_4", "hanging_lantern_ceiling_5", "hanging_lantern_ceiling_6", 
	"hanging_lantern_wall_1", "hanging_lantern_ceiling_7", "hanging_lantern_ceiling_8", "torch_static01_4", "torch_static01_7", "torch_static01_11", 
	"torch_static01_8", "torch_static01_2", "torch_static01_1", "candle_floor_6", "candle_floor_7", "candle_floor_2", 
	"candle_floor_3", "candle_floor_1", "candlestick01_3", "torch_static01_3", "candlestick02_1", "candle_floor_5", 
	"candle_floor_4"
};

float GetEntityPlayerDistance(string asEntity)
{
	float fPlayerPosX = GetPlayerPosX();
	float fPlayerPosY = GetPlayerPosY();
	float fPlayerPosZ = GetPlayerPosZ();
	float fEntityPosX = GetEntityPosX(asEntity);
	float fEntityPosY = GetEntityPosY(asEntity);
	float fEntityPosZ = GetEntityPosZ(asEntity);
	float fDistance = MathSqrt(MathPow((fEntityPosX - fPlayerPosX), 2.0f) + MathPow((fEntityPosY - fPlayerPosY), 2.0f) + MathPow((fEntityPosZ - fPlayerPosZ), 2.0f));
	return fDistance;
}

void OnLampStateChange(string asEntity, string asType)
{
	string[] vsDangerousEnemiesArray = {"grunt_normal_1"};
	
	if(asType == "OnIgnite")
	{
		if(GetToughModeOn() >= 1)
		{
			for(int i=0; i<vsDangerousEnemiesArray.length(); i++)
			{
				string sEnemyName = GetStringWithExtraModesSuffix(vsDangerousEnemiesArray[i]);
				string sEnemyState = GetEnemyStateName(sEnemyName);
				
				if(sEnemyState != "Idle" && sEnemyState != "GoHome" && sEnemyState != "Dead" && sEnemyState != "NULL" && sEnemyState != "")
				{
					if((GetToughModeOn() == 1 && GetEntityPlayerDistance(sEnemyName) <= 20.0f) || (GetToughModeOn() >= 2))
					{
						AlertEnemyOfPlayerPresence(sEnemyName);
						AddDebugMessage("DEBUG: Enemy " + sEnemyName + " is now in alert state!", false);
						return;
					}
				}
			}
		}
		
		AddDebugMessage("DEBUG: Could not trigger enemy alert from enviroment lamp lit!", false);
	}
}

void PreloadEnemySound(string asSound, string asType) //HELPER FUNCTION.
{
	PreloadSound(GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType));
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

////////////////////////
//BEGIN MOANING HORROR//
/*Start the creak sounds + ps when entering basement, stop them when leaving the basement/area
 */
void FuncMoanHorrors(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaBeginAnimal") {
		AddTimer("animalTimer", 2.5f, "FuncMoanTimer");	
		
		AddTimer("scareSoundx1", 1.0f, "TimerStopScareSound");	
		AddTimer("scareSoundx", 4.0f, "TimerStopScareSound");	
		
		PlaySoundAtEntity("scareSoundx", "scare_whine_loop.snt", "HorrorMoan_8", 2.0f, false);
		StartScreenShake(0.008f, 0.0f, 2.0f, 4.0f);
		PlaySoundAtEntity("scareSoundx2", "guardian_idle.snt", "HorrorMoan_8", 2.0f, false);
		FadeImageTrailTo(1.0f, 0.01f);
		
		/*DEBUG
		 */
		AddDebugMessage("Begin animal sounds", true);
		
		//return;
	}

	/*DEBUG
	 */
	AddDebugMessage("Begin moaning sounds", true);
}
void TimerStopScareSound(string &in asTimer)
{
	if(asTimer == "scareSoundx1") 
		GiveSanityDamage(10.0f, true);
	else{
		FadeImageTrailTo(0.0f, 0.1f);
		StopSound(asTimer, 4.0f);
		StopSound(asTimer+"2", 4.0f);
	}
}
/*Random placment of creak at random time
 */
void FuncMoanTimer(string &in asTimer)
{
	
	
	int iMoan = RandFloat(7, 14);	
	float fMoan = RandFloat(5.5f,15.5f);
	
	if(asTimer == "moanTimer") {
		PlaySoundAtEntity("moanSound"+iMoan, "scare_male_terrified.snt", "HorrorMoan_"+iMoan, 0.0f, false);
		
		AddTimer("moanTimer", 6.5f+fMoan, "FuncMoanTimer");
	} else if(asTimer == "childTimer") {
		iMoan = RandFloat(7, 14);	
		
		PlaySoundAtEntity("childSound"+iMoan, "scare_baby_cry.snt", "HorrorMoan_"+iMoan, 0.0f, false);
		
		AddTimer("childTimer", 8.5f+fMoan, "FuncMoanTimer");
	} else if(asTimer == "animalTimer") {
		iMoan = RandFloat(7, 14);	
		
		PlaySoundAtEntity("animalSound"+iMoan, "scare_animal_squeal.snt", "HorrorMoan_"+iMoan, 0.0f, false);
		
		AddTimer("animalTimer", 5.5f+fMoan, "FuncMoanTimer");
	} 

	/*DEBUG
	 */
	AddDebugMessage("Now moaning in area: "+iMoan, false);
}	
//END MOANING HORROR//
//////////////////////


///////////////////////////////
//BEGIN CREAKING WOOD CEILING//
/*Random placment of creak at random time
 */
void FuncCreakTimer(string &in asTimer)
{
	int iCreak = RandFloat(8, 13);	
	float fCreak = RandFloat(4.5f,14.5f);
	
	CreateParticleSystemAtEntity("creakPS"+iCreak, "ps_dust_falling_small_thin.ps", "HorrorCreak_"+iCreak, false);
	
	PlaySoundAtEntity("creakSound"+iCreak, "scare_wood_creak_mix.snt", "HorrorCreak_"+iCreak, 0.0f, false);
	
	AddTimer("creak", 5.5f+fCreak, "FuncCreakTimer");
	
	/*DEBUG
	 */
	AddDebugMessage("Now creaking in area: "+iCreak+" Next creak in: "+(5.5f+fCreak), true);
}	
//END CREAKING WOOD CEILING//
/////////////////////////////


///////////////////////////////
//BEGIN BARELL BLCOKING DOOR

void InteractBarrelBlock(string &in asEntity)
{
	SetSwingDoorLocked("cellar_wood01_1", false, false);
	if((GetToughModeOn() >= 1) && GetLocalVarInt("GruntActive") == 1)
		AlertEnemyOfPlayerPresence(GetStringWithExtraModesSuffix("grunt_normal_1"));
	
	SetEntityPlayerInteractCallback("barrel01_12", "", true);
	SetEntityPlayerInteractCallback("barrel01_13", "", true);
}

void CollideBlockingBarellsArea(string &in asParent, string &in asChild, int alState)
{
	return; //disabled, doing on interact instead.
	SetSwingDoorLocked("cellar_wood01_1", false, false);
}


//END BARELL BLCOKING DOOR
///////////////////////////////

///////////////////////////////
//BEGIN BREAK PULLEY BLOCKER
void InteractCrank(string &in asEntity)
{
	SetMessage("Ch01Level06", "CrankStuck", 0);
	AddQuest("06BlockedPulley", "06BlockedPulley");
	
	CreateParticleSystemAtEntity("smoke", "ps_dust_falling_small.ps", "AreaPulleysmoke", false);
	
	AddTimer(asEntity, 1.5f, "TimerInteractCrank");
}
void TimerInteractCrank(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractCrank", true);
}

void BreakPulleyBlocker(string &in asEntity, string &in asType)
{
	if(asType == "Break")
	{
		GiveSanityBoostSmall();
		
		SetEntityActive("AreaInPulley", false);
		
		SetWheelStuckState("crank_iron_1", 0, true);
		
		RemoveTimer("crank_iron_1");
		SetEntityPlayerInteractCallback("crank_iron_1", "", false);	
		
		CompleteQuest("06BlockedPulley", "06BlockedPulley");
		
		FadeLightTo("PointLight_38", 0,0,0,0, -1, 2);
		FadeLightTo("PointLight_39", 0,0,0,0, -1, 2);
		if(GetToughModeOn() >= 2 && GetLocalVarInt("GruntActive") == 1)
			ShowEnemyPlayerPosition(GetStringWithExtraModesSuffix("grunt_normal_1"));
	}	
}

/*Message and effect to hint about hatch wheight.
 */
void InteractHatch(string &in asEntity)
{
	SetMessage("Ch01Level06", "HatchHeavy", 0);
	PlaySoundAtEntity("hatchs", "door_level_wood_close", "hatch_large_1", 0.0f, false);
	AddPropImpulse("hatch_large_1", 0.0f, 10.0f, 0.0f, "World");
	
	AddTimer("hatchs", 0.15f, "TimerHatchOn");
	AddTimer("hatchon", 1.0f, "TimerHatchOn");
}
void TimerHatchOn(string &in asTimer)
{
	if(asTimer == "hatchs"){
		StopSound("hatchs", 0.5f);
		AddPropImpulse("hatch_large_1", 0.0f, 10.0f, 0.0f, "World");
	}
	else
		SetEntityPlayerInteractCallback("hatch_large_1", "InteractHatch", true);
}

/*If player goes out of area pulley bloc break count back to 0 + hint message
 */
void CollideInPulley(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1){
		AddDebugMessage("Player in area!", false);
	}
	else{
		SetLocalVarInt("PulleyBreak", 0);
		
		if(GetLocalVarInt("HoldPulley") == 1)
			SetMessage("Ch01Level06", "PulleyBlockSlip", 0);
		
		SetLocalVarInt("HoldPulley", 0);
		
		AddDebugMessage("Player out of area!", false);
	}
}

/*Break pully block when moved in/out of area 3 times
 */
void CollidePulleyBlock(string &in asParent, string &in asChild, int alState)
{
	AddLocalVarInt("PulleyBreak", 1);
	
	if(GetLocalVarInt("PulleyBreak") == 3)
	{
		SetPropHealth(asParent, 0);
		
		//Stop player input for half a second, otherwise it is easy for view to fly off! (player sweeps with mouse)
		SetPlayerActive(false);
		AddTimer("playeractive", 0.3, "TimerMakePlayerActive"); 
	}
		
	AddDebugMessage("Pulley in/out area!", false);
}

void TimerMakePlayerActive(string &in asTimer)
{
	SetPlayerActive(true);
}

/*If player holds pulleyblock and leaves area, set var to display hint message
*/
void InteractPulley(string &in asEntity)
{
	SetLocalVarInt("HoldPulley", 1);
}
//END BREAK PULLEY BLOCKER
///////////////////////////////

///////////////////////////////
//BEGIN EMPRY STORAGE DOOR OPENS

void EnterEmptyStorageDoorOpen(string &in asParent, string &in asChild, int alState)
{
	if(GetSwingDoorClosed("cellar_wood01_5")==false) return;
	
	SetSwingDoorDisableAutoClose("cellar_wood01_5", true);
	SetSwingDoorClosed("cellar_wood01_5", false, false);
	
	RemoveEntityCollideCallback(asParent, asChild);
	
	PlaySoundAtEntity("enemy", "guardian_idle", "cellar_wood01_5", 0, false);
	PlaySoundAtEntity("doorsqueak", "01_door", "cellar_wood01_5", 0.3f, false);
	
	AddBodyImpulse("cellar_wood01_5_Body_1", 0,0,1.0f, "Local");
	for(int i=0; i<30; ++i)
	{
		AddTimer("cellar_wood01_5_Body_1", i * 0.1f, "TimerOpenDoor");
	}
	
	AddTimer("react_scare", 0.7f, "TimerStopLookAt");
	AddTimer("react_breath", 2.5f, "TimerStopLookAt");
	AddTimer("react_breath", 4.5f, "TimerStopLookAt");
	
	AddDebugMessage("Empty storage event", false);
}

void TimerOpenDoor(string &in asTimer)
{
	AddBodyForce(asTimer, 0,0,40, "Local");
}


//BEGIN END STORAGE DOOR OPENS
///////////////////////////////



///////////////////////////////
//BEGIN BOTTLE ROOM SCRATCHES

void EnterBottleRoomWallScratch(string &in asParent, string &in asChild, int alState)
{
	SetSwingDoorClosed("cellar_wood01_3", true, true);
	SetSwingDoorClosed("cellar_wood01_6", true, true);
	
	PlayEnemySoundAtEntity("notice_long.snt", "cellar_wood01_3", "grunt");
	
	//GiveSanityDamage(10, true);
	
	AddTimer("impact_wood_heavy_high.snt", 1.5f, "TimerWallScratchSound");
	AddTimer("impact_wood_heavy_high.snt", 2.5f, "TimerWallScratchSound");
	AddTimer("impact_wood_heavy_high.snt", 3.2f, "TimerWallScratchSound");
	AddTimer("grunt", 3.25f, "TimerWallScratchSound");
	AddTimer("enemy", 3.0f, "TimerWallScratchSound");
	
	AddTimer("react_scare", 0.5f, "TimerStopLookAt");
	AddTimer("react_breath", 2.5f, "TimerStopLookAt");
	
	if(GetPropHealth("cellar_wood01_6") > 0)
		AddTimer("NextDoor", 6.5f, "TimerWallScratchNextDoor");
}



void TimerWallScratchNextDoor(string &in asTimer)
{
	if(GetPropHealth("cellar_wood01_6") > 0)
	{
		//PlaySoundAtEntity("break","break_wood.snt", "cellar_wood01_6", 0, false);
		//SetSwingDoorClosed("cellar_wood01_6", true, true);
		SetPropHealth("cellar_wood01_6", 0.0f);
		
		AddTimer("react_scare", 0.5f, "TimerStopLookAt");
		AddTimer("react_breath", 2.5f, "TimerStopLookAt");
	}
}

void TimerWallScratchSound(string &in asTimer)
{
	if(asTimer == "enemy")
		StopSound("enemy", 1.0f);
	else if(asTimer == "grunt")
		PlayEnemySoundAtEntity("giveup.snt", "cellar_wood01_3", "grunt");
	else
		PlaySoundAtEntity("wallscratchsound", asTimer,  "cellar_wood01_3", 0, false);	
}

//BEGIN BOTTLE ROOM SCRATCHES
///////////////////////////////


///////////////////////////////
//BEGIN HOWLING

void OnDoorStateChange(string asEntity, string asType)
{
	if(StringContains(asType, "Break"))
	{
		if(QuestIsCompleted("06BlockedDoor") == false)
		{
			RemoveEntityCollideCallback("Player", "HowlArea_2");
			SetEntityActive("HowlArea_2", false);
			EnterHowlArea("Player", "HowlArea_2", 1);
		}
		else
		{
			return;
		}
	}
}

void EnterHowlArea(string &in asParent, string &in asChild, int alState)
{
	AddLocalVarInt("HowlCount", 1);
	
	int lIdx = GetLocalVarInt("HowlCount");
	PlaySoundAtEntity("howl","guardian_distant"+lIdx, "Player", 0, false);
	
	AddDebugMessage("Howl "+lIdx, false);
	
	AddTimer("StopRadialBlur", 4.5f, "TimerStopRadialBlur");
	AddTimer("react_scare", 1.0f, "TimerStopLookAt");
	AddTimer("react_breath", 3.0f, "TimerStopLookAt");
	
	StartScreenShake(lIdx*0.01f, 0.0f, 2.0f, 4.0f);
	FadeLightTo("BoxLight_1", lIdx*0.05f, 0.0f, lIdx*0.01f, 0.1f, -1.0f, 8.0f);
	
	SetRadialBlurStartDist(0.2f);
	FadeRadialBlurTo(0.09, 0.015f);
	
	//If this is the area into last room, then remove some stuff related to blocked door.
	if(asChild == "HowlArea_2") 
	{
		SetEntityPlayerInteractCallback("cellar_wood01_1", "", true);
		CompleteQuest("06BlockedDoor", "06BlockedDoor");
		SetEntityActive("block_box_1", false);
		CheckPoint("check02", "PlayerStartArea_4", "CheckPoint01", "Hints", "DeathGrunt_12_Storage_03");
		
		if(GetToughModeOn() >= 2)
		{
			SetPropActiveAndFade("grunt_gone_*", false, 0.5f);
			ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("grunt_normal_1"));
			
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_43", 2.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_73", GetEnemyIdleTime(4.0f), "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_66", GetEnemyIdleTime(5.0f), "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_64", 1.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_46", 3.0f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_33", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_23", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_18", 0.001f, "");
			AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_13", 6.0f, "");
			
			if(GetLocalVarInt("GruntActive") == 0)
			{
				SetEntityActive(GetStringWithExtraModesSuffix("grunt_normal_1"), true);
				TeleportEnemyToNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_38", true);
			}
			
			SetLocalVarInt("GruntActive", 1);
		}
	}
	else if(asChild == "HowlArea_3")
	{
		SetEntityActive(GetStringWithExtraModesSuffix("grunt_normal_1"), false);
		FadeEnemyToSmoke(GetStringWithExtraModesSuffix("grunt_normal_1"), false);
		SetLocalVarInt("GruntActive", 0);
	}
}

void TimerStopRadialBlur(string &in asTimer)
{
	AddDebugMessage("Stopping howl blur.", false);
	FadeRadialBlurTo(0, 0.02f);
}

//END HOWLING
///////////////////////////////


///////////////////////////////
//BEGIN ENEMY GLIMPSE

void EnterEnemyGlimpse(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(GetStringWithExtraModesSuffix("grunt_normal_1"), true);
	SetLocalVarInt("GruntActive", 1);
	PlayEnemySoundAtEntity("giveup.snt", "GrunNoise", "grunt");
	StartPlayerLookAt(GetStringWithExtraModesSuffix("grunt_normal_1"), 3, 3, "");
	PlayMusic("00_event_gallery.ogg", false, 1, 0.2f, 8, false);
	AddTimer("StopLook", 1.0f, "TimerStopLookAt");
	AddTimer("react_scare.snt", 0.5f, "TimerStopLookAt");
	AddTimer("react_breath.snt", 2.5f, "TimerStopLookAt");
	
	CheckPoint("check01", "PlayerStartArea_6", "CheckPoint01", "Hints", "DeathGrunt_06_Distillery_01");
	
	if(GetEasyModeOn() >= 2)
	{
		SetEnemyIsHallucination(GetStringWithExtraModesSuffix("grunt_normal_1"), true);
	}
}
void TimerStopLookAt(string &in asTimer)
{
	if(StringContains(asTimer,"react_")){
		PlayGuiSound(asTimer, 0.7f);
		
		if(asTimer == "react_scare") 
			GiveSanityDamage(10.0f, true);
			
		return;
	}
	
	StopPlayerLookAt();
}

void CollideEnemyHint(string &in asParent, string &in asChild, int alState)
{
	GiveHint("EnemyTip02", "Hints", "EnemyTip02", 0);
}

void EnemyDisabled(string &in asEnemy, string &in asType)
{
	AddDebugMessage("Disabling enemy", false);
	SetLocalVarInt("GruntActive", 0);
	if(GetEntitiesCollide(asEnemy, "AreaGruntGone"))
	{
		AddDebugMessage("Leaving track behind", false);
		SetPropActiveAndFade("grunt_gone_*", true, 0.5f);
		PlaySoundAtEntity("grunt_closes_door", "close_door.snt", "GruntGoneDoorSound", 0, false);
	}
}

void ResetDoorIfBroken(string asDoor)
{
	if(GetPropHealth(asDoor) <= 0.0f)
	{
		ResetProp(asDoor);
	}
}

void CheckPoint01(string &in asName, int alCount)
{
	//START HARD MODE ENDING CHECK
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
	//END HARD MODE ENDING CHECK
	ResetDoorIfBroken("cellar_wood01_1");
	ResetDoorIfBroken("cellar_wood01_2");
	ResetDoorIfBroken("cellar_wood01_3");
	ResetDoorIfBroken("cellar_wood01_4");
	ResetDoorIfBroken("cellar_wood01_5");
	ResetDoorIfBroken("cellar_wood01_6");
	ResetDoorIfBroken("cellar_wood01_7");
	ResetDoorIfBroken("cellar_wood01_8");
	
	PlayMusic("06_amb.ogg", true, 1, 5.0f, 0, true);
	
	if(alCount <= 1)
	{
		ClearEnemyPatrolNodes(GetStringWithExtraModesSuffix("grunt_normal_1"));
		
		TeleportEnemyToNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_41", true);
		
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_50", GetEnemyIdleTime(4.0f), "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_53", GetEnemyIdleTime(5.0f), "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_57", GetEnemyIdleTime(6.0f), "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_60", 1.0f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_80", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_43", GetEnemyIdleTime(4.0f), "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_33", 0.001f, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_21", 6.0f, "");
		
		SetEntityActive(GetStringWithExtraModesSuffix("grunt_normal_1"), true);
		
		SetLocalVarInt("GruntActive", 1);
	}
	else
		SetLocalVarInt("GruntActive", 0);
}

//END ENEMY GLIMPSE
///////////////////////////////

void CollideAreaRoses(string &in asParent, string &in asChild, int alState)
{
	CreateParticleSystemAtEntity("bedvoidroses", "ps_rose_petals_wind.ps", "AreaRoses", false);
	PlayGuiSound("general_wind_whirl6.ogg", 0.3f);
	
	AddDebugMessage("Flow roses", false);
}

void EntityCallDiary(string &in asEntity, string &in type)
{
	//GiveSanityBoostSmall();
}

void CollideAreaRope(string &in asParent, string &in asChild, int alState)
{
	int iSound = RandInt(0, 1);
	float fFade= RandFloat(0.0f, 0.3f);
	
	if(iSound == 1)	PlaySoundAtEntity("ropes", "06_rope_loose", "AreaRope_3", fFade, false);
	else PlaySoundAtEntity("ropes", "06_rope_strain", "AreaRope_3", fFade, false);
	
	
	//Remove interact on hatch when having opened the hatch.
	//Done here and not on break if player would try to open hatch by hand
	AddLocalVarInt("CountTurn", 1);
	
	if(GetLocalVarInt("CountTurn") == 4){
		SetEntityPlayerInteractCallback("hatch_large_1", "", true);
		RemoveTimer("hatchs");
		RemoveTimer("hatchon");
	}
}
////////////////////////////
// Run first time starting map
void OnStart()
{
	for(int i=0; i<gvsDangerousLampsArray.length(); i++)
	{
		SetEntityCallbackFunc(gvsDangerousLampsArray[i], "OnLampStateChange");
	}
	
	SetEntityActive("block_box_1", true);
	SetEntityActive("barrel01_12", true);
	SetEntityActive("barrel01_13", true);
	SetEntityActive("wood_box01_3", true);
	SetEntityActive("wood_box02_11", true);
	SetEntityActive("wood_box02_12", true);
	SetEntityActive("storage_box_wood01_large_4", true);
	SetMapDisplayNameEntry("Distillery");
	
	////////////////////
	// Hub start sanity boost
	GiveSanityBoostSmall();
	
	
	//----COLLIDE CALLBACKS----//
	AddEntityCollideCallback("Player", "AreaBeginAnimal", "FuncMoanHorrors", true, 1);
	
	AddEntityCollideCallback("BlockingBarellsArea", "barrel01_12", "CollideBlockingBarellsArea", false, -1);
	
	AddEntityCollideCallback("Player","EmptyStorageDoorOpen", "EnterEmptyStorageDoorOpen", false, 1);
	AddEntityCollideCallback("Player","BottleRoomWallScratch", "EnterBottleRoomWallScratch", true, 1);
	
	AddEntityCollideCallback("Player","EnemyGlimpse", "EnterEnemyGlimpse", true, 1);
	AddEntityCollideCallback("Player", "AreaEnemyHint", "CollideEnemyHint", true, 1);	//Display hint about enemies
	
	for(int i=1; i<=3; ++i)
		AddEntityCollideCallback("Player","HowlArea_"+i, "EnterHowlArea", true, 1);
	
	AddEntityCollideCallback("Player", "AreaInPulley", "CollideInPulley", false, 0);
	AddEntityCollideCallback("wood_blocking_pulley_1", "AreaPullPulley", "CollidePulleyBlock", false, 0);
	
	AddEntityCollideCallback("Player", "AreaRoses_1", "CollideAreaRoses", true, 1);
	
	AddEntityCollideCallback("crank_iron_1", "AreaRope_1", "CollideAreaRope", false, 1);
	AddEntityCollideCallback("crank_iron_1", "AreaRope_2", "CollideAreaRope", false, 1);
	
	//----ENEMY INIT----//
	if(GetToughModeOn() >= 1)
	{
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_46", 0, "");
		AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_33", 0, "");
	}
	AddEnemyPatrolNode(GetStringWithExtraModesSuffix("grunt_normal_1"), "PathNodeArea_78", 6.0f, "");
	
	//----ENTITY INIT----//
	AddTimer("childTimer", 1.5f, "FuncMoanTimer");	
	float fMoan = RandFloat(5.5f,15.5f);
	float fCreak = RandFloat(4.5f,14.5f);
	AddTimer("moanTimer", 4.5f+fMoan, "FuncMoanTimer");	
	AddTimer("creak", 2.5f+fCreak, "FuncCreakTimer");
	
		
	InteractConnectPropWithRope("CrankRope", "crank_iron_1", "Rope01", false, 1,1,1, false, 0);
	for(int i=1;i<4;i++) InteractConnectPropWithRope("CrankRope"+i, "crank_iron_1", "RopeArea_"+i, false, 1,1,1, false, 0);

	
	//----FIX CONTAINER----//
	if(HasItem("chemical_container_1"))
		RemoveItem("chemical_container_1");
		
	if(HasItem("chemical_container_2"))
		RemoveItem("chemical_container_2");
		
	if(!HasItem("empty_container"))
	{
		GiveItemFromFile("empty_container", "chemical_container.ent");
	}
	
	//----QUEST INIT----//
	//SetNumberOfQuestsInMap(1);
	
	
	///////////////////////////////
	// Debug
	if(ScriptDebugOn())
	{
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
	}
}

void InteractLastDoor(string &in asEntity)
{
	SetMessage("Ch01Level06", "DoorBlocked", 0);
	AddQuest("06BlockedDoor", "06BlockedDoor");
}

////////////////////////////
// Run when entering map
void OnEnter()
{	
	//----PRELOADING----//
	PreloadSound("scare_whine_loop"); PreloadSound("scare_male_terrified"); PreloadSound("scare_baby_cry"); PreloadSound("scare_animal_squeal"); 
	PreloadSound("scare_wood_creak_mix"); PreloadSound("guardian_idle"); PreloadSound("01_door");
	PreloadSound("break_wood"); PreloadSound("impact_wood_heavy_high"); PreloadSound("guardian_distant1"); PreloadSound("guardian_distant2");
	PreloadSound("guardian_distant3"); 	

	PreloadParticleSystem("ps_dust_falling_small_thin"); 
	
	
	//----AUDIO----//
	PlayMusic("06_amb.ogg", true, 1, 5.0f, 0, true);
	
	
	//AutoSave();
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
	
	string sEnemyName = "";
	
	sEnemyName = "grunt";
	PreloadEnemySound("alert.snt", sEnemyName);
	PreloadEnemySound("attack.snt", sEnemyName);
	PreloadEnemySound("attack_hit.snt", sEnemyName);
	PreloadEnemySound("attack_launch.snt", sEnemyName);
	PreloadEnemySound("enabled.snt", sEnemyName);
	PreloadEnemySound("flinch.snt", sEnemyName);
	PreloadEnemySound("giveup.snt", sEnemyName);
	PreloadEnemySound("hunt.snt", sEnemyName);
	PreloadEnemySound("idle.snt", sEnemyName);
	PreloadEnemySound("idle_extra.snt", sEnemyName);
	PreloadEnemySound("notice.snt", sEnemyName);
	PreloadEnemySound("notice_long.snt", sEnemyName);
	PreloadEnemySound("run.snt", sEnemyName);
	PreloadEnemySound("run_extra.snt", sEnemyName);
	PreloadEnemySound("walk.snt", sEnemyName);
	PreloadEnemySound("walk_extra.snt", sEnemyName);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	//////////////////////
	//Load Screen Setup
	SetupLoadScreen("LoadingText", "Ch01_WaterLurker01", 1, "game_loading_water.jpg");
}