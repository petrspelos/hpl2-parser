

void OnStart()
	{
		
	}

void OnEnter()
	{
		
		//StartPlayerSpawnPS("dkf_fog.sps"); //For outside fog
		//StartPlayerSpawnPS("null.sps"); //For no fog - needs to be called because the spawn particle is saved on map change.
		AutoSave(); //always save on enter, just in case
		SetUpInsanity();
		SetMapDisplayNameEntry("Apartments"); //put an appropriate lang entry from the Levels category. It's for save names
		
		if(ScriptDebugOn()) { }
		
		//Functions for faster copying:
		//SetEntityPlayerInteractCallback("Door_1", "KnockOnDoor", true);
		//StartPhoneRing("phone_1", "daniel_phone", 0);
		//AddEntityCollideCallback("Hours", "Twelve", "ClockCheck", false, 1);
		
		AddUseItemCallback("", "KeyX", "DoorX", "OpenDoor", true); //Generic door opening
	
	}

void OnLeave()
	{
	
	}
	
	
void Func()
{
	AddDebugMessage("Testing...", false);
}

void OpenDoor(string &in asItem, string &in asEntity) //Generic open door script
{
	SetSwingDoorLocked(asEntity, false, true);
	RemoveItem(asItem);
	PlaySoundAtEntity("", "unlock_modern.snt", asEntity, 0.0f , false);
}

void Jammed(string &in asEntity) //Random message for dummy doors
{
	int tmp = RandInt( 0,  2);
	if(tmp == 0)SetMessage("Messages", "Jammed1", 0.0);
	if(tmp == 1)SetMessage("Messages", "Jammed2", 0.0);
	if(tmp == 2)SetMessage("Messages", "Jammed3", 0.0);
}
 
void Timer(string &in asTimer) //Timer template
{
	AddTimer("", 0.3f, "Timer");
}

///////////////////////KNOCKING///////////////////////////////////////
///////////////////////////////////////////////////////////////////

/* Full setup is: Door or area, Lantern */

void SetUpKnockingAndLanterns() // for neatness' sake
{

}

void KnockOnDoor(string &in asEntity)
{
	PlaySoundAtEntity("", "door_knock_dkf.snt", asEntity, 0.0f , false);
	AddTimer(asEntity, 1.0f, "Talk");
}
void Talk(string &in asTimer)
{
		AddEffectVoice("get_out", "", "Dialogues", "get_out", true, asTimer, 0.0f, 15.0f);
		SetEffectVoiceOverCallback("AfterKnocking");
}
void AfterKnocking()
{
	
	SetLampLit("Door_1_Lantern", false,true);

}


///////////////END KNOCK///////////////////////////////////////////
///////////////////////////////////////////////////////////////////
	
///////////////////////PHONE///////////////////////////////////////
///////////////////////////////////////////////////////////////////

string FileName;
string Phone;
int FileCount;

 /* Entity = the phone to be played at, if files are "File_01.ogg" and "File_02.ogg", then asFileName = File and asFileCount = 2.
 All sound files from 1 through the given number are be played.
 If count = 0, "File" (without the underscore and numbers) is assumed.
 For best effect use mono sound files.
 Lang subtitle entries should be titled same as the file and placed in "Dialogues" category. */
 
void StartPhoneRing(string &in asEntity, string asFileName, int asFileCount) 
{
	FileName = asFileName;
	FileCount = asFileCount;
	Phone = asEntity;
	
	AddDebugMessage("Starting a call...", false);
	PlaySoundAtEntity("phonering", "phone_ring_loop.snt", asEntity, 0.0f , false);
	SetEntityPlayerInteractCallback( asEntity, "PickUpPhone", true);
}
void PickUpPhone(string &in asEntity)
{
	StopSound("phonering", 0.5f);
	PlaySoundAtEntity("", "phone_up.snt", asEntity, 0.0f , false);
	AddTimer("", 0.5f, "StartTalking");
	
	SetPlayerMoveSpeedMul(0.3f);
	SetPlayerJumpDisabled(true);
	SetPlayerRunSpeedMul(0.0f);
}
void StartTalking(string &in asTimer)
{
	PlaySoundAtEntity("phonestatic", "phone_static_loop.snt", Phone, 0.0f , false);
	
	if(FileCount == 0)
	{
		AddEffectVoice(FileName, "", "Dialogues", FileName, true, Phone, 0.0f, 15.0f);
	}
	else if (FileCount > 0)
	{
		string tmp;
		for(int i = 1; i <= FileCount; i++ )
		{
			if(i <10)
			{
				tmp = FileName + "_0" + i;
			}
			else { tmp = FileName + "_" + i; }
		
		AddEffectVoice(tmp, "", "Dialogues", tmp, true, Phone, 0.0f, 15.0f);
		}
	}
	
	SetEffectVoiceOverCallback("HangUp");
}

void HangUp()
{
	PlaySoundAtEntity("", "phone_down.snt", Phone, 0.0f , false);
	StopSound("phonestatic", 0.3f);
	
	SetPlayerMoveSpeedMul(1.0f);
	SetPlayerRunSpeedMul(1.0f);
	SetPlayerJumpDisabled(false);
}

///////////////END PHONE///////////////////////////////////////////
///////////////////////////////////////////////////////////////////


	
//////////////////////SANITY///////////////////////////////////////
///////////////////////////////////////////////////////////////////

void SetUpInsanity()  //Disables insanity events which use Daniel's voice, starts looping timer
{	
	SetInsanitySetEnabled("Ch03", false);
	SetInsanitySetEnabled("Ch02", false);
	SetInsanitySetEnabled("Ch01", false);
	
	AddTimer("SanityTimer", 1.0f, "SanityScript");

}

void SanityScript(string &in asTimer) //looping timer, fixes being unable to use potions when fully sane
{
	if(GetPlayerSanity() == 100.0f) SetPlayerSanity(99.0f);
	
	if(GetPlayerSanity() == 0.0f) SetPlayerSanity(29.0f);
	
	AddTimer("SanityTimer", 1.0f, "SanityScript");
}

////////////////////END SANITY/////////////////////////////////////
///////////////////////////////////////////////////////////////////
	

