
//-------------------------------------------------

//////////////////////////////
// EXTRAMODES AND CUSTOM CODE
//////////////////////////////

//-------------------------------------------------

string gsCurrentMapName = "16_cistern_entrance";

string gsFunnyEasierEntry = "FunnyEasier";
string gsFunnyEasierSuffix = "_funny_easier";
string gsFunnyEasyEntry = "FunnyEasy";
string gsFunnyEasySuffix = "_funny_easy";
string gsFunnyTougherEntry = "FunnyTougher";
string gsFunnyTougherSuffix = "_funny_tougher";
string gsFunnyToughEntry = "FunnyTough";
string gsFunnyToughSuffix = "_funny_tough";
string gsFunnyEntry = "Funny";
string gsFunnySuffix = "_funny";
string gsStandardEasierEntry = "StandardEasier";
string gsStandardEasierSuffix = "_easier";
string gsStandardEasyEntry = "StandardEasy";
string gsStandardEasySuffix = "_easy";
string gsStandardTougherEntry = "StandardTougher";
string gsStandardTougherSuffix = "_tougher";
string gsStandardToughEntry = "StandardTough";
string gsStandardToughSuffix = "_tough";
string gsStandardEntry = "Standard";
string gsStandardSuffix = "";

string gsHealthPotion = "potion_health";
string gsLargeOilPotion = "potion_oil_large";
string gsOilPotion = "potion_oil";
string gsSanityPotion = "potion_sanity";
string gsTinderbox = "tinderbox";

int[] gviEasierTinderboxesCodesArray = {1, 2, 3, 4};
int[] gviEasierOilPotionsCodesArray = {1, 2};
int[] gviEasierHealthPotionsCodesArray = {0};
int[] gviEasierSanityPotionsCodesArray = {0};
int[] gviEasierLargeOilPotionsCodesArray = {0};

int[] gviEasyTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
int[] gviEasyOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
int[] gviEasyHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
int[] gviEasySanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
int[] gviEasyLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;

int[] gviNormalTinderboxesCodesArray = {1, 2};
int[] gviNormalOilPotionsCodesArray = {2};
int[] gviNormalHealthPotionsCodesArray = {0};
int[] gviNormalSanityPotionsCodesArray = {0};
int[] gviNormalLargeOilPotionsCodesArray = {0};

int[] gviToughTinderboxesCodesArray = {3};
int[] gviToughOilPotionsCodesArray = {1};
int[] gviToughHealthPotionsCodesArray = {0};
int[] gviToughSanityPotionsCodesArray = {0};
int[] gviToughLargeOilPotionsCodesArray = {0};

int[] gviTougherTinderboxesCodesArray = {0};
int[] gviTougherOilPotionsCodesArray = {0};
int[] gviTougherHealthPotionsCodesArray = {0};
int[] gviTougherSanityPotionsCodesArray = {0};
int[] gviTougherLargeOilPotionsCodesArray = {0};

int giMaxGlobalDeathCount = 9;

void PlayEnemySoundAtEntity(string asSound, string asEntity, string asType) //HELPER FUNCTION.
{
	PlaySoundAtEntity(asEntity + "_" + asSound, GetStringWithReplacedFunnySubString(asType + "_" + asSound, asType), asEntity, 0.0f, false);
}

//START STRING MANAGEMENT FUNCTIONS
int GetSubStringIndex(string asString, string asSubString, int aiOffset) //RETURNS THE STARTING POINT/INDEX OF A DEFINED SUBSTRING CONTAINED IN A STRING, IF THE DEFINED SUBSTRING COULD NOT BE FOUND IT RETURNS THE NEGATIVE VALUE -1. THE THIRD ARGUMENT DEFINES THE STARTING POINT/INDEX OF THE STRING TO START THE SEARCH.
{
	if(aiOffset >= asString.length() || aiOffset < 0)
	{
		return -1;
	}
	
	string sExaminedString = StringSub(asString, aiOffset, asString.length() - aiOffset);
	int iStringLength = sExaminedString.length();
	int iSubStringLength = asSubString.length();
	
	if(iStringLength == iSubStringLength)
	{
		if(sExaminedString == asSubString)
		{
			return 0;
		}
		else
		{
			return -1;
		}
	}
	else
	if(iSubStringLength > iStringLength)
	{
		return -1;
	}
	else
	{
		int iFirstMatchIndex = 0;
		int iLastMatchIndex = 0;
		int iMatchCount = 0;
		
		for(int i=0; i<iStringLength; i++)
		{
			if(sExaminedString[i] == asSubString[iMatchCount])
			{
				iLastMatchIndex = i;
				
				if(iMatchCount < iSubStringLength)
				{
					iMatchCount = iMatchCount + 1;
					
					if(iMatchCount == 1)
					{
						iFirstMatchIndex = i;
					}
					
					if(iMatchCount == iSubStringLength)
					{
						break;
					}
				}
			}
			else
			if(iMatchCount > 0)
			{
				iMatchCount = 0;
				
				if(asString[i] == asSubString[iMatchCount])
				{
					iLastMatchIndex = i;
					iMatchCount = iMatchCount + 1;
					iFirstMatchIndex = i;
				}
			}
		}
		
		if(iMatchCount == iSubStringLength)
		{
			return iFirstMatchIndex;
		}
		else
		{
			return -1;
		}
	}
}

string GetStringWithReplacedSubString(string asString, string asSearchedSubString, string asReplacedSubString) //RETURNS THE ORIGINAL STRING BUT IT HAS DEFINED SUBSTRINGS REPLACED, IF NO DEFINED SUBSTRINGS ARE FOUND THEN IT RETURNS JUST THE ORIGINAL STRING. FIRST ARGUMENT: ORIGINAL STRING, SECOND ARGUMENT: SUBSTRING THAT MUST BE CONTAINED INSIDE THE ORIGINAL STRING, THIRD ARGUMENT: STRING THAT WILL REPLACE ALL THE SECOND ARGUMENT SUBSTRINGS INSIDE THE ORIGINAL STRING.
{
	string sUnchangedFirstMatchSection = "";
	string sOriginalFirstMatchSection = "";
	string sReplacedFirstMatchSection = "";
	int iFirstMatchIndex = GetSubStringIndex(asString, asSearchedSubString, 0);
	
	if(iFirstMatchIndex == -1)
	{
		return asString;
	}
	else
	if(iFirstMatchIndex > 0)
	{
		sUnchangedFirstMatchSection = StringSub(asString, 0, iFirstMatchIndex);
	}
	
	sOriginalFirstMatchSection = sUnchangedFirstMatchSection + asSearchedSubString;
	sReplacedFirstMatchSection = sUnchangedFirstMatchSection + asReplacedSubString;
	
	if(sOriginalFirstMatchSection.length() < asString.length())
	{
		return sReplacedFirstMatchSection + GetStringWithReplacedSubString(StringSub(asString, sOriginalFirstMatchSection.length(), asString.length() - sOriginalFirstMatchSection.length()), asSearchedSubString, asReplacedSubString);
	}
	else
	{
		return sReplacedFirstMatchSection;
	}
}

string GetStringWithoutSubString(string asString, string asSubString) //RETURNS THE REMAINING STRING WITHOUT THE SUBSTRING DEFINED AS THE SECOND ARGUMENT.
{
	return GetStringWithReplacedSubString(asString, asSubString, "");
}

string GetSubString(string asString, int aiOffset) //RETURNS THE REMAINING SUBSTRING STARTING FROM THE OFFSET DEFINED AS THE SECOND ARGUMENT.
{
	int iLength = asString.length() - aiOffset;
	
	if(iLength <= 0)
	{
		return asString;
	}
	else
	{
		return StringSub(asString, aiOffset, iLength);
	}
}
//END STRING MANAGEMENT FUNCTIONS

void TimerTunePlayerLanternOil(string asTimer) //USED AS A TIMER TO CHECK AND ADJUST PLAYER LANTERN OIL VALUE.
{
	AddTimer(asTimer, 2.0f, "TimerTunePlayerLanternOil");
	
	if(asTimer == "oilspeedslow")
	{
		if(GetPlayerLampOil() < 99.0f)
		{
			AddPlayerLampOil(0.2f);
		}
	}
	else
	if(asTimer == "oilspeedquick")
	{
		if(GetPlayerLampOil() > 1.0f)
		{
			AddPlayerLampOil(-0.2f);
		}
	}
	else
	if(asTimer == "oilspeedoff")
	{
		SetPlayerLampOil(100.0f);
	}
}

void LanternLitOilSpeedSlow(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SLOWS DOWN PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedslow", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedslow");
	}
}

void LanternLitOilSpeedQuick(bool abLit) //LANTERNLITCALLBACK FUNCTION. WHEN SET IT SPEEDS UP PLAYER LANTERN OIL CONSUMPTION.
{
	if(abLit)
	{
		AddTimer("oilspeedquick", 2.0f, "TimerTunePlayerLanternOil");
	}
	else
	{
		RemoveTimer("oilspeedquick");
	}
}

float GetDifficultyDirectFactor() //RETURNS THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyDirectFactor");
}

float GetDifficultyInverseFactor() //RETURNS THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	return GetGlobalVarFloat("DifficultyInverseFactor");
}

int GetEasyModeOn() //RETURNS 1 IF THE EASY MODE IS ENABLED, 2 IF THE EASIER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("EasyModeOn");
}

string GetExtraModesSuffix() //RETURNS THE SUFFIX OF THE EXTRAMODES.
{
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	
	switch(iChecker)
	{
		case 1:
			return gsFunnySuffix;
		case 2:
			return gsStandardEasySuffix;
		case 3:
			return gsFunnyEasySuffix;
		case 4:
			return gsStandardEasierSuffix;
		case 5:
			return gsFunnyEasierSuffix;
		case 6:
			return gsStandardToughSuffix;
		case 7:
			return gsFunnyToughSuffix;
		case 12:
			return gsStandardTougherSuffix;
		case 13:
			return gsFunnyTougherSuffix;
		default:
			return gsStandardSuffix;
	}
	
	return "";
}

bool GetFunnyModeOn() //RETURNS TRUE IF THE FUNNY MODE IS ENABLED.
{
	return (GetGlobalVarInt("FunnyModeOn") >= 1);
}

string GetStringWithExtraModesSuffix(string asString) //RETURNS THE NAME + THE EXTRAMODES SUFFIX IF SOME EXTRAMODES ARE ACTIVE.
{
	return asString + GetExtraModesSuffix();
}

string GetStringWithReplacedFunnySubString(string asString, string asSearchedSubString) //RETURNS A MODIFIED VERSION OF THE STRING GIVEN AS THE FIRST ARGUMENT IF FUNNY MODE IS ACTIVE.
{
	if(GetFunnyModeOn())
	{
		if(StringContains(asString, asSearchedSubString))
		{
			return GetStringWithReplacedSubString(asString, asSearchedSubString, asSearchedSubString + gsFunnySuffix);
		}
		else
		{
			AddDebugMessage("ERROR: Could not find " + asSearchedSubString + " in " + asString + "! Could not replace it with " + asSearchedSubString + gsFunnySuffix + "!", false);
			return asString;
		}
	}
	else
	{
		return asString;
	}
}

int GetToughModeOn() //RETURNS 1 IF THE TOUGH MODE IS ENABLED, 2 IF THE TOUGHER MODE IS ENABLED, 0 ELSE.
{
	return GetGlobalVarInt("ToughModeOn");
}

void SetDifficultyDirectFactor(float afAmount) //CHANGES THE VALUE OF THE DIRECT DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyDirectFactor", afAmount);
}

void SetDifficultyInverseFactor(float afAmount) //CHANGES THE VALUE OF THE INVERSE DIFFICULTY FACTOR.
{
	SetGlobalVarFloat("DifficultyInverseFactor", afAmount);
}

void SetEasyModeOn(int aiState) //CHANGES THE VALUE OF THE EASY DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> easier mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("ToughModeOn", 0);
	}
	
	SetGlobalVarInt("EasyModeOn", aiState);
}

void SetFunnyModeOn(bool abState) //CHANGES THE VALUE OF THE FUNNY MODE. false -> off, true -> on.
{
	if(abState)
	{
		SetGlobalVarInt("FunnyModeOn", 1);
	}
	else
	{
		SetGlobalVarInt("FunnyModeOn", 0);
	}
}

void SetToughModeOn(int aiState) //CHANGES THE VALUE OF THE TOUGH DIFFICULTY MODE. 0 -> off, 1 -> on, 2 -> tougher mode on.
{
	if(aiState < 0)
	{
		aiState = 0;
	}
	else
	if(aiState > 2)
	{
		aiState = 2;
	}
	
	if(aiState > 0)
	{
		SetGlobalVarInt("EasyModeOn", 0);
	}
	
	SetGlobalVarInt("ToughModeOn", aiState);
}

void GiveItemFromFile(string asItem) //GIVES AN ITEM THAT CAN BE EITHER USED AS A DEBUG ITEM OR AS A GOODY.
{
	string sItem = GetStringWithoutSubString(asItem, ".ent");
	int i = 0;
	
	do
	{
		i = i + 1;
	}
	while(HasItem(sItem + "_" + i));
	
	GiveItemFromFile(sItem + "_" + i, sItem + ".ent");
}

void TimerTunePlayerState(string asTimer)
{
	float fCooldown = 10.0f;
	float fHealth = GetPlayerHealth();
	float fOil = GetPlayerLampOil();
	float fSanity = GetPlayerSanity();
	int iRand = RandInt(0, 4);
	
	if(StringContains(asTimer, "Blessing"))
	{
		if(asTimer == "BlessingRegainHealth")
		{
			if(fHealth <= 99.0f)
			{
				SetPlayerHealth(fHealth + 1.0f);
			}
			else
			if(fHealth < 100.0f)
			{
				SetPlayerHealth(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainSanity")
		{
			if(fSanity <= 99.0f)
			{
				SetPlayerSanity(fSanity + 1.0f);
			}
			else
			if(fSanity < 100.0f)
			{
				SetPlayerSanity(100.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "BlessingRegainLanternOil")
		{
			if(fOil <= 95.0f)
			{
				SetPlayerLampOil(fOil + 5.0f);
			}
			else
			if(fOil < 100.0f)
			{
				SetPlayerLampOil(100.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "BlessingRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			
			if(iRand == 0)
			{
				GiveItemFromFile(gsTinderbox + ".ent");
				PlayGuiSound("pick_generic.snt", 0.5f);
			}
			else
			if(iRand == 1)
			{
				GiveItemFromFile(gsOilPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 2)
			{
				GiveItemFromFile(gsHealthPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
			else
			if(iRand == 3)
			{
				GiveItemFromFile(gsSanityPotion + ".ent");
				PlayGuiSound("pick_potion.snt", 0.5f);
			}
		}
	}
	else
	if(StringContains(asTimer, "Curse"))
	{
		if(asTimer == "CurseRegainHealth")
		{
			if(fHealth < 50.0f && fHealth > 5.0f)
			{
				SetPlayerHealth(fHealth - 1.0f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainSanity")
		{
			if(fSanity < 50.0f && fSanity > 5.0f)
			{
				SetPlayerSanity(fSanity - 0.4f);
			}
			
			fCooldown = RandFloat(6.0f, 9.0f);
		}
		else
		if(asTimer == "CurseRegainLanternOil")
		{
			if(fOil < 50.0f && fOil > 5.0f)
			{
				SetPlayerLampOil(fOil - 5.0f);
			}
			
			fCooldown = 90.0f;
		}
		else
		if(asTimer == "CurseRandomGoodies")
		{
			fCooldown = RandFloat(240.0f, 480.0f);
			int i = 0;
			
			if(iRand == 0)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsTinderbox + "_" + i) == false && i <= 20);
				
				if(HasItem(gsTinderbox + "_" + i))
				{
					RemoveItem(gsTinderbox + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 1)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsOilPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsOilPotion + "_" + i))
				{
					RemoveItem(gsOilPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 2)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsHealthPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsHealthPotion + "_" + i))
				{
					RemoveItem(gsHealthPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
			else
			if(iRand == 3)
			{
				do
				{
					i = i + 1;
				}
				while(HasItem(gsSanityPotion + "_" + i) == false && i <= 20);
				
				if(HasItem(gsSanityPotion + "_" + i))
				{
					RemoveItem(gsSanityPotion + "_" + i);
					PlayGuiSound("impact_glass_low.snt", 0.5f);
				}
			}
		}
	}
	
	AddTimer(asTimer, fCooldown, "TimerTunePlayerState");
}

void SetupCurrentMapBasedOnExtraModes()
{
	string sPrefix = "";
	float fDifficultyDirectFactor = 0.0f;
	float fDifficultyInverseFactor = 0.0f;
	int[] viTinderboxesCodesArray;
	int[] viOilPotionsCodesArray;
	int[] viHealthPotionsCodesArray;
	int[] viSanityPotionsCodesArray;
	int[] viLargeOilPotionsCodesArray;
	int iChecker = (GetGlobalVarInt("FunnyModeOn") * 1) + (GetGlobalVarInt("EasyModeOn") * 2) + (GetGlobalVarInt("ToughModeOn") * 6);
	bool bFunnyModeOn = (iChecker == 1 || iChecker == 3 || iChecker == 5 || iChecker == 7 || iChecker == 13);
	bool bEasierModeOn = (iChecker == 4 || iChecker == 5);
	bool bEasyModeOn = (iChecker == 2 || iChecker == 3);
	bool bToughModeOn = (iChecker == 6 || iChecker == 7);
	bool bTougherModeOn = (iChecker == 12 || iChecker == 13);
	RemoveTimer("oilspeedquick");
	RemoveTimer("oilspeedslow");
	RemoveTimer("BlessingRandomGoodies");
	RemoveTimer("BlessingRegainHealth");
	RemoveTimer("BlessingRegainLanternOil");
	RemoveTimer("BlessingRegainSanity");
	RemoveTimer("CurseRandomGoodies");
	RemoveTimer("CurseRegainHealth");
	RemoveTimer("CurseRegainLanternOil");
	RemoveTimer("CurseRegainSanity");
	
	if(bEasierModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.25f;
		fDifficultyInverseFactor = 1.75f;
		viTinderboxesCodesArray = gviEasierTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasierOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasierHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasierSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasierLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(true);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bEasyModeOn)
	{
		sPrefix = "Blessing";
		fDifficultyDirectFactor = 0.5f;
		fDifficultyInverseFactor = 1.5f;
		viTinderboxesCodesArray = gviEasyTinderboxesCodesArray;
		viOilPotionsCodesArray = gviEasyOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviEasyHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviEasySanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviEasyLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedSlow");
		LanternLitOilSpeedSlow(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(true);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bToughModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.5f;
		fDifficultyInverseFactor = 0.5f;
		viTinderboxesCodesArray = gviToughTinderboxesCodesArray;
		viOilPotionsCodesArray = gviToughOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviToughHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviToughSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviToughLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	if(bTougherModeOn)
	{
		sPrefix = "Curse";
		fDifficultyDirectFactor = 1.75f;
		fDifficultyInverseFactor = 0.25f;
		viTinderboxesCodesArray = gviTougherTinderboxesCodesArray;
		viOilPotionsCodesArray = gviTougherOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviTougherHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviTougherSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviTougherLargeOilPotionsCodesArray;
		SetLanternLitCallback("LanternLitOilSpeedQuick");
		LanternLitOilSpeedQuick(GetLanternActive());
		SetEntityActive("oil_barrel_*", false);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	else
	{
		sPrefix = "";
		fDifficultyDirectFactor = 1.0f;
		fDifficultyInverseFactor = 1.0f;
		viTinderboxesCodesArray = gviNormalTinderboxesCodesArray;
		viOilPotionsCodesArray = gviNormalOilPotionsCodesArray;
		viHealthPotionsCodesArray = gviNormalHealthPotionsCodesArray;
		viSanityPotionsCodesArray = gviNormalSanityPotionsCodesArray;
		viLargeOilPotionsCodesArray = gviNormalLargeOilPotionsCodesArray;
		SetLanternLitCallback("");
		//LanternLitOilSpeedNormal(GetLanternActive());
		SetEntityActive("oil_barrel_*", true);
		SetPlayerFallDamageDisabled(false);
		SetSanityDrainDisabled(false);
		//AddTimer(sPrefix + "RandomGoodies", 60.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainHealth", 2.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainSanity", 3.0f, "TimerTunePlayerState");
		//AddTimer(sPrefix + "RegainLanternOil", 4.0f, "TimerTunePlayerState");
	}
	
	SetDifficultyDirectFactor(fDifficultyDirectFactor);
	SetDifficultyInverseFactor(fDifficultyInverseFactor);
	//SetEnemyMinIdleTime(2.0f * fDifficultyDirectFactor);
	//DISABLES ALL GOODIES.
	if(gviEasierTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + gviEasierTinderboxesCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + gviEasierOilPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + gviEasierHealthPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + gviEasierSanityPotionsCodesArray[i], false);
			}
		}
	}
	
	if(gviEasierLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<gviEasierLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + gviEasierLargeOilPotionsCodesArray[i], false);
			}
		}
	}
	//ENABLES SPECIFIC GOODIES BASED ON EXTRAMODES.
	if(viTinderboxesCodesArray[0] != 0)
	{
		for(int i=0; i<viTinderboxesCodesArray.length(); i++)
		{
			if(GetEntityExists(gsTinderbox + "_" + viTinderboxesCodesArray[i]))
			{
				SetEntityActive(gsTinderbox + "_" + viTinderboxesCodesArray[i], true);
			}
		}
	}
	
	if(viOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsOilPotion + "_" + viOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsOilPotion + "_" + viOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viHealthPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viHealthPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsHealthPotion + "_" + viHealthPotionsCodesArray[i]))
			{
				SetEntityActive(gsHealthPotion + "_" + viHealthPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viSanityPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viSanityPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsSanityPotion + "_" + viSanityPotionsCodesArray[i]))
			{
				SetEntityActive(gsSanityPotion + "_" + viSanityPotionsCodesArray[i], true);
			}
		}
	}
	
	if(viLargeOilPotionsCodesArray[0] != 0)
	{
		for(int i=0; i<viLargeOilPotionsCodesArray.length(); i++)
		{
			if(GetEntityExists(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i]))
			{
				SetEntityActive(gsLargeOilPotion + "_" + viLargeOilPotionsCodesArray[i], true);
			}
		}
	}
	
	if(gsCurrentMapName == "00_rainy_hall")
	{
		AddEntityCollideCallback("Player", "AreaExtraModes", "OnAreaExtraModesCollide", true, 1);
		SetLightVisible("ButtonBoxLight" + gsStandardSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsStandardEasierSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyToughSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyTougherSuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasySuffix, false);
		SetLightVisible("ButtonBoxLight" + gsFunnyEasierSuffix, false);
	}
	else
	if(gsCurrentMapName == "01_old_archives")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("AreaHintLean", true);
		}
		else
		{
			SetEntityActive("AreaHintLean", false);
		}
	}
	else
	if(gsCurrentMapName == "04_wine_cellar_lab")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, false);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "05_wine_cellar")
	{
		if(bEasierModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(10.0f, 30.0f, 1.0f, false);
		}
		else
		if(bEasyModeOn)
		{
			SetEntityActive("chest_small_2", true);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(8.0f, 26.0f, 1.0f, false);
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(4.0f, 18.0f, 1.0f, false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(2.0f, 14.0f, 1.0f, false);
		}
		else
		{
			SetEntityActive("chest_small_2", false);
			SetFogActive(true);
			SetFogColor(0.15f, 0.16f, 0.18f, 1.0f);
			SetFogProperties(6.0f, 22.0f, 1.0f, false);
		}
	}
	else
	if(gsCurrentMapName == "06_distillery")
	{
		if(bEasierModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.16f, 0.18f, 0.22f, 0.7f);
			SetFogProperties(6.0f, 24.0f, 1.0f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.14f, 0.16f, 0.2f, 0.7f);
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.1f, 0.12f, 0.16f, 0.7f);
			SetFogProperties(3.0f, 12.0f, 1.0f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogColor(0.08f, 0.1f, 0.14f, 0.7f);
			SetFogProperties(2.0f, 8.0f, 1.0f, true);
		}
		else
		{
			SetFogActive(true);
			SetFogColor(0.12f, 0.14f, 0.18f, 0.7f);
			SetFogProperties(4.0f, 16.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "07_archives_cellar")
	{
		if(bEasierModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bEasyModeOn)
		{
			SetLocalVarInt("MeatReducer", 0);
		}
		else
		if(bToughModeOn)
		{
			SetLocalVarInt("MeatReducer", 2);
		}
		else
		if(bTougherModeOn)
		{
			SetLocalVarInt("MeatReducer", 3);
		}
		else
		{
			SetLocalVarInt("MeatReducer", 1);
		}
	}
	else
	if(gsCurrentMapName == "12_storage")
	{
		if(bEasierModeOn)
		{
			SetFogActive(false);
			SetSkyBoxActive(false);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bEasyModeOn)
		{
			SetFogActive(true);
			SetFogProperties(4.0f, 35.0f, 1.2f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 3);
		}
		else
		if(bToughModeOn)
		{
			SetFogActive(true);
			SetFogProperties(2.0f, 29.0f, 0.8f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		if(bTougherModeOn)
		{
			SetFogActive(true);
			SetFogProperties(1.0f, 26.0f, 0.6f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 1);
		}
		else
		{
			SetFogActive(true);
			SetFogProperties(3.0f, 32.0f, 1.0f, false);
			SetSkyBoxActive(true);
			SetLocalVarInt("GruntDoorMaxBangs", 2);
		}
	}
	else
	if(gsCurrentMapName == "15_prison_north")
	{
		if(bEasierModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bEasyModeOn)
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
		else
		if(bToughModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		if(bTougherModeOn)
		{
			SetEntityActive("tinderbox_13", false);
		}
		else
		{
			if(GetGlobalVarInt("PrisonTinderboxCollected") != 1)
			{
				SetEntityActive("tinderbox_13", true);
			}	
			else
			{
				SetEntityActive("tinderbox_13", false);
			}
		}
	}
	else
	if(gsCurrentMapName == "20_sewer")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(9.0f, 28.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(7.0f, 24.0f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(3.0f, 16.0f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 12.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(5.0f, 20.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "23_torture_transept")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(5.0f, 20.0f, 1.2f, true);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.0f, 17.5f, 1.1f, true);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(2.0f, 12.5f, 0.9f, true);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(1.0f, 10.0f, 0.8f, true);
		}
		else
		{
			SetFogProperties(3.0f, 15.0f, 1.0f, true);
		}
	}
	else
	if(gsCurrentMapName == "24_torture_choir_east")
	{
		if(bEasierModeOn)
		{
			SetFogProperties(6.0f, 45.0f, 0.4f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 47.0f);
		}
		else
		if(bEasyModeOn)
		{
			SetFogProperties(4.5f, 37.5f, 0.35f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 39.0f);
		}
		else
		if(bToughModeOn)
		{
			SetFogProperties(1.5f, 22.5f, 0.25f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 23.0f);
		}
		else
		if(bTougherModeOn)
		{
			SetFogProperties(0.0f, 15.0f, 0.2f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 15.0f);
		}
		else
		{
			SetFogProperties(3.0f, 30.0f, 0.3f, true);
			SetLocalVarFloat("MinEnemyPlayerDistance", 31.0f);
		}
	}
}

void SetExtraModesOn(string asInput) //HELPER FUNCTION TO ENABLE THE CORRECT EXTRAMODES, ITS BASED ON THE EXTRAMODES SUFFIX CONTAINED INSIDE THE ARGUMENT.
{
	string sSuffix = "ModeChosen";
	
	if(StringContains(asInput, gsFunnyEasierSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyEasySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyTougherSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsFunnyTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnyToughSuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsFunnyToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsFunnySuffix))
	{
		SetFunnyModeOn(true);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsFunnyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasierSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(2);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasierEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardEasySuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(1);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEasyEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardTougherSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(2);
		SetMessage("MainMenu", gsStandardTougherEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardToughSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(1);
		SetMessage("MainMenu", gsStandardToughEntry + sSuffix, 8.0f);
	}
	else
	if(StringContains(asInput, gsStandardSuffix))
	{
		SetFunnyModeOn(false);
		SetEasyModeOn(0);
		SetToughModeOn(0);
		SetMessage("MainMenu", gsStandardEntry + sSuffix, 8.0f);
	}
	
	SetupCurrentMapBasedOnExtraModes();
}

////////////////
////////////////

float GetEnemyIdleTime(float afTime)
{
	if(GetEasyModeOn() >= 2)
	{
		return afTime;
	}
	else
	if(GetToughModeOn() >= 2)
	{
		return (RandFloat(((GetDifficultyDirectFactor() * afTime) * 1.0f), ((GetDifficultyDirectFactor() * afTime) * 2.0f)));
	}
	else
	{
		return (GetDifficultyDirectFactor() * afTime);
	}
}

int GetPlayerGlobalDeathCount() //RETURNS THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	return GetGlobalVarInt("PlayerGlobalDeathCount");
}

void SetPlayerGlobalDeathCount(int aiCount) //CHANGES THE VALUE OF THE PLAYER GLOBAL DEATH COUNT.
{
	SetGlobalVarInt("PlayerGlobalDeathCount", aiCount);
}

bool GetHardModeEndingOn()
{
	return ((GetToughModeOn() == 1 && (GetPlayerGlobalDeathCount() + 1) > giMaxGlobalDeathCount) || (GetToughModeOn() == 2));
}

void StartHardModeEnding(string asInput)
{
	if(asInput == "HardModeDeath")
	{
		StartCredits("", false, "Hints", "HardModeDeath", 3);
	}
	else
	{
		ChangePlayerStateToNormal();
		ExitInventory();
		FadeGlobalSoundVolume(0.0f, 0.01f);
		FadeOut(0.01f);
		SetInDarknessEffectsActive(false);
		SetInventoryDisabled(true);
		SetLanternActive(false, false);
		SetLanternDisabled(true);
		SetPlayerActive(false);
		SetPlayerHealth(999.999f);
		SetPlayerLampOil(999.999f);
		SetPlayerSanity(999.999f);
		SetSanityDrainDisabled(true);
		ShowPlayerCrossHairIcons(false);
		StopMusic(0.01f, 0);
		StopMusic(0.01f, 1);
		StopMusic(0.01f, 2);
		StopMusic(0.01f, 3);
		StopMusic(0.01f, 4);
		StopMusic(0.01f, 5);
		StopMusic(0.01f, 6);
		StopMusic(0.01f, 7);
		StopMusic(0.01f, 8);
		StopMusic(0.01f, 9);
		StopMusic(0.01f, 10);
		StopPlayerLookAt();
		AddTimer("HardModeDeath", 6.0f, "StartHardModeEnding");
	}
}

void OnPlayerDeath(string asName) //COUNTS HOW MANY TIMES THE PLAYER DIED THROUGH THE WHOLE STORY. CONTAINS THE HARD MODE GAME OVER ENDING LOGIC.
{
	if(GetHardModeEndingOn())
	{
		StartHardModeEnding("");
		return;
	}
	
	SetPlayerGlobalDeathCount(GetPlayerGlobalDeathCount() + 1);
}

//-------------------------------------------------

//////////////////////////////
// CUSTOM CODE END
//////////////////////////////

//-------------------------------------------------

////////////////////////////
// FLOODED CORRIDOR
////////////////////////////

void CollideDeepWater(string &in asParent, string &in asChild, int alState)
{
	SetMessage("Ch02Level16", "WaterDeep", 0);	
	AddQuest("SewerFlooded", "16SewerFlooded");
}


////////////////////////////
// SEWER POSION
////////////////////////////

//----------------------------

void InteractSewerDoorHasAntidote(string &in asDoor)
{
	SetupLoadScreen("LoadingText", "Ch02_Sewer01", 1, "game_loading_well.jpg");	
}

//----------------------------

////////////////////////////
// SEWER POSION
////////////////////////////

//----------------------------

void InteractSewerDoor(string &in asDoor)
{
	if(QuestIsAdded("FindAntidote")==false)
	{
		AddTimer("SewerInteract",5.5, "TimerSewerDoorInteraction");
	}
	SetMessage("Ch02Level16", "SewerDoorHasPoison", 0);
}


void TimerSewerDoorInteraction(string &asTimer)
{
	AddQuest("FindAntidote", "16FindAntidote");	
}

void CollidePoison_Start(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("InPosion")==1) return;
	SetLocalVarInt("InPosion", 1);
	
	FadeImageTrailTo(0.7, 1);
	AddTimer("PoisonCough",0.5, "TimerPoisonCough");
}

void CollidePoison_Stop(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("InPosion")==0) return;
	SetLocalVarInt("InPosion", 0);
	
	StopPoisonEffects();
}

void StopPoisonEffects()
{
	FadePlayerFOVMulTo( 	1, 1);
	FadePlayerAspectMulTo(	1, 1);
	FadeImageTrailTo(0, 1);
	FadeRadialBlurTo(0.0f, 0.5f);
	
	RemoveTimer("PoisonCough");
}

//----------------------------

void TimerPoisonCough(string &asTimer)
{
	PlaySoundAtEntity("cough","player_cough", "Player", 0, false);
	GivePlayerDamage(0.5, "BloodSplash", false, false);
	
	if(GetLocalVarInt("PosionOn") == 0){
		FadeRadialBlurTo(0.3f, 2.0f);
		SetRadialBlurStartDist(0.6f);
		SetLocalVarInt("PosionOn", 1);
	}else{
		FadeRadialBlurTo(0.2f, 2.0f);
		SetRadialBlurStartDist(0.8f);
		SetLocalVarInt("PosionOn", 0);
	}
	
	AddTimer("PoisonCough",RandFloat(1.5, 3.5), "TimerPoisonCough");
}

//----------------------------

////////////////////////////
// MOVE LADDER
////////////////////////////

void InteractRustyLever(string &in asEntity)
{
	SetMessage("Ch02Level16", "InteractRustyLever", 0);
	
	if(GetLocalVarInt("FilledContainer")==0)
		SetEntityPlayerInteractCallback("AreaOil", "InteractAreaOil", false);
	
	PlaySoundAtEntity("stuck", "16_lever_stuck", asEntity, 0.0f, false);
}

void LeverStateChange(string &in asEntity, int alState)
{
	if(alState == 0) return;
	if(GetLocalVarInt("LadderState") == alState) return;
	if(GetLocalVarInt("LeverGreased") == 0) return;	
	
	SetLocalVarInt("LadderState", 0);
	
	AddDebugMessage("Lever State: "+alState, true);
	
	if(alState == -1 && GetLocalVarInt("LadderFix") == 0)
		return;
	else
		SetLeverStuckState("lever_simple01_1", alState, true);
	
	SetEntityActive("LadderArea_1", false); //Ladder is always disabled when moving ladder!
	
	if(alState == 1)
	{
		SetMoveObjectState("ladder_static_1", 1);
		
		SetLocalVarInt("LadderFix", 1);
		
		PlaySoundAtEntity("moveladderdown","16_ladder_down","ladder_static_1", 0, false);
	}
	else
	{
		SetMoveObjectState("ladder_static_1", 0);
		
		PlaySoundAtEntity("moveladderup","16_ladder_down","ladder_static_1", 0, false);
	}
}

void CollideLadderPipe(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("LadderCollided")==1) return;
	SetLocalVarInt("LadderCollided",1); //So there is no collision when making a pipe active.
	
	////////////
	// 01
	if(asParent == "cistern_breakable_pipe01")
	{
		SetEntityActive("cistern_breakable_pipe02", true);
		
		//SetEntityActive("AreaLadderPipe", true);
		SetEntityActive("AreaInteractPipe", true);
		
		SetLeverStuckState("lever_simple01_1", 0, true);
		SetLocalVarInt("LadderState", 1);
		
		StopSound("moveladderdown", 0.2f);
		
		StopPropMovement(asChild);
	}
	////////////
	// 02
	else if(asParent == "cistern_breakable_pipe02")
	{
		SetEntityActive("cistern_breakable_pipe03", true);
		SetLeverStuckState("lever_simple01_1", 0, true);
		SetLocalVarInt("LadderState", 1);
		
		StopSound("moveladder", 0.3f);
		
		StopPropMovement(asChild);
	}
	////////////
	// 03
	else if(asParent == "cistern_breakable_pipe03")
	{
		SetEntityActive("cistern_breakable_pipe04", true);
		
		//SetEntityActive("AreaLadderPipe", false);
		SetEntityActive("AreaInteractPipe", false);
	}
	
	StartScreenShake(0.003f, 0.2f, 0.1f, 0.3f);
	
	CreateParticleSystemAtEntity("collide","ps_break_wood_small","AreaLadderCollideEffect", false);
		
	SetEntityActive(asParent, false);
	AddLocalVarInt("PipeHitCount",1);
	
	PlaySoundAtEntity("collide","16_ladder_imp"+GetLocalVarInt("PipeHitCount"),"AreaLadderCollideEffect", 0, false);
}

//----------------------------

void CollideLadderDown(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("LeverGreased") == 0) return;	
	
	SetLeverStuckState("lever_simple01_1", 0, true);
	SetLocalVarInt("LadderState", 1);
	
	SetEntityActive("LadderArea_1", true);
	
	if(GetLocalVarInt("LadderPuzzleCompleted")==0)
	{
		SetLocalVarInt("LadderPuzzleCompleted", 1);
		GiveSanityBoostSmall();
		PlayMusic("02_puzzle.ogg", false, 0.7f, 0, 10, false);
	}
}

void CollideLadderUp(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("LeverGreased") == 0) return;	
	
	SetLeverStuckState("lever_simple01_1", 0, true);
	SetLocalVarInt("LadderState", -1);
	SetLocalVarInt("LadderCollided",0);
}

//----------------------------

void InteractPipe(string &in asEntity)
{
	SetMessage("Ch02Level16", "LadderPipeHelp", -1);	
}


//----------------------------

////////////////////////////
// OIL
////////////////////////////

//----------------------------

void InteractAreaOil(string &in asEntity)
{
	SetMessage("Ch02Level16", "InteractOil", 0);	
	
	PlayGuiSound("impact_organic_med", 0.4f);
}

void InteractAreaOil02(string &in asEntity)
{
	SetMessage("Ch02Level16", "InteractOil02", 0);	
}

//----------------------------

void UseOilOnOil(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level16", "UseOilOnOil", 0);	
}

void UseGlassOnOil(string &in asItem, string &in asEntity)
{
	SetMessage("Ch02Level16", "UseOilOnOil", 0);	
}

//----------------------------

void UseContainerOnOil(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	AddTimer("AddContainer", 1.1f, "TimerAddContainer");	
	AddTimer("StartCrouch", 0.8f, "TimerCrouch");	
	AddTimer("StopCrouch", 1.4f, "TimerCrouch");		
	AddTimer("AddContainer", 1.6f, "TimerStopLookAt");
	
	SetLocalVarInt("FilledContainer", 1);

	SetEntityPlayerInteractCallback("AreaOil", "", false);
	
	StartPlayerLookAt("AreaLookAtContainer", 3, 3, "");
}

void TimerAddContainer(string &in asTimer)
{
	DestroyParticleSystem("ParticleSystem_42");
	SetEntityActive("glass_container_oil_1", true);
	
	CreateParticleSystemAtEntity("fill", "ps_oil_jar", "glass_container_oil_1", true);
	
	PlaySoundAtEntity("slurp", "16_fill_oil", "glass_container_oil_1", 0.0f, false);
}

void TimerCrouch(string &in asTimer)
{
	if(asTimer == "StartCrouch"){
		SetPlayerCrouching(true);
		PlaySoundAtEntity("crouch", "player_crouch", "Player", 0.0f, false);
		PlaySoundAtEntity("slurp2", "16_water_stream", "glass_container_oil_1", 0.3f, false);
		return;
	}
	
	SetPlayerCrouching(false);
	PlaySoundAtEntity("stand", "player_stand", "Player", 0.0f, false);
}

void TimerStopLookAt(string &in asTimer)
{
	StopPlayerLookAt();	
	StopSound("slurp2", 4.0f);
}

void EntityCallGlassContainer(string &in asEntity, string &in type)
{
	DestroyParticleSystem("fill");
	CreateParticleSystemAtEntity("oilsplah", "ps_oil_splash.ps", "AreaLookAtContainer", true);
	
	SetEntityPlayerInteractCallback("AreaOil", "InteractAreaOil02", false);
	
	AddUseItemCallback("OilOil", "glass_container_oil_1", "AreaOil", "UseOilOnOil", false);
	AddUseItemCallback("GlassOil", "glass_container_1", "AreaOil", "UseGlassOnOil", false);
}

//----------------------------

void UseOilOnLever(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	GiveItemFromFile("glass_container_1", "glass_container.ent");
	
	SetEntityPlayerInteractCallback("lever_simple01_1", "", false);
	SetLeverStuckState("lever_simple01_1", 0, true);
	
	SetLocalVarInt("LeverGreased", 1);

	CreateParticleSystemAtEntity("oilgrease", "ps_oil_grease.ps", asEntity, false);
	PlaySoundAtEntity("greas", "16_grease_lever", asEntity, 0.0f, false);	
}

//----------------------------

////////////////////////////
// BRDIGES
////////////////////////////

//----------------------------

void InteractBridgeLever(string &in asEntity, int alState)
{
	if(alState == 0) return;
		
	string sBridge = asEntity=="bridge_lever_1" ? "bridge_metal_vert_1" : "bridge_metal_vert_2";

	if(alState == -1)
	{
		if(GetLocalVarInt(asEntity) == -1) return; //Fix behaviour error if pulling lever double direction.
		
		SetMoveObjectState(sBridge, 2.66);
	
		PlaySoundAtEntity("soundclank_"+sBridge, "14_elevator_clank", "Player", 0.5f, false);
		StartScreenShake(0.005f, 0.5f, 0.2f, 0.6f);
		
		StopSound("sound_"+sBridge, 0.0f);
		PlaySoundAtEntity("sound_"+sBridge, "16_winch_bridge", "mount_"+sBridge, 1.0f, true);
	}
	else
	{
		if(GetLocalVarInt(asEntity) == 1) return; //Fix behaviour error if pulling lever double direction.
		
		RemoveTimer(sBridge);
		AddTimer(sBridge, 5.5, "TimerMoveBridgeUp");
	}

	SetLeverStuckState(asEntity, alState, true);
	AddDebugMessage(asEntity + " State: "+alState, true);
}

void TimerMoveBridgeUp(string &in asTimer)
{
	StopSound("sound_"+asTimer, 0.0f);
	PlaySoundAtEntity("sound_"+asTimer, "16_winch_bridge", "mount_"+asTimer, 1.0f, true);	
	
	PlaySoundAtEntity("soundclank_"+asTimer, "14_elevator_clank", "Player", 0.5f, false);
	StartScreenShake(0.005f, 0.5f, 0.2f, 0.6f);
		
	SetMoveObjectState(asTimer, 0);	
}

void CollideBridgeSoundOff(string &in asParent, string &in asChild, int alState)
{
	AddLocalVarInt("LoadFix", 1);
	if(GetLocalVarInt("LoadFix") <= 2) return;
	
	StopSound("sound_"+asChild, 1.0f);
	
	PlaySoundAtEntity("bridgestop", "elevator_stop", "Player", 1.0f, false);
	AddTimer("bstopsound", 0.5f, "TimerStopBSound");
	
	string sLever = asChild=="bridge_metal_vert_1" ? "bridge_lever_1" : "bridge_lever_2";
	
	//asEntity in InteractBridgeLever
	if(asParent == "BridgeSoundOff1") SetLocalVarInt(sLever, -1);	
	else SetLocalVarInt(sLever, 1);
	
	SetLeverStuckState(sLever, 0, true);
}

void TimerStopBSound(string &in asTimer)
{
	StopSound("bridgestop", 1.0f);
	StartScreenShake(0.005f, 0.5f, 0.1f, 0.5f);
}

//----------------------------

void CollideBridgeStuck(string &in asParent, string &in asChild, int alState)
{
	StopPropMovement(asChild);
	
	SetLeverInteractionDisablesStuck("bridge_lever_1", false);
	SetLeverStuckState("bridge_lever_1", -1, true);
	SetEntityPlayerInteractCallback("bridge_lever_1", "InteractBridgeLever01Stuck", true);
	
	PlaySoundAtEntity("stucksound", "16_bridge_stuck", "bridge_metal_vert_1", 0.0f, false);	
	StartScreenShake(0.008f, 0.5f, 0.2f, 0.6f);
	
	SetLocalVarInt("BridgeStuck",1);
	SetEntityActive("AreaThrowRock", true);
	
	StopSound("sound_"+asChild, 1.0f);
}

void InteractBridgeLever01Stuck(string &in asEntity)
{
	SetMessage("Ch02Level16", "InteractStuckBridgeLever", 0);	
	
	PlaySoundAtEntity("badunk", "14_elevator_clank", "Player", 0.0f, false);
	
	AddTimer("leverstuck", 2.0f, "TimerLeverStuckBackOn");
}

void TimerLeverStuckBackOn(string &in asTimer)
{
	SetEntityPlayerInteractCallback("bridge_lever_1", "InteractBridgeLever01Stuck", true);
}

//----------------------------

void CollidePlayerJumpBridge(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("BridgeStuck")==0) return;
	
	MoveStuckBridge();
}

void CollideRockOnChain(string &in asParent, string &in asChild, int alState)
{
	if(GetLocalVarInt("BridgeStuck")==0) return;
	
	PlaySoundAtEntity("HitChain","impact_metal_chain_high.snt", "AreaThrowRock", 0, false);
	
	MoveStuckBridge();	
}

void MoveStuckBridge()
{
	SetEntityActive("AreaThrowRock", false);
	SetEntityActive("AreaPlayerJumpBridge", false);
	
	PlaySoundAtEntity("unstucksound", "16_bridge_unstuck", "bridge_metal_vert_1", 0.0f, false);	
	PlaySoundAtEntity("fall", "16_winch_bridge", "bridge_metal_vert_1", 1.0f, true);

	AddTimer("hitground", 1.0f, "TimerBridgeHitGround");
	
	StartScreenShake(0.05f, 0.5f, 0.1f, 0.3f);
	
	SetEntityPlayerInteractCallback("bridge_lever_1", "", false);
	SetMoveObjectStateExt("bridge_metal_vert_1", 2.66, 8, 8, 0.5, false);
	
	GiveSanityBoostSmall();
	PlayMusic("16_puzzle_bridge.ogg", false, 0.7f, 0, 10, false);	
}

void TimerBridgeHitGround(string &in asTimer)
{
	StopSound("fall", 0.3f);
	PlaySoundAtEntity("stucksound", "18_bridge_hit", "bridge_metal_vert_1", 0.0f, false);	
	StartScreenShake(0.01f, 1.0f, 0.1f, 0.5f);
}

//----------------------------

void InteractBridgeLever01NotWorking(string &in asEntity)
{
	AddTimer("BridgeNotWorkInteract", 0.7f, "TimerInteractBridgeLever01NotWorking");
}

void TimerInteractBridgeLever01NotWorking(string &in asTimer)
{
	SetEntityPlayerInteractCallback("bridge_lever_1", "", false);
	AddQuest("CisternEntrBridgeNonWork", "16BridgeNonWork");
}

//----------------------------

////////////////////////////
// MISC
////////////////////////////

//----------------------------

void InteractLargeDoor(string &in asEntity)
{
	if(GetLocalVarInt("InteractLargeDoor")==1) return;
	
	SetMessage("Ch02Level16", "InteractLargeDoor", 0);
	PlaySoundAtEntity("jammed", "close_gate", "Player", 0.5f, false);
	
	SetLocalVarInt("InteractLargeDoor", 1);
	AddTimer("InteractLargeDoor", 1.5f, "TimerInteractLargeDoor");
}

void TimerInteractLargeDoor(string &in asTimer)
{
	SetLocalVarInt("InteractLargeDoor", 0);	
}

//----------------------------


//BEGIN ROSE WHIRL
void CollideFlashback(string &in asParent, string &in asChild, int alState)
{
	CreateParticleSystemAtEntity("RoseWhirl", "ps_rose_petals_whirl.ps", "AreaRose", false);
	AddTimer("WhirlSound", 1.5f, "TimerWhirlSound");
	AddTimer("WhirlSound", 3.0f, "TimerWhirlSound");
	AddTimer("WhirlSound", 4.5f, "TimerWhirlSound");
	
	StopMusic(3.0f, 10);
}
void TimerWhirlSound(string &in asTimer)
{
	PlaySoundAtEntity("RoseWhirlS", "general_wind_whirl.snt", "AreaRose", 0.0f, false);
}
//END ROSE WHIRL
	
	
//////////////////
//Better water collision
void CollideAreaDeepWater(string &in asParent, string &in asChild, int alState)
{
	//If going towards deep water, slow down player
	if(alState == 1)
		AddLocalVarFloat("WaterSlow", 0.16f);
	
	//If going back from deep water, speed up player
	else 
		AddLocalVarFloat("WaterSlow", -0.16f);
	
	SetPlayerMoveSpeedMul(1.0-GetLocalVarFloat("WaterSlow"));
	
	AddDebugMessage("speed is slow: "+GetLocalVarFloat("WaterSlow"), false);
}

//Just incase something could go wrong with above collision, reset speed to 1 when leaving water.
void CollideAreaDeepWaterSafe(string &in asParent, string &in asChild, int alState)
{
	SetPlayerMoveSpeedMul(1.0f);
	
	AddDebugMessage("Speed to normal safety", false);
}


/////////////////////////
//Upstairs checkpoint when completing ladder
void CollideAreaPlayerUp(string &in asParent, string &in asChild, int alState)
{
	CheckPoint("cp_up", "PlayerStartArea_2", "", "Hints", "DeathFall");
}

//Kill player if failing from far up so he spawns up on bridge instead
void CollideAreaGround(string &in asParent, string &in asChild, int alState)
{
	AddDebugMessage("Speed is: "+GetPlayerYSpeed(), false);
	
	if(GetPlayerYSpeed() > -16) return; 
	
	GivePlayerDamage(100, "BloodSplat", true, true);
	PlayGuiSound("player_falldamage_max.snt", 1.0f);
	StartScreenShake(0.3f, 0.5f, 0.1f, 0.4f);
	
	AddDebugMessage("Player Killed On Ground", false);
}


////////////////////////////
// Run first time starting map
void OnStart()
{
	//////////////////////
	//Load Screen Setup
	SetupLoadScreen("LoadingText", "Ch02_Diary06_", 6, "game_loading_alexander.jpg");
	
	////////////////////
	// Hub start sanity boost
	GiveSanityBoost();
	
	
	////////////////////////////////////////
	//Area set up
	AddEntityCollideCallback("Player", "AreaDeepWater", "CollideDeepWater", false, 1);
	AddEntityCollideCallback("Player", "AreaPoison_Start", "CollidePoison_Start", false, 1);
	AddEntityCollideCallback("Player", "AreaPoison_Stop", "CollidePoison_Stop", false, 1);
	AddEntityCollideCallback("Player", "AreaPlayerJumpBridge", "CollidePlayerJumpBridge", false, 1);
	
	AddEntityCollideCallback("Player", "FlashbackArea_1", "CollideFlashback",true, 1);
	
	for(int i=1;i<=5;i++)
		AddEntityCollideCallback("Player", "AreaDeepWater_"+i, "CollideAreaDeepWater", false, 0); 
	AddEntityCollideCallback("Player", "AreaDeepWaterSafe", "CollideAreaDeepWaterSafe", false, 1);
	
	////////////////////////////////////////
	//Item usage
	AddUseItemCallback("GetOil", "glass_container_1", "AreaOil", "UseContainerOnOil", true);
	AddUseItemCallback("GreaseLever", "glass_container_oil_1", "lever_simple01_1", "UseOilOnLever", true);
	
	////////////////////////////////////////
	//Entity set up
	for(int i=1; i<=3; ++i)
		AddEntityCollideCallback("cistern_breakable_pipe0"+i, "ladder_static_1", "CollideLadderPipe", false, 1);
	AddEntityCollideCallback("LadderDown", "ladder_static_1", "CollideLadderDown", false, 1);
	AddEntityCollideCallback("LadderUp", "ladder_static_1", "CollideLadderUp", false, 1);
	AddEntityCollideCallback("AreaBridgeStuck", "bridge_metal_vert_1", "CollideBridgeStuck", true, 1);
	for(int i=1;i<3;i++){
		AddEntityCollideCallback("BridgeSoundOff"+i, "bridge_metal_vert_1", "CollideBridgeSoundOff", false, 1);
		AddEntityCollideCallback("BridgeSoundOff"+i, "bridge_metal_vert_2", "CollideBridgeSoundOff", false, 1);
	}
	
	for(int i=1;i<=8;i++)
	{
		AddEntityCollideCallback("AreaThrowRock", "stone_small01_"+i, "CollideRockOnChain", false, 1);
		AddEntityCollideCallback("AreaPlayerJumpBridge", "stone_small01_"+i, "CollideRockOnChain", false, 1);
	}
	for(int i=1;i<=23;i++) AddEntityCollideCallback("AreaThrowRock", "xbrick02_"+i, "CollideRockOnChain", false, 1);
	for(int i=1;i<=23;i++) AddEntityCollideCallback("AreaPlayerJumpBridge", "xbrick02_"+i, "CollideRockOnChain", false, 1);
	
	AddEntityCollideCallback("Player", "AreaPlayerUp", "CollideAreaPlayerUp", true, 1);
	AddEntityCollideCallback("Player", "AreaGround", "CollideAreaGround", false, 1);
	
	SetLocalVarInt("bridge_lever_1", 1);
	SetLocalVarInt("bridge_lever_2", 1);
	
	////////////////////////////////////////
	//Music
	PlayMusic("08_amb_success", false, 1, 1, 10, false);
	
	////////////////////////////////////////
	//Debug
	if(ScriptDebugOn())
	{
		if(HasItem("glass_container_1") == false) GiveItemFromFile("glass_container_1", "glass_container.ent");
		//GiveItemFromFile("glass_container_oil_1", "glass_container.ent");
		
		//SetGlobalVarInt("WaterHasBeenDrained",1);
		//SetGlobalVarInt("ControlRoomEastSideWorking",1);
		//SetGlobalVarInt("PlayerHasAntidote",1)
		
		if(HasItem("lantern") == false) GiveItemFromFile("lantern", "lantern.ent");
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	PreloadSound("player_cough"); PreloadSound("14_elevator_clank"); PreloadSound("player_stand"); PreloadSound("16_water_stream");
	PreloadSound("16_lever_stuck"); PreloadSound("16_ladder_down"); PreloadSound("16_ladder_imp1"); PreloadSound("16_ladder_imp2");
	PreloadSound("16_ladder_imp3"); PreloadSound("16_fill_oil"); PreloadSound("16_grease_lever"); PreloadSound("16_winch_bridge");
	PreloadSound("elevator_stop"); PreloadSound("16_bridge_stuck"); PreloadSound("16_bridge_unstuck"); PreloadSound("18_bridge_hit");
	PreloadSound("general_wind_whirl");

	SetMapDisplayNameEntry("CisternEntrance");
	
	PlayMusic("16_amb.ogg", true, 1, 1, 0, true);
	
	//////////////////////////
	//Check if water has been pumped out
	if(GetGlobalVarInt("WaterHasBeenDrained")==1)
	{
		SetEntityActive("LiquidArea_1", false);
		SetEntityActive("water_plane", false);
		SetEntityActive("water_flood_block", false);
		SetEntityActive("AreaDeepWater", false);
		
		for(int i=1;i<=5;i++) SetEntityActive("AreaDeepWater_"+i, false);
		SetEntityActive("AreaDeepWaterSafe", false);
	}
	
	//////////////////////////
	//Check if player has antidote
	if(GetGlobalVarInt("PlayerHasAntidote")==1)
	{
		SetEntityActive("AreaPoison_*", false);
		SetEntityPlayerInteractCallback("level_wood_5", "InteractSewerDoorHasAntidote", false); //Reset the interaction callback
		SetLevelDoorLocked("level_wood_5", false);
	}
	
	//////////////////////////
	//Check if lever is working
	if(GetGlobalVarInt("ControlRoomEastSideWorking")==1)
	{
		SetEntityConnectionStateChangeCallback("bridge_lever_1", "InteractBridgeLever");
	}
	else
	{
		SetEntityPlayerInteractCallback("bridge_lever_1", "InteractBridgeLever01NotWorking", false);
	}
	
	SetupCurrentMapBasedOnExtraModes();
	
	if(ScriptDebugOn() == false && GetToughModeOn() <= 1)
	{
		AutoSave();
	}
}

////////////////////////////
// Run when leaving map
void OnLeave()
{

}