float startValue = 0.0;
float endValue = 100.0;
float current = startValue; // Current interpolated value
float speed = 0.0; // Speed of interpolation (units per second)
float elapsed = 0.0; // Elapsed time in seconds
float PI = 3.14159265359f;

bool isInterpolating = false;


float lerp(float start, float end, float t) {
    return (1 - t) * start + t * end;
}




void interpolateOverTime(float deltaTime) {

    // Update the elapsed time
    elapsed += deltaTime;

    // Calculate the total duration required for the interpolation
    float totalDuration = (endValue - startValue) / speed;

    // Calculate the interpolation fraction
    float t = elapsed / totalDuration;

    // Clamp the fraction to the range [0, 1]
    if (t > 1.0) {
		
        elapsed = 0.0; // Reset elapsed time if we've reached the end value
		t = 1.0;
		isInterpolating = false;
    }

    // Update the current value based on the interpolation fraction
    current = lerp(startValue, endValue, t);
	
	AddDebugMessage(""+endValue,false);


}

void UpdateTickSystem(float deltaTime){

	if(isInterpolating==true){
	interpolateOverTime(deltaTime);
	//AddDebugMessage("Current Value: " + current + "\n", false);
    }

	
}



void fInterpTo(float startValueI, float endValueI, float SpeedI)
{
elapsed = 0.0;
startValue = startValueI;
endValue = endValueI;
current = startValue;
speed = SpeedI;
isInterpolating = true;


}











